//DO NOT EDIT THIS FILE
import { Suspense } from 'react';

import { getUserTeams, getUserActiveTeam, type Team } from '@/app/actions/team';
import { getUser } from '@/app/actions/user';
import { AppSidebar } from '@/components/layout/AppSidebar';
import { AppSidebarSkeleton } from '@/components/layout/AppSidebarSkeleton';
import { WorkspaceHeaderSkeleton } from '@/components/layout/WorkspaceHeaderSkeleton';
import { WorkspaceHeader } from '@/components/workspace/WorkspaceHeader';
import { TeamProvider } from '@/context/TeamContext';
import { UserProvider } from '@/context/UserContext';
import { mapAuthUserToUser } from '@/types/user';

import TenantLayoutClient from './_components/client/TenantLayoutClient';

export default async function TenantLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: { tenant: string; locale: string };
}) {
  const { tenant } = await params;
  const authUser = await getUser();
  const user = authUser ? mapAuthUserToUser(authUser) : null;

  console.log('[TenantLayout] Rendering tenant layout, tenant:', tenant);

  // Only fetch team data if we have a user
  let teams: Team[] = [];
  let activeTeam: Team | null = null;

  if (user) {
    // Fetch teams and active team in parallel
    const [teamsResult, activeTeamResult] = await Promise.all([
      getUserTeams(user.id),
      getUserActiveTeam(user.id),
    ]);

    if (teamsResult.success && teamsResult.data) {
      teams = teamsResult.data;
    }

    if (activeTeamResult.success && activeTeamResult.data) {
      activeTeam = activeTeamResult.data;
    }
  }

  return (
    <UserProvider initialUser={user}>
      <TeamProvider initialTeams={teams} initialActiveTeam={activeTeam}>
        <TenantLayoutClient user={user}>
          <div className="relative flex w-full overflow-hidden">
            <Suspense fallback={<AppSidebarSkeleton />}>
              <AppSidebar user={user} />
            </Suspense>
            <div
              className="flex-1 flex flex-col w-full overflow-hidden transition-[margin,width] duration-300 ease-in-out"
              style={{
                marginLeft: 'var(--sidebar-width-offset, 0)',
                width: 'calc(100% - var(--sidebar-width-offset, 0))',
                opacity: 1,
              }}
            >
              <Suspense fallback={<WorkspaceHeaderSkeleton />}>
                <WorkspaceHeader user={user} />
              </Suspense>
              <div className="flex-1 px-3 pb-2 overflow-hidden">
                <main className="h-full w-full max-w-full border border-gray-30 rounded-md overflow-auto pl-3 pr-3">
                  {children}
                </main>
              </div>
            </div>
          </div>
        </TenantLayoutClient>
      </TeamProvider>
    </UserProvider>
  );
}
