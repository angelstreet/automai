// DO NOT EDIT THIS FILE
import { NextRequest, NextResponse } from 'next/server';

import { updateSession, createClient } from '@/lib/supabase/middleware';

import { locales, defaultLocale } from './config';

// Lazy-loaded intl middleware
let intlMiddleware: any = null;
async function getIntlMiddleware() {
  if (!intlMiddleware) {
    const { default: createIntlMiddleware } = await import('next-intl/middleware');
    intlMiddleware = createIntlMiddleware({
      locales,
      defaultLocale,
      localePrefix: 'always', // Adjust as needed
    });
  }
  return intlMiddleware;
}

// Public paths (no auth required)
const PUBLIC_PATHS = ['/', '/features', '/pricing', '/docs', '/login', '/signup'];

// Helper to check if path is public
function isPublicPath(path: string): boolean {
  return PUBLIC_PATHS.some((p) => path === p || path === `/${defaultLocale}${p}`);
}

export default async function middleware(request: NextRequest) {

  const path = request.nextUrl.pathname;

  // 1. Public paths: allow without auth
  if (isPublicPath(path)) {
    //console.debug('MW : --- PUBLIC PATH ---');
    return NextResponse.next();
  }

  // 2. API routes: enforce auth
  if (path.startsWith('/api/')) {
    //console.debug('MW : --- API PATH ---');
    const { supabase } = createClient(request);
    const { data, error } = await supabase.auth.getUser();
    if (error || !data.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    return NextResponse.next();
  }

  // 3. Protected routes: enforce locale and auth
  const hasLocale = locales.some((locale) => path.startsWith(`/${locale}/`));
  if (!hasLocale) {
    console.debug('MW : --- NO LOCALE ---');
    return NextResponse.redirect(new URL(`/${defaultLocale}${path}`, request.url));
  }

  const response = await updateSession(request);
  //console.debug('MW : --- UPDATE SESSION ---', response);
  if (response.headers.has('location')) {
    console.debug('MW : --- REDIRECT UNAUTHENTICATED ---');
    return response; // Redirect if unauthenticated
  }

  // 4. Apply internationalization
  //console.debug('MW : --- APPLY INTL ---');
  const intl = await getIntlMiddleware();
  return intl(response);
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|avatars|favicon.ico).*)', // All except static
    '/(fr|en)/:path*', // Locale routes
    '/api/:path*', // API routes
    '/', // Root
  ],
};
