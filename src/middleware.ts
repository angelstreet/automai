//DO NOT EDIT THIS FILE
import { NextRequest, NextResponse } from 'next/server';

import { updateSession, createClient } from '@/lib/supabase/middleware';

import { locales, defaultLocale } from './config';

// Lazy-loaded intl middleware
let intlMiddleware: any = null;
async function getIntlMiddleware() {
  if (!intlMiddleware) {
    const { default: createIntlMiddleware } = await import('next-intl/middleware');
    intlMiddleware = createIntlMiddleware({
      locales,
      defaultLocale,
      localePrefix: 'always',
    });
  }
  return intlMiddleware;
}

// Public paths (no auth required)
const PUBLIC_PATHS = [
  '/',
  '/features',
  '/pricing',
  '/docs',
  '/signup',
  '/auth-redirect',
  '/forgot-password',
  '/reset-password',
  '/login',
];

// Check if path is a login path
function isLoginPath(path: string): boolean {
  return path === '/login' || path.endsWith('/login');
}

// Handle login redirects for authenticated users
async function handleLoginPath(request: NextRequest, supabase: any) {
  // Allow login with code parameter (for OAuth callbacks)
  if (request.nextUrl.searchParams.has('code') || request.nextUrl.searchParams.has('error')) {
    console.log(
      '[@middleware:handleLoginPath] Bypassing auth check for login path with code/error param:',
      request.nextUrl.pathname,
    );
    return NextResponse.next();
  }

  // Check session using the passed supabase client
  const { data, error } = await supabase.auth.getSession();

  if (error || !data.session) {
    console.log(
      '[@middleware:handleLoginPath] No active session on login path:',
      error?.message || 'No session',
    );
    return NextResponse.next(); // Allow access to login page if no session
  }

  // User is authenticated, redirect to dashboard
  const user = data.session.user;
  const locale = request.nextUrl.pathname.split('/')[1] || defaultLocale;
  const tenantName = user.user_metadata?.tenant_name || 'trial';
  console.log(
    '[@middleware:handleLoginPath] User already authenticated, redirecting from login to dashboard',
  );
  return NextResponse.redirect(new URL(`/${locale}/${tenantName}/dashboard`, request.url));
}

export default async function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;
  console.log('[@middleware:middleware] Processing path:', path);

  // Create the Supabase client once and reuse it
  // This prevents multiple client creations for the same request
  const { supabase, response: clientResponse } = createClient(request);

  // Special handling for login path
  if (isLoginPath(path)) {
    console.log('[@middleware:middleware] Handling login path');
    return handleLoginPath(request, supabase); // Pass the supabase client
  }

  // Special handling for root path
  if (path === '/') {
    console.log('[@middleware:middleware] Handling root path');
    return NextResponse.redirect(new URL(`/${defaultLocale}`, request.url));
  }

  // Add special case for paths that are just a locale (like '/en')
  if (locales.some((locale) => path === `/${locale}`)) {
    console.log('[@middleware:middleware] Path is just locale, treating as public');
    return NextResponse.next();
  }

  // Public paths: apply locale but RETURN EARLY
  const isPublicPath = PUBLIC_PATHS.some((p) => path === p || path === `/${defaultLocale}${p}`);
  if (isPublicPath) {
    console.log('[@middleware:middleware] Handling public path:', path);
    return NextResponse.next();
  }

  // Check for auth-redirect path with locale
  if (path.includes('/auth-redirect')) {
    console.log('[@middleware:middleware] Bypassing auth check for auth-redirect path:', path);
    return NextResponse.next();
  }

  // API routes: enforce auth (or skip for now, depending on your needs)
  if (path.startsWith('/api/')) {
    console.log('[@middleware:middleware] Handling API route:', path);
    return NextResponse.next();
  }

  // Protected routes: enforce locale and auth
  const hasLocale = locales.some((locale) => path.startsWith(`/${locale}/`));
  if (!hasLocale) {
    console.log('[@middleware:middleware] Redirecting to default locale:', path);
    return NextResponse.redirect(new URL(`/${defaultLocale}${path}`, request.url));
  }

  // Check authentication using the already created Supabase client
  const { data, error } = await supabase.auth.getSession();

  if (error || !data.session) {
    console.log(
      '[@middleware:middleware] Authentication failed:',
      error?.message || 'No session found',
    );
    const locale = path.split('/')[1] || defaultLocale;
    return NextResponse.redirect(new URL(`/${locale}/login`, request.url));
  }

  // User is authenticated, update the session using the reusable client
  const response = await updateSession(request, { supabase, response: clientResponse });
  console.log('[@middleware:middleware] Response before intl:', response);
  // Apply intl for authenticated users
  const intl = await getIntlMiddleware();
  return intl(response);
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|avatars|favicon.ico).*)',
    '/(fr|en)/:path*',
    '/api/:path*',
    '/',
  ],
};
