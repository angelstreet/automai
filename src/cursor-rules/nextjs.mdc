# Next.js Best Practices

// ... existing code ...

### API Route Handler

```typescript
// src/app/api/hosts/[id]/route.ts
import { NextResponse } from 'next/server'
import { getHostById } from '@/lib/services/hosts'

type Props = {
  params: { id: string }
}

export async function GET(
  request: Request,
  { params }: Props
) {
  try {
    const host = await getHostById(params.id)
    if (!host) {
      return NextResponse.json({ success: false, error: 'Host not found' }, { status: 404 })
    }
    return NextResponse.json({ success: true, data: host })
  } catch (error) {
    console.error('Error fetching host:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to fetch host' },
      { status: 500 }
    )
  }
}
```

### Route Handler Best Practices

1. **Dynamic Route Parameters**:
   - Always define a `Props` type for route parameters
   - Use destructuring to access params: `{ params }: Props`
   - Keep the type definition at the top of the file

2. **Response Format**:
   - Use consistent response structure
   - Include success/error status
   - Proper error handling with appropriate status codes

3. **Type Safety**:
   - Use `Request` or `NextRequest` type for request parameter
   - Define proper types for request body and params
   - Validate request data with Zod or similar

// ... rest of existing code ... 