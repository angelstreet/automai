# Terminal, WebSocket & SSH Implementation Guidelines

## **1️⃣ Complete Workflow**

The terminal connection workflow follows these steps:

1. **User Initiates Connection**: User selects a connection from the UI
2. **Terminal Initialization**: Frontend calls `/api/terminals/init` with connection ID
3. **WebSocket Connection**: Frontend establishes WebSocket connection to `/api/terminals/ws/[id]`
4. **Authentication**: Backend validates connection credentials
5. **SSH Connection**: Backend establishes SSH connection to target host
6. **Data Streaming**: Data is streamed bidirectionally between browser and SSH server
7. **Termination**: Connection is closed when user ends session or timeout occurs

## **2️⃣ Architecture Components**

### **Custom Server with Lazy-Loaded WebSocket Support**
- WebSocket server is initialized only when needed
- Handles upgrade requests for WebSocket connections
- Manages WebSocket connection lifecycle

### **WebSocket Service Module**
- Manages WebSocket server instance
- Handles connection events
- Implements ping/pong for connection health monitoring

### **SSH Service Module**
- Establishes SSH connections to remote hosts
- Manages SSH sessions
- Handles authentication and data streaming

### **Terminal Service Module**
- Manages terminal connections
- Handles connection initialization
- Provides interface for terminal operations

### **API Routes**
- `/api/terminals/init`: Initializes terminal connection
- `/api/terminals/ws/[id]`: WebSocket endpoint for terminal data

### **Frontend Components**
- Terminal component using xterm.js
- Connection management UI
- Error handling and reconnection logic

## **3️⃣ WebSocket Server Management**

### **Lazy Initialization**
```typescript
// src/lib/services/websocket.ts
let wss: WebSocketServer | null = null;
let pingInterval: NodeJS.Timeout | null = null;

export function initializeWebSocketServer(server: Server): WebSocketServer {
  if (!wss) {
    wss = new WebSocketServer({ noServer: true });
    
    // Set up ping interval
    pingInterval = setInterval(() => {
      wss?.clients.forEach((ws: WebSocketConnection) => {
        if (ws.isAlive === false) return ws.terminate();
        ws.isAlive = false;
        ws.ping();
      });
    }, 30000);
    
    // Handle server close
    server.on('close', () => {
      if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
      }
      wss = null;
    });
  }
  
  return wss;
}
```

### **Handling Upgrade Requests**
```typescript
// server.ts
server.on('upgrade', async (request, socket, head) => {
  const pathname = new URL(request.url || '', `http://${request.headers.host}`).pathname;
  
  // Handle terminal WebSocket connections
  if (pathname.startsWith('/api/terminals/ws/')) {
    const wss = initializeWebSocketServer(server);
    
    wss.handleUpgrade(request, socket, head, (ws) => {
      wss.emit('connection', ws, request);
    });
  } else {
    socket.destroy();
  }
});
```

## **4️⃣ SSH Connection Handling**

### **Establishing SSH Connection**
```typescript
// src/lib/services/ssh.ts
export async function connectSSH(connection: Connection): Promise<Client> {
  return new Promise((resolve, reject) => {
    const ssh = new Client();
    
    ssh.on('ready', () => {
      console.log(`SSH connection established to ${connection.host}`);
      resolve(ssh);
    });
    
    ssh.on('error', (err) => {
      console.error(`SSH connection error: ${err.message}`);
      reject(err);
    });
    
    // Connect with password or private key
    const connectConfig = {
      host: connection.host,
      port: connection.port || 22,
      username: connection.username,
      ...(connection.password 
        ? { password: connection.password } 
        : { privateKey: connection.privateKey })
    };
    
    ssh.connect(connectConfig);
  });
}
```

### **Creating SSH Shell**
```typescript
// src/lib/services/ssh.ts
export async function createShell(ssh: Client, ws: WebSocket): Promise<void> {
  return new Promise((resolve, reject) => {
    ssh.shell((err, stream) => {
      if (err) {
        console.error(`Failed to create shell: ${err.message}`);
        return reject(err);
      }
      
      // Handle data from SSH server
      stream.on('data', (data) => {
        ws.send(data);
      });
      
      // Handle data from WebSocket client
      ws.on('message', (data) => {
        stream.write(data);
      });
      
      // Handle stream close
      stream.on('close', () => {
        ssh.end();
        ws.close();
      });
      
      resolve();
    });
  });
}
```

## **5️⃣ Frontend Terminal Component**

### **Terminal Initialization**
```typescript
// src/app/[locale]/[tenant]/hosts/_components/Terminal.tsx
const initializeTerminalServer = async (connectionId: string) => {
  setStatus('connecting');
  
  try {
    const response = await fetch('/api/terminals/init', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ connectionId })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to initialize terminal: ${response.status} ${errorText}`);
    }
    
    const data = await response.json();
    
    if (data.success) {
      connectWebSocket(connectionId);
    } else {
      setStatus('error');
      setError(data.message || 'Failed to initialize terminal');
    }
  } catch (error) {
    console.error('Terminal initialization error:', error);
    setStatus('error');
    setError(error.message || 'Failed to initialize terminal');
  }
};
```

### **WebSocket Connection**
```typescript
// src/app/[locale]/[tenant]/hosts/_components/Terminal.tsx
const connectWebSocket = (connectionId: string) => {
  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
  const wsUrl = `${protocol}//${window.location.host}/api/terminals/ws/${connectionId}`;
  
  const socket = new WebSocket(wsUrl);
  setWebSocket(socket);
  
  socket.onopen = () => {
    setStatus('connected');
    setError(null);
  };
  
  socket.onmessage = (event) => {
    if (terminalRef.current) {
      terminalRef.current.write(event.data);
    }
  };
  
  socket.onclose = () => {
    setStatus('disconnected');
  };
  
  socket.onerror = (error) => {
    console.error('WebSocket error:', error);
    setStatus('error');
    setError('WebSocket connection error');
  };
  
  // Set up terminal input handling
  if (terminalRef.current) {
    terminalRef.current.onData((data) => {
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(data);
      }
    });
  }
};
```

## **6️⃣ API Routes Implementation**

### **Terminal Initialization Route**
```typescript
// src/app/api/terminals/init/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { getCompatibleConnection } from '@/lib/services/terminal';

export async function POST(request: Request) {
  try {
    const session = await getServerSession();
    if (!session) {
      return NextResponse.json(
        { success: false, message: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    const { connectionId } = await request.json();
    if (!connectionId) {
      return NextResponse.json(
        { success: false, message: 'Connection ID is required' },
        { status: 400 }
      );
    }
    
    // Get connection details
    const connection = await getCompatibleConnection(connectionId);
    if (!connection) {
      console.error(`Connection not found: ${connectionId}`);
      return NextResponse.json(
        { success: false, message: 'Connection not found' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Terminal initialization error:', error);
    return NextResponse.json(
      { success: false, message: 'Failed to initialize terminal' },
      { status: 500 }
    );
  }
}
```

### **WebSocket Route**
```typescript
// src/app/api/terminals/ws/[id]/route.ts
import { NextRequest } from 'next/server';
import { getCompatibleConnection } from '@/lib/services/terminal';
import { connectSSH, createShell } from '@/lib/services/ssh';

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const connectionId = params.id;
  
  // Check for WebSocket upgrade
  const upgrade = request.headers.get('upgrade');
  if (!upgrade || upgrade !== 'websocket') {
    return new Response('Expected WebSocket request', { status: 426 });
  }
  
  try {
    // Get connection details
    const connection = await getCompatibleConnection(connectionId);
    if (!connection) {
      console.error(`WebSocket: Connection not found: ${connectionId}`);
      return new Response('Connection not found', { status: 404 });
    }
    
    // This is handled by the custom server
    return new Response('WebSocket handler');
  } catch (error) {
    console.error('WebSocket route error:', error);
    return new Response('Internal Server Error', { status: 500 });
  }
}
```

## **7️⃣ Security Considerations**

### **Authentication**
- Verify user session before initializing terminal
- Validate connection ownership
- Use secure WebSocket connections (WSS)

### **Connection Management**
- Implement connection timeouts
- Close inactive connections
- Limit concurrent connections per user

### **Resource Management**
- Implement proper cleanup of SSH connections
- Handle WebSocket connection lifecycle
- Terminate connections on server shutdown

## **8️⃣ Logging**

### **Console Logging**
- Log connection events (initialization, connection, disconnection)
- Log errors with appropriate context
- Include connection IDs in logs for traceability

### **Log Levels**
- Use appropriate log levels (debug, info, warn, error)
- Include timestamps in logs
- Structure logs for easy parsing

### **Error Handling**
- Log detailed error information
- Implement proper error recovery
- Provide meaningful error messages to users

## **9️⃣ Troubleshooting**

### **WebSocket Connection Issues**
- Check WebSocket server initialization
- Verify upgrade request handling
- Check for network issues (firewalls, proxies)

### **SSH Connection Issues**
- Verify connection credentials
- Check host availability
- Validate SSH server configuration

## **🔟 Testing**

### **WebSocket Connection Testing**
```typescript
// Test WebSocket connection
const testWebSocketConnection = async (connectionId: string) => {
  const wsUrl = `ws://localhost:3000/api/terminals/ws/${connectionId}`;
  const ws = new WebSocket(wsUrl);
  
  return new Promise((resolve, reject) => {
    ws.onopen = () => {
      console.log('WebSocket connection successful');
      ws.close();
      resolve(true);
    };
    
    ws.onerror = (error) => {
      console.error('WebSocket connection failed:', error);
      reject(error);
    };
  });
};
``` 