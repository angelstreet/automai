# Next.js Best Practices

This document defines best practices for Next.js development to maintain consistency and code quality across the project.

## Component Structure

### Client-Side Interactions (Top Priority)

- ❌ **NEVER** use `<Script>` tags to handle button clicks or other UI interactions
- ❌ **NEVER** dispatch custom events between components when direct component communication is possible
- ✅ **ALWAYS** handle UI interactions directly in the component that contains the interactive element
- ✅ **ALWAYS** keep dialog state in the same component as the button that triggers it
- ✅ **ALWAYS** use React's component model for UI interactions rather than DOM manipulation

### Examples

#### ❌ Bad Practice:
```tsx
// Page component with script tag
export default function Page() {
  return (
    <>
      <Button id="my-button">Click Me</Button>
      <Script>
        {`
          document.getElementById('my-button').addEventListener('click', () => {
            // Do something
          });
        `}
      </Script>
    </>
  );
}
```

#### ✅ Good Practice:
```tsx
// Client component with proper event handling
'use client';

export function MyButton() {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  
  return (
    <>
      <Button onClick={() => setIsDialogOpen(true)}>
        Click Me
      </Button>
      
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>Dialog content</DialogContent>
      </Dialog>
    </>
  );
}
```

## Server vs Client Components

- ✅ Keep data fetching in server components whenever possible
- ✅ Use client components only when interactivity is needed
- ✅ Follow the "fetch up, props down" pattern
- ✅ Use the `'use client'` directive at the top of files that require client-side interactivity
- ❌ Don't mix data fetching and UI interactions in the same component when avoidable

## Page Structure

- ✅ Use layout components for repeated UI elements
- ✅ Use suspense boundaries for content that needs to be loaded
- ✅ Keep page components simple, delegating to purpose-specific components
- ✅ Use server components for the page root to improve initial load performance

## Events and Communication

- ✅ Use props for parent-to-child communication
- ✅ Use callbacks passed as props for child-to-parent communication
- ✅ Use React Context for deeply nested component communication
- ✅ Use server actions for server-side mutations
- ❌ Avoid direct DOM manipulation and global event listeners

## Empty States

- ✅ Render empty states directly in the component that displays the data
- ✅ Pass callbacks directly to the EmptyState component's action
- ❌ Don't use document events to trigger actions from empty states

## Internationalization (i18n)

- ✅ **ALWAYS** use the `useTranslations` hook from next-intl for text content
- ✅ Ensure all user-facing text is wrapped in translation calls
- ✅ Include fallback text for all translations to ensure graceful degradation
- ✅ Use proper namespacing for translation keys (e.g., 'feature.action')
- ❌ Never hardcode user-facing text strings in components
- ✅ Format translation keys consistently, using standard naming conventions
- ✅ Group related translations logically in translation files

### Example:
```tsx
'use client';

import { useTranslations } from 'next-intl';

export function UserGreeting({ username }) {
  const t = useTranslations('common');
  
  return (
    <h1>{t('greeting', { username, fallback: `Hello, ${username}!` })}</h1>
  );
}
``` 