# Next.js Best Practices

## Project Structure

Follow this structure for Next.js applications:

```
automai/
├── server.ts                 # Custom server entry point
├── prisma/                   # Prisma schema and migrations at root
│   ├── schema.prisma         # Database schema
│   ├── migrations/           # Database migrations
│   ├── seed.ts              # Database seed script
│   └── index.ts             # Prisma client singleton (root-level)
├── .env.*                    # Environment files at root
├── scripts/                  # Utility scripts
│   └── health-check.js      # Script to check file sizes and provide refactoring 
├── src/
│   ├── app/                 # Next.js App Router
│   │   ├── [locale]/        # Internationalized routes
│   │   │   ├── (auth)/      # Auth route group
│   │   │   └── [tenant]/    # Tenant-specific routes
│   │   └── api/             # API Route Handlers
│   ├── lib/                 # Shared utilities
│   │   ├── services/        # Service layer
│   │   │   ├── http.ts      # HTTP server service
│   │   │   ├── websocket.ts # WebSocket service
│   │   │   ├── ssh.ts       # SSH service
│   │   │   ├── terminal.ts  # Terminal service
│   │   │   └── hosts.ts     # Host management service
│   │   ├── prisma.ts        # Prisma client singleton
│   │   ├── utils.ts         # Helper functions
│   │   └── env.ts           # Environment configuration
│   ├── components/          # UI components
│   │   ├── Feature/         # Reusable UI components
│   │   └── Shadcn/          # fe component
│   ├── i18n/                # Internationalization
│   └── middleware.ts        # Next.js middleware
├── electron/                # Electron app configuration
├── tests/                   # Test files
├── docs/                    # Project documentation
└── next.config.js           # Next.js configuration
```

## Server Setup

### Custom Server

```typescript
// server.ts
import dotenv from 'dotenv';
import { startServer } from './src/lib/services/http';

// Initialize server with lazy-loaded WebSocket support
const server = await startServer({
  dev: process.env.NODE_ENV !== 'production',
  hostname: process.env.HOST || 'localhost',
  port: parseInt(process.env.PORT || '3000', 10),
  enableWebSockets: false // WebSockets are initialized on-demand
});
```

### Service Layer Organization

```typescript
// src/lib/services/http.ts
export async function startServer(options: ServerOptions): Promise<Server>;
export async function stopServer(): Promise<void>;
export function initializeWebSockets(): boolean;

// src/lib/services/websocket.ts
export function initializeWebSocketServer(server: Server): WSServer;
export function handleUpgrade(request: Request, socket: Socket, head: Buffer): void;

// src/lib/services/ssh.ts
export async function handleSshConnection(socket: WebSocket, connectionId: string): Promise<void>;

// src/lib/services/terminal.ts
export async function createTerminalConnection(data: ConnectionData): Promise<Connection>;
```

### Development Scripts

```json
{
  "scripts": {
    "dev": "ts-node server.ts",      // Custom server with WebSocket support
    "dev:next": "next dev",          // Default Next.js development server
    "build": "next build",
    "start": "next start"
  }
}
```

[Rest of the existing Next.js rules remain unchanged...] 