# React Server Components Architecture Guidelines

## Database Access Pattern (CRITICAL)

### Three-Tier Architecture (Required)

1. **Database Layer** (`/lib/supabase/db-*/*.ts`)
   - ✅ ALWAYS use `createClient` from `@/lib/supabase/server` for database access
   - ✅ ALWAYS include `cookieStore` parameter in ALL database functions
   - ✅ ALWAYS keep functions focused on database operations only
   - ❌ NEVER import or use `createBrowserClient` from anywhere
   - ❌ NEVER create custom browser client files or implementations

2. **Server Actions** (`/app/actions/*.ts`)
   - ✅ ALWAYS mark with `'use server'` directive at the top of the file
   - ✅ ALWAYS use `cookies()` from `next/headers` to get cookie store
   - ✅ ALWAYS pass cookie store to database functions
   - ✅ ALWAYS re-export necessary types for client usage
   - ❌ NEVER include UI logic or state management

3. **Client Components** (`/context/*.tsx`, `/components/*.tsx`)
   - ✅ ALWAYS mark with `'use client'` directive at the top of the file
   - ✅ ALWAYS import from server actions, NEVER directly from database layer
   - ✅ ALWAYS manage UI state and user interactions here
   - ❌ NEVER directly call database operations

### Database Function Implementation

```typescript
// CORRECT DATABASE FUNCTION IMPLEMENTATION
// src/lib/supabase/db-teams/teams.ts
import { createClient } from '@/lib/supabase/server';

export async function getTeamById(teamId: string, cookieStore?: any): Promise<TeamResult> {
  try {
    const supabase = await createClient(cookieStore);
    const { data, error } = await supabase
      .from('teams')
      .select('*')
      .eq('id', teamId)
      .single();
    
    // Process and return data
  } catch (error) {
    // Handle errors
  }
}
```

### Server Action Implementation

```typescript
// CORRECT SERVER ACTION IMPLEMENTATION
// src/app/actions/team.ts
'use server';

import { cookies } from 'next/headers';
import { getTeamById } from '@/lib/supabase/db-teams/teams';
import type { Team } from '@/types/team';

export async function getTeam(id: string): Promise<Team | null> {
  const cookieStore = cookies();
  const result = await getTeamById(id, cookieStore);
  return result.success ? result.data : null;
}

// Re-export types for client usage
export type { Team };
```

### Client Component Implementation

```typescript
// CORRECT CLIENT COMPONENT IMPLEMENTATION
// src/components/TeamDisplay.tsx
'use client';

import { useState, useEffect } from 'react';
import { getTeam, type Team } from '@/app/actions/team';

export function TeamDisplay({ teamId }: { teamId: string }) {
  const [team, setTeam] = useState<Team | null>(null);
  
  useEffect(() => {
    async function loadTeam() {
      const teamData = await getTeam(teamId);
      setTeam(teamData);
    }
    loadTeam();
  }, [teamId]);
  
  // Render UI with team data
}
```

## Module Export Best Practices

- ✅ ALWAYS use named exports to avoid conflicts
- ✅ Use `export type` for TypeScript types to avoid compilation issues
- ✅ Rename exports when consolidating from multiple files:

```typescript
// CORRECT INDEX FILE PATTERN
// src/lib/supabase/db-teams/index.ts
export type { Team, TeamResult } from './teams';
export {
  getTeamById,
  getTeams,
  createTeam,
  updateTeam,
  deleteTeam,
  getUserTeams as getTeamsByUser
} from './teams';

export {
  getTeamMembers,
  addTeamMember,
  updateTeamMemberRole,
  removeTeamMember  
} from './team-members';

export * from './permissions';
```

- ❌ NEVER use `export *` from multiple files with overlapping export names
- ❌ NEVER export default from context components unless absolutely necessary

## Authentication Flow

- ✅ ALWAYS pass `cookieStore` through the entire call chain
- ✅ Get cookies in server actions: `const cookieStore = cookies();`
- ✅ Pass to database functions: `return dbFunction(id, cookieStore);`
- ❌ NEVER create your own authentication flow outside this pattern

## Common Anti-patterns to Avoid

- ❌ **NEVER** create custom browser client files 
- ❌ **NEVER** import from database layer directly in client components
- ❌ **NEVER** mix database operations and UI logic
- ❌ **NEVER** use star exports from multiple files with same named exports
- ❌ **NEVER** export components as default unless required by external libraries

## Debugging Database Access Issues

If you encounter database access issues:
1. Check that you're using `createClient` from `/lib/supabase/server.ts`
2. Verify `cookieStore` is passed through the entire call chain
3. Ensure API routes use `cookies()` from `next/headers`
4. Confirm you're not importing browser-specific modules server-side 