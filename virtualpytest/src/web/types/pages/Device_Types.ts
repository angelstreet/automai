/**
 * Device Types - Canonical device type definitions for consistency across all layers
 * 
 * IMPORTANT: This file defines the single canonical device type used by:
 * 1. Host Registration (what host sends to server)
 * 2. Server Storage (what server stores in memory registry)  
 * 3. Frontend Interface (what frontend receives from API)
 * 
 * NO DATA TRANSFORMATION should occur between these layers.
 */

import { SystemStats } from './Dashboard_Types';

// =====================================
// CANONICAL DEVICE TYPE
// =====================================

/**
 * Canonical Device Type - Used consistently across all layers
 * 
 * This matches exactly what the host sends during registration and
 * what the server should store and return to the frontend.
 */
export interface Device {
  // === PRIMARY IDENTIFICATION ===
  id: string;                    // Device ID (auto-generated by server)
  name: string;                  // Device display name (device_name from host)
  host_name: string;             // Host machine name (primary identifier)
  model: string;                 // Device model (device_model from host)
  description?: string;          // Optional description
  
  // === NETWORK CONFIGURATION ===
  host_ip: string;               // Host IP address
  host_port_internal: number;   // Where Flask actually runs on host
  host_port_external: number;   // For server communication (may be port-forwarded)
  host_port_web: number;        // HTTPS/nginx port
  device_ip: string;             // Device IP address (for ADB/device control)
  device_port: string;           // Device port (for ADB/device control)
  
  // === CONNECTION INFORMATION ===
  connection: {
    host_ip: string;             // Same as host_ip (for URL building)
    host_port_external: number; // Same as host_port_external (for URL building)
    host_port_web: number;       // Same as host_port_web (for URL building)
  };
  
  // === STATUS AND METADATA ===
  status: 'online' | 'offline' | 'unreachable' | 'maintenance';
  last_seen: number;             // Unix timestamp
  registered_at: string;        // ISO timestamp
  system_stats: SystemStats;    // System resource usage
  
  // === DEVICE CAPABILITIES ===
  capabilities: string[];        // Available capabilities (av, remote, verification, power)
  controller_configs?: any;      // Controller-specific configurations
  controller_types?: string[];   // Available controller types (legacy)
  
  // === DEVICE LOCK MANAGEMENT ===
  isLocked: boolean;             // Device lock status
  lockedBy?: string;            // Session/user who locked it
  lockedAt?: number;            // Timestamp when locked
}

// =====================================
// SERVER API TYPES
// =====================================

/**
 * Server response structure for device endpoints
 */
export interface DevicesResponse {
  success: boolean;
  devices?: Device[];
  total_devices?: number;
  error?: string;
}

/**
 * Host registration payload (what host sends to server)
 * This should match exactly what's in host_utils.py
 */
export interface HostRegistrationPayload {
  host_name: string;
  host_ip: string;
  host_port_internal: number;
  host_port_external: number;
  host_port_web: number;
  device_name: string;
  device_model: string;
  device_ip: string;
  device_port: string;
  system_stats: SystemStats;
}

// =====================================
// EXTENDED TYPES FOR SPECIFIC USE CASES
// =====================================

/**
 * Device with controller proxies attached (for client-side controller management)
 */
export interface DeviceWithProxies extends Device {
  controllerProxies?: {
    av?: any;           // AVControllerProxy
    remote?: any;       // RemoteControllerProxy  
    verification?: any; // VerificationControllerProxy
    power?: any;        // PowerControllerProxy
  };
}

// =====================================
// TYPE ALIASES FOR BACKWARD COMPATIBILITY
// =====================================

/**
 * @deprecated Use Device instead
 */
export type DeviceRegistration = Device;

/**
 * @deprecated Use Device instead  
 */
export type RegisteredHost = Device;

/**
 * @deprecated Use Device instead
 */
export type ConnectedDevice = Device;

/**
 * @deprecated Use Device instead
 */
export type Host = Device;

// =====================================
// CONSTANTS
// =====================================

export const DeviceStatus = {
  ONLINE: 'online',
  OFFLINE: 'offline', 
  UNREACHABLE: 'unreachable',
  MAINTENANCE: 'maintenance',
} as const;

export type DeviceStatusType = typeof DeviceStatus[keyof typeof DeviceStatus]; 