---
description: API Development Rules
globs: src/app/api/**/*.ts
alwaysApply: true
---

# API Development Rules

## API Structure and Organization

### Directory Structure

```
src/app/api/
├── [resource]/            # Resource endpoint (e.g., projects)
│   ├── route.ts           # Handles GET (list) and POST (create)
│   ├── [id]/
│   │   └── route.ts       # Handles GET, PUT, PATCH, DELETE for single resource
│   ├── schema.ts          # Validation schemas
│   └── types.ts           # Type definitions
```

### URL Structure

- Use RESTful URL patterns
- Use resources, not actions, in URLs
- Use kebab-case for multi-word paths

```
✅ CORRECT:
GET    /api/projects                # List projects
POST   /api/projects                # Create project
GET    /api/projects/123            # Get project
PUT    /api/projects/123            # Update project
DELETE /api/projects/123            # Delete project
POST   /api/projects/123/publish    # Resource action

❌ INCORRECT:
GET    /api/getProjects             # Uses verb
POST   /api/createProject           # Uses verb
GET    /api/getProject/123          # Uses verb
```

## Route Handler Implementation

### Route Handler Pattern

```typescript
// src/app/api/[resource]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { z } from 'zod';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import { prisma } from '@/lib/prisma';

// Validation schema
const createResourceSchema = z.object({
  name: z.string().min(1).max(100),
  description: z.string().optional(),
});

export async function GET(request: NextRequest) {
  try {
    // Authentication check
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ 
        success: false, 
        error: 'Unauthorized' 
      }, { status: 401 });
    }

    // Get query parameters
    const { searchParams } = new URL(request.url);
    const limit = Number(searchParams.get('limit') || '10');
    const page = Number(searchParams.get('page') || '1');

    // Tenant isolation
    const tenantId = session.user.tenantId;
    
    // Fetch data with pagination
    const resources = await prisma.resource.findMany({
      where: { tenantId },
      take: limit,
      skip: (page - 1) * limit,
      orderBy: { createdAt: 'desc' },
    });

    // Return standardized response
    return NextResponse.json({
      success: true,
      data: {
        resources,
        pagination: {
          page,
          limit,
          totalCount: await prisma.resource.count({ where: { tenantId } }),
        },
      },
    });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json({
      success: false,
      error: 'An error occurred while processing your request',
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    // Authentication check
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ 
        success: false, 
        error: 'Unauthorized' 
      }, { status: 401 });
    }

    // Parse and validate request body
    const body = await request.json();
    const validationResult = createResourceSchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json({
        success: false,
        error: 'Validation failed',
        details: validationResult.error.format(),
      }, { status: 400 });
    }

    // Tenant isolation
    const tenantId = session.user.tenantId;
    
    // Create resource
    const resource = await prisma.resource.create({
      data: {
        ...validationResult.data,
        tenantId,
        userId: session.user.id,
      },
    });

    // Return standardized response
    return NextResponse.json({
      success: true,
      data: resource,
    }, { status: 201 });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json({
      success: false,
      error: 'An error occurred while processing your request',
    }, { status: 500 });
  }
}
```

## Response Format

All API responses must follow this standard format:

### Success Response
```json
{
  "success": true,
  "data": {...},
  "message": "Optional success message"
}
```

### Error Response
```json
{
  "success": false,
  "error": "Error message",
  "details": {...}  // Optional validation details
}
```

## HTTP Status Codes

Use appropriate HTTP status codes:

| Code | Description                |
|------|----------------------------|
| 200  | Success                    |
| 201  | Created                    |
| 400  | Bad Request                |
| 401  | Unauthorized               |
| 403  | Forbidden                  |
| 404  | Not Found                  |
| 500  | Internal Server Error      |

## Authentication & Authorization

1. **Authentication Check**
   - Always check session in route handlers
   - Use `getServerSession(authOptions)` from NextAuth.js

2. **Tenant Isolation**
   - Always filter resources by tenant ID
   - Include tenant ID in queries and mutations

3. **Permission Checks**
   - Check user role for privileged operations
   - Implement fine-grained access control

```typescript
// Role-based access control
if (session.user.role !== 'admin' && resourceOwnerId !== session.user.id) {
  return NextResponse.json({
    success: false,
    error: 'Permission denied',
  }, { status: 403 });
}
```

## Validation

Use Zod for request validation:

```typescript
// src/app/api/[resource]/schema.ts
import { z } from 'zod';

export const createResourceSchema = z.object({
  name: z.string().min(1, 'Name is required').max(100),
  description: z.string().optional(),
  status: z.enum(['ACTIVE', 'INACTIVE', 'DRAFT']),
  priority: z.number().int().min(1).max(5).optional(),
});

export const updateResourceSchema = createResourceSchema.partial();
```

## Error Handling

Implement consistent error handling:

```typescript
try {
  // API logic
} catch (error) {
  console.error('API error:', error);
  
  // Handle known errors
  if (error instanceof PrismaClientKnownRequestError) {
    if (error.code === 'P2002') {
      return NextResponse.json({
        success: false,
        error: 'A resource with this name already exists',
      }, { status: 409 });
    }
  }
  
  // Generic error response
  return NextResponse.json({
    success: false,
    error: 'An error occurred while processing your request',
  }, { status: 500 });
}
```

## API Testing

Every API endpoint should have corresponding tests:

```typescript
// tests/api/resources.test.ts
import { createMocks } from 'node-mocks-http';
import { GET, POST } from '@/app/api/resources/route';

// Mock sessions and database
jest.mock('next-auth/next', () => ({
  getServerSession: jest.fn(() => ({
    user: {
      id: 'user-id',
      tenantId: 'tenant-id',
      role: 'admin',
    },
  })),
}));

describe('Resources API', () => {
  describe('GET /api/resources', () => {
    it('should return a list of resources', async () => {
      const { req } = createMocks({
        method: 'GET',
      });

      const res = await GET(req);
      const data = await res.json();

      expect(res.status).toBe(200);
      expect(data.success).toBe(true);
      expect(Array.isArray(data.data.resources)).toBe(true);
    });
  });
});
```

## Best Practices

1. **Keep Route Handlers Thin**
   - Move business logic to service layer
   - Keep route handlers focused on:
     - Request parsing and validation
     - Response formatting
     - Error handling

2. **Use Transactions for Multi-Step Operations**
   ```typescript
   await prisma.$transaction(async (tx) => {
     // Multiple database operations
   });
   ```

3. **Implement Rate Limiting**
   - Protect public endpoints with rate limiting
   - Use appropriate headers for rate limit info

4. **Add Logging for Debugging**
   - Log important operations with context
   - Include request IDs for traceability
   - Don't log sensitive information

5. **Use Query Params for Filtering and Pagination**
   - Implement consistent pagination
   - Use query parameters for filtering
   - Document query parameters

6. **Document APIs**
   - Add JSDoc comments to describe endpoints
   - Include sample requests and responses
   - Document error scenarios