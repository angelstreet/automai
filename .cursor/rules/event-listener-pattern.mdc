---
description: Documentation for the event-based communication pattern using EventListener components
globs: ["**/*/client/**/*.tsx"]
alwaysApply: false
---

# Event Listener Pattern

## Overview

The Event Listener pattern provides a standardized approach for component communication across the application. It uses browser's native event system combined with dedicated listener components to create loosely coupled interactions. This pattern is the primary communication mechanism throughout the application and can be supplemented with Zustand for persistent state management.

## Key Principles

1. **Centralized Constants in Objects**: All event name constants are defined and exported in an object directly from their respective EventListener components
2. **Dedicated Listener Components**: Each feature domain has its own EventListener component (e.g., `HostsEventListener.tsx`, `CICDEventListener.tsx`)
3. **No Cross-Domain Events**: Events should be scoped to their feature domain
4. **Direct Imports**: Components import event constants directly from their domain's EventListener
5. **State Management Integration**: Zustand is used for persistent state while events handle communication

## Implementation

### Event Listener Component Structure

```typescript
'use client';

import { useRouter } from 'next/navigation';
import { useEffect } from 'react';

// Define constants in an object to avoid Fast Refresh issues
const DomainEvents = {
  // UI Control Events
  OPEN_DOMAIN_DIALOG: 'OPEN_DOMAIN_DIALOG',
  TOGGLE_DOMAIN_VIEW_MODE: 'TOGGLE_DOMAIN_VIEW_MODE',

  // Data Refresh Events
  REFRESH_DOMAIN: 'REFRESH_DOMAIN',
  
  // Domain-specific events
  DOMAIN_TESTING_START: 'DOMAIN_TESTING_START',
  DOMAIN_TESTING_COMPLETE: 'DOMAIN_TESTING_COMPLETE',
};

// Export the constants object
export { DomainEvents };

export default function DomainEventListener() {
  const router = useRouter();

  useEffect(() => {
    // Event handlers with consistent logging pattern
    const handleRefresh = () => {
      console.log('[@component:DomainEventListener] REFRESH_DOMAIN: Refreshing domain data');
      router.refresh();
    };

    // Register event listeners
    window.addEventListener(DomainEvents.REFRESH_DOMAIN, handleRefresh);
    
    // Debug message when component mounts
    console.log('[@component:DomainEventListener] Setting up event listeners');
    
    // Clean up listeners
    return () => {
      console.log('[@component:DomainEventListener] Removing event listeners');
      window.removeEventListener(DomainEvents.REFRESH_DOMAIN, handleRefresh);
    };
  }, [router]);

  // Listener components don't render anything
  return null;
}
```

### Importing Constants

Always import the events object directly from the EventListener component:

```typescript
// CORRECT
import { DomainEvents } from './DomainEventListener';

// INCORRECT - don't import from constants.ts
import { REFRESH_DOMAIN } from '../../constants';
```

### Dispatching Events

```typescript
// Simple event
window.dispatchEvent(new Event(DomainEvents.REFRESH_DOMAIN));

// Event with data
window.dispatchEvent(
  new CustomEvent(DomainEvents.DOMAIN_TESTING_START, {
    detail: { itemId: item.id }
  })
);
```

## Zustand Integration

For cases where you need both event-based communication and shared state management, combine the Event Listener pattern with Zustand:

### Creating a Zustand Store

```typescript
// src/store/domainStore.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

interface DomainState {
  // State properties
  viewMode: 'grid' | 'table';
  // Actions
  setViewMode: (mode: 'grid' | 'table') => void;
  toggleViewMode: () => void;
}

export const useDomainStore = create<DomainState>()(
  persist(
    (set) => ({
      viewMode: 'grid', // default value
      setViewMode: (mode) => set({ viewMode: mode }),
      toggleViewMode: () => set((state) => ({ 
        viewMode: state.viewMode === 'grid' ? 'table' : 'grid' 
      })),
    }),
    { 
      name: 'domain-store-key', // localStorage key
    }
  )
);
```

### Using Zustand with Events

```typescript
import { DomainEvents } from './DomainEventListener';
import { useDomainStore } from '@/store/domainStore';

function ViewToggleButton() {
  const { viewMode, toggleViewMode } = useDomainStore();
  
  const handleToggle = () => {
    // Update state with Zustand
    toggleViewMode();
    
    // Also dispatch event for listeners that need to respond
    window.dispatchEvent(new Event(DomainEvents.TOGGLE_DOMAIN_VIEW_MODE));
  };
  
  return (
    <Button onClick={handleToggle}>
      {viewMode === 'grid' ? <ListIcon /> : <GridIcon />}
    </Button>
  );
}
```

## When to Use Each Approach

- **Events**: For component communication, UI refreshes, transient state changes
- **Zustand**: For persistent state that needs to survive page refreshes
- **Combined Approach**: For most features, where both persistent settings and communication are needed

## Event Naming Conventions

- **Event Object**: Use plural form (`HostsEvents`, `CICDEvents`)
- **Event Categories**: Group events by purpose (UI Control, Data Refresh, Domain-specific)
- **Format**: Use descriptive, uppercase names that indicate the action
- **Examples**:
  - UI Control: `OPEN_HOST_DIALOG`, `TOGGLE_HOST_VIEW_MODE`
  - Data Refresh: `REFRESH_HOSTS`
  - Domain Actions: `TEST_ALL_HOSTS`, `HOST_TESTING_START`, `HOST_TESTING_COMPLETE`

## Real-World Example: Hosts Feature

### HostsEventListener.tsx
```typescript
'use client';

import { useRouter } from 'next/navigation';
import { useEffect } from 'react';

// Define constants in an object to avoid Fast Refresh issues
const HostsEvents = {
  // UI Control Events
  OPEN_HOST_DIALOG: 'OPEN_HOST_DIALOG', // Open the "Add Host" dialog
  TOGGLE_HOST_VIEW_MODE: 'TOGGLE_HOST_VIEW_MODE', // Switch between grid/table view

  // Data Refresh Events
  REFRESH_HOSTS: 'REFRESH_HOSTS', // Request to refresh host data from server
  TEST_ALL_HOSTS: 'TEST_ALL_HOSTS', // Request to test all hosts

  // Host Testing Events
  HOST_TESTING_START: 'HOST_TESTING_START', // Single host testing starts
  HOST_TESTING_COMPLETE: 'HOST_TESTING_COMPLETE', // Single host testing completes
};

// Export the constants object
export { HostsEvents };

export default function HostsEventListener() {
  const router = useRouter();

  useEffect(() => {
    // Handle refresh hosts request
    const handleRefreshHosts = () => {
      console.log('[@component:HostsEventListener] REFRESH_HOSTS: Refreshing hosts data');
      router.refresh();
    };

    // Handle individual host testing events
    const handleHostTestingStart = (event: CustomEvent) => {
      if (event.detail?.hostId) {
        console.log(
          `[@component:HostsEventListener] HOST_TESTING_START: Host ${event.detail.hostId}`,
        );
      }
    };

    window.addEventListener(HostsEvents.REFRESH_HOSTS, handleRefreshHosts);
    window.addEventListener(
      HostsEvents.HOST_TESTING_START,
      handleHostTestingStart as EventListener,
    );

    return () => {
      window.removeEventListener(HostsEvents.REFRESH_HOSTS, handleRefreshHosts);
      window.removeEventListener(
        HostsEvents.HOST_TESTING_START,
        handleHostTestingStart as EventListener,
      );
    };
  }, [router]);

  return null;
}
```

### Using in HostActionsClient.tsx
```typescript
import { HostsEvents } from './HostsEventListener';
import { useHostViewStore } from '@/store/hostViewStore';

// In component
useEffect(() => {
  const handleHostTestingStart = (event: CustomEvent) => {
    if (event.detail && event.detail.hostId) {
      activeTestingHosts.current.add(event.detail.hostId);
      setIsTestingHosts(true);
    }
  };

  window.addEventListener(
    HostsEvents.HOST_TESTING_START,
    handleHostTestingStart as EventListener,
  );

  return () => {
    window.removeEventListener(
      HostsEvents.HOST_TESTING_START,
      handleHostTestingStart as EventListener,
    );
  };
}, []);

// In event handler
const handleRefresh = async () => {
  // Dispatch a custom event to tell HostListClient to test all hosts
  window.dispatchEvent(
    new CustomEvent(HostsEvents.TEST_ALL_HOSTS, {
      detail: { hostIds: hosts.map(h => h.id) },
    }),
  );
};
```

### In HostListClient.tsx
```typescript
// Test all hosts
useEffect(() => {
  const handleTestAllHosts = (event: CustomEvent) => {
    if (event.detail && event.detail.hostIds) {
      testAllHosts(event.detail.hostIds);
    }
  };

  window.addEventListener(HostsEvents.TEST_ALL_HOSTS, handleTestAllHosts as EventListener);

  return () => {
    window.removeEventListener(HostsEvents.TEST_ALL_HOSTS, handleTestAllHosts as EventListener);
  };
}, [testAllHosts]);
```

## Best Practices

1. **Do** define all event constants in an object in the EventListener component
2. **Do** use consistent logging with the format `[@component:ComponentName]` prefix
3. **Do** create a dedicated EventListener component for each feature domain
4. **Do** use Zustand for persistent state that needs to be shared
5. **Do** use clear, descriptive event names organized by category
6. **Do** include debug logging for event setup and handling
7. **Do** provide detailed information in CustomEvent detail objects
8. **Don't** create cross-domain events that communicate between unrelated features
9. **Don't** store event constants in constants.ts files
10. **Don't** use DOM manipulation for component communication
11. **Don't** use events for security-critical operations
12. **Don't** dispatch events without proper error handling 