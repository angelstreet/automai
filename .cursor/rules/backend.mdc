---
description: Backend Best Practices
globs: src/app/api/**/*.{ts,js}, src/lib/**/*.{ts,js}
alwaysApply: false
---
# Backend Best Practices

## **1Ô∏è‚É£ Server Architecture**
- Use TypeScript for server implementation
- Implement custom server in `server.ts` at project root
- Organize server components in a service layer
- Lazy-load WebSocket functionality when needed
- Follow a modular approach with clear separation of concerns

## **2Ô∏è‚É£ Server Implementation**
### **Entry Point (server.ts)**
```typescript
// Load environment variables before any imports that might use them
import dotenv from 'dotenv';

const envFile = process.env.NODE_ENV === 'production'
  ? '.env.production'
  : process.env.NODE_ENV === 'test'
    ? '.env.test'
    : '.env.development';

console.log(`Loading environment from ${envFile}`);
dotenv.config({ path: envFile });

// Now import modules that depend on environment variables
import { startServer, stopServer } from './src/lib/services/http';

const dev = process.env.NODE_ENV !== 'production';
const hostname = process.env.HOST || 'localhost';
const port = parseInt(process.env.PORT || '3000', 10);

async function main() {
  try {
    // Start server without WebSocket support by default
    // WebSockets will be lazily initialized when needed
    await startServer({
      dev,
      hostname,
      port,
      enableWebSockets: false
    });
  } catch (err) {
    console.error('Error starting server:', err);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', async () => {
  await stopServer();
  process.exit(0);
});

// Start the server
main();
```

### **Service Layer Organization**
```
src/lib/services/
‚îú‚îÄ‚îÄ http.ts         # HTTP server implementation
‚îú‚îÄ‚îÄ websocket.ts    # WebSocket server implementation
‚îú‚îÄ‚îÄ ssh.ts          # SSH connection handling
‚îú‚îÄ‚îÄ terminal.ts     # Terminal session management
‚îî‚îÄ‚îÄ hosts.ts        # Host management
```

## **3Ô∏è‚É£ Service Layer Rules**
- Each service should have a single responsibility
- Use dependency injection for service dependencies
- Implement proper error handling and logging
- Use async/await for asynchronous operations
- Export clear interfaces for service functions

## **4Ô∏è‚É£ WebSocket Integration**
- Initialize WebSocket server lazily when needed
- Handle WebSocket upgrade requests properly
- Manage WebSocket connection lifecycle
- Implement ping/pong for connection health monitoring
- Handle errors and reconnection gracefully

## **5Ô∏è‚É£ API Implementation**
- Use Next.js Route Handlers in `src/app/api/`
- Implement proper error handling
- Use session management with `getServerSession`
- Follow RESTful API design principles
- Validate request data before processing

## **6Ô∏è‚É£ Server Implementation**
### **HTTP Server**
```typescript
// src/lib/services/http.ts
export async function startServer(options: {
  dev?: boolean;
  hostname?: string;
  port?: number;
  enableWebSockets?: boolean;
}): Promise<Server> {
  const { dev, hostname, port, enableWebSockets } = options;
  
  // Initialize Next.js app
  const app = await initializeNextApp({ dev, hostname, port });
  const handle = app.getRequestHandler();
  
  // Create HTTP server
  const server = createServer({ dev, hostname, port, enableWebSockets });
  
  // Set up request handler
  server.on('request', (req, res) => {
    const parsedUrl = parse(req.url || '', true);
    handle(req, res, parsedUrl);
  });
  
  // Start listening
  server.listen(port, hostname);
  
  return server;
}
```

### **WebSocket Server**
```typescript
// src/lib/services/websocket.ts
export function initializeWebSocketServer(server: Server): WSServer {
  // Create new WebSocketServer if none exists
  if (!wss) {
    wss = new WSServer({ noServer: true });
    
    // Set up ping interval to detect dead connections
    pingInterval = setInterval(() => {
      if (wss) {
        wss.clients.forEach((ws: WebSocketConnection) => {
          if (ws.isAlive === false) return ws.terminate();
          ws.isAlive = false;
          ws.ping();
        });
      }
    }, 30000);
    
    // Handle server close and connection events
    // ...
  }
  
  return wss;
}
```

## **7Ô∏è‚É£ Development Setup**
- Use `ts-node` to run the server in development
- Set environment variables in `.env.development`
- Configure proper scripts in `package.json`
- Implement graceful shutdown handling

### **Scripts**
```json
{
  "scripts": {
    "dev": "NODE_ENV=development ts-node server.ts",
    "dev:next": "next dev",
    "build": "next build",
    "start": "NODE_ENV=production node dist/server.js"
  }
}
```

## **8Ô∏è‚É£ General Guidelines**
- Keep APIs RESTful with clean, predictable endpoint structures.
- Use JWT authentication for secured access to all endpoints.
- Follow Role-Based Access Control (RBAC) to manage permissions.
- Version APIs using `/api/v1/...` for backward compatibility.
- Rate-limit requests to prevent abuse.
- **NEVER** use Express.js or standalone servers for any server implementations
- **ALWAYS** use Next.js Route Handlers in `src/app/api/`
- **NEVER** create a standalone server.js or index.ts file
- All API responses should follow:
  ```json
  {
    "success": true/false,
    "message": "Description",
    "data": {...}
  }
  ```

## **üö´ Prohibited Practices**
- NO standalone server implementations (e.g., Express, Koa, Fastify)
- NO server.js or index.ts files at project root
- NO custom server configurations
- NO direct database access outside of service layer
- NO mixing of Next.js and standalone server code

## **‚úÖ Required Server Structure**
```
src/
  ‚îú‚îÄ‚îÄ app/
  ‚îÇ   ‚îî‚îÄ‚îÄ api/           # All API routes MUST be here
  ‚îÇ       ‚îú‚îÄ‚îÄ [endpoint]/
  ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ route.ts      # Next.js Route Handler
  ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ validation.ts  # Request validation
  ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ schema.ts      # Data schema
  ‚îÇ       ‚îî‚îÄ‚îÄ ...
  ‚îî‚îÄ‚îÄ lib/
      ‚îú‚îÄ‚îÄ services/      # Business logic & data access
      ‚îÇ   ‚îú‚îÄ‚îÄ hosts.ts
      ‚îÇ   ‚îî‚îÄ‚îÄ ...
      ‚îî‚îÄ‚îÄ middleware/    # API middleware
          ‚îú‚îÄ‚îÄ auth.ts
          ‚îî‚îÄ‚îÄ validate.ts
```

---

## **9Ô∏è‚É£ Backend Best Practices**

### **Core Principles**

- Use TypeScript for type safety and better developer experience
- Implement proper error handling and logging
- Follow RESTful API design principles
- Use middleware for cross-cutting concerns
- Implement proper authentication and authorization
- Handle environment configuration properly
- Follow security best practices

### **API Route Structure**

```typescript
// src/app/api/projects/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { validateRequest } from '@/lib/middleware/validate';
import { ProjectSchema } from '@/lib/schemas/project';
import { getProjects, createProject } from '@/lib/services/projects';

export async function GET() {
  try {
    const session = await getServerSession();
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const projects = await getProjects();
    return NextResponse.json({ success: true, data: projects });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to fetch projects' },
      { status: 500 }
    );
  }
}

export async function POST() {
  try {
    const session = await getServerSession();
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const validatedData = await validateRequest(ProjectSchema);
    const project = await createProject(validatedData);
    
    return NextResponse.json(
      { success: true, data: project },
      { status: 201 }
    );
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to create project' },
      { status: 500 }
    );
  }
}
```

### **Error Handling**

```typescript
// src/lib/utils/errors.ts
export class AppError extends Error {
  constructor(
    public statusCode: number,
    public message: string,
    public isOperational = true
  ) {
    super(message);
    Object.setPrototypeOf(this, AppError.prototype);
  }
}

// src/middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  try {
    // Middleware logic
    return NextResponse.next();
  } catch (error) {
    if (error instanceof AppError) {
      return NextResponse.json(
        { status: 'error', message: error.message },
        { status: error.statusCode }
      );
    }
    
    // Log unexpected errors
    console.error('Unexpected error:', error);
    return NextResponse.json(
      { status: 'error', message: 'Internal server error' },
      { status: 500 }
    );
  }
}
```

### **Authentication**

```typescript
// src/server/middleware/auth.ts
import { verifyToken } from '../utils/jwt';

export const isAuthenticated = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      throw new AppError(401, 'No token provided');
    }

    const decoded = await verifyToken(token);
    req.user = decoded;
    next();
  } catch (error) {
    next(new AppError(401, 'Invalid token'));
  }
};
```

### **Request Validation**

```typescript
// src/server/middleware/validate.ts
import { Schema } from 'zod';

export const validateRequest = (schema: Schema) => {
  return async (req: Request, res: Response, next: NextFunction) => {
    try {
      await schema.parseAsync(req.body);
      next();
    } catch (error) {
      next(new AppError(400, 'Invalid request data'));
    }
  };
};
```


### **Best Practices**

#### **API Design**
- Use proper HTTP methods (GET, POST, PUT, DELETE)
- Return appropriate status codes
- Version your APIs
- Use query parameters for filtering
- Implement pagination for lists
- Use proper error responses

#### **Security**
- Validate all inputs
- Sanitize database queries
- Use HTTPS in production
- Implement rate limiting
- Set security headers
- Handle CORS properly
- Store secrets securely

#### **Performance**
- Implement caching where appropriate
- Use connection pooling
- Optimize database queries
- Implement proper indexing
- Handle concurrent requests
- Use compression

#### **Testing**
- Write unit tests for utilities
- Test API endpoints
- Mock external services
- Test error scenarios
- Use proper test data
- Implement integration tests

#### **Logging**
- Use proper logging levels
- Include request context
- Log important operations
- Handle sensitive data
- Implement audit logging
- Use proper logging format

#### **Code Organization**
- Follow modular architecture
- Separate concerns properly
- Use dependency injection
- Implement service layer
- Keep controllers thin
- Use proper naming conventions

