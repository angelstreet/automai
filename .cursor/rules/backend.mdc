---
description: Backend Best Practices
globs: src/app/api/**/*.{ts,js}, src/lib/**/*.{ts,js}
alwaysApply: false
---
# Backend Best Practices

## **1Ô∏è‚É£ Server Architecture**
- Use TypeScript for server implementation
- Implement custom server in `server.ts` at project root
- Organize server components in a service layer
- Lazy-load WebSocket functionality when needed
- Follow a modular approach with clear separation of concerns

## **1Ô∏è‚É£0Ô∏è‚É£ Authentication Middleware Best Practices**

### **Path-Based Authentication**

When implementing authentication middleware, follow these critical guidelines:

1. **Precise Path Matching**: Never use loose string matching (like `includes()`) for protected routes
   ```typescript
   // ‚ùå INCORRECT - Too loose, can cause false matches
   const isProtectedRoute = request.nextUrl.pathname.includes('/dashboard');
   
   // ‚úÖ CORRECT - Parse path parts and match exactly
   const pathParts = request.nextUrl.pathname.split('/').filter(Boolean);
   const isProtectedRoute = pathParts.some(part => part === 'dashboard');
   ```

2. **Single Source of Truth**: Server middleware should be the single authority for authentication
   ```typescript
   // ‚úÖ CORRECT - Server middleware handles unauthenticated users
   if (!token && isProtectedRoute) {
     return NextResponse.redirect(loginUrl);
   }
   
   // ‚ùå INCORRECT - Don't duplicate auth logic in client components
   // Don't add client-side redirects for unauthenticated users
   ```

3. **Proper Path Structure Handling**: Account for internationalization in path structure
   ```typescript
   // ‚úÖ CORRECT - Handle i18n paths properly
   const pathParts = request.nextUrl.pathname.split('/').filter(Boolean);
   const locale = pathParts[0];
   const validLocale = locales.includes(locale) ? locale : defaultLocale;
   ```

4. **Comprehensive Logging**: Log authentication decisions for debugging
   ```typescript
   // ‚úÖ CORRECT - Log auth decisions
   console.log('Auth token check:', { 
     path: request.nextUrl.pathname, 
     hasToken: !!token,
     isProtectedRoute
   });
   ```

5. **Clear Redirect Logic**: Include proper parameters in redirects
   ```typescript
   // ‚úÖ CORRECT - Include callbackUrl for post-login redirect
   const loginUrl = new URL(`/${validLocale}/login`, request.url);
   loginUrl.searchParams.set('callbackUrl', request.nextUrl.pathname);
   return NextResponse.redirect(loginUrl);
   ```

### **Middleware Implementation Example**

```typescript
// src/middleware.ts
export default async function middleware(request: NextRequest) {
  // Extract path parts for better matching
  const pathParts = request.nextUrl.pathname.split('/').filter(Boolean);
  
  // Define protected paths
  const protectedPaths = ['dashboard', 'admin', 'repositories', 'terminals', 'settings'];
  
  // Check if any part of the path matches a protected path
  const isProtectedRoute = protectedPaths.some(protectedPath => 
    pathParts.some(part => part === protectedPath)
  );
  
  if (isProtectedRoute) {
    const token = await getToken({ req: request });
    
    if (!token) {
      // Extract locale from URL for redirect
      const locale = pathParts[0];
      const validLocale = locales.includes(locale) ? locale : defaultLocale;
      
      // Redirect to login with the current URL as the callbackUrl
      const loginUrl = new URL(`/${validLocale}/login`, request.url);
      loginUrl.searchParams.set('callbackUrl', request.nextUrl.pathname);
      return NextResponse.redirect(loginUrl);
    }
  }
  
  return NextResponse.next();
}
```

### **Client-Side Authentication Handling**

For client components, focus only on:
1. Redirecting authenticated users away from login pages
2. Handling tenant mismatches for authenticated users
3. Showing loading states during authentication checks

```typescript
// Client component auth handling
useEffect(() => {
  // Only redirect if user is authenticated and on login page
  if (session?.user && user && !userError && pathname.includes('/login')) {
    router.replace(`/${locale}/${user.tenantName || 'trial'}/dashboard`);
  }
}, [session, user, pathname]);
```

## **1Ô∏è‚É£1Ô∏è‚É£ Authentication Flow and NextAuth Configuration**

### **Authentication Workflow**

The authentication flow in our application follows these steps:

1. **User initiates login** via Google, GitHub, or credentials
2. **Auth provider callback** is processed by NextAuth
3. **Server middleware** validates token and authorizes access
4. **Auth-redirect page** processes successful login and redirects to dashboard
5. **UserContext** manages session state across the application

### **Critical NextAuth Configuration**

When configuring NextAuth:

1. **Route Groups and URLs**: 
   ```typescript
   // ‚ùå INCORRECT - Using route groups in redirect URLs
   pages: {
     newUser: '/en/(auth)/auth-redirect',
   }
   
   // ‚úÖ CORRECT - Never include route groups in URLs
   pages: {
     newUser: '/en/auth-redirect',
   }
   ```

2. **Redirect Callback**: Always sanitize URLs to remove route groups
   ```typescript
   async redirect({ url, baseUrl }) {
     // Handle OAuth callbacks
     if (url.includes('/api/auth/callback/')) {
       return `${baseUrl}/en/auth-redirect`;
     }
     
     // Clean route groups from URLs
     if (url.includes('/(')) {
       return url.replace(/\/\([^)]+\)/g, '');
     }
     
     return url;
   }
   ```

3. **File Structure**: Avoid duplicating auth pages in route groups
   - Keep authentication pages in consistent locations
   - Prefer `/app/[locale]/auth-redirect` over `/app/[locale]/(auth)/auth-redirect`

4. **Session Handling**: 
   ```typescript
   session: {
     strategy: 'jwt', // Use JWT for stateless auth
     maxAge: 24 * 60 * 60, // 24 hours
   }
   ```

### **Debugging Auth Issues**

Common auth problems and solutions:

1. **404 on Redirect**: Check for route groups in URLs, verify page exists
2. **Missing Cookies**: Ensure secure and httpOnly settings match environment
3. **Token Validation**: Add detailed logging for token validity checks

## **1Ô∏è‚É£2Ô∏è‚É£ General Guidelines**
- Keep APIs RESTful with clean, predictable endpoint structures.
- Use JWT authentication for secured access to all endpoints.
- Follow Role-Based Access Control (RBAC) to manage permissions.
- Version APIs using `/api/v1/...` for backward compatibility.
- Rate-limit requests to prevent abuse.
- **NEVER** use Express.js or standalone servers for any server implementations
- **ALWAYS** use Next.js Route Handlers in `src/app/api/`
- **NEVER** create a standalone server.js or index.ts file
- All API responses should follow:
  ```json
  {
    "success": true/false,
    "message": "Description",
    "data": {...}
  }
  ```

## **üö´ Prohibited Practices**
- NO standalone server implementations (e.g., Express, Koa, Fastify)
- NO server.js or index.ts files at project root
- NO custom server configurations
- NO direct database access outside of service layer
- NO mixing of Next.js and standalone server code

## **‚úÖ Required Server Structure**
```
src/
  ‚îú‚îÄ‚îÄ app/
  ‚îÇ   ‚îî‚îÄ‚îÄ api/           # All API routes MUST be here
  ‚îÇ       ‚îú‚îÄ‚îÄ [endpoint]/
  ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ route.ts      # Next.js Route Handler
  ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ validation.ts  # Request validation
  ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ schema.ts      # Data schema
  ‚îÇ       ‚îî‚îÄ‚îÄ ...
  ‚îî‚îÄ‚îÄ lib/
      ‚îú‚îÄ‚îÄ services/      # Business logic & data access
      ‚îÇ   ‚îú‚îÄ‚îÄ hosts.ts
      ‚îÇ   ‚îî‚îÄ‚îÄ ...
      ‚îî‚îÄ‚îÄ middleware/    # API middleware
          ‚îú‚îÄ‚îÄ auth.ts
          ‚îî‚îÄ‚îÄ validate.ts
```

---

## **9Ô∏è‚É£ Backend Best Practices**

### **Core Principles**

- Use TypeScript for type safety and better developer experience
- Implement proper error handling and logging
- Follow RESTful API design principles
- Use middleware for cross-cutting concerns
- Implement proper authentication and authorization
- Handle environment configuration properly
- Follow security best practices

### **API Route Structure**

```typescript
// src/app/api/projects/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { validateRequest } from '@/lib/middleware/validate';
import { ProjectSchema } from '@/lib/schemas/project';
import { getProjects, createProject } from '@/lib/services/projects';

export async function GET() {
  try {
    const session = await getServerSession();
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const projects = await getProjects();
    return NextResponse.json({ success: true, data: projects });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to fetch projects' },
      { status: 500 }
    );
  }
}

export async function POST() {
  try {
    const session = await getServerSession();
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const validatedData = await validateRequest(ProjectSchema);
    const project = await createProject(validatedData);
    
    return NextResponse.json(
      { success: true, data: project },
      { status: 201 }
    );
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to create project' },
      { status: 500 }
    );
  }
}
```

### **Error Handling**

```typescript
// src/lib/utils/errors.ts
export class AppError extends Error {
  constructor(
    public statusCode: number,
    public message: string,
    public isOperational = true
  ) {
    super(message);
    Object.setPrototypeOf(this, AppError.prototype);
  }
}

// src/middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  try {
    // Middleware logic
    return NextResponse.next();
  } catch (error) {
    if (error instanceof AppError) {
      return NextResponse.json(
        { status: 'error', message: error.message },
        { status: error.statusCode }
      );
    }
    
    // Log unexpected errors
    console.error('Unexpected error:', error);
    return NextResponse.json(
      { status: 'error', message: 'Internal server error' },
      { status: 500 }
    );
  }
}
```

### **Authentication**

```typescript
// src/server/middleware/auth.ts
import { verifyToken } from '../utils/jwt';

export const isAuthenticated = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      throw new AppError(401, 'No token provided');
    }

    const decoded = await verifyToken(token);
    req.user = decoded;
    next();
  } catch (error) {
    next(new AppError(401, 'Invalid token'));
  }
};
```

### **Request Validation**

```typescript
// src/server/middleware/validate.ts
import { Schema } from 'zod';

export const validateRequest = (schema: Schema) => {
  return async (req: Request, res: Response, next: NextFunction) => {
    try {
      await schema.parseAsync(req.body);
      next();
    } catch (error) {
      next(new AppError(400, 'Invalid request data'));
    }
  };
};
```


### **Best Practices**

#### **API Design**
- Use proper HTTP methods (GET, POST, PUT, DELETE)
- Return appropriate status codes
- Version your APIs
- Use query parameters for filtering
- Implement pagination for lists
- Use proper error responses

#### **Security**
- Validate all inputs
- Sanitize database queries
- Use HTTPS in production
- Implement rate limiting
- Set security headers
- Handle CORS properly
- Store secrets securely

#### **Performance**
- Implement caching where appropriate
- Use connection pooling
- Optimize database queries
- Implement proper indexing
- Handle concurrent requests
- Use compression

#### **Testing**
- Write unit tests for utilities
- Test API endpoints
- Mock external services
- Test error scenarios
- Use proper test data
- Implement integration tests

#### **Logging**
- Use proper logging levels
- Include request context
- Log important operations
- Handle sensitive data
- Implement audit logging
- Use proper logging format

#### **Code Organization**
- Follow modular architecture
- Separate concerns properly
- Use dependency injection
- Implement service layer
- Keep controllers thin
- Use proper naming conventions

## **1Ô∏è‚É£ Authentication & Session Management**
- Use centralized auth in middleware
- Avoid individual route auth checks
- Implement proper session caching
- Use Next-Auth with proper configuration

### **Middleware Auth Pattern**
```typescript
// src/middleware.ts
export default async function middleware(request: NextRequest) {
  // 1. WebSocket bypass
  if (request.headers.get('upgrade')?.includes('websocket')) {
    return NextResponse.next();
  }

  // 2. Auth check for protected routes
  if (request.nextUrl.pathname.startsWith('/api/')) {
    const token = await getToken({ req: request });
    if (!token) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
  }
}
```

## **2Ô∏è‚É£ Database Connection Management**
- Use single Prisma instance (singleton pattern)
- Initialize connection only once at startup
- Implement proper error handling
- Use appropriate logging levels

### **Prisma Client Pattern**
```typescript
// src/lib/prisma.ts
const globalForPrisma = global as unknown as { prisma: PrismaClient };

export const prisma = globalForPrisma.prisma || new PrismaClient({
  log: ['error']
});

// Test connection only once at startup
if (!globalForPrisma.prisma) {
  testConnection();
}

// Save to global in development
if (process.env.NODE_ENV !== 'production') {
  globalForPrisma.prisma = prisma;
}
```

