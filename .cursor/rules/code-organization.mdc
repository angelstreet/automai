---
description: Code Organization Best Practices
globs: src/**/*.{ts,tsx}
alwaysApply: false
---

# Code Organization Best Practices

## File Size Limits

- All files should be under 300 lines of code
- Exceptions are allowed for:
  - Imported UI components from libraries (e.g., Shadcn UI)
  - Module files that are meant to be comprehensive
  - Generated code or migrations

## Current Project Structure

```
automai/
├── prisma/                   # Prisma schema and migrations at root
│   ├── schema.prisma         # Database schema with models
│   ├── migrations/           # Database migrations
│   ├── seed.ts               # Database seed script
│   └── index.ts              # Prisma client export (root-level singleton)
├── src/
│   ├── app/                  # Next.js App Router
│   │   ├── [locale]/         # Internationalized routes
│   │   │   ├── (auth)/       # Authentication routes (login, signup)
│   │   │   ├── (marketing)/  # Marketing pages with components
│   │   │   │   └── _components/ # Marketing-specific components
│   │   │   ├── [tenant]/     # Tenant-specific routes
│   │   │   │   ├── admin/    # Admin pages
│   │   │   │   ├── billing/  # Billing pages
│   │   │   │   ├── dashboard/ # Dashboard pages
│   │   │   │   │   └── _components/ # Dashboard-specific components
│   │   │   │   ├── development/ # Development pages (projects, usecases)
│   │   │   │   ├── devices/  # Devices pages
│   │   │   │   ├── hosts/    # Hosts management
│   │   │   │   │   └── _components/ # Host-specific components
│   │   │   │   ├── platforms/ # Platform management
│   │   │   │   ├── profile/  # User profile pages
│   │   │   │   ├── reports/  # Reports pages
│   │   │   │   ├── repositories/ # Git repositories management
│   │   │   │   │   └── _components/ # Repository-specific components
│   │   │   │   ├── scripts/  # Scripts management
│   │   │   │   ├── settings/ # Settings pages
│   │   │   │   ├── team/     # Team management
│   │   │   │   ├── terminals/ # Terminal access
│   │   │   │   ├── tests/    # Test management
│   │   │   │   └── usecases/ # Usecases management
│   │   │   │       └── _components/ # Usecase-specific components
│   │   │   ├── _components/  # Locale-specific shared components
│   │   │   ├── auth-redirect/ # Auth redirect handling
│   │   │   └── dashboard/    # Root dashboard page
│   │   ├── api/              # API Route Handlers
│   │   │   ├── admin/        # Admin API endpoints
│   │   │   ├── auth/         # Authentication endpoints
│   │   │   ├── fetch-all-repositories/ # Repository fetching
│   │   │   ├── git-providers/ # Git provider endpoints
│   │   │   ├── health/       # Health check endpoints
│   │   │   ├── hosts/        # Hosts API endpoints
│   │   │   ├── projects/     # Projects API endpoints
│   │   │   ├── repositories/ # Repository endpoints
│   │   │   ├── terminals/    # Terminal API endpoints
│   │   │   └── usecases/     # Usecases API endpoints
│   │   ├── auth-redirect/    # Auth redirect page
│   │   ├── layout.tsx        # Root layout
│   │   ├── globals.css       # Global styles
│   │   └── page.tsx          # Root page
│   ├── components/           # UI components
│   │   ├── auth/             # Authentication components
│   │   ├── common/           # Common reusable components
│   │   ├── dashboard/        # Dashboard components
│   │   ├── dialog/           # Dialog components
│   │   ├── form/             # Form components
│   │   │   └── PinInput/     # PIN input component
│   │   ├── icons/            # Icon components
│   │   ├── layout/           # Layout components
│   │   │   └── data/         # Layout data
│   │   ├── profile/          # Profile components
│   │   ├── providers/        # Provider components
│   │   ├── settings/         # Settings components
│   │   ├── shadcn/           # Shadcn UI components
│   │   ├── sidebar/          # Sidebar components
│   │   │   └── constants.ts  # Sidebar-specific constants
│   │   ├── theme/            # Theme components
│   │   └── ui/               # UI utility components
│   ├── config/               # Configuration files
│   ├── context/              # React context providers
│   ├── data/                 # Data files
│   ├── hooks/                # Custom React hooks
│   ├── i18n/                 # Internationalization
│   │   └── messages/         # Translation messages
│   ├── lib/                  # Shared utilities
│   │   ├── api/              # API utilities
│   │   ├── services/         # Service layer (data access)
│   │   │   └── git-providers/ # Git provider services
│   │   └── utils/            # Utility functions
│   ├── types/                # TypeScript type definitions
│   ├── utils/                # Utility functions
│   ├── auth.ts               # Authentication setup
│   ├── config.ts             # Configuration exports
│   └── middleware.ts         # Next.js middleware
├── scripts/                  # Utility scripts
├── electron/                 # Electron app configuration
├── tests/                    # Test files
├── docs/                     # Project documentation
└── [config files]            # Various configuration files
```

## Key Files and Their Purposes

### Next.js App Structure
- `src/app/layout.tsx`: Root layout component that wraps all pages
- `src/app/page.tsx`: Root page component
- `src/app/globals.css`: Global CSS styles
- `src/app/[locale]/`: Internationalized routes
- `src/app/api/`: API route handlers

### Components
- `src/components/shadcn/`: Shadcn UI components (exempt from 300-line limit)
- `src/components/layout/`: Layout components like headers, footers
- `src/components/sidebar/`: Sidebar navigation components
- `src/components/common/`: Shared reusable components
- `src/components/theme/ThemeProvider.tsx`: Theme context provider
- `src/components/auth/RouteGuard.tsx`: Authentication route protection
- `src/components/profile/ProfileDropdown.tsx`: User profile dropdown menu
- `src/components/dialog/CommandMenu.tsx`: Command palette implementation

### Hooks
- `src/hooks/use-toast.ts`: Toast notification system
- `src/hooks/useSidebar.ts`: Sidebar state management
- `src/hooks/useDialogState.tsx`: Dialog/modal state management
- `src/hooks/useMobile.tsx`: Mobile device detection

### Library and Utilities
- `src/lib/services/websocket.ts`: WebSocket server implementation
- `src/lib/prisma.ts`: Prisma client singleton for Next.js
- `src/lib/env.ts`: Environment configuration with validation
- `src/lib/auth.ts`: Authentication utilities
- `src/lib/features.ts`: Feature flag system
- `src/lib/logger.ts`: Logging utilities
- `src/lib/cache.ts`: Caching system

### Types and Constants
- `src/types/`: TypeScript type definitions
- `src/components/[feature]/constants.ts`: Feature-specific constants

### Authentication
- `src/auth.ts`: NextAuth.js configuration

### Middleware
- `src/middleware.ts`: Next.js middleware for routing and auth

### Database
- `prisma/schema.prisma`: Database schema definition
- `prisma/index.ts`: Root-level Prisma client singleton
- `prisma/migrations/`: Database migrations
- `prisma/seed.ts`: Database seed script

## Breaking Up Large Files

### Components

1. **Directory Structure**:
   - Create a directory with the component name
   - Use `index.tsx` as the main component file
   - Place child components in the same directory
   - Include a `constants.ts` file for component-specific constants

   ```
   Button/
   ├── index.tsx         # Main Button component
   ├── ButtonIcon.tsx    # Icon subcomponent
   ├── ButtonLabel.tsx   # Label subcomponent
   └── constants.ts      # Button-specific constants
   ```

2. **Naming Conventions**:
   - Parent component: Same name as directory (e.g., `Button`)
   - Child components: ParentNameChildPart (e.g., `ButtonIcon`)
   - Hooks: use[ComponentName]State (e.g., `useButtonState`)

3. **Implementation Strategy**:
   - Extract complex UI sections into subcomponents
   - Move state management to custom hooks
   - Keep the main component as a composition of smaller parts

### Pages

1. **Directory Structure**:
   - Create a `_components` directory for page-specific components
   - Use `actions.ts` or `api.ts` for data fetching logic
   - Use `constants.ts` for page-specific constants

   ```
   dashboard/
   ├── page.tsx              # Main page component
   ├── actions.ts            # Server actions
   ├── constants.ts          # Dashboard-specific constants
   └── _components/
       ├── DashboardHeader.tsx
       ├── DashboardStats.tsx
       └── DashboardTable.tsx
   ```

2. **Implementation Strategy**:
   - Extract page sections into separate components
   - Move data fetching to server actions or API functions
   - Keep the main page component focused on layout and composition

### Constants and Configuration

1. **Directory Structure**:
   - Co-locate constants with the components or features that use them
   - Use a `constants.ts` file within each feature directory

   ```
   components/
   ├── sidebar/
   │   ├── index.tsx       # Main sidebar component
   │   ├── SidebarItem.tsx # Sidebar item component
   │   └── constants.ts    # Sidebar-specific constants
   ├── dialog/
   │   ├── index.tsx       # Main dialog component
   │   └── constants.ts    # Dialog-specific constants
   ```

2. **Naming Conventions**:
   - Constant values: `UPPER_SNAKE_CASE`
   - Constant objects: `PascalCase`
   - Enums: `PascalCase`

3. **Implementation Strategy**:
   - Group constants by feature or component
   - Co-locate constants with the code that uses them
   - Document complex constants with comments

### Utility Functions

1. **Directory Structure**:
   - Group by functionality in separate files
   - Create an index.ts file to re-export functions

   ```
   utils/
   ├── index.ts       # Re-exports
   ├── string.ts      # String manipulation utilities
   ├── date.ts        # Date formatting utilities
   └── validation.ts  # Form validation utilities
   ```

2. **Implementation Strategy**:
   - Keep functions small and focused on a single task
   - Group related functions in the same file
   - Use descriptive names that indicate what the function does

### API Routes

1. **Directory Structure**:
   - Split validation logic into separate files
   - Move business logic to service layer

   ```
   app/api/users/
   ├── route.ts       # Route handler
   ├── validation.ts  # Request validation
   └── schema.ts      # Data schema
   ```

2. **Implementation Strategy**:
   - Keep route handlers focused on request/response handling
   - Move business logic to service layer in `src/lib/services`
   - Extract validation to separate files

## Code Organization Within Files

1. **Imports Organization**:
   ```typescript
   // External dependencies
   import { useState } from 'react';
   import { z } from 'zod';
   
   // Internal modules
   import { Button } from '@/components/shadcn/button';
   import { useAuth } from '@/lib/auth';
   
   // Types
   import type { User } from '@/types';
   
   // Styles
   import styles from './styles.module.css';
   ```

2. **Component Structure**:
   ```typescript
   // Types
   interface ButtonProps {
     // ...
   }
   
   // Helper functions
   function formatLabel(label: string) {
     // ...
   }
   
   // Main component
   export function Button({ label, ...props }: ButtonProps) {
     // ...
   }
   ```

3. **Hooks Organization**:
   ```typescript
   export function useComponentState() {
     // State declarations first
     const [isLoading, setIsLoading] = useState(false);
     
     // Derived state next
     const isDisabled = isLoading || someOtherCondition;
     
     // Event handlers next
     const handleClick = () => {
       // ...
     };
     
     // Effects last
     useEffect(() => {
       // ...
     }, []);
     
     // Return values
     return {
       isLoading,
       isDisabled,
       handleClick
     };
   }
   ```

## Service Layer Pattern

```mermaid
graph TD
    A[Service Layer] --> B[Server Component]
    B --> C[Client Component]
    C --> D[UI State & Mutations]
    D --> A
```

## Protected Service Files
Files in `src/lib/services` are protected and should not be modified without careful review.
Each service file should have the following header:
```typescript
/**
 * @fileoverview Service Layer Implementation
 * ⚠️ DO NOT MODIFY THIS FILE ⚠️
 * Last validated: [DATE]
 */
```

## Component Organization

1. **Server Components**:
   - Located in `src/app/[feature]/page.tsx`
   - Use service layer for data fetching
   - Pass data to client components

2. **Client Components**:
   - Located in `src/app/[feature]/_components/`
   - Handle UI interactions and mutations
   - Receive initial data as props

3. **Shared Components**:
   - Located in `src/components/`
   - Reusable across features

## Data Flow Pattern

```mermaid
graph TD
    A[Service Layer] --> B[Server Component]
    B --> C[Client Component]
    C --> D[UI State & Mutations]
    D --> A
```