---
description: 
globs: 
alwaysApply: true
---
# General Development Guidelines

**IMPORTANT: This is the primary rule file for the entire codebase. Always consult this document first before making any changes.**

## Architectural Principles

- ✅ **Context Providers are Data-Only**: Context providers should only contain data without business logic
- ✅ **Business Logic in Hooks**: All business logic should reside in dedicated hooks in /src/hooks/* directory
- ✅ **Clear Separation of Concerns**: 
  - Context Providers: Hold state only
  - Logic Hooks: Contain business logic, data fetching, and data manipulation
  - UI Components: Render UI and handle user interactions

## React Best Practices

- ✅ **Use React's Component Model**: Components should communicate through props and events
- ✅ **Avoid Direct DOM Manipulation**: Never use `document.getElementById()`, `document.querySelector()`, etc.
- ✅ **Don't Call DOM Methods**: Never use `.click()`, `.focus()`, or other direct DOM manipulation methods
- ✅ **Use Events for Cross-Component Communication**: Custom events provide loose coupling between components
- ❌ **Avoid Imperative DOM Code**: Code like `document.getElementById('some-id')?.click()` is forbidden
- ✅ **Prefer Declarative Patterns**: Use state management, context, or events for component communication

## Planning and Communication
- NEVER modify a file if mentionned at top #NEVER MODIFY or #NEVER EDIT
- ALWAYS provide a clear plan before implementing code changes
- Wait for explicit agreement before making changes
- Document any deviations from the approved plan
- Make minimal focused changes to achieve the goal but always respect best practices
- NEVER edit a component ui layout without agreement
- NEVER use mock data unless explicitly requested
- NEVER create hardcoded/fake values (like IDs, profile_ids, etc.) even for testing purposes unless specifically asked

## Process
- Review relevant code before proposing changes
- Understand the purpose and context of existing code
- Ask question if needed and dont edit code if not sur
- Break down complex changes into smaller, manageable parts

## Code Quality
- Write self-documenting code with clear variable/function names
- Add comments for complex logic or business rules
- Follow established patterns from similar components
- Keep components under 300 lines, functions under 50 lines

## Development Restrictions
- NEVER run servers without explicit permission
- Use curl and static analysis for debugging when possible
- Propose server testing with clear justification when needed
- NEVER modify shadcn components directly

## Server Action Constraints

- ✅ ONLY export async functions from 'use server' files
- ❌ NEVER export constants, non-async functions, or plain objects from server action files
- ✅ Define event constants in client components to avoid "Only async functions are allowed" errors
- ✅ Use window.dispatchEvent() in client components after successful mutations to trigger UI refreshes
- ✅ Create dedicated event listener components to centralize refresh logic

## Next.js Cookie Handling (CRITICAL)

- ✅ ALWAYS await the cookies() function when using it in server components/actions
  - Example: `const cookieStore = await cookies();`
- ❌ NEVER use cookies() without awaiting it
  - BAD: `const cookieStore = cookies();` - This causes infinite loops and "cookies() should be awaited" errors
- ✅ ALWAYS properly handle cookie access in middleware and API routes with proper async/await
- ✅ When passing cookieStore to functions, ensure the cookie value was properly awaited first

### Cookie Handling Examples

#### ❌ Incorrect (causes errors):
```typescript
// This pattern causes "cookies() should be awaited" errors
export async function someServerAction() {
  const cookieStore = cookies();  // WRONG: not awaited
  const supabase = await createClient(cookieStore);
}
```

#### ✅ Correct:
```typescript
// This is the correct pattern 
export async function someServerAction() {
  const cookieStore = await cookies();  // CORRECT: properly awaited
  const supabase = await createClient(cookieStore);
}
```
## Logging Standards

### Format and Structure

- ✅ ALWAYS use the format `[@layer:file:function]` as prefix for all logs
  - Example: `[@action:repositories:getRepository]` or `[@db:db-repository:createRepository]`
- ✅ ALWAYS log both the start and successful completion of operations
  - Start: `[@action:repositories:getRepository] Starting to fetch repository: ${id}`
  - Success: `[@action:repositories:getRepository] Successfully fetched repository: ${id}`
- ✅ ALWAYS include relevant IDs in logs (repositoryId, teamId, userId, etc.)
- ✅ ALWAYS use structured logging for objects where appropriate
- ❌ NEVER log sensitive information (tokens, passwords, full credentials)

### Error Handling

- ✅ ALWAYS include severity level in logs for errors and warnings
  - Example: `[@db:db-repository:getRepository] ERROR: Failed to fetch repository: ${error.message}`
- ✅ ALWAYS log the full context of errors
  - Example: `[@db:db-repository:getRepository] ERROR: Failed with id ${repositoryId}, status: failed`
- ✅ ALWAYS catch and log exceptions at appropriate boundaries
- ❌ NEVER swallow exceptions without logging

### Standardization

- ✅ ALWAYS use `console.log`, `console.error`, and `console.warn` for logging
- ✅ ALWAYS use consistent formats for similar log messages
- ✅ ALWAYS include tenant/user ID in logs when available for security auditing
- ❌ NEVER use inconsistent prefixes in log messages

## Internationalization Guidelines (i18n)

### Translation Keys and Namespaces

- ✅ ALWAYS use lowercase for namespace keys in translation files (e.g., `"team"` not `"Team"`)
- ✅ ALWAYS check both `en.json` and `fr.json` when adding or modifying translations
- ✅ ALWAYS keep translation keys consistent between language files
- ✅ ALWAYS organize related translations under the same namespace
- ❌ NEVER mix casing styles for the same namespace (e.g., `"Team"` in one file and `"team"` in another)
- ❌ NEVER leave translation keys without corresponding entries in all language files

### Translation Usage in Components

- ✅ ALWAYS import translation functions using the appropriate namespace: `const t = await getTranslations('team')`
- ✅ ALWAYS handle potential missing translations with fallbacks when necessary
- ✅ ALWAYS wrap dynamic content in translation functions: `t('deleteWarning', { name: itemName })`
- ❌ NEVER hardcode text that should be translatable
- ❌ NEVER use different namespaces for related UI elements

### Translation File Maintenance

- ✅ ALWAYS use string keys that are descriptive of the text's purpose, not the text itself
- ✅ ALWAYS organize translations hierarchically with related items grouped together
- ✅ ALWAYS update all language files simultaneously when adding new keys
- ✅ ALWAYS keep translation files sorted in a consistent order
- ❌ NEVER remove translations without checking for references
- ❌ NEVER modify translation structure without updating all usage instances

## Event-Based Communication Pattern

- ✅ Use custom browser events for communication between components
- ✅ Create dedicated Event Listener components (like `HostsEventListener`) for each feature domain
- ✅ Define all event constants in an object inside the EventListener component:
  ```typescript
  const HostsEvents = {
    // UI Control Events
    OPEN_HOST_DIALOG: 'OPEN_HOST_DIALOG',
    TOGGLE_HOST_VIEW_MODE: 'TOGGLE_HOST_VIEW_MODE',
    
    // Data Refresh Events
    REFRESH_HOSTS: 'REFRESH_HOSTS',
    
    // Domain-specific Actions
    HOST_TESTING_START: 'HOST_TESTING_START',
    HOST_TESTING_COMPLETE: 'HOST_TESTING_COMPLETE',
  };
  ```
- ✅ Group events by category with comments (UI Control, Data Refresh, Domain-specific Actions)
- ✅ Export the events object directly from EventListener: `export { HostsEvents };`
- ✅ For view toggle patterns:
  - Use Zustand for persistent view mode state: `useHostViewStore`
  - Dispatch events after toggle for cross-component coordination: `window.dispatchEvent(new Event(HostsEvents.TOGGLE_HOST_VIEW_MODE))`
  - Include consistent logging for all events: `console.log('[@component:ComponentName] Event description')`
- ✅ Always use CustomEvent with detailed data for events that carry information:
  ```typescript
  window.dispatchEvent(
    new CustomEvent(HostsEvents.HOST_TESTING_START, {
      detail: { hostId: host.id },
    }),
  );
  ```
- ✅ Use consistent event listener registration pattern with TypeScript cast:
  ```typescript
  window.addEventListener(
    HostsEvents.HOST_TESTING_START,
    handleHostTestingStart as EventListener,
  );
  ```
- ✅ Always clean up event listeners in the return function of useEffect
- ✅ Document purpose and data structure of each event in comments
- ❌ NEVER rely on event-based communication for security-critical operations
- ❌ NEVER use direct DOM manipulation for component communication
- ❌ NEVER create cross-domain events (e.g., CICD events should not be handled by HostsEventListener)
- ❌ NEVER duplicate event handling logic across multiple components