---
description: 
globs: 
alwaysApply: true
---
# General Development Guidelines

**IMPORTANT: This is the primary rule file for the entire codebase. Always consult this document first before making any changes.**

## Planning and Communication
- NEVER modify a file if mentionned at top #NEVER MODIFY
- ALWAYS provide a clear plan before implementing code changes
- Wait for explicit agreement before making changes
- Document any deviations from the approved plan
- Make minimal focused changes to achieve the goal but always respect best practices
- NEVER edit a component ui layout without agreement
- NEVER use mock data unless explicitly requested
- NEVER create hardcoded/fake values (like IDs, profile_ids, etc.) even for testing purposes unless specifically asked

## Process
- Review relevant code before proposing changes
- Understand the purpose and context of existing code
- Ask question if needed and dont edit code if not sur
- Break down complex changes into smaller, manageable parts

## Code Quality
- Write self-documenting code with clear variable/function names
- Add comments for complex logic or business rules
- Follow established patterns from similar components
- Keep components under 300 lines, functions under 50 lines

## Development Restrictions
- NEVER run servers without explicit permission
- Use curl and static analysis for debugging when possible
- Propose server testing with clear justification when needed
- NEVER modify shadcn components directly

## Internationalization Guidelines (i18n)

### Translation Keys and Namespaces

- ✅ ALWAYS use lowercase for namespace keys in translation files (e.g., `"team"` not `"Team"`)
- ✅ ALWAYS check both `en.json` and `fr.json` when adding or modifying translations
- ✅ ALWAYS keep translation keys consistent between language files
- ✅ ALWAYS organize related translations under the same namespace
- ❌ NEVER mix casing styles for the same namespace (e.g., `"Team"` in one file and `"team"` in another)
- ❌ NEVER leave translation keys without corresponding entries in all language files

### Translation Usage in Components

- ✅ ALWAYS import translation functions using the appropriate namespace: `const t = await getTranslations('team')`
- ✅ ALWAYS handle potential missing translations with fallbacks when necessary
- ✅ ALWAYS wrap dynamic content in translation functions: `t('deleteWarning', { name: itemName })`
- ❌ NEVER hardcode text that should be translatable
- ❌ NEVER use different namespaces for related UI elements

### Translation File Maintenance

- ✅ ALWAYS use string keys that are descriptive of the text's purpose, not the text itself
- ✅ ALWAYS organize translations hierarchically with related items grouped together
- ✅ ALWAYS update all language files simultaneously when adding new keys
- ✅ ALWAYS keep translation files sorted in a consistent order
- ❌ NEVER remove translations without checking for references
- ❌ NEVER modify translation structure without updating all usage instances