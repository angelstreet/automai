---
description: Core Principles and General Development Guidelines
globs: ["**/*"]
alwaysApply: true
---

# General Development Guidelines

## CRITICAL RULES - ALWAYS FOLLOW

1. **✅ ALWAYS review all applicable rules before taking action**
   - Read through relevant Cursor rules before starting work
   - Understand project-specific guidelines and constraints
   - When in doubt, ask for clarification

2. **✅ NEVER run servers without explicit permission**
   - Do not run `npm run dev` or any server unless specifically asked
   - Use curl and static analysis for debugging instead of running servers
   - If server testing is necessary, propose it first with clear justification
   - For debugging authentication/API issues, use curl or similar tools instead

3. **✅ ALWAYS provide clear plans before implementing changes**
   - Outline your approach before writing code
   - Get explicit agreement on the plan
   - Document any deviations from the approved plan

4. **✅ ALWAYS make minimal, focused changes**
   - Make the smallest change necessary to achieve the goal
   - Avoid refactoring unrelated code
   - Keep changes focused on solving the specific issue

5. **✅ ALWAYS adhere to the three-layer architecture**
   - Server DB Layer (Core) - `/src/lib/supabase/db.ts` and `/src/lib/supabase/auth.ts`
   - Server Actions Layer (Bridge) - `/src/app/actions/*.ts` or feature-specific actions
   - Client Hooks Layer (Interface) - `/src/hooks/*.ts` or feature-specific hooks

6. **✅ NEVER modify shadcn components**
   - Do not modify any files in `/src/components/shadcn/`
   - These are UI primitives that should remain unchanged
   - Extend functionality by composing components, not modifying them

## Architecture Overview

### Next.js App Router

- 100% App Router based architecture (no Pages Router components)
- Server Components by default, Client Components only when necessary
- Feature-first organization approach

### Project Structure

```
📁 app/
  📁 [locale]/
    📁 [tenant]/
      📁 feature/           # Feature directory (e.g., dashboard, hosts, deployment)
        📁 _components/     # Feature-specific components
        📄 actions.ts       # Feature-specific server actions
        📄 constants.ts     # Feature-specific constants
        📄 hooks.ts         # Feature-specific hooks
        📄 page.tsx         # Feature page component
        📄 types.ts         # Feature-specific types
        📄 utils.ts         # Feature-specific utilities
📁 components/            # Shared components
  📁 ui/                  # UI primitives
  📁 layout/              # Layout components
  📁 form/                # Form components
  📁 shadcn/              # shadcn components (never modify)
📁 lib/                   # Core utilities and services
  📁 supabase/            # Supabase integration
📁 hooks/                 # Shared hooks
📁 context/               # Context providers
📁 types/                 # Shared type definitions
```

### Feature-First Organization

- Group all related files for a feature together in its own directory
- Feature directories live in `/app/[locale]/[tenant]/`
- Feature-specific code should be in the feature directory:
  - Components in `_components/`
  - Server actions in `actions.ts`
  - Types in `types.ts`
  - Constants in `constants.ts`
  - Custom hooks in `hooks.ts`
  - Utility functions in `utils.ts`
- Only extract code to shared locations when used across multiple features

## Core Principles

1. **Thoughtful Change Management**
   - Always provide a plan before making changes
   - Wait for explicit agreement before implementing
   - Document significant architectural decisions

2. **Code Quality**
   - Write clean, maintainable, and self-documenting code
   - Follow established patterns and conventions
   - Keep functions and components small and focused

3. **User Experience**
   - Prioritize user experience in all design decisions
   - Ensure interfaces are intuitive and accessible
   - Optimize for performance and responsiveness

4. **Security and Privacy**
   - Treat security as a core requirement, not an add-on
   - Follow secure coding practices
   - Protect user data and respect privacy

5. **Testing and Quality Assurance**
   - Write tests for new features and bug fixes
   - Verify changes work across supported environments
   - Use automated testing where appropriate

## Critical Process Guidelines

### Change Management Process

1. **✅ ALWAYS provide a plan before implementing changes**
   - Analyze the issue or requirement
   - Outline proposed changes
   - Identify potential impacts
   - Get explicit agreement before proceeding

2. **✅ ALWAYS provide context for why a change is needed**
   - Explain the problem being solved
   - Describe the expected outcome
   - Reference relevant issues or requirements

3. **✅ Minimize code changes**
   - Make the smallest change necessary to achieve the goal
   - Avoid refactoring unrelated code in the same PR
   - Keep pull requests focused on a single concern

### Safety Measures

1. **✅ NEVER edit code without approval**
   - Always wait for explicit agreement on the plan
   - If requirements change, update the plan and seek approval again
   - Document any deviations from the approved plan

2. **✅ NEVER deploy untested code**
   - Test changes thoroughly before submitting
   - Verify changes in a development environment
   - Include appropriate unit, integration, or e2e tests

3. **✅ NEVER commit secrets or sensitive data**
   - Keep secrets in environment variables or secure storage
   - Do not hardcode API keys, passwords, or tokens
   - Check for accidentally committed secrets before pushing

4. **✅ NEVER run development servers without explicit request**
   - Do not run `npm run dev` unless specifically asked
   - Always get confirmation before starting any server
   - Prefer analyzing code over running it when possible
   - For debugging authentication/API issues, use curl or similar tools instead

## Communication Guidelines

1. **Be clear and specific**
   - Use precise language when describing changes
   - Include relevant details like file paths and function names
   - Provide concrete examples when possible

2. **Ask questions when requirements are unclear**
   - Don't make assumptions about unclear requirements
   - Request clarification from stakeholders
   - Document the clarification for future reference

3. **Document important decisions**
   - Record the reasoning behind significant architectural choices
   - Document unexpected challenges and their solutions
   - Update documentation when implementation details change

## Continuous Improvement

1. **Learn from past issues**
   - Review past bugs and incidents for lessons
   - Apply those lessons to prevent similar issues
   - Update guidelines based on new learnings

2. **Share knowledge**
   - Document complex parts of the codebase
   - Provide context in comments and pull requests
   - Mentor others on best practices

3. **Stay current with technology**
   - Keep dependencies updated
   - Follow security advisories
   - Adopt new best practices when appropriate

4. **Update Cursor rules**
   - Update Cursor rules when new patterns or requirements emerge
   - Immediately update rules when mistakes are identified to prevent repetition
   - Use rules as a living document that evolves with the codebase

## Build/Test/Lint Commands

```bash
# Development
npm run dev               # Run full dev server with custom server
npm run build             # Create production build
npm run start             # Start production server
npm run lint              # Run ESLint
npm run lint:fix          # Fix ESLint issues
npm run format            # Run Prettier formatter
npm run format:check      # Check formatting without fixing
npm run test              # Run all tests
npm run test:watch        # Run tests in watch mode
npm run test:e2e          # Run end-to-end tests
npm run analyze           # Analyze bundle size
npm run browser-tools     # Run browser tools server

# Electron
npm run electron-dev      # Run Electron in development mode
npm run electron-build    # Build Electron application
npm run electron-pack     # Package Electron application
``` 