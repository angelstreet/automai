---
description: Terminal, WebSocket & SSH Implementation Guidelines
globs: src/lib/services/websocket.ts, src/lib/services/ssh.ts, src/lib/services/terminal.ts, src/components/hosts/**/*.tsx, src/app/api/terminals/**/*.ts
alwaysApply: false
---

# Terminal, WebSocket & SSH Implementation Guidelines

## Complete Terminal-WebSocket-SSH Workflow

The terminal connection workflow follows these steps:

1. **User Initiates Terminal Connection**
   - User clicks on a terminal button in the UI
   - Terminal component renders and initializes xterm.js in the browser

2. **Terminal Initialization**
   - Frontend makes a POST request to `/api/terminals/init` with the connection ID
   - Backend initializes the WebSocket server on-demand (if not already running)
   - Backend responds with success status
   - Terminal shows "Initializing terminal server..." message

3. **WebSocket Connection**
   - Frontend creates a WebSocket connection to `/api/terminals/ws/[connectionId]`
   - Backend handles the WebSocket upgrade request via HTTP server's upgrade handler (NOT in the Next.js API route)
   - WebSocket connection is established between browser and server
   - Terminal shows "WebSocket connected, authenticating..." message

4. **Authentication and SSH Connection**
   - Frontend sends authentication message with SSH credentials through the WebSocket:
     ```javascript
     {
       type: 'auth',
       connectionType: connection.type,
       ssh_username: connection.username,
       ssh_password: connection.password,
       sshhost: connection.ip,
       ssh_port: connection.port
     }
     ```
   - Server receives auth message and establishes SSH connection to remote host
   - Server acts as a proxy between WebSocket and SSH connection
   - On successful connection, server sends success message and terminal shows "SSH connection established successfully"

5. **Bidirectional Data Flow**
   - Input path: Browser Terminal (keyboard) → WebSocket → Server → SSH Connection → Remote Host
   - Output path: Remote Host → SSH Connection → Server → WebSocket → Browser Terminal (display)
   - The server bridges these protocols, allowing browser-based interaction with remote SSH servers

6. **Terminal Management**
   - Terminal resize events are sent through WebSocket to update the SSH session dimensions
   - Connection health is monitored with ping/pong messages
   - On WebSocket close, SSH connection is terminated
   - On SSH connection close, WebSocket connection is terminated

## Architecture Components

1. **Custom Server with Lazy-Loaded WebSocket Support** (`server.ts` and `src/lib/services/http.ts`)
   - Runs on the same port as the Next.js HTTP server (port 3000)
   - WebSockets are initialized on-demand when needed (NOT at server startup)
   - Integrated with the Next.js application

2. **WebSocket Service Module** (`src/lib/services/websocket.ts`)
   - Provides utility functions for WebSocket server management
   - Implements singleton pattern with `getWebSocketServer()` and `initializeWebSocketServer()`
   - Handles WebSocket upgrade requests with `handleUpgrade()`
   - Manages connection lifecycle with ping/pong for connection health

3. **SSH Service Module** (`src/lib/services/ssh.ts`)
   - Handles SSH connections and authentication
   - Manages SSH sessions and streams
   - Integrates with WebSocket connections
   - Implements comprehensive error handling for SSH connections

4. **Terminal Service Module** (`src/lib/services/terminal.ts`)
   - Manages terminal sessions
   - Handles terminal resize events
   - Processes terminal input/output

5. **API Routes**
   - `/api/terminals/init` - Initializes the WebSocket server
   - `/api/terminals/ws/[id]` - Handles WebSocket routing (does NOT handle the actual upgrade)

6. **Frontend Components**
   - Terminal UI component using xterm.js
   - WebSocket client implementation
   - Terminal resize and input handling

## WebSocket Server Implementation

1. **Lazy Initialization (CRITICAL)**
   ```typescript
   // server.ts
   const server = await startServer({
     dev,
     hostname,
     port,
     enableWebSockets: false // MUST be false for lazy initialization
   });
   ```

   ```typescript
   // src/lib/services/http.ts
   export async function createServer(options: {
     dev?: boolean;
     hostname?: string;
     port?: number;
     enableWebSockets?: boolean;
   }): Promise<Server> {
     const { enableWebSockets = false } = options;
     
     // Create HTTP server
     const server = http.createServer();
     
     // Only initialize WebSocket server if explicitly enabled
     if (enableWebSockets) {
       initializeWebSocketSupport(server);
     } else {
       // Set up upgrade handler to initialize WebSockets on-demand
       server.on('upgrade', (request, socket, head) => {
         const { pathname } = parse(request.url || '');
         
         // Only handle WebSocket connections for our terminal endpoints
         if (pathname && pathname.startsWith('/api/terminals/ws/')) {
           // Initialize WebSockets on-demand if not already initialized
           if (!isWebSocketInitialized) {
             initializeWebSocketSupport(server);
           }
           
           // Handle the terminal WebSocket upgrade
           handleUpgrade(request, socket, head);
         }
       });
     }
     
     return server;
   }
   ```

2. **Singleton Pattern Implementation**
   ```typescript
   // src/lib/services/websocket.ts
   
   // Global variable to store the WebSocket server instance
   declare global {
     var websocketServer: WebSocketServer | undefined;
   }
   
   export function getWebSocketServer(): WebSocketServer {
     if (!global.websocketServer) {
       return initializeWebSocketServer();
     }
     return global.websocketServer;
   }
   
   export function initializeWebSocketServer(): WebSocketServer {
     // Check if we already have an instance
     if (global.websocketServer) {
       return global.websocketServer;
     }
   
     // Create a new WebSocket server
     const wss = new WebSocketServer({ noServer: true });
     
     // Set up ping interval to detect dead connections
     // ... ping/pong implementation ...
     
     // Store the instance in the global variable
     global.websocketServer = wss;
     
     return wss;
   }
   ```

3. **WebSocket Upgrade Handling**
   ```typescript
   // src/lib/services/websocket.ts
   export function handleUpgrade(
     request: IncomingMessage,
     socket: Socket,
     head: Buffer
   ) {
     const wss = getWebSocketServer();
     
     if (!wss) {
       socket.destroy();
       return;
     }
     
     // Extract the connection ID from the request
     const connectionId = (request as any).connectionId;
     
     wss.handleUpgrade(request, socket, head, (ws) => {
       // Store the connection ID on the WebSocket object
       if (connectionId) {
         (ws as any).connectionId = connectionId;
       }
       
       // Set up message handler
       ws.on('message', (message) => {
         try {
           handleMessage(ws as WebSocketConnection, message.toString());
         } catch (error) {
           // Error handling
         }
       });
       
       wss.emit('connection', ws, request);
     });
   }
   ```

## Terminal Initialization API

```typescript
// src/app/api/terminals/init/route.ts
export async function POST(request: NextRequest) {
  try {
    // Initialize the WebSocket server (lazy initialization)
    const wss = getWebSocketServer();

    if (!wss) {
      return NextResponse.json(
        { success: false, error: 'Failed to initialize WebSocket server' },
        { status: 500 }
      );
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to initialize terminal' },
      { status: 500 }
    );
  }
}
```

**Note:** Database connection logic is obsolete and no longer required for terminal initialization.

## WebSocket Route Handler

```typescript
// src/app/api/terminals/ws/[id]/route.ts
export async function GET(request: NextRequest, context: { params: { id: string } }) {
  // Check if it's a WebSocket request
  const upgradeHeader = request.headers.get('upgrade');
  
  if (!upgradeHeader || upgradeHeader.toLowerCase() !== 'websocket') {
    return new Response('Expected WebSocket request', { status: 400 });
  }
  
  // Return a successful WebSocket upgrade response
  // The actual upgrade is handled by the HTTP server's upgrade handler
  // This route exists only for Next.js routing purposes
  return new Response(null, { status: 101 });
}
```

**CRITICAL**: Do NOT attempt to handle the WebSocket upgrade in the API route. The upgrade must be handled exclusively by the HTTP server's upgrade event handler to prevent "handleUpgrade() was called more than once with the same socket" errors.

## SSH Connection Handling

```typescript
// src/lib/services/ssh.ts
export async function handleSshConnection(
  clientSocket: WebSocketConnection,
  connectionId: string,
  authData?: { username?: string; password?: string; host: string; port?: number },
) {
  try {
    // Perform input validation
    if (!authData || !authData.host || !authData.username) {
      clientSocket.send(JSON.stringify({ 
        error: 'Missing SSH credentials',
        errorType: 'MISSING_CREDENTIALS' 
      }));
      return;
    }
    
    // Create SSH client
    const sshClient = new Client();
    
    // Set up SSH client event handlers
    sshClient.on('ready', () => {
      // Send connection status to client
      clientSocket.send(JSON.stringify({
        status: 'connected',
        message: 'SSH connection established successfully',
      }));
      
      // Create an SSH shell session
      sshClient.shell((err, stream) => {
        if (err) {
          // Handle shell error
          clientSocket.send(JSON.stringify({
            error: `SSH shell error: ${err.message}`,
            errorType: 'SSH_SHELLerror',
          }));
          return;
        }
        
        // Pipe data from SSH to WebSocket with error handling
        stream.on('data', (data: Buffer) => {
          try {
            clientSocket.send(data);
          } catch (e) {
            logger.error(`Error sending data to WebSocket: ${e}`);
          }
        });
        
        // Handle WebSocket messages with error handling
        clientSocket.on('message', (message) => {
          try {
            // Try parsing as JSON for commands like resize
            const data = JSON.parse(message.toString());
            if (data.type === 'resize') {
              stream.setWindow(data.rows, data.cols, 0, 0);
            }
          } catch (e) {
            // Not JSON data, treat as terminal input
            try {
              stream.write(message);
            } catch (err) {
              logger.error(`Error writing to SSH stream: ${err}`);
            }
          }
        });
        
        // Handle stream close
        stream.on('close', () => {
          try {
            clientSocket.close();
          } catch (e) {
            logger.error(`Error closing WebSocket: ${e}`);
          }
        });
      });
    });
    
    // Handle SSH connection errors
    sshClient.on('error', (err) => {
      logger.error('SSH connection error', { error: err.message, connectionId });
      try {
        clientSocket.send(JSON.stringify({
          error: `SSH connection error: ${err.message}`,
          errorType: 'SSH_CONNECTIONerror',
        }));
      } catch (e) {
        logger.error(`Error sending error to WebSocket: ${e}`);
      }
    });
    
    // Connect to SSH server with error handling
    try {
      sshClient.connect({
        host: authData.host,
        port: authData.port || 22,
        username: authData.username,
        password: authData.password,
        readyTimeout: 10000, // 10 seconds timeout
      });
    } catch (e) {
      logger.error(`Error connecting to SSH server: ${e}`);
      clientSocket.send(JSON.stringify({
        error: `SSH connection attempt error: ${e}`,
        errorType: 'SSH_CONNECTION_ATTEMPTerror',
      }));
    }
    
    // Cleanup on WebSocket close
    clientSocket.on('close', () => {
      try {
        sshClient.end();
      } catch (e) {
        logger.error(`Error ending SSH client: ${e}`);
      }
    });
  } catch (error) {
    // Handle any uncaught errors
    logger.error(`Uncaught error in handleSshConnection: ${error}`);
    try {
      clientSocket.send(JSON.stringify({
        error: `Internal server error: ${error}`,
        errorType: 'INTERNALerror',
      }));
    } catch (e) {
      // Cannot send error to client
    }
  }
}
```

## Frontend Terminal Implementation

```typescript
// src/app/[locale]/[tenant]/hosts/_components/Terminal.tsx
export function Terminal({ connection }: TerminalProps) {
  // Initialize terminal
  useEffect(() => {
    const initializeTerminal = async () => {
      // Create xterm.js terminal
      const term = new Terminal({
        // Terminal configuration
      });
      
      // Initialize WebSocket server first
      try {
        const initResponse = await fetch('/api/terminals/init', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ connectionId: connection.id }),
        });
        
        if (!initResponse.ok) {
          // Handle initialization error
          return;
        }
        
        // Connect to WebSocket using current port and protocol
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const port = window.location.port;
        const socketUrl = `${protocol}//${window.location.hostname}:${port}/api/terminals/ws/${connection.id}`;
        
        const socket = new WebSocket(socketUrl);
        
        socket.onopen = () => {
          // Send authentication message
          const authMessage = {
            type: 'auth',
            connectionType: connection.type,
            ssh_username: connection.username,
            ssh_password: connection.password,
            sshhost: connection.ip,
            ssh_port: connection.port
          };
          
          socket.send(JSON.stringify(authMessage));
          
          // Attach WebSocket to terminal
          const attachAddon = new AttachAddon(socket);
          term.loadAddon(attachAddon);
        };
        
        // Handle socket events
        socket.onerror = (event) => {
          // Handle connection error
        };
        
        socket.onmessage = (event) => {
          // Handle messages from server
        };
      } catch (error) {
        // Handle initialization error
      }
    };
    
    initializeTerminal();
  }, [connection]);
  
  // Render terminal container
}
```