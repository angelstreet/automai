---
description: view toggle pattern
globs: 
alwaysApply: false
---
# View Toggle Pattern

## Overview

The view toggle pattern provides a consistent way to switch between different display modes (grid/table) for data throughout the application. Our approach combines Zustand for persistent state management with event-based communication for component coordination.

## Implementation: Zustand with Events

### 1. Zustand Store Setup

```typescript
// src/store/hostViewStore.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

import { ViewMode, DEFAULT_VIEW_MODE } from '@/app/[locale]/[tenant]/hosts/constants';

interface HostViewState {
  viewMode: ViewMode;
  setViewMode: (mode: ViewMode) => void;
  toggleViewMode: () => void;
}

export const useHostViewStore = create<HostViewState>()(
  persist(
    (set) => ({
      viewMode: DEFAULT_VIEW_MODE,
      setViewMode: (mode: ViewMode) => set({ viewMode: mode }),
      toggleViewMode: () => set((state) => ({ 
        viewMode: state.viewMode === 'grid' ? 'table' : 'grid' 
      })),
    }),
    { 
      name: 'host-view-settings', // localStorage key
    }
  )
);
```

### 2. Event Definition in EventListener

```typescript
// src/app/[locale]/[tenant]/hosts/_components/client/HostsEventListener.tsx
const HostsEvents = {
  // Other events...
  TOGGLE_HOST_VIEW_MODE: 'TOGGLE_HOST_VIEW_MODE', // Switch between grid/table view
};

export { HostsEvents };
```

### 3. Toggle Component Implementation

```typescript
// src/app/[locale]/[tenant]/hosts/_components/client/HostActionsClient.tsx
import { Grid, List } from 'lucide-react';
import { useHostViewStore } from '@/store/hostViewStore';
import { HostsEvents } from './HostsEventListener';

function ViewToggleButton() {
  // Get view mode state from Zustand store
  const { viewMode, toggleViewMode } = useHostViewStore();

  const handleViewModeToggle = () => {
    console.log(
      `[@component:HostActionsClient] Toggling view mode from ${viewMode} to ${viewMode === 'grid' ? 'table' : 'grid'}`,
    );
    // Toggle view mode using Zustand store
    toggleViewMode();
    // Also dispatch event for any listeners that might be interested
    window.dispatchEvent(new Event(HostsEvents.TOGGLE_HOST_VIEW_MODE));
  };

  return (
    <Button variant="outline" size="sm" className="h-8" onClick={handleViewModeToggle}>
      {viewMode === 'grid' ? <List className="h-4 w-4" /> : <Grid className="h-4 w-4" />}
    </Button>
  );
}
```

### 4. View Container with Conditional Rendering

```typescript
// src/app/[locale]/[tenant]/hosts/_components/client/HostListClient.tsx
import { useHostViewStore } from '@/store/hostViewStore';

function HostListClient() {
  // Get view mode from Zustand store
  const { viewMode } = useHostViewStore();

  // Render the appropriate view based on viewMode
  return (
    <div className="space-y-4 p-4">
      {viewMode === 'grid' ? (
        <HostGridClient
          hosts={hosts}
          // Other props...
        />
      ) : (
        <HostTableClient
          hosts={hosts}
          // Other props...
        />
      )}
    </div>
  );
}
```

## Advantages of this Approach

1. **Persistence**: View preference survives page refreshes through Zustand's persist middleware
2. **Loose Coupling**: Components can react to view mode changes without direct dependencies
3. **Centralized State**: Zustand provides a single source of truth for view mode
4. **Consistent UX**: All components show the same view mode at all times
5. **Debuggability**: Events and state changes are logged for easier troubleshooting

## Types and Constants

```typescript
// Types for view modes
export type ViewMode = 'grid' | 'table';
export const DEFAULT_VIEW_MODE: ViewMode = 'grid';
```

## Event Handling Considerations

1. **When to listen for TOGGLE events**: Components that need to perform side effects when view mode changes
2. **When to use Zustand directly**: Components that only need to render based on the current view mode
3. **Logging**: Always log view mode changes for debugging purposes

## Best Practices

1. **Always use Zustand + Events together** for view toggles to ensure both persistent state and proper communication
2. **Use the constants from HostsEvents** for event names to ensure consistency
3. **Always include visual feedback** in the toggle button to indicate current mode
4. **Handle loading states gracefully** during view transitions
5. **Log view mode changes** for easier debugging
6. **Use consistent naming pattern** for all implementations:
   - Store: `use[Feature]ViewStore`
   - Event: `TOGGLE_[FEATURE]_VIEW_MODE`
   - Component props: `viewMode`, `toggleViewMode`
7. **Apply appropriate animations** for smooth transitions between views

## Real-World Example: Hosts Feature

```typescript
// In HostActionsClient.tsx
const { viewMode, toggleViewMode } = useHostViewStore();

const handleViewModeToggle = () => {
  console.log(
    `[@component:HostActionsClient] Toggling view mode from ${viewMode} to ${viewMode === 'grid' ? 'table' : 'grid'}`,
  );
  // Toggle view mode using Zustand store
  toggleViewMode();
  // Still dispatch the event for any listeners that might be interested
  window.dispatchEvent(new Event(HostsEvents.TOGGLE_HOST_VIEW_MODE));
};

return (
  <Button variant="outline" size="sm" className="h-8" onClick={handleViewModeToggle}>
    {viewMode === 'grid' ? <List className="h-4 w-4" /> : <Grid className="h-4 w-4" />}
  </Button>
);
```
