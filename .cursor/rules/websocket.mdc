---
description: WebSocket & Terminal Implementation Guidelines
globs: src/lib/services/websocket.ts, src/lib/services/ssh.ts, src/lib/services/terminal.ts, src/components/hosts/**/*.tsx
alwaysApply: false
---

# WebSocket & Terminal Implementation Guidelines

## WebSocket Architecture Overview

The project uses a lazy-loaded WebSocket implementation:

1. **Custom Server with WebSocket Support** (`server.ts` and `src/lib/services/http.ts`)
   - Runs on the same port as the Next.js HTTP server (port 3000)
   - WebSockets are initialized on-demand when needed
   - Integrated with the Next.js application

2. **WebSocket Service Module** (`src/lib/services/websocket.ts`)
   - Provides utility functions for WebSocket server management
   - Exports functions like `initializeWebSocketServer()`, `handleUpgrade()`, and `getWebSocketServer()`
   - Implements connection lifecycle management

3. **SSH Service Module** (`src/lib/services/ssh.ts`)
   - Handles SSH connections and authentication
   - Manages SSH sessions and streams
   - Integrates with WebSocket connections

4. **Terminal Service Module** (`src/lib/services/terminal.ts`)
   - Manages terminal sessions
   - Handles terminal resize events
   - Processes terminal input/output

## WebSocket Server Implementation

1. **Initialization**
   ```typescript
   // src/lib/services/http.ts
   export async function createServer(options: {
     dev?: boolean;
     hostname?: string;
     port?: number;
     enableWebSockets?: boolean;
   }): Promise<Server> {
     const { enableWebSockets = false } = options;
     
     // Create HTTP server
     const server = http.createServer();
     
     // Initialize WebSocket server if enabled
     if (enableWebSockets) {
       const wss = initializeWebSocketServer(server);
       
       // Handle WebSocket upgrade requests
       server.on('upgrade', (request, socket, head) => {
         const { pathname } = parse(request.url || '');
         
         if (pathname?.startsWith('/api/terminal')) {
           handleUpgrade(request, socket, head, pathname);
         }
       });
     }
     
     return server;
   }
   ```

2. **Connection Management**
   ```typescript
   // src/lib/services/websocket.ts
   export function initializeWebSocketServer(server: Server): WSServer {
     if (!wss) {
       wss = new WSServer({ noServer: true });
       
       // Set up ping interval to detect dead connections
       pingInterval = setInterval(() => {
         if (wss) {
           wss.clients.forEach((ws: WebSocketConnection) => {
             if (ws.isAlive === false) return ws.terminate();
             ws.isAlive = false;
             ws.ping();
           });
         }
       }, 30000);
       
       // Handle server close
       wss.on('close', () => {
         if (pingInterval) {
           clearInterval(pingInterval);
           pingInterval = null;
         }
       });
     }
     
     return wss;
   }
   ```

3. **Upgrade Handling**
   ```typescript
   // src/lib/services/websocket.ts
   export function handleUpgrade(
     request: IncomingMessage,
     socket: any,
     head: Buffer,
     path: string,
   ): void {
     const wss = getWebSocketServer();
     if (!wss) {
       socket.destroy();
       return;
     }
     
     wss.handleUpgrade(request, socket, head, (ws: WebSocketConnection) => {
       ws.isAlive = true;
       ws.on('pong', () => {
         ws.isAlive = true;
       });
       
       // Extract connection ID from URL
       const url = new URL(request.url || '', `http://${request.headers.host}`);
       const connectionId = url.searchParams.get('id');
       
       if (path.startsWith('/api/terminal') && connectionId) {
         handleSshConnection(ws, connectionId);
       } else {
         ws.close(1000, 'Invalid connection path');
       }
     });
   }
   ```

## SSH Integration

1. **Connection Handling**
   ```typescript
   // src/lib/services/ssh.ts
   export function handleSshConnection(ws: WebSocketConnection, connectionId: string): void {
     try {
       // Get connection details from database or cache
       const connection = getConnection(connectionId);
       if (!connection) {
         ws.send(JSON.stringify({ error: 'Connection not found' }));
         ws.close(1000, 'Connection not found');
         return;
       }
       
       // Create SSH client
       const ssh = new Client();
       
       // Set up event handlers
       ssh.on('ready', () => {
         // Create shell session
         ssh.shell((err, stream) => {
           if (err) {
             ws.send(JSON.stringify({ error: 'Failed to create shell' }));
             ws.close(1000, 'Failed to create shell');
             return;
           }
           
           // Set up data handlers
           setupDataHandlers(ws, stream, connectionId);
         });
       });
       
       // Connect to SSH server
       ssh.connect({
         host: connection.host,
         port: connection.port,
         username: connection.username,
         password: connection.password,
         privateKey: connection.privateKey,
       });
     } catch (error: any) {
       logger.error(`SSH connection error: ${error.message || String(error)}`, { connectionId });
       ws.send(JSON.stringify({ error: 'Failed to establish SSH connection' }));
       ws.close(1000, 'Connection error');
     }
   }
   ```

## Terminal Implementation
1. **xterm.js Integration**
   - Use xterm.js for terminal UI in the browser
   - Configure with appropriate options for performance
   - Handle terminal resize events
   - Support copy/paste operations

2. **SSH Connection**
   - Use ssh2 library for SSH connections
   - Implement proper authentication flow
   - Handle fingerprint verification
   - Stream data between SSH and WebSocket

3. **Security Considerations**
   - Validate user permissions before establishing connections
   - Implement timeouts for authentication
   - Close idle connections after a period of inactivity
   - Sanitize input/output to prevent injection attacks

## WebSocket API Routes
1. **Route Configuration**
   - Set `bodyParser: false` in the route config
   - Check for 'upgrade' header in the request
   - Return appropriate status codes for WebSocket responses

2. **Connection Establishment**
   - Follow this pattern for WebSocket setup:
   ```typescript
   // Set up WebSocket connection
   const { clientSocket, response } = await setupWebSocket(request, id);
   
   // Set up authentication timeout
   setupAuthTimeout(clientSocket, id);
   
   // Handle the specific connection type
   if (connection.type === 'ssh') {
     handleSshConnection(clientSocket, connection, id);
   } else {
     handleMockTerminal(clientSocket, connection, id);
   }
   
   return response;
   ```

3. **Message Handling**
   - Parse incoming messages as JSON when appropriate
   - Handle different message types (auth, resize, data)
   - Send structured responses to the client

## Frontend Integration
1. **WebSocket Client**
   - Create WebSocket connections with appropriate URL
   - Implement reconnection logic
   - Handle connection state changes
   - Process binary and text messages appropriately

2. **Terminal UI**
   - Initialize xterm.js with proper configuration
   - Attach WebSocket data handlers
   - Implement terminal resize logic
   - Support keyboard input and special keys

3. **User Experience**
   - Show connection status to users
   - Provide clear error messages
   - Implement loading states during connection
   - Support terminal customization (colors, font size)

## Testing WebSocket Connections
1. **Manual Testing**
   - Use browser developer tools to inspect WebSocket traffic
   - Test reconnection scenarios
   - Verify terminal functionality with various commands
   - Check error handling and recovery

2. **Automated Testing**
   - Mock WebSocket connections in tests
   - Verify correct message handling
   - Test error scenarios and recovery
   - Ensure proper cleanup of resources 