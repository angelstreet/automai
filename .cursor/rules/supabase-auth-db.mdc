---
description: Supabase Authentication and Database Guidelines
globs: ["**/*"]
alwaysApply: false
priority: 2
---

# Supabase Authentication Implementation

## Key Principles

- **Three-Layer Architecture** - Always follow the server-db → server-actions → client-hooks pattern
- **Tenant Isolation** - Always enforce tenant boundaries
- **Profile Extension** - Use profiles table to extend auth.users
- **OAuth Flow** - Follow standard OAuth pattern with auth-redirect

## Three-Layer Architecture

Authentication follows a strict three-layer architecture:

### Server DB Layer (/src/lib/supabase/auth.ts)
- Contains ALL Supabase auth calls
- Uses server-side Supabase client with cookies
- Returns standard format: {success, error, data}

### Server Actions Layer (/src/app/actions/auth.ts)
- 'use server' functions
- Calls functions from the Server DB Layer
- Handles error management and redirects
- Returns enhanced results: {success, error, data, redirectUrl}

### Client Hooks Layer (Various hooks)
- 'use client' React hooks
- Calls Server Actions via form actions or direct invocation
- Manages loading, error states and user experience
- Never calls Server DB directly

## Authentication Flow

### OAuth Authentication
- User clicks provider button → Server Action → OAuth Redirect
- Provider → Supabase Callback URL → Auth Redirect Page
- Auth Redirect Page → Server Action → Dashboard

### Email Authentication
- User enters credentials → Server Action → Supabase Auth
- Supabase creates session → Server-side redirect → Dashboard

### Profile Management
- User data in auth.users (managed by Supabase)
- Extended data in profiles table (managed by application)
- All relations to user should link to profiles.id not auth.users.id

## Important Rules

- Always use supabase.auth.getUser() for protection
- Never trust getSession() in server components
- Always validate user permissions server-side

### Use Middleware for Session Management
- Middleware refreshes auth tokens automatically
- Redirects unauthenticated users to login page
- Preserves locale in URLs

### Localized URLs
- Always use /${locale}/auth-redirect format
- Extract locale from path for redirects

### OAuth Configuration
- Callback URL: https://[project-ref].supabase.co/auth/v1/callback
- Support multiple environments via allowed URL patterns

## Implementation Notes
- The middleware (/src/middleware.ts) handles session refresh and protection
- User cache (/src/app/actions/user.ts) has 5-minute TTL
- The Supabase auth client is centralized in /src/lib/supabase/auth.ts
- Authentication components must handle appropriate error states