---
description: Supabase Authentication and Database Guidelines
globs: ["**/*"]
alwaysApply: false
priority: 2
---

# Supabase Authentication Implementation

## Key Principles

- **Three-Layer Architecture** - Always follow the server-db → server-actions → client-hooks pattern
- **Tenant Isolation** - Always enforce tenant boundaries
- **Profile Extension** - Use profiles table to extend auth.users
- **OAuth Flow** - Follow standard OAuth pattern with auth-redirect
- **User Context Integration** - Pass user data between layers to avoid redundant auth calls
- **Consistent Caching Strategy** - Implement TTL-based caching at appropriate layers

## Three-Layer Architecture

Authentication follows a strict three-layer architecture:

### Server DB Layer
- **Core Auth**: `/src/lib/supabase/auth.ts`
- **Feature-specific DB**: `/src/lib/supabase/db-{feature}/` folders 
  (e.g., `/src/lib/supabase/db-repositories/`, `/src/lib/supabase/db-hosts/`)
- Contains ALL Supabase auth and database calls
- Uses server-side Supabase client with cookies
- Returns standard format: {success, error, data}

### Server Actions Layer
- Located in `/src/app/[locale]/[tenant]/{feature}/actions.ts`
- 'use server' functions
- Calls functions from the Server DB Layer
- Handles error management and redirects
- Accepts optional user parameter to avoid redundant auth calls
- Implements caching for frequently accessed data
- Returns enhanced results: {success, error, data, redirectUrl}

### Client Context Layer
- Located in `/src/app/[locale]/[tenant]/{feature}/context.tsx`
- 'use client' React context and hooks
- Provides state management and function wrappers for actions
- Converts User type to AuthUser type when needed
- Manages loading, error states and user experience
- Never calls Server DB directly

## Data and Context Flow

```
┌─────────────────────┐     ┌───────────────────┐     ┌────────────────────┐
│                     │     │                   │     │                    │
│   Client Components │     │  Feature Context  │     │   User Context     │
│                     │     │                   │     │                    │
└─────────┬───────────┘     └────────┬──────────┘     └──────────┬─────────┘
          │                          │                           │
          │                          │                           │
          │ ┌──────────────────┐     │                           │
          │ │                  │     │                           │
          │ │ useHostContext() │     │                           │
          └─┤                  │◄────┘                           │
            │                  │                                 │
            └──────┬───────────┘                                 │
                   │                                             │
                   │                                             │
                   │           ┌───────────────────────┐         │
                   │           │                       │         │
                   │           │ userToAuthUser(user)  │◄────────┘
                   │           │                       │
                   │           └───────────┬───────────┘
                   │                       │
                   ▼                       ▼
          ┌──────────────────┐    ┌──────────────────┐
          │                  │    │                  │
          │  Action Methods  │    │ Cache Mechanism  │
          │                  │    │                  │
          └────────┬─────────┘    └─────────┬────────┘
                   │                        │
                   │       ┌────────────────┘
                   │       │
                   ▼       ▼
          ┌──────────────────┐    ┌──────────────────┐
          │                  │    │                  │
          │  DB Operations   │◄───┤  Type Mappers    │
          │                  │    │                  │
          └────────┬─────────┘    └──────────────────┘
                   │
                   ▼
          ┌──────────────────┐
          │                  │
          │   Supabase DB    │
          │                  │
          └──────────────────┘
```

### Data Flow Process:

1. **Component Initialization**:
   - Component mounts and uses a context hook (e.g., `useHostContext()`)
   - Context includes state and action methods

2. **User Context Integration**:
   - The feature context (e.g., HostContext) accesses user data from UserContext
   - Converts User to AuthUser using the userToAuthUser helper when needed

3. **Data Operation Request**:
   - Component calls a context method (e.g., `fetchHosts()`)
   - Context calls the corresponding action (e.g., `getHosts()`)
   - Passes the user data to avoid redundant auth calls

4. **Cache Check**:
   - Action checks if data is in cache (using serverCache)
   - Returns cached data if available and not expired

5. **DB Operation**:
   - If not cached, action calls DB operation with user data
   - DB operation performs the actual database query
   - Returns results in standard format

6. **Type Mapping and Response**:
   - Action maps DB response to proper UI types using mapper functions
   - Caches the result for future use
   - Returns formatted data to the context

7. **State Update**:
   - Context updates its state with the new data
   - Component re-renders with the updated state

## Authentication Flow

### OAuth Authentication
- User clicks provider button → Server Action → OAuth Redirect
- Provider → Supabase Callback URL → Auth Redirect Page
- Auth Redirect Page → Server Action → Dashboard

### Email Authentication
- User enters credentials → Server Action → Supabase Auth
- Supabase creates session → Server-side redirect → Dashboard

### Profile Management
- User data in auth.users (managed by Supabase)
- Extended data in profiles table (managed by application)
- All relations to user should link to profiles.id not auth.users.id

## Important Rules

- Always use supabase.auth.getUser() for protection
- Never trust getSession() in server components
- Always validate user permissions server-side
- Use optional user parameters in action functions to avoid redundant auth calls
- Implement data mapping functions to handle type differences (e.g., DB types vs. UI types)
- Store constants at the feature root level, not in component directories

### Passing User Context

When implementing feature actions:
- Always accept an optional user parameter in action functions
- Only call getUser() if the user parameter is not provided
- Use a helper function to convert between User and AuthUser types when needed
- Example:
  ```typescript
  export async function getHosts(filter?: HostFilter, user?: AuthUser | User | null): Promise<Result<Host[]>> {
    try {
      // Get the current user if not provided
      if (!user) {
        const userResult = await getUser();
        if (!userResult.success) {
          return { success: false, error: userResult.error || 'Authentication failed' };
        }
        user = userResult.data;
      }
      
      // Convert User to AuthUser if needed
      if (!('created_at' in user)) {
        user = {
          ...user,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };
      }
      
      // Continue with DB operations...
    }
  }
  ```

### Caching Strategy

- Implement caching at the actions layer using the serverCache utility
- Define consistent TTL values in constants files
- Clear cache entries when data is modified
- Example:
  ```typescript
  // In constants.ts
  export const CACHE_TTL = {
    REPOSITORIES: 5 * 60 * 1000, // 5 minutes
    REPOSITORY: 2 * 60 * 1000,   // 2 minutes
    USER: 15 * 60 * 1000,        // 15 minutes
  };
  
  // In actions.ts
  const cacheKey = `repositories:${filter?.providerId || 'all'}`;
  const cachedData = serverCache.get<Repository[]>(cacheKey);
  
  if (cachedData) {
    return { success: true, data: cachedData };
  }
  
  // Fetch data and cache result
  serverCache.set(cacheKey, data, CACHE_TTL.REPOSITORIES);
  ```

### Use Middleware for Session Management
- Middleware refreshes auth tokens automatically
- Redirects unauthenticated users to login page
- Preserves locale in URLs

### Localized URLs
- Always use /${locale}/auth-redirect format
- Extract locale from path for redirects

### OAuth Configuration
- Callback URL: https://[project-ref].supabase.co/auth/v1/callback
- Support multiple environments via allowed URL patterns

## Implementation Notes
- The middleware (/src/middleware.ts) handles session refresh and protection
- User cache (/src/app/actions/user.ts) has 15-minute TTL
- The Supabase auth client is centralized in /src/lib/supabase/auth.ts
- Authentication components must handle appropriate error states
- Use consistent data mappers (e.g., mapDbRepositoryToRepository) to handle type differences
- Constants should be defined at the feature root level (e.g., `/src/app/[locale]/[tenant]/{feature}/constants.ts`)

## DB Layer Organization

The database layer uses a feature-based organization approach:

### Core DB Layer
- `/src/lib/supabase/db.ts` - Core DB functionality and older DB interface
- `/src/lib/supabase/auth.ts` - Authentication-specific DB functions

### Feature-Specific DB Modules
- `/src/lib/supabase/db-repositories/` - Repository-related DB functions
  - `git-provider.ts` - Git provider operations
  - `repository.ts` - Repository operations
  - `pin-repository.ts` - Repository pin operations
  - `index.ts` - Exports all repository DB functions
- `/src/lib/supabase/db-hosts/` - Host-related DB functions
- `/src/lib/supabase/db-deployment/` - Deployment-related DB functions

### Standard Response Format
All DB functions should return a consistent format:
```typescript
type DbResponse<T> = {
  success: boolean;
  data?: T;
  error?: string;
};
```

### Type Mapping
When converting between DB types and UI types:
- Create mapper functions to standardize conversion logic
- Handle null/undefined values gracefully
- Ensure all required fields are included
- Example:
  ```typescript
  function mapDbRepositoryToRepository(dbRepo: any): Repository {
    if (!dbRepo) {
      return { /* default values */ };
    }
    
    return {
      id: String(dbRepo.id || ''),
      name: String(dbRepo.name || ''),
      // Map other fields...
    };
  }
  ```

### Importing DB Modules
DB modules can be imported in two ways:
```typescript
// 1. Via the main db object (legacy approach)
import db from '@/lib/supabase/db';
const providers = await db.gitProvider.findMany();

// 2. Directly from feature-specific modules (preferred)
import { gitProvider } from '@/lib/supabase';
const { success, data, error } = await gitProvider.getGitProviders(profileId);