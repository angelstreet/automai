---
description: 
globs: 
alwaysApply: false
---
# Core Architecture Guidelines

## Three-Layer Architecture
1. **DB Layer (Core)**: `/src/lib/supabase/db-*.ts`
   - Direct database interaction via Supabase
   - Feature-specific modules in `/src/lib/supabase/db-{feature}/`
   - Returns consistent `DbResponse<T>` objects with `{success, data?, error?}`

2. **Server Actions Layer (Bridge)**: `/src/app/[locale]/[tenant]/*/actions.ts`
   - Server-only functions with 'use server' directive 
   - Call DB Layer functions, not other Server Actions
   - Handle validation, authentication, and caching
   - Return consistent `ActionResult<T>` objects

3. **Client Hooks Layer (Interface)**: 
   - **Data Context**: `/src/app/providers/*.tsx`
     - Context providers are **data-only containers** without business logic
     - Export basic hooks like `use[Feature]` (e.g., `useHost`) that only access data
   - **Logic Hooks**: `/src/hooks/*/use[Feature]Logic.ts`
     - Contain all business logic for data fetching and manipulation
     - Use React Query for data fetching and caching
     - Call Server Actions, NEVER DB Layer directly
   - Access through centralized exports in `/src/context/index.ts`

## Tech Stack
- Next.js App Router (React) with TypeScript
- Tailwind CSS with shadcn-ui components
- Supabase for authentication and database
- SSR-compatible context system

## Project Structure
- Feature-first organization in `/app/[locale]/[tenant]/[feature]/`
- Feature components in `_components/` subdirectory
- Feature-specific types, constants, actions in separate files
- Centralized context system in `/src/context/`

## Complete Architecture Overview
┌─────────────────────────────────┐
│ Client Components               │
│ /app/[locale]/[tenant]/*/      │ │  _components/ComponentName.tsx │
└───────────────┬─────────────────┘
│
│ import { useFeature } from '@/context'
▼
┌─────────────────────────────────┐
│ Hooks Layer                     │
│                                 │
│ 1. Data-only Providers:         │
│    /src/app/providers/*.tsx     │
│    - Only hold and provide data │
│                                 │
│ 2. Business Logic Hooks:        │
│    /src/hooks/*/*.ts            │
│    - All data logic              │
│    - React Query for fetching   │
│                                 │
│ 3. Centralized Exports:         │
│    /src/context/index.ts        │
│    - Unified import source      │
└───────────────┬─────────────────┘
│
│ Server Actions call
▼
┌─────────────────────────────────┐
│ Server Actions Layer            │
│ /app/[locale]/[tenant]/*/      │ │  actions.ts                    │
│ - 'use server' directive        │
│ - Authentication & validation   │
│ - Caching logic                 │
└───────────────┬─────────────────┘
│
│ DB Layer call
▼
┌─────────────────────────────────┐
│ DB Layer                        │
│ /src/lib/supabase/db-feature/ │
│ - Direct database operations    │
│ - Tenant isolation              │
│ - Error handling                │
└───────────────┬─────────────────┘
│
│ Database connection
▼
┌─────────────────────────────────┐
│ Supabase/PostgreSQL             │
│ - Data persistence              │
└─────────────────────────────────┘