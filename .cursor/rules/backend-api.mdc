---
description: API Design and Implementation Guidelines
globs: "src/app/api/**/*.ts"
priority: 2
category: Backend
---

# API Design and Implementation

## Overview

These guidelines define how to design, implement, and structure API endpoints in the application. Following these standards ensures consistent, secure, and maintainable API routes that adhere to REST principles and provide a solid foundation for frontend interactions.

## Key Principles

1. **RESTful Design** - Follow REST conventions for resource naming and HTTP methods
2. **Consistency** - Maintain consistent patterns across all API endpoints
3. **Security** - Implement proper authentication, authorization, and validation
4. **Error Handling** - Handle errors consistently and provide meaningful feedback
5. **Performance** - Optimize API endpoints for speed and efficiency

## Detailed Rules

### URL Structure

- Use RESTful URL patterns
- Use resources, not actions, in URLs
- Use kebab-case for multi-word paths

```
✅ CORRECT:
GET    /api/projects                # List projects
POST   /api/projects                # Create project
GET    /api/projects/123            # Get project
PUT    /api/projects/123            # Update project
DELETE /api/projects/123            # Delete project
POST   /api/projects/123/publish    # Resource action

❌ INCORRECT:
GET    /api/getProjects             # Uses verb
POST   /api/createProject           # Uses verb
GET    /api/getProject/123          # Uses verb
```

### Route Handler Implementation

- Use Next.js App Router conventions with route.ts files
- Implement proper HTTP methods (GET, POST, PUT, DELETE)
- Keep route handlers focused on request/response handling
- Extract business logic to service layer

### Authentication & Authorization

- Always check session in protected routes
- Use `getSession()` from auth utilities or `createServerClient()` from Supabase centralized client
- Follow centralized Supabase client pattern (see supabase-auth-db.mdc)
- Implement proper tenant isolation
- Return appropriate status codes for auth failures (401/403)

### Request Validation

- Use Zod for request validation
- Validate all incoming data before processing
- Return clear validation error messages
- Follow consistent validation patterns

### Response Format

All API responses must follow a standard format:

#### Success Response
```json
{
  "success": true,
  "data": {...},
  "message": "Optional success message"
}
```

#### Error Response
```json
{
  "success": false,
  "error": "Error message",
  "details": {...}  // Optional validation details
}
```

### HTTP Status Codes

Use appropriate HTTP status codes:

| Code | Description           | Usage                                      |
|------|----------------------|--------------------------------------------|
| 200  | OK                   | Successful GET, PUT, DELETE                |
| 201  | Created              | Successful resource creation (POST)        |
| 400  | Bad Request          | Validation errors, malformed request       |
| 401  | Unauthorized         | Missing or invalid authentication          |
| 403  | Forbidden            | Authenticated but insufficient permissions |
| 404  | Not Found            | Resource not found                         |
| 500  | Internal Server Error| Server-side errors                         |

## Examples

### ✅ Good Example - API Route Handler

```typescript
// src/app/api/projects/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/auth';
import { createServerClient } from '@/lib/supabase';
import { z } from 'zod';
import { projectService } from '@/lib/services';

// Validation schema
const createProjectSchema = z.object({
  name: z.string().min(1).max(100),
  description: z.string().optional(),
});

export async function GET(request: NextRequest) {
  try {
    // Authentication check
    const session = await getSession();
    if (!session?.user) {
      return NextResponse.json({ 
        success: false, 
        error: 'Unauthorized' 
      }, { status: 401 });
    }

    // Get query parameters
    const { searchParams } = new URL(request.url);
    const page = Number(searchParams.get('page') || '1');
    const limit = Number(searchParams.get('limit') || '10');

    // Fetch data with tenant isolation
    const result = await projectService.getProjects({
      tenantId: session.user.tenantId,
      page,
      limit,
    });

    // Return standardized response
    return NextResponse.json({
      success: true,
      data: result,
    });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json({
      success: false,
      error: 'An error occurred while processing your request',
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    // Authentication check
    const session = await getSession();
    if (!session?.user) {
      return NextResponse.json({ 
        success: false, 
        error: 'Unauthorized' 
      }, { status: 401 });
    }

    // Parse and validate request body
    const body = await request.json();
    const validationResult = createProjectSchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json({
        success: false,
        error: 'Validation failed',
        details: validationResult.error.format(),
      }, { status: 400 });
    }

    // Create resource with tenant isolation
    const project = await projectService.createProject({
      data: validationResult.data,
      userId: session.user.id,
      tenantId: session.user.tenantId,
    });

    // Return standardized response
    return NextResponse.json({
      success: true,
      data: project,
    }, { status: 201 });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json({
      success: false,
      error: 'An error occurred while processing your request',
    }, { status: 500 });
  }
}
```

**Why it's good**: Proper authentication, validation, error handling, and standardized responses.

### ❌ Bad Example - API Route Handler

```typescript
// src/app/api/projects/route.ts
import { NextRequest, NextResponse } from 'next/server';
import db from '@/lib/db';

export async function GET(req: NextRequest) {
  // No authentication check
  const projects = await db.project.findMany();
  
  return NextResponse.json(projects);
}

export async function POST(req: NextRequest) {
  // No validation
  const data = await req.json();
  
  // No tenant isolation
  const project = await db.project.create({
    data
  });
  
  // Non-standard response
  return NextResponse.json(project);
}
```

**Why it's bad**: Missing authentication, no validation, no tenant isolation, non-standard response format, and no error handling.

## Common Pitfalls

- **Missing Authentication** - Always check for valid session
- **No Tenant Isolation** - Always include tenant filtering
- **Inconsistent Response Format** - Use standardized response structure
- **Poor Error Handling** - Handle errors gracefully with appropriate status codes
- **Bloated Route Handlers** - Move business logic to service layer

## Related Rules

- core-code-style.mdc - Core code quality standards
- supabase-auth-db.mdc - Authentication and database with Supabase
- frontend-components.mdc - Frontend components that consume APIs 