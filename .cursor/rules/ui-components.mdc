# UI Components Guidelines

## AI Guidelines
Organize components following the feature-first approach with a clear hierarchy. Use shadcn/ui components as the foundation, create reusable base components, and implement feature-specific components within their respective features. Follow consistent naming, props, and styling patterns.

## Key Patterns

### Component Organization
- **Base UI Components**: `/src/components/shadcn/` - Never modify these
- **Custom Shared Components**: `/src/components/ui/` - Reusable across features
- **Layout Components**: `/src/components/layout/` - Page layouts and structural elements
- **Feature Components**: `/src/app/[locale]/[tenant]/[feature]/_components/` - Feature-specific

### Component Hierarchy
- **Primitive Components**: shadcn/ui base components (Button, Input, etc.)
- **Composite Components**: Simple combinations of primitives (e.g., SearchInput)
- **Feature Components**: Domain-specific components (e.g., HostCard, DeploymentForm)
- **Layout Components**: Page structures, grids, and navigation

### Component Design
- **Props Interface**: Define clear props interface for every component
- **Defaults**: Provide sensible default props
- **Composition**: Use composition over inheritance
- **Children Props**: Accept and use children when appropriate
- **Forwardable Refs**: Forward refs for base components

### Error & Loading States
- **Empty States**: Always handle empty data scenarios
- **Loading States**: Include loading indicators (use existing skeletons)
- **Error States**: Handle and display errors appropriately
- **Destructured Props**: Use prop destructuring with defaults for these states

## Examples

### Component Structure

```typescript
// Shared component in /src/components/ui/Card.tsx
import React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const cardVariants = cva(
  'rounded-lg shadow-sm overflow-hidden',
  {
    variants: {
      variant: {
        default: 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700',
        outline: 'border border-gray-200 dark:border-gray-700',
        ghost: 'bg-transparent border-0',
      },
      size: {
        default: 'p-6',
        sm: 'p-4',
        lg: 'p-8',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

export interface CardProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof cardVariants> {
  children: React.ReactNode;
}

const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, variant, size, children, ...props }, ref) => {
    return (
      <div 
        className={cn(cardVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      >
        {children}
      </div>
    );
  }
);
Card.displayName = 'Card';

export { Card };
```

### Feature Component

```typescript
// Feature-specific component in /src/app/[locale]/[tenant]/hosts/_components/HostCard.tsx
import React from 'react';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/shadcn/badge';
import { Button } from '@/components/shadcn/button';
import { Laptop, Wifi, WifiOff, MoreVertical } from 'lucide-react';
import type { Host } from '../types';

interface HostCardProps {
  host: Host;
  onConnect?: (hostId: string) => void;
  onDisconnect?: (hostId: string) => void;
  onEdit?: (hostId: string) => void;
  loading?: boolean;
}

export function HostCard({ 
  host, 
  onConnect, 
  onDisconnect, 
  onEdit, 
  loading = false 
}: HostCardProps) {
  const isConnected = host.status === 'connected';
  
  return (
    <Card className="relative">
      <div className="flex items-start justify-between">
        <div className="flex gap-3">
          <Laptop className="h-5 w-5 text-gray-500" />
          <div>
            <h3 className="font-medium">{host.name}</h3>
            <p className="text-sm text-gray-500">{host.ip}:{host.port}</p>
          </div>
        </div>
        
        <Badge 
          variant={isConnected ? "success" : "destructive"}
          className="ml-auto"
        >
          {isConnected ? 'Connected' : 'Disconnected'}
        </Badge>
      </div>
      
      <div className="mt-4 flex gap-2 justify-end">
        {isConnected ? (
          <Button 
            size="sm" 
            variant="outline" 
            onClick={() => onDisconnect?.(host.id)}
            disabled={loading}
          >
            <WifiOff className="h-4 w-4 mr-2" />
            Disconnect
          </Button>
        ) : (
          <Button 
            size="sm" 
            variant="default" 
            onClick={() => onConnect?.(host.id)}
            disabled={loading}
          >
            <Wifi className="h-4 w-4 mr-2" />
            Connect
          </Button>
        )}
        
        <Button 
          size="sm" 
          variant="ghost"
          onClick={() => onEdit?.(host.id)}
          disabled={loading}
        >
          <MoreVertical className="h-4 w-4" />
        </Button>
      </div>
      
      {loading && (
        <div className="absolute inset-0 bg-white/50 dark:bg-black/50 flex items-center justify-center">
          <div className="animate-spin h-5 w-5 border-2 border-primary border-t-transparent rounded-full" />
        </div>
      )}
    </Card>
  );
}
```

### Empty & Error States

```typescript
// In /src/app/[locale]/[tenant]/hosts/_components/HostList.tsx
import { useHost } from '@/context';
import { HostCard } from './HostCard';
import { EmptyState } from '@/components/ui/EmptyState';
import { ErrorMessage } from '@/components/ui/ErrorMessage';

export function HostList() {
  const { hosts, loading, error, connectHost, disconnectHost } = useHost();
  
  if (loading) {
    return <HostListSkeleton count={3} />;
  }
  
  if (error) {
    return <ErrorMessage message={error.message} />;
  }
  
  if (hosts.length === 0) {
    return (
      <EmptyState
        title="No hosts found"
        description="Add your first host to get started"
        action={{ label: 'Add Host', onClick: () => {} }}
      />
    );
  }
  
  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {hosts.map(host => (
        <HostCard
          key={host.id}
          host={host}
          onConnect={connectHost}
          onDisconnect={disconnectHost}
        />
      ))}
    </div>
  );
}
```

## Component Patterns to Avoid

```typescript
// DON'T: Modify shadcn components directly
// in /src/components/shadcn/button.tsx
// Don't change these files!

// DON'T: Create component with poor props interface
function BadComponent(p) {  // No type safety
  return <div>{p.data && p.data.map(i => <span>{i}</span>)}</div>;
}

// DON'T: Put feature components in shared folders
// in /src/components/ui/HostCard.tsx
// This should be in /src/app/[locale]/[tenant]/hosts/_components/
```

## Related Rules
- core-architecture.mdc - Feature-first organization
- ui-state.mdc - State management with components 