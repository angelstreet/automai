---
description: Context Project Overview
globs: ["**/*"]
alwaysApply: true
---

# AutomAI Project Context

## Project Overview

AutomAI is a multi-tenant SaaS platform designed to simplify deployment workflows and infrastructure management for technical and non-technical users alike. It serves as an intuitive interface to existing tools like Jenkins, SSH, Docker, and Portainer, allowing users to deploy applications without deep technical knowledge.

## Core Purpose

The platform aims to democratize deployment processes by providing a user-friendly interface that abstracts the complexity of underlying tools. AutomAI enables:
- Non-technical users to deploy applications without understanding the underlying infrastructure
- Technical users to set up workflows that can be executed by team members with varying technical expertise
- Teams to manage deployments across multiple environments with proper access controls

## Technology Stack

- **Frontend**: Next.js App Router, React, Tailwind CSS, shadcn/ui components
- **Backend**: Next.js API routes and Server Actions
- **Database & Auth**: Supabase (PostgreSQL + Auth)
- **CI/CD Integration**: Jenkins (planned)
- **Deployment Targets**: SSH servers, Docker, Portainer (Docker in progress)
- **Repository Integration**: GitHub, GitLab, Gitea

## Architecture

The application follows a strict three-layer architecture:

1. **Server DB Layer (Core)**
   - Direct database interaction via Supabase
   - Located in `/src/lib/supabase/db*.ts` files
   - Feature-specific DB modules in `/src/lib/supabase/db-{feature}/`

2. **Server Actions Layer (Bridge)**
   - Business logic and orchestration
   - Located in `/src/app/actions/*.ts` and feature-specific action files
   - Handles validation, error management, and calls to DB Layer

3. **Client Hooks Layer (Interface)**
   - React hooks for frontend components
   - Manages loading/error states and data caching
   - Calls Server Actions (never directly to DB Layer)

## Features Status

### Implemented
- âœ… SSH host connection and management
- âœ… Repository explorer with GitHub, GitLab, and Gitea integration
- âœ… Deployment UI frontend 
- âœ… User authentication with Supabase
- âœ… Multi-tenant infrastructure
- âœ… Terminal emulation for SSH connections

### In Progress
- ðŸ”„ Docker and Portainer integration
- ðŸ”„ Jenkins backend integration
- ðŸ”„ Full deployment workflow

### Roadmap
- ðŸ“† AI-assisted deployment configuration
- ðŸ“† Advanced monitoring and reporting
- ðŸ“† Team collaboration features
- ðŸ“† Scheduled/automated deployments
- ðŸ“† Enhanced security and compliance features

## User Roles

The platform supports multiple user roles:
- **Admin**: Full system access, can configure all settings
- **Developer**: Create and modify deployments and configurations
- **Tester**: Execute deployments and tests
- **Viewer**: View status and reporting only

## Development Principles

1. **Interface, Don't Reinvent**
   - Focus on integrating existing tools rather than building new ones
   - Prioritize compatibility with established DevOps practices

2. **User Experience First**
   - Design for non-technical users with technical depth available when needed
   - Streamline common workflows to minimize friction

3. **Code Organization**
   - Feature-first organization in `/app/[locale]/[tenant]/feature/`
   - Strict adherence to the three-layer architecture
   - Code splitting between shared and feature-specific components

4. **Security & Multi-Tenancy**
   - Robust tenant isolation at all layers
   - Proper credential management for deployment targets
   - Role-based access control

## Key Components

- **Host Management**: Connect and manage SSH servers, Docker instances, and container platforms
- **Repository Integration**: Browse, sync, and use code from GitHub, GitLab, and Gitea repositories
- **Deployment**: Configure, execute, and monitor deployments across multiple targets
- **Terminal**: Browser-based terminal access to connected hosts

## Important Considerations

- The project prioritizes interfacing with existing tools, not replacing them
- Code should follow established patterns and be easily maintainable
- UI must be intuitive enough for non-technical users while providing depth for technical users
- Always consider multi-tenant implications when implementing features
- Documentation should be kept up-to-date alongside code changes

## Getting Started

New developers should:
1. Familiarize with the three-layer architecture
2. Understand the feature-first organization
3. Review existing features before implementing new ones
4. Always adhere to the core principles of not reinventing the wheel
5. Keep the non-technical user in mind when designing interfaces

For detailed technical documentation, refer to the `/docs` directory.