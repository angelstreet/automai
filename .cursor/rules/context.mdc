---
description: 
globs: 
alwaysApply: false
---
# Context Management Guidelines

**IMPORTANT: This document outlines the rules for context management in the application. Follow these guidelines when working with context providers.**

## Architecture Overview

Our application follows a structured three-layer architecture for data flow:

1. **Database Layer** (`/src/lib/supabase/db-*.ts`): Pure database operations
2. **Server Actions Layer** (`/src/app/[locale]/[tenant]/*/actions.ts`): Business logic
3. **Client Hooks Layer** (Context providers): UI state management

### Component Hierarchy

```
┌───────────────────────────────────────────────────────────────────┐
│                         Client Components                          │
└───────────┬───────────┬───────────┬───────────┬───────────────────┘
            │           │           │           │
            ▼           ▼           ▼           ▼
┌───────────────────────────────────────────────────────────────────┐
│                        AppContext (Central Hub)                    │
├───────────┬───────────┬───────────┬───────────┬───────────────────┤
│HostContext│DeploymentC│RepositoryC│CICDContext│Other Context Hooks│
└───────────┴───────────┴───────────┴───────────┴───────────────────┘
            │           │           │           │
            ▼           ▼           ▼           ▼
┌───────────────────────────────────────────────────────────────────┐
│                         Server Actions Layer                       │
├───────────┬───────────┬───────────┬───────────┬───────────────────┤
│host/actions│deploy/act.│repos/act. │cicd/act.  │Other Actions      │
└───────────┴───────────┴───────────┴───────────┴───────────────────┘
            │           │           │           │
            ▼           ▼           ▼           ▼
┌───────────────────────────────────────────────────────────────────┐
│                          Database Layer                            │
├───────────┬───────────┬───────────┬───────────┬───────────────────┤
│db-hosts   │db-deploy  │db-repos   │db-cicd    │Other DB Modules   │
└───────────┴───────────┴───────────┴───────────┴───────────────────┘
            │           │           │           │
            ▼           ▼           ▼           ▼
┌───────────────────────────────────────────────────────────────────┐
│                    Supabase (External Data Store)                  │
└───────────────────────────────────────────────────────────────────┘
```

## Core Principles

### 1. Database Layer Rules

- **Cookie Handling**: Database modules must accept `cookieStore` parameter instead of calling `cookies()` directly
- **Consistent Interface**: All DB modules must follow the same interface pattern
- **No Direct Component Access**: Database layer should never be accessed directly from components
- **Pure Database Operations**: This layer should only perform database operations, not business logic

```typescript
// CORRECT DATABASE MODULE PATTERN
export default {
  async findMany(options: any = {}, cookieStore: any): Promise<any[]> {
    // Create client with provided cookie store
    const supabase = await createClient(cookieStore);
    
    // Build and execute query
    // ...
    
    return data || [];
  },
  
  async findUnique(id: string, cookieStore: any): Promise<any | null> {
    // ...
  }
};
```

### 2. Server Actions Layer Rules

- **Authentication First**: Handle authentication before any caching
- **Caching Done Right**: Never use dynamic data sources (cookies, headers) inside cached functions
- **Clear Separation**: Pass dynamic data as parameters to cached functions
- **Proper Error Handling**: Catch and log errors at this layer

```typescript
// CORRECT SERVER ACTION PATTERN
export async function getItems(user?: AuthUser): Promise<any[]> {
  // 1. Authentication check
  if (!user) {
    user = await getUser();
  }
  
  if (!user) return [];
  
  // 2. Get cookie store OUTSIDE cached function
  const cookieStore = cookies();
  
  // 3. Define cache function with explicit key for this tenant
  const getCachedItems = unstable_cache(
    // Pass dynamic data as parameters
    async (tenantId: string) => getItemsInternal(tenantId, cookieStore),
    [`items-list-${user.tenant_id}`],
    { revalidate: 60, tags: ['items'] }
  );
  
  // 4. Execute cached function
  return await getCachedItems(user.tenant_id);
}

// Internal non-exported function with parameters
async function getItemsInternal(
  tenantId: string, 
  cookieStore: any
): Promise<any[]> {
  const { default: db } = await import('@/lib/supabase/db-*/item');
  return await db.findMany({ where: { tenant_id: tenantId } }, cookieStore);
}
```

### 3. Context Layer Rules

- **Centralized Management**: All feature contexts are now managed through `AppContext`
- **Route-Based Fetching**: Only fetch data when on relevant routes
- **Request Throttling**: Implement cooldown to prevent excessive API calls
- **Tracked Method Calls**: Monitor all context method calls for debugging

```typescript
// CORRECT CONTEXT PATTERN
export function FeatureProvider({ children }: { children: React.ReactNode }) {
  // State
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const lastFetchTime = useRef<number>(0);
  const pathname = usePathname();
  
  // Only fetch if on relevant route
  const isRelevantRoute = useCallback(() => {
    return pathname?.includes('/feature') || pathname?.includes('/dashboard');
  }, [pathname]);
  
  // Fetch with cooldown
  const fetchItems = useCallback(async () => {
    // Skip if not on relevant route
    if (!isRelevantRoute()) {
      console.log('[Context] Not on relevant route, skipping fetch');
      return;
    }
    
    // Apply cooldown
    const now = Date.now();
    if (now - lastFetchTime.current < 5000) { // 5 second cooldown
      console.log('[Context] Throttling fetch request');
      return;
    }
    
    // Update fetch time and fetch data
    lastFetchTime.current = now;
    setLoading(true);
    
    try {
      const data = await getItems();
      setItems(data);
    } catch (error) {
      console.error('[Context] Error fetching items:', error);
    } finally {
      setLoading(false);
    }
  }, [isRelevantRoute]);
  
  // Other methods...
}
```

## Implementation Guidelines

### Context Access Patterns

1. **Direct Hook Access (Preferred)**
   ```typescript
   // In components:
   const { hosts, loading, fetchHosts } = useHost();
   ```

2. **AppContext Access (For multiple contexts)**
   ```typescript
   const { host, deployment } = useAppContext();
   ```

### Debouncing & Cooldown

To prevent excessive API calls, implement debouncing and cooldown:

```typescript
// In context definitions
const FETCH_COOLDOWN = 5000; // 5 seconds

const fetchData = useCallback(async () => {
  const now = Date.now();
  if (now - lastFetchTime.current < FETCH_COOLDOWN) {
    console.log(`[Context] Throttling fetch, called too soon`);
    return;
  }
  lastFetchTime.current = now;
  
  // Fetch logic...
}, []);
```

### Route Relevance

Only fetch data when on relevant routes:

```typescript
// In context provider
const pathname = usePathname();

const isRelevantRoute = useCallback(() => {
  return pathname?.includes('/feature-path') || pathname?.includes('/dashboard');
}, [pathname]);

// Use in fetch function
const fetchData = useCallback(async () => {
  if (!isRelevantRoute()) {
    return; // Skip if not on relevant route
  }
  // Fetch logic...
}, [isRelevantRoute]);
```

### Method Call Tracking

Track context method calls to debug performance issues:

```typescript
// This is handled automatically in AppContext.tsx
function trackMethodCall(contextName: string, methodName: string, caller: string) {
  console.log(`[Context Tracker] ${contextName}.${methodName} called by ${caller}`);
}
```

## Common Pitfalls

### 1. Dynamic Data in Cached Functions

```typescript
// WRONG - Will cause errors
const cachedFunction = unstable_cache(async () => {
  const cookieStore = cookies(); // ERROR: Dynamic data inside cache
  // ...
});

// CORRECT
export async function getData() {
  const cookieStore = cookies(); // Dynamic data outside cache
  
  const cachedFunction = unstable_cache(
    async (param1) => useDataWithoutCookies(param1, cookieStore),
    ['cache-key']
  );
  
  return cachedFunction('value');
}
```

### 2. Excessive API Calls

```typescript
// WRONG - No throttling
const fetchData = useCallback(async () => {
  // This will be called frequently and overload the server
  const data = await getData();
  setData(data);
}, []);

// CORRECT - With throttling
const fetchData = useCallback(async () => {
  if (now - lastFetchTime.current < COOLDOWN) return;
  lastFetchTime.current = now;
  
  const data = await getData();
  setData(data);
}, []);
```

### 3. Ignoring Route Relevance

```typescript
// WRONG - Always fetches
useEffect(() => {
  fetchData(); // Fetches even on irrelevant routes
}, [fetchData]);

// CORRECT - Only fetches on relevant routes
useEffect(() => {
  if (isRelevantRoute()) {
    fetchData();
  }
}, [isRelevantRoute, fetchData]);
```

## Testing Context Logic

- **Mock API Calls**: Use Jest mocks for testing data fetching
- **Test Caching Logic**: Verify that repeated calls use cached results
- **Verify Cleanup**: Ensure contexts properly clean up resources when unmounted
- **Test Throttling**: Verify that rapid consecutive calls are properly throttled

## Related Rules
- core-architecture.mdc - Three-layer architecture
- api-design.mdc - API design principles 
- data-caching.mdc - Caching strategies