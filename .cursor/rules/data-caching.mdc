# Caching Strategy Guidelines

## AI Guidelines
Implement caching at the Server Actions layer using the serverCache utility. Define consistent TTL values, clear cache on data modifications, and implement proper cache invalidation strategies. Never cache at the DB layer or in components directly.

## Key Patterns

### Caching Architecture
- **Cache Location**: Implement at Server Actions layer, not DB or UI layers
- **Cache Utility**: Use `serverCache` utility for server-side caching
- **TTL Values**: Define cache TTL constants in feature's constants.ts file
- **Cache Keys**: Use consistent naming with feature prefix and identifiers
- **Invalidation**: Clear relevant cache entries when data is modified

### Cache Implementation
- **Cache Check**: Before database calls, check if data exists in cache
- **Cache Storage**: After fetching data, store it in cache with appropriate TTL
- **Cache Invalidation**: Clear related cache entries after mutations
- **Selective Caching**: Only cache frequently accessed, relatively static data
- **User-Specific Caching**: Include user ID in cache key when appropriate

### TTL Strategy
- **User Data**: 15 minutes
- **Reference Data**: 30 minutes to 1 hour
- **Frequently Changing Data**: 1-5 minutes or no caching
- **Listing Data**: 5-10 minutes
- **Detail Data**: 2-5 minutes

## Examples

```typescript
// In constants.ts
export const CACHE_TTL = {
  REPOSITORIES: 5 * 60 * 1000, // 5 minutes
  REPOSITORY: 2 * 60 * 1000,   // 2 minutes
  HOSTS: 5 * 60 * 1000,        // 5 minutes
  HOST: 2 * 60 * 1000,         // 2 minutes
  USER: 15 * 60 * 1000,        // 15 minutes
};

// In actions.ts - Reading with cache
export async function getRepositoriesAction(filter?: RepositoryFilter): Promise<ActionResult<Repository[]>> {
  try {
    // Create a cache key based on filter
    const cacheKey = `repositories:${filter?.providerId || 'all'}`;
    
    // Check cache first
    const cachedData = serverCache.get<Repository[]>(cacheKey);
    if (cachedData) {
      return { success: true, data: cachedData };
    }
    
    // If not in cache, fetch from database
    const result = await repositoryDb.getRepositories(filter);
    
    if (result.success && result.data) {
      // Map and store in cache
      const mappedData = result.data.map(mapDbRepositoryToRepository);
      serverCache.set(cacheKey, mappedData, CACHE_TTL.REPOSITORIES);
      return { success: true, data: mappedData };
    }
    
    return { success: false, error: result.error };
  } catch (error) {
    return { success: false, error: 'Failed to fetch repositories' };
  }
}

// In actions.ts - Cache invalidation
export async function createRepositoryAction(data: CreateRepositoryInput): Promise<ActionResult<Repository>> {
  try {
    const result = await repositoryDb.createRepository(data);
    
    if (result.success && result.data) {
      // Invalidate cache for repository listings
      serverCache.delete('repositories:all');
      // Invalidate any provider-specific cache entries
      if (data.providerId) {
        serverCache.delete(`repositories:${data.providerId}`);
      }
      
      return { success: true, data: mapDbRepositoryToRepository(result.data) };
    }
    
    return { success: false, error: result.error };
  } catch (error) {
    return { success: false, error: 'Failed to create repository' };
  }
}
```

### User-specific Caching

```typescript
// User-specific cache keys
const userCacheKey = `user:${userId}:repositories`;
const cachedData = serverCache.get<Repository[]>(userCacheKey);

// For tenant-specific data
const tenantCacheKey = `tenant:${tenantId}:hosts`;
```

### Cache Patterns to Avoid

```typescript
// BAD: Caching at DB layer
// in db-repositories.ts
export async function getRepositories() {
  // Don't implement caching here
  const cachedData = cache.get('repositories'); // WRONG PLACE
  
  // Database access code
}

// BAD: Direct caching in components
// in RepositoryList.tsx
function RepositoryList() {
  // Don't implement caching in the component
  const [cachedRepos, setCachedRepos] = useState(
    localStorage.getItem('repositories') // WRONG APPROACH
  );
  
  // Component code
}
```

## Related Rules
- core-architecture.mdc - Three-layer architecture
- data-supabase.mdc - Database access
- api-design.mdc - API design patterns 