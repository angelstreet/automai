---
description: UI and Styling Rules
globs: src/**/*.{ts,tsx,css}
alwaysApply: true
---

# UI and Styling Rules

## Tailwind CSS Usage

### Core Principles

1. **Use Tailwind utility classes for styling**
   - Prefer utility classes over custom CSS
   - Follow mobile-first responsive design
   - Group related utility classes logically

```tsx
// ✅ CORRECT - Using Tailwind utilities directly
<button className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md">
  Submit
</button>

// ❌ INCORRECT - Using custom CSS unnecessarily
<button className="custom-button">
  Submit
</button>
```

### Class Organization

Organize Tailwind classes in logical groups:

```tsx
<div className="
  // Layout & Sizing
  flex flex-col items-center justify-between
  w-full max-w-md min-h-screen
  // Spacing
  p-4 sm:p-6 
  // Typography
  text-base font-medium text-gray-900
  // Colors & Visual
  bg-white dark:bg-gray-800
  rounded-lg shadow-md
  // State & Interactive
  hover:shadow-lg focus:outline-none
  // Responsive
  sm:flex-row md:max-w-2xl
">
  {/* Content */}
</div>
```

### Responsive Design

Use mobile-first responsive design:

```tsx
// ✅ CORRECT - Mobile-first approach
<div className="
  // Mobile (default)
  grid grid-cols-1 gap-4 p-4
  // Tablet
  md:grid-cols-2 md:gap-6 md:p-6
  // Desktop
  lg:grid-cols-3 lg:gap-8 lg:p-8
">
  {/* Grid items */}
</div>

// ❌ INCORRECT - Desktop-first or inconsistent breakpoints
<div className="
  grid grid-cols-3 gap-8 p-8
  small:grid-cols-1 small:gap-4 small:p-4
">
  {/* Grid items */}
</div>
```

### Dark Mode

Implement dark mode support with Tailwind's dark mode utilities:

```tsx
// ✅ CORRECT - Dark mode support
<div className="
  bg-white text-gray-900
  dark:bg-gray-800 dark:text-gray-100
">
  {/* Content */}
</div>
```

## shadcn/ui Components

### Component Usage

Use shadcn/ui components for consistent design:

```tsx
// ✅ CORRECT - Using shadcn components properly
import { Button } from '@/components/shadcn/button';
import { Input } from '@/components/shadcn/input';

function LoginForm() {
  return (
    <form className="space-y-4">
      <Input 
        type="email" 
        placeholder="Email" 
        className="w-full"
      />
      <Button type="submit" className="w-full">
        Login
      </Button>
    </form>
  );
}
```

### Component Customization

Customize shadcn/ui components properly:

```tsx
// ✅ CORRECT - Customizing via className prop
<Button
  variant="outline"
  size="sm"
  className="border-dashed"
>
  Custom Button
</Button>

// ❌ INCORRECT - Modifying component implementation
// Don't modify the original shadcn component files directly
```

### Component Extension

Extend shadcn/ui components when needed:

```tsx
// ✅ CORRECT - Creating extended components
import { Button } from '@/components/shadcn/button';
import { cn } from '@/lib/utils';

interface PrimaryButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  isLoading?: boolean;
}

export function PrimaryButton({ 
  children, 
  isLoading, 
  className, 
  ...props 
}: PrimaryButtonProps) {
  return (
    <Button 
      variant="default"
      className={cn('bg-primary text-white', 
        isLoading && 'opacity-70 cursor-not-allowed',
        className
      )}
      disabled={isLoading || props.disabled}
      {...props}
    >
      {isLoading ? <LoadingSpinner className="mr-2" /> : null}
      {children}
    </Button>
  );
}
```

## Forms and Inputs

### Form Structure

Use consistent form structure:

```tsx
// ✅ CORRECT - Structured form with proper spacing
<form onSubmit={handleSubmit} className="space-y-6">
  <div className="space-y-2">
    <Label htmlFor="email">Email</Label>
    <Input
      id="email"
      type="email"
      value={email}
      onChange={(e) => setEmail(e.target.value)}
      placeholder="Enter your email"
      required
    />
    {errors.email && (
      <p className="text-sm text-red-500">{errors.email}</p>
    )}
  </div>
  
  <div className="space-y-2">
    <Label htmlFor="password">Password</Label>
    <Input
      id="password"
      type="password"
      value={password}
      onChange={(e) => setPassword(e.target.value)}
      placeholder="Enter your password"
      required
    />
    {errors.password && (
      <p className="text-sm text-red-500">{errors.password}</p>
    )}
  </div>
  
  <Button type="submit" className="w-full">
    {isLoading ? 'Loading...' : 'Submit'}
  </Button>
</form>
```

### Form Validation

Use consistent error display:

```tsx
// ✅ CORRECT - Consistent error display
<div className="space-y-2">
  <Label htmlFor={id} className={errors[id] ? "text-red-500" : ""}>
    {label}
  </Label>
  <Input
    id={id}
    className={errors[id] ? "border-red-500 focus:ring-red-500" : ""}
    {...props}
  />
  {errors[id] && (
    <p className="text-sm text-red-500">{errors[id]}</p>
  )}
</div>
```

## Layout Components

### Page Layout

Use consistent page layout structure:

```tsx
// src/app/[locale]/[tenant]/dashboard/page.tsx
import { PageHeader } from '@/components/layout/PageHeader';
import { Main } from '@/components/layout/Main';

export default function DashboardPage() {
  return (
    <>
      <PageHeader
        title="Dashboard"
        description="Overview of your project stats"
      />
      <Main>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {/* Dashboard content */}
        </div>
      </Main>
    </>
  );
}
```

### Card Patterns

Use consistent card patterns:

```tsx
// ✅ CORRECT - Consistent card pattern
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card description here</CardDescription>
  </CardHeader>
  <CardContent>
    {/* Card content here */}
  </CardContent>
  <CardFooter>
    <Button>Action</Button>
  </CardFooter>
</Card>
```

## Accessibility

### Semantic HTML

Use semantic HTML elements:

```tsx
// ✅ CORRECT - Using semantic HTML
<article>
  <header>
    <h2>Post Title</h2>
    <time dateTime="2023-06-01">June 1, 2023</time>
  </header>
  <section>
    <p>Content goes here</p>
  </section>
  <footer>
    <p>Author: John Doe</p>
  </footer>
</article>

// ❌ INCORRECT - Using generic divs
<div>
  <div>
    <div>Post Title</div>
    <div>June 1, 2023</div>
  </div>
  <div>
    <div>Content goes here</div>
  </div>
  <div>
    <div>Author: John Doe</div>
  </div>
</div>
```

### ARIA Attributes

Use ARIA attributes appropriately:

```tsx
// ✅ CORRECT - Proper ARIA usage
<button
  aria-label="Close dialog"
  aria-pressed={isPressed}
  onClick={handleClose}
>
  <span className="sr-only">Close</span>
  <XIcon />
</button>

// ❌ INCORRECT - Missing or improper ARIA
<button onClick={handleClose}>
  <XIcon />
</button>
```

### Keyboard Navigation

Ensure proper keyboard navigation:

```tsx
// ✅ CORRECT - Supporting keyboard navigation
<div
  role="menuitem"
  tabIndex={0}
  onKeyDown={(e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      handleSelect();
    }
  }}
  onClick={handleSelect}
>
  Menu Item
</div>
```

## Icons and Images

### Icon Usage

Use consistent icon patterns:

```tsx
// ✅ CORRECT - Consistent icon usage
import { Icon } from 'lucide-react';

<Button>
  <Icon className="h-4 w-4 mr-2" />
  Button Text
</Button>

// ❌ INCORRECT - Inconsistent sizing or positioning
<Button>
  <Icon className="h-5 mr-1" />
  Button Text
</Button>
```

### Responsive Images

Optimize images with Next.js Image component:

```tsx
// ✅ CORRECT - Using Next.js Image
import Image from 'next/image';

<Image
  src="/path/to/image.jpg"
  alt="Descriptive alt text"
  width={800}
  height={600}
  className="rounded-md"
  priority={isHero}
/>

// ❌ INCORRECT - Using HTML img tag
<img 
  src="/path/to/image.jpg" 
  alt="Descriptive alt text"
  className="w-full h-auto rounded-md"
/>
```

## Animation and Transitions

Use consistent animations:

```tsx
// ✅ CORRECT - Using tailwindcss-animate
<div className="animate-in fade-in slide-in-from-bottom duration-300">
  Content that animates in
</div>

// For shadcn components
<Dialog>
  <DialogContent className="sm:max-w-md">
    {/* Content inside the dialog */}
  </DialogContent>
</Dialog>
```

## Color System

Use the Tailwind color palette consistently:

```tsx
// ✅ CORRECT - Using semantic color classes
<div className="
  bg-background 
  text-foreground
  border-border
">
  <button className="
    bg-primary 
    text-primary-foreground
    hover:bg-primary/90
  ">
    Primary Button
  </button>
  <button className="
    bg-secondary
    text-secondary-foreground
    hover:bg-secondary/90
  ">
    Secondary Button
  </button>
</div>

// ❌ INCORRECT - Hardcoding colors
<div style={{ backgroundColor: '#ffffff', color: '#000000' }}>
  <button style={{ backgroundColor: '#0070f3', color: 'white' }}>
    Primary Button
  </button>
</div>
```

## Typography

Follow the typography scale:

```tsx
// ✅ CORRECT - Following type scale
<h1 className="text-4xl font-bold tracking-tight">
  Main Heading
</h1>
<h2 className="text-3xl font-semibold tracking-tight">
  Subheading
</h2>
<p className="text-base leading-7">
  Regular paragraph text
</p>
<p className="text-sm text-muted-foreground">
  Small muted text
</p>

// ❌ INCORRECT - Custom sizes
<h1 style={{ fontSize: '32px', fontWeight: 700 }}>
  Main Heading
</h1>
```

## Best Practices

1. **Use shadcn components** for common UI elements
2. **Follow mobile-first responsive design**
3. **Ensure proper accessibility**
4. **Use semantic HTML elements**
5. **Follow the design system color palette**
6. **Maintain consistent spacing using the spacing scale**
7. **Use proper typography classes**
8. **Optimize images with next/image**
9. **Use consistent animations and transitions**
10. **Keep components focused on single responsibilities**