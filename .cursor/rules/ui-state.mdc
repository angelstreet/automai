# UI State Management

## AI Guidelines
Implement centralized state management using React Context API with a consistent provider/hook pattern. Store state based on persistence needs, using server state for API data, form state for user inputs, and UI state for visual elements. Use a single state provider per domain area with well-typed hooks for component access.

## Key Patterns

### State Organization
- **State Categories**:
  - **Server State**: Data from API (hosts, repositories, deployments)
  - **Form State**: User input data (use React Hook Form)
  - **UI State**: Visual/interaction state (modals, tabs, selections)
  - **Router State**: URL parameters and search queries

- **Global vs Local State**:
  - Use Context for shared state across components
  - Use local component state for isolated UI concerns
  - Keep state close to where it's used

### Context Implementation
- **Context Location**: `/src/context/[domain]/`
- **Feature Contexts**: One provider per domain area
  - HostContext for host management
  - RepositoryContext for repositories
  - DeploymentContext for deployments
  - AuthContext for user authentication

- **Context Structure**:
  - Provider component wrapping children
  - useHook function as the primary API
  - Strong TypeScript typing for context values

### Common State Patterns
- **Loading States**: Use discriminated union for request states
  ```typescript
  type RequestState<T> = 
    | { status: 'idle' }
    | { status: 'loading' }
    | { status: 'success', data: T }
    | { status: 'error', error: string };
  ```

- **List/Item Pattern**: For collection management
  ```typescript
  interface HostState {
    hosts: Host[];          // Collection
    selectedHostId: string | null; // Selection
    loadingState: RequestState<Host[]>;
    itemLoadingState: Record<string, RequestState<Host>>;
  }
  ```

- **Caching Pattern**: For optimized data fetching
  ```typescript
  const fetchHosts = useCallback(async (refresh = false) => {
    if (!refresh && hosts.length > 0) return;
    
    setState(prev => ({...prev, loadingState: {status: 'loading'}}));
    
    try {
      const result = await getHostsAction();
      // Rest of implementation
    } catch (error) {
      // Error handling
    }
  }, [hosts.length]);
  ```

## Examples

### Context Provider

```typescript
// In src/context/host/HostProvider.tsx
'use client';

import { createContext, useContext, useState, useCallback, useEffect } from 'react';
import { Host, HostFilter } from '@/types/host';
import { getHostsAction, createHostAction, deleteHostAction } from '@/app/actions/host';

interface HostContextType {
  hosts: Host[];
  loading: boolean;
  error: string | null;
  selectedHostId: string | null;
  
  fetchHosts: (refresh?: boolean) => Promise<void>;
  selectHost: (id: string | null) => void;
  createHost: (data: HostCreateInput) => Promise<ActionResult<Host>>;
  deleteHost: (id: string) => Promise<ActionResult<void>>;
}

const HostContext = createContext<HostContextType | undefined>(undefined);

export function HostProvider({ children }: { children: React.ReactNode }) {
  const [hosts, setHosts] = useState<Host[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedHostId, setSelectedHostId] = useState<string | null>(null);
  
  const fetchHosts = useCallback(async (refresh = false) => {
    if (!refresh && hosts.length > 0) return;
    
    setLoading(true);
    setError(null);
    
    try {
      const result = await getHostsAction();
      
      if (result.success) {
        setHosts(result.data);
      } else {
        setError(result.error);
      }
    } catch (err) {
      setError('Failed to fetch hosts');
      console.error(err);
    } finally {
      setLoading(false);
    }
  }, [hosts.length]);
  
  const selectHost = useCallback((id: string | null) => {
    setSelectedHostId(id);
  }, []);
  
  const createHost = useCallback(async (data: HostCreateInput) => {
    try {
      const result = await createHostAction(data);
      
      if (result.success) {
        setHosts(prev => [...prev, result.data]);
      }
      
      return result;
    } catch (err) {
      console.error('Error creating host:', err);
      return { success: false, error: 'Failed to create host' };
    }
  }, []);
  
  const deleteHost = useCallback(async (id: string) => {
    try {
      const result = await deleteHostAction(id);
      
      if (result.success) {
        setHosts(prev => prev.filter(host => host.id !== id));
        if (selectedHostId === id) {
          setSelectedHostId(null);
        }
      }
      
      return result;
    } catch (err) {
      console.error('Error deleting host:', err);
      return { success: false, error: 'Failed to delete host' };
    }
  }, [selectedHostId]);
  
  useEffect(() => {
    fetchHosts();
  }, [fetchHosts]);
  
  const value = {
    hosts,
    loading,
    error,
    selectedHostId,
    fetchHosts,
    selectHost,
    createHost,
    deleteHost
  };
  
  return (
    <HostContext.Provider value={value}>
      {children}
    </HostContext.Provider>
  );
}

export function useHost() {
  const context = useContext(HostContext);
  
  if (context === undefined) {
    throw new Error('useHost must be used within a HostProvider');
  }
  
  return context;
}
```

### Consumer Component

```typescript
// In a component file
'use client';

import { useHost } from '@/context/host';
import { HostCard, HostForm } from '@/components';

export function HostManagerPage() {
  const { 
    hosts, 
    loading, 
    error, 
    selectedHostId,
    selectHost,
    createHost,
    deleteHost 
  } = useHost();
  
  const selectedHost = hosts.find(host => host.id === selectedHostId);
  
  const handleSelectHost = (id: string) => {
    selectHost(id);
  };
  
  const handleCreateHost = async (data) => {
    const result = await createHost(data);
    
    if (result.success) {
      // Show success notification
    } else {
      // Show error notification
    }
  };
  
  return (
    <div className="host-manager">
      {loading && <div>Loading...</div>}
      {error && <div className="error">{error}</div>}
      
      <div className="host-list">
        {hosts.map(host => (
          <HostCard
            key={host.id}
            host={host}
            isSelected={host.id === selectedHostId}
            onSelect={() => handleSelectHost(host.id)}
            onDelete={() => deleteHost(host.id)}
          />
        ))}
      </div>
      
      <HostForm onSubmit={handleCreateHost} />
      
      {selectedHost && (
        <HostDetail host={selectedHost} />
      )}
    </div>
  );
}
```

## Best Practices

1. **Use React hooks for complex state logic**
   - `useState` for simple state
   - `useReducer` for complex state interactions
   - `useCallback` for memoizing functions
   - `useMemo` for derived state

2. **Avoid prop drilling**
   - Use context for deeply nested components
   - Organize components to minimize prop depth

3. **Keep context providers focused**
   - One domain per context provider
   - Split large contexts into smaller ones

4. **Avoid state duplication**
   - Single source of truth for each piece of data
   - Derive state when possible instead of duplicating

5. **Optimize context performance**
   - Split contexts by update frequency
   - Use memoization to prevent unnecessary renders
   - Keep expensive operations in callbacks

## Related Rules
- core-architecture.mdc - Three-layer architecture
- ui-components.mdc - Component design
- api-design.mdc - API implementation
- code-quality.mdc - Code quality standards 