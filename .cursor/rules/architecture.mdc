---
description: 
globs: 
alwaysApply: false
---
# Architecture Overview

This document serves as the primary reference for understanding the architectural patterns in our application. It consolidates information from other rules and provides concrete examples from our codebase.

## Three-Tier Architecture

Our application follows a strict three-tier architecture pattern:

```
┌──────────────────────┐
│  Database Layer      │   No caching, raw data access
│  /lib/db/*.ts        │
└──────────┬───────────┘
           │
           ▼
┌──────────────────────┐
│  Server Actions      │   Server-side caching with Next.js cache()
│  /app/actions/*.ts   │
└──────────┬───────────┘
           │
           ▼
┌──────────────────────┐
│  React Query Hooks   │   Client-side caching with React Query
│  /hooks/*.ts         │
└──────────┬───────────┘
           │
           ▼
┌──────────────────────┐
│  UI Components       │   Consume data, render UI
│  /_components        │
└──────────────────────┘
```

### 1. Database Layer (`/lib/db/*.ts`)

- **Purpose**: Direct database access with no caching or business logic
- **Pattern**: Clean DB operations that return standardized responses
- **Responsibilities**:
  - Execute raw database queries using Supabase
  - Standardized error handling and response formatting
  - Never implement caching
  - Pure database operations without business logic

**Example from codebase**:
```typescript
// /lib/db/cicdDb.ts
export async function getCICDProviders(
  teamId: string,
  cookieStore?: any,
): Promise<DbResponse<CICDProvider[]>> {
  try {
    console.log(`[@db:cicdDb:getCICDProviders] Getting providers for team: ${teamId}`);
    const supabase = await createClient(cookieStore);

    const { data, error } = await supabase
      .from('cicd_providers')
      .select('*')
      .eq('team_id', teamId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error(`[@db:cicdDb:getCICDProviders] Error: ${error.message}`);
      return { success: false, error: error.message };
    }

    console.log(`[@db:cicdDb:getCICDProviders] Found ${data.length} providers`);
    return { success: true, data };
  } catch (error: any) {
    console.error(`[@db:cicdDb:getCICDProviders] Error: ${error.message}`);
    return { success: false, error: error.message || 'Failed to get CI/CD providers' };
  }
}
```

### 2. Server Actions Layer (`/app/actions/*.ts`)

- **Purpose**: Server-side caching and business logic
- **Pattern**: Use Next.js built-in caching for READ operations, revalidate cache for WRITE
- **Responsibilities**:
  - Cache READ operations with `cache()` function
  - Process WRITE operations without caching
  - Invalidate caches with `revalidatePath()` or `revalidateTag()`
  - Handle authentication and authorization
  - Business logic composition and data transformation

**Example from codebase**:
```typescript
// /app/actions/cicdAction.ts
export const getCICDProviders = cache(async (): Promise<ActionResult<CICDProvider[]>> => {
  try {
    console.log('[@action:cicd:getCICDProviders] Starting to fetch providers');
    const user = await getUser();
    if (!user) {
      console.log('[@action:cicd:getCICDProviders] No authenticated user found');
      return { success: true, data: [] };
    }

    // Get the user's active team ID
    const activeTeamResult = await getUserActiveTeam(user.id);
    const teamId = activeTeamResult.id;
    
    const cookieStore = await cookies();
    const result = await dbGetCICDProviders(teamId, cookieStore);

    if (!result.success) {
      console.error(`[@action:cicd:getCICDProviders] Error from database: ${result.error}`);
      return { success: true, data: [] };
    }

    const providers = result.data || [];
    console.log(`[@action:cicd:getCICDProviders] Found ${providers.length} CICD providers`);
    return { success: true, data: providers };
  } catch (error: any) {
    console.error('[@action:cicd:getCICDProviders] Error fetching CICD providers:', error);
    return { success: true, data: [] };
  }
});

// Example of a WRITE operation with cache invalidation
export async function createCICDProvider(
  payload: CICDProviderPayload,
): Promise<CICDProviderActionResult> {
  try {
    // Implementation details...
    
    // Revalidate relevant paths after successful creation
    revalidatePath('/[locale]/[tenant]/cicd');
    revalidatePath('/[locale]/[tenant]/dashboard');

    return { success: true, data: result.data };
  } catch (error: any) {
    console.error('[@action:cicd:createCICDProvider] Error:', error);
    return { success: false, error: error.message || 'An unexpected error occurred' };
  }
}
```

### 3. React Query Hooks Layer (`/hooks/*.ts`)

- **Purpose**: Client-side data fetching and caching
- **Pattern**: Use React Query for data fetching, state management, and mutations
- **Responsibilities**:
  - Client-side caching with React Query
  - Data fetching and mutation logic
  - Optimistic updates
  - Error handling and toast notifications
  - Business logic for client components

**Example from codebase**:
```typescript
// /hooks/useCICD.ts
export function useCICD() {
  const { toast } = useToast();

  // Get all CICD providers
  const {
    data: providersResponse,
    isLoading: isLoadingProviders,
    error: providersError,
    refetch: refetchProviders,
  } = useFetchQuery(['cicdProviders'], getCICDProviders);

  // Create CICD provider mutation
  const createProviderMutation = useDataMutation(
    (data: CICDProviderPayload) => createCICDProvider(data),
    [['cicdProviders']],
    {
      onSuccess: (response) => {
        if (response.success) {
          toast({
            title: 'Success',
            description: 'CICD provider created successfully',
          });
        } else {
          toast({
            title: 'Error',
            description: response.error || 'Failed to create CICD provider',
            variant: 'destructive',
          });
        }
        return response;
      },
    },
  );

  return {
    // Data
    providers: providersResponse?.data || [],

    // Status
    isLoading: isLoadingProviders,
    error: providersError,

    // Mutation functions
    createProvider: createProviderMutation.mutateAsync,
    
    // Mutation status
    isCreating: createProviderMutation.isPending,
  };
}
```

### 4. UI Components Layer (`/app/[locale]/[tenant]/*/_components/`)

- **Purpose**: Render UI and handle user interactions
- **Pattern**: Split between server and client components
- **Server Components**:
  - Fetch data using server actions
  - Pass data to client components as props
  - Handle static rendering and layout

**Client Components**:
  - Use hooks to access data and mutations
  - Handle user interactions and form state
  - Render dynamic UI elements

**Example of Server-Client Component Pattern**:
```typescript
// Server Component (_components/CICDContent.tsx)
export default async function CICDContent() {
  const providersResponse = await getCICDProviders();
  const providers = providersResponse.success ? providersResponse.data || [] : [];
  
  return (
    <div className="w-full border-0 shadow-none">
      <CICDTableClient initialProviders={providers} />
    </div>
  );
}

// Client Component (_components/client/CICDTableClient.tsx)
'use client';

export default function CICDTableClient({ initialProviders }) {
  const {
    providers,
    isLoading,
    deleteProvider,
  } = useCICD();
  
  // Use initialProviders for first render, then React Query data
  const displayProviders = providers.length > 0 ? providers : initialProviders;
  
  return (
    <Table>
      {/* Table implementation with displayProviders */}
    </Table>
  );
}
```

### 5. Event-Based Refresh Architecture

To address server/client refresh orchestration and avoid cookie handling issues in client components, we use a specialized event-based architecture:

```
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│ Server Actions  │ --> │ Event Listeners │ --> │ Route Refresh   │
└─────────────────┘     └─────────────────┘     └─────────────────┘
        ↑                       │                       │
        │                       │                       │
        └───────────────────────┴───────────────────────┘
                         Feedback Loop
```

- **Server Actions**: Handle data operations with proper cookie access
- **Client Components**: Dispatch events after successful operations
- **Event Listeners**: Dedicated components that listen for events and trigger route refreshes

This architecture solves the "Cookies can only be modified in a Server Action or Route Handler" error and provides a clean separation of concerns.

**Example Event Listener Component**:
```typescript
// _components/client/CICDEventListener.tsx
'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';

// Define event constants
export const REFRESH_CICD_COMPLETE = 'REFRESH_CICD_COMPLETE';

export default function CICDEventListener() {
  const router = useRouter();

  useEffect(() => {
    const handleRefreshComplete = () => {
      console.log('[@component:CICDEventListener] Refreshing route');
      router.refresh();
    };

    window.addEventListener(REFRESH_CICD_COMPLETE, handleRefreshComplete);
    return () => {
      window.removeEventListener(REFRESH_CICD_COMPLETE, handleRefreshComplete);
    };
  }, [router]);

  return null;
}
```

**Example Event Dispatch in Client Component**:
```typescript
// In _components/client/CICDFormDialogClient.tsx
import { REFRESH_CICD_COMPLETE } from './CICDEventListener';

const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    const result = await createCICDProvider(formData);
    if (result.success) {
      // Dispatch event to notify listeners
      window.dispatchEvent(new Event(REFRESH_CICD_COMPLETE));
      
      // Close dialog
      setOpen(false);
    }
  } catch (error) {
    // Error handling
  }
};
```

**Example Page Component Including Event Listener**:
```typescript
// page.tsx
export default async function CICDPage() {
  // ...server-side data fetching...
  
  return (
    <FeaturePageContainer>
      {/* Hidden component that listens for refresh events */}
      <CICDEventListener />
      
      <Suspense fallback={<CICDSkeleton />}>
        <CICDContent />
      </Suspense>
    </FeaturePageContainer>
  );
}
```

## Common Patterns and Best Practices

### Component Naming Patterns

#### Dialog Components

For dialog components that contain forms, use the following naming pattern:
```
[Domain]FormDialogClient.tsx
```

Examples:
- `CICDFormDialogClient.tsx` - Dialog for adding/editing CICD providers
- `TeamFormDialogClient.tsx` - Dialog for adding/editing teams
- `RepositoryFormDialogClient.tsx` - Dialog for adding/editing repositories

This naming convention:
- Clearly indicates it's a dialog component containing a form
- Avoids confusion with context providers
- Follows our client component naming pattern
- Makes the purpose immediately clear

#### Other Component Types

For other component types, continue to follow our established patterns:
- `[Domain]TableClient.tsx` - For table components
- `[Domain]ActionsClient.tsx` - For action button components
- `[Domain][Entity]ListClient.tsx` - For list components
- `[Domain]EventListener.tsx` - For event listener components

### Data Flow Pattern

1. Server-side data is fetched in layout/page components or server components
2. Data is passed to client components as props
3. Client components use React Query hooks to handle subsequent data fetching
4. Use the initial server data to avoid loading states on first render
5. Use event listeners to handle route refreshes after mutations

### Error Handling Pattern

For consistent error handling, follow these patterns at each layer:

**Database Layer**:
```typescript
try {
  // Database operations
  if (error) {
    console.error(`[@db:fileName:functionName] Error: ${error.message}`);
    return { success: false, error: error.message };
  }
  return { success: true, data };
} catch (error: any) {
  console.error(`[@db:fileName:functionName] Error: ${error.message}`);
  return { success: false, error: error.message || 'Fallback error message' };
}
```

**Server Actions Layer**:
```typescript
try {
  // Business logic
  const result = await dbFunction();
  if (!result.success) {
    console.error(`[@action:fileName:functionName] Error: ${result.error}`);
    return { success: false, error: result.error };
  }
  return { success: true, data: result.data };
} catch (error: any) {
  console.error(`[@action:fileName:functionName] Error: ${error.message}`);
  return { success: false, error: error.message || 'Fallback error message' };
}
```

**React Query Hooks Layer**:
```typescript
const mutation = useDataMutation(
  (data) => serverAction(data),
  [['queryKey']],
  {
    onSuccess: (response) => {
      if (response.success) {
        toast({ title: 'Success', description: 'Operation successful' });
      } else {
        toast({
          title: 'Error',
          description: response.error || 'Operation failed',
          variant: 'destructive',
        });
      }
    },
    onError: (error: any) => {
      toast({
        title: 'Error',
        description: error.message || 'Operation failed',
        variant: 'destructive',
      });
    },
  }
);
```

### Logging Pattern

All logs should follow this format:
```
[@layer:file:function] Message
```

Where layer is one of:
- `@db`: Database operations
- `@action`: Server actions
- `@component`: React components
- `@hook`: React hooks

### Authentication & Authorization Pattern

1. Server actions retrieve the current user with `getUser()`
2. Database queries use cookie store for authentication
3. Permission checks happen at the server action layer
4. UI components conditionally render based on permissions from hooks

## Critical Rules Reminder

1. **Always Await Cookies**: `const cookieStore = await cookies();`
2. **Always Await CreateClient**: `const supabase = await createClient(cookieStore);`
3. **Use Cache for READ Operations**: `export const getFunction = cache(async () => { ... });`
4. **Revalidate After WRITE Operations**: `revalidatePath('/path');`
5. **Proper Error Handling at Every Layer**
6. **Consistent Return Types**: `Promise<DbResponse<T>>` or `Promise<ActionResult<T>>`
7. **Never Cache WRITE Operations**
8. **Always Use Logging Pattern**: `[@layer:file:function]`
9. **Client Components Must Be Named with "Client" Suffix**: `ComponentNameClient.tsx`
10. **Only Export Async Functions from Server Action Files**
11. **Use Event Listeners for Route Refreshes**: Create dedicated EventListener components

## Implementation Templates

### Database Function Template

```typescript
export async function getEntityName(
  id: string,
  cookieStore?: any,
): Promise<DbResponse<EntityType>> {
  try {
    console.log(`[@db:fileName:getEntityName] Getting entity: ${id}`);
    const supabase = await createClient(cookieStore);

    const { data, error } = await supabase
      .from('table_name')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error(`[@db:fileName:getEntityName] Error: ${error.message}`);
      return { success: false, error: error.message };
    }

    console.log(`[@db:fileName:getEntityName] Successfully retrieved entity: ${id}`);
    return { success: true, data };
  } catch (error: any) {
    console.error(`[@db:fileName:getEntityName] Error: ${error.message}`);
    return { success: false, error: error.message || 'Failed to get entity' };
  }
}
```

### Server Action Template

```typescript
'use server';

import { cache } from 'react';
import { cookies } from 'next/headers';
import { revalidatePath } from 'next/cache';
import { getEntityFromDb } from '@/lib/db/entityDb';
import { getUser } from '@/app/actions/userAction';

// READ operation with caching
export const getEntity = cache(async (id: string): Promise<ActionResult<EntityType>> => {
  try {
    console.log(`[@action:entityAction:getEntity] Getting entity: ${id}`);
    const user = await getUser();
    if (!user) {
      return { success: false, error: 'User not authenticated' };
    }

    const cookieStore = await cookies();
    const result = await getEntityFromDb(id, cookieStore);

    if (!result.success) {
      console.error(`[@action:entityAction:getEntity] Error: ${result.error}`);
      return { success: false, error: result.error };
    }

    return { success: true, data: result.data };
  } catch (error: any) {
    console.error(`[@action:entityAction:getEntity] Error: ${error.message}`);
    return { success: false, error: error.message || 'Failed to get entity' };
  }
});

// WRITE operation without caching
export async function createEntity(data: EntityCreateType): Promise<ActionResult<EntityType>> {
  try {
    console.log(`[@action:entityAction:createEntity] Creating entity`);
    const user = await getUser();
    if (!user) {
      return { success: false, error: 'User not authenticated' };
    }

    const cookieStore = await cookies();
    const result = await createEntityInDb(data, user.id, cookieStore);

    if (!result.success) {
      console.error(`[@action:entityAction:createEntity] Error: ${result.error}`);
      return { success: false, error: result.error };
    }

    // Revalidate paths after write operation
    revalidatePath('/[locale]/[tenant]/entity');
    
    return { success: true, data: result.data };
  } catch (error: any) {
    console.error(`[@action:entityAction:createEntity] Error: ${error.message}`);
    return { success: false, error: error.message || 'Failed to create entity' };
  }
}
```

### React Query Hook Template

```typescript
'use client';

import { useFetchQuery, useDataMutation } from '@/hooks/useQueryHelpers';
import { getEntity, createEntity, updateEntity, deleteEntity } from '@/app/actions/entityAction';
import { useToast } from '@/components/shadcn/use-toast';

export function useEntity() {
  const { toast } = useToast();
  
  // Fetch data
  const {
    data: entityResponse,
    isLoading,
    error,
    refetch,
  } = useFetchQuery(['entity'], getEntity);
  
  // Create mutation
  const createMutation = useDataMutation(
    (data: EntityCreateType) => createEntity(data),
    [['entity']],
    {
      onSuccess: (response) => {
        if (response.success) {
          toast({
            title: 'Success',
            description: 'Entity created successfully',
          });
        } else {
          toast({
            title: 'Error',
            description: response.error || 'Failed to create entity',
            variant: 'destructive',
          });
        }
      },
    }
  );
  
  return {
    // Data
    entity: entityResponse?.data,
    
    // Status
    isLoading,
    error,
    
    // Actions
    createEntity: createMutation.mutateAsync,
    refetch,
    
    // Action status
    isCreating: createMutation.isPending,
  };
}
```

### Server Component Template

```typescript
import { getEntities } from '@/app/actions/entityAction';
import EntityTableClient from './client/EntityTableClient';

export default async function EntityContent() {
  const entitiesResponse = await getEntities();
  const entities = entitiesResponse.success ? entitiesResponse.data || [] : [];
  
  if (!entitiesResponse.success) {
    console.error(`[@component:EntityContent:render] Error: ${entitiesResponse.error}`);
  }
  
  return (
    <div className="w-full">
      <EntityTableClient initialEntities={entities} />
    </div>
  );
}
```

### Client Component Template

```typescript
'use client';

import { useState } from 'react';
import { useEntity } from '@/hooks/useEntity';

interface EntityTableClientProps {
  initialEntities: Entity[];
}

export default function EntityTableClient({ initialEntities }: EntityTableClientProps) {
  const {
    entities,
    isLoading,
    error,
    createEntity,
    deleteEntity,
    isCreating,
    isDeleting,
  } = useEntity();
  
  // Use initialEntities for first render, then React Query data
  const displayEntities = entities?.length > 0 ? entities : initialEntities;
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
  });
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await createEntity(formData);
      setFormData({ name: '', description: '' });
    } catch (error) {
      // Error handling in hook
    }
  };
  
  return (
    <div>
      {/* Component implementation */}
    </div>
  );
}
```

### Event Listener Component Template

```typescript
'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';

// Define event constants
export const REFRESH_ENTITY_COMPLETE = 'REFRESH_ENTITY_COMPLETE';

export default function EntityEventListener() {
  const router = useRouter();

  useEffect(() => {
    const handleRefreshComplete = () => {
      console.log('[@component:EntityEventListener] Refreshing route after entity operation');
      router.refresh();
    };

    window.addEventListener(REFRESH_ENTITY_COMPLETE, handleRefreshComplete);
    return () => {
      window.removeEventListener(REFRESH_ENTITY_COMPLETE, handleRefreshComplete);
    };
  }, [router]);

  // This component renders nothing
  return null;
}
```

## Troubleshooting Common Issues

1. **Hydration Errors**: Server and client render different content
   - Solution: Ensure initial data is passed from server to client

2. **"Cookies should be awaited"**: Not properly awaiting cookies() function
   - Solution: Always use `const cookieStore = await cookies();`

3. **Missing Database Client Methods**: Not awaiting createClient
   - Solution: Always use `const supabase = await createClient(cookieStore);`

4. **Infinite Refetching**: Incorrect dependency array in useEffect
   - Solution: Minimize dependencies in useEffect

5. **Stale Data After Updates**: Forgetting to invalidate cache
   - Solution: Call revalidatePath() after WRITE operations

6. **"Only async functions are allowed"**: Exporting constants from server action files
   - Solution: Define constants in client components, not server action files

7. **Cookie Access Errors in Client Components**: Trying to modify cookies in client code
   - Solution: Use event listeners and router.refresh() to trigger server component refreshes 