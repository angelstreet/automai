---
description: Component Development and Organization Rules
globs: src/components/**/*.{ts,tsx}, src/app/[locale]/**/_components/**/*.{ts,tsx}
alwaysApply: true
---

# Component Development and Organization Rules

## Component Organization

### Directory Structure
- Shared components go in `/src/components/`
- Page-specific components go in `_components/` folders
- Group related components in feature directories

```
src/
  ├── components/           # Shared components
  │   ├── ui/               # UI primitives
  │   ├── layout/           # Layout components
  │   ├── form/             # Form components
  │   └── feature/          # Feature-specific components
  └── app/
      └── [locale]/
          └── feature/
              └── _components/ # Page-specific components
```

### Component Naming
- Use `PascalCase` for component files and names
  - ✅ `Button.tsx`, `UserProfile.tsx`
  - ❌ `button.tsx`, `user-profile.tsx`
- Child components follow `ParentNameChildPart` pattern
  - ✅ `ButtonIcon.tsx`, `CardHeader.tsx`
  - ❌ `Button-Icon.tsx`, `Card-Header.tsx`

## Component Structure

### File Size Limits
- Keep component files under 300 lines of code
- Exception: shadcn UI components

### Breaking Down Large Components
- Create a component directory for complex components
- Use index.tsx for the main component
- Create separate files for sub-components

```
Button/
├── index.tsx        # Main Button component
├── ButtonIcon.tsx   # Icon subcomponent
├── ButtonLabel.tsx  # Label subcomponent
└── types.ts         # Button-specific types
```

### Internal Component Structure
```typescript
// Types first
interface ButtonProps {
  variant?: 'primary' | 'secondary';
  size?: 'sm' | 'md' | 'lg';
  onClick?: () => void;
  children: React.ReactNode;
}

// Helper functions next
const getButtonClasses = (variant: string, size: string) => {
  // ...
};

// Component last
export function Button({
  variant = 'primary',
  size = 'md',
  onClick,
  children
}: ButtonProps) {
  // ...
}
```

## Component Patterns

### Server vs Client Components
- Use Server Components by default
- Add 'use client' directive only when needed:
  - Client-side state (useState, useReducer)
  - Effects (useEffect, useLayoutEffect)
  - Browser-only APIs
  - Event handlers

```typescript
'use client';

import { useState } from 'react';

export function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  );
}
```

### Props and State Management
- Define explicit interfaces for component props
- Use destructuring for props with defaults
- Keep state minimal and focused

```typescript
interface ToggleProps {
  initialState?: boolean;
  onChange?: (state: boolean) => void;
  label: string;
}

export function Toggle({
  initialState = false,
  onChange,
  label
}: ToggleProps) {
  const [isOn, setIsOn] = useState(initialState);
  
  const handleToggle = () => {
    const newState = !isOn;
    setIsOn(newState);
    onChange?.(newState);
  };
  
  return (
    <button onClick={handleToggle}>
      {label}: {isOn ? 'On' : 'Off'}
    </button>
  );
}
```

### Custom Hooks for Logic
- Extract complex logic into custom hooks
- Keep components focused on rendering
- Separate UI from business logic

```typescript
// Hook for form logic
function useFormState(initialValues) {
  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  
  // Form handling logic...
  
  return { values, errors, handleChange, handleSubmit };
}

// Component uses the hook
export function SignupForm() {
  const { values, errors, handleChange, handleSubmit } = useFormState({
    email: '',
    password: ''
  });
  
  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields */}
    </form>
  );
}
```

## Composition Patterns

### Component Composition
- Prefer composition over configuration
- Use children prop for content flexibility
- Use render props for complex rendering logic

```typescript
// Composable card component
export function Card({ children }: { children: React.ReactNode }) {
  return <div className="card">{children}</div>;
}

Card.Header = function CardHeader({ children }: { children: React.ReactNode }) {
  return <div className="card-header">{children}</div>;
};

Card.Body = function CardBody({ children }: { children: React.ReactNode }) {
  return <div className="card-body">{children}</div>;
};

// Usage
<Card>
  <Card.Header>Title</Card.Header>
  <Card.Body>Content</Card.Body>
</Card>
```

### Props Forwarding
- Forward props to underlying elements
- Use the spread operator for passing props
- Add explicit typings for forwarded props

```typescript
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary';
}

export function Button({
  variant = 'primary',
  className,
  ...props
}: ButtonProps) {
  return (
    <button
      className={`btn btn-${variant} ${className || ''}`}
      {...props}
    />
  );
}
```

## shadcn UI Components

⚠️ Special rules for shadcn UI components:

1. Maintain original file naming (kebab-case)
2. Keep original export names and styles
3. Do not modify component implementation unnecessarily
4. Place in `/src/components/shadcn/`

```typescript
// Original shadcn file: button.tsx
import { Button } from '@/components/shadcn/button';
```

## Best Practices

- Use TypeScript for type safety
- Validate props with proper typing
- Implement error boundaries for robust error handling
- Follow accessibility guidelines (ARIA attributes, keyboard navigation)
- Test components with unit and integration tests
- Document component usage with comments
- Maintain consistent styling with Tailwind
- Keep components focused on a single responsibility