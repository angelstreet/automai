---
description: Supabase Database Conventions
globs: src/lib/db.ts, src/lib/services/*, src/app/api/**/*.ts
alwaysApply: true
---

# Supabase Database Conventions

## Database Structure

The application uses Supabase (PostgreSQL) as its database with the following conventions:

## Naming Conventions

### Table Names

- Use **snake_case** for all table names
- Use plural form for table names
- Examples: `users`, `projects`, `repositories`

### Column Names

- Use **snake_case** for all column names
- Use descriptive names that indicate the purpose
- Examples: `first_name`, `created_at`, `is_active`

### Foreign Keys

- Format: `{table_name}_id` (singular table name + _id)
- Examples: `user_id`, `project_id`, `repository_id`

### Junction Tables

- Format: `{table1}_{table2}` (alphabetical order if possible)
- Examples: `projects_users`, `repositories_teams`

## Common Fields

All tables should include these standard fields:

```sql
id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
```

For multi-tenant tables, also include:

```sql
tenant_id UUID NOT NULL REFERENCES tenants(id),
```

## Database Access Pattern

### Using the db.ts Wrapper

The application uses a Prisma-like wrapper around Supabase in `src/lib/db.ts`:

```typescript
import { createClient } from '@/utils/supabase/server';
import { cookies } from 'next/headers';

// Example usage:
const users = await db.user.findMany({
  where: { tenant_id: session.user.tenant_id }
});

const project = await db.project.findUnique({
  where: { id: projectId }
});
```

### Tenant Isolation

Always include tenant filtering in database queries:

```typescript
// ✅ CORRECT - Includes tenant filtering
const projects = await db.project.findMany({
  where: { tenant_id: user.tenant_id }
});

// ❌ INCORRECT - Missing tenant isolation
const projects = await db.project.findMany();
```

## Data Models

### Users

```sql
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT UNIQUE NOT NULL,
  first_name TEXT,
  last_name TEXT,
  avatar_url TEXT,
  tenant_id UUID NOT NULL REFERENCES tenants(id),
  role TEXT NOT NULL DEFAULT 'user',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### Projects

```sql
CREATE TABLE projects (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  status TEXT NOT NULL DEFAULT 'active',
  tenant_id UUID NOT NULL REFERENCES tenants(id),
  user_id UUID NOT NULL REFERENCES users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### Repositories

```sql
CREATE TABLE repositories (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  url TEXT NOT NULL,
  provider TEXT NOT NULL,
  provider_id TEXT,
  branch TEXT DEFAULT 'main',
  tenant_id UUID NOT NULL REFERENCES tenants(id),
  user_id UUID NOT NULL REFERENCES users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

## Best Practices

1. **Always use the db wrapper**:
   - Import from `@/lib/db` for database operations
   - Never use raw Supabase queries directly

2. **Handle async operations**:
   - Always await database operations
   - Use try/catch blocks for error handling

3. **Tenant isolation**:
   - Always include tenant_id in queries
   - Validate tenant access in middleware or service layer

4. **Transactions**:
   - Use transactions for operations that affect multiple records
   - Example:
     ```typescript
     await db.$transaction(async (tx) => {
       // Multiple database operations
     });
     ```

5. **Query optimization**:
   - Select only needed fields
   - Use pagination for list queries
   - Add indexes for frequently queried fields

6. **Security**:
   - Never trust client-side data
   - Validate input before database operations
   - Use Row Level Security (RLS) in Supabase 