---
description: Configuration & Environment Best Practices
globs: src/lib/env/**/*.{ts,js}, .env*
---

# Configuration & Environment Best Practices

## Core Principles

- Keep environment variables secure
- Use proper configuration validation
- Implement environment-specific configs
- Follow the twelve-factor app methodology
- Use proper secret management
- Implement proper logging configuration
- Handle configuration hierarchically

## Environment Configuration

```typescript
// src/lib/env.ts
import { z } from 'zod';

// Define environment schema
const envSchema = z.object({
  // Server
  NODE_ENV: z.enum(['development', 'production', 'test']),
  PORT: z.string().transform(Number),
  API_URL: z.string().url(),
  
  // Database
  DATABASE_URL: z.string().url(),
  
  // Authentication
  JWT_SECRET: z.string().min(32),
  JWT_EXPIRES_IN: z.string(),
  
  // OAuth
  GOOGLE_CLIENT_ID: z.string(),
  GOOGLE_CLIENT_SECRET: z.string(),
  
  // Services
  REDIS_URL: z.string().url().optional(),
  S3_BUCKET: z.string().optional(),
  
  // Logging
  LOG_LEVEL: z.enum(['error', 'warn', 'info', 'debug']),
});

// Validate and export environment configuration
export const env = envSchema.parse(process.env);
```

## Configuration Structure

```typescript
// src/lib/config.ts
import { env } from './env';

export const config = {
  server: {
    port: env.PORT,
    apiUrl: env.API_URL,
    env: env.NODE_ENV,
  },
  
  database: {
    url: env.DATABASE_URL,
    pool: {
      min: 2,
      max: 10,
    },
  },
  
  auth: {
    jwt: {
      secret: env.JWT_SECRET,
      expiresIn: env.JWT_EXPIRES_IN,
    },
    google: {
      clientId: env.GOOGLE_CLIENT_ID,
      clientSecret: env.GOOGLE_CLIENT_SECRET,
    },
  },
  
  services: {
    redis: env.REDIS_URL,
    s3Bucket: env.S3_BUCKET,
  },
  
  logging: {
    level: env.LOG_LEVEL,
    format: env.NODE_ENV === 'development' ? 'dev' : 'combined',
  },
} as const;
```

## Environment Files

```shell
# .env.development
NODE_ENV=development
PORT=3000
API_URL=http://localhost:3000
DATABASE_URL=postgresql://user:pass@localhost:5432/db_dev
JWT_SECRET=your-development-secret-key-min-32-chars
JWT_EXPIRES_IN=7d
LOG_LEVEL=debug

# .env.production
NODE_ENV=production
PORT=8080
API_URL=https://api.yourdomain.com
DATABASE_URL=postgresql://user:pass@prod-db:5432/db_prod
JWT_SECRET=your-production-secret-key-min-32-chars
JWT_EXPIRES_IN=1d
LOG_LEVEL=info
```

## Logging Configuration

```typescript
// src/server/config/logger.ts
import winston from 'winston';
import { config } from './index';

export const logger = winston.createLogger({
  level: config.logging.level,
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple()
      ),
    }),
    new winston.transports.File({
      filename: 'logs/error.log',
      level: 'error',
    }),
    new winston.transports.File({
      filename: 'logs/combined.log',
    }),
  ],
});
```

## Best Practices

### Environment Management
- Use different .env files per environment
- Never commit .env files
- Provide .env.example template
- Validate all environment variables
- Use secure secrets management
- Document all environment variables
- Handle defaults properly

### Configuration Structure
- Use hierarchical configuration
- Implement type safety
- Centralize configuration
- Use constants for magic values
- Handle overrides properly
- Document configuration options
- Use meaningful naming

### Security
- Encrypt sensitive values
- Use secure secret storage
- Rotate secrets regularly
- Implement access controls
- Audit configuration access
- Validate configuration values
- Handle secrets securely

### Deployment
- Use CI/CD variables
- Handle multiple environments
- Implement configuration versioning
- Use configuration as code
- Document deployment process
- Handle configuration updates
- Test configuration changes

### Logging
- Configure appropriate levels
- Use structured logging
- Implement log rotation
- Handle sensitive data
- Configure log destinations
- Implement log aggregation
- Monitor log volume

### Error Handling
- Validate configuration early
- Provide helpful error messages
- Handle missing values
- Implement fallbacks
- Log configuration errors
- Monitor configuration state
- Handle invalid configurations

### Testing
- Mock configurations
- Test different environments
- Validate schema changes
- Test error scenarios
- Use test configurations
- Verify sensitive values
- Test configuration updates 