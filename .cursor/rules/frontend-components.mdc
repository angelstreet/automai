---
description: Component Structure and Organization Guidelines
globs: "src/components/**/*.tsx, src/app/**/_components/**/*.tsx"
alwaysApply: false
---

# Component Structure and Organization

## Overview

These guidelines define how to structure, organize, and implement React components in the application. Following these practices ensures components are reusable, maintainable, and consistently implemented across the project.

## Key Principles

1. **Feature-First Organization** - Group all related files for a feature together
2. **Single Responsibility** - Components should have a single, well-defined purpose
3. **Reusability** - Design components to be reused across the application
4. **Composition** - Prefer composition over configuration
5. **Separation of Concerns** - Separate UI from business logic
6. **Server vs. Client** - Appropriate use of server and client components

## Detailed Rules

### Component Organization

#### Feature-Based Organization

- **Feature-based organization:** Group all feature-related files together
  - Each feature should have its own directory under `/app/[locale]/[tenant]/`
  - All related files for a feature should be in the same directory:
    - `_components/` - Feature-specific components
    - `actions.ts` - Server actions for the feature
    - `types.ts` - Type definitions for the feature
    - `constants.ts` - Constants for the feature
    - `hooks.ts` - Custom hooks for the feature
    - `utils.ts` - Utility functions for the feature
    - `page.tsx` - Page component for the feature

```
app/
  └── [locale]/
      └── [tenant]/
          └── feature/           # Feature directory (e.g., dashboard, hosts, deployment)
              ├── _components/   # Feature-specific components
              ├── actions.ts     # Feature-specific server actions
              ├── constants.ts   # Constants for deployments
              ├── page.tsx       # Deployment page
              ├── types.ts       # Type definitions
              ├── usedeployments.ts # Feature-specific hooks
              └── utils.ts       # Utility functions
```

#### Shared Components and Functionality

- **Shared functionality** goes in dedicated directories:
  - `/src/components/` - Shared components used across multiple features
  - `/src/hooks/` - Shared hooks used across multiple features
  - `/src/types/` - Shared type definitions
  - `/src/lib/` - Core utilities, services, and business logic
  - `/src/context/` - Shared context providers

- **Component types in shared directories**:
  - `/src/components/shadcn/` - shadcn components (never modify these)
  - `/src/components/ui/` - General UI primitives
  - `/src/components/layout/` - Layout components
  - `/src/components/form/` - Form components

#### Component Naming

- Use `PascalCase` for component files and names
- Child components follow `ParentNameChildPart` pattern
- Maintain a consistent naming scheme (e.g., for related components)

### Server vs. Client Components

- Use Server Components by default
- Add 'use client' directive only when needed:
  - Client-side state (useState, useReducer)
  - Effects (useEffect, useLayoutEffect)
  - Browser-only APIs
  - Event handlers
- **IMPORTANT:** Never use `React.use()` in Client Components:
  - `React.use()` is for unwrapping promises in Server Components only
  - In Client Components, hooks like `useParams()` already return resolved values, not promises
  - Using `React.use()` in Client Components will cause runtime errors

### Component Structure

#### File Size Limits

- Keep component files under 300 lines of code
- Break large components into smaller sub-components
- Extract complex logic into custom hooks

#### Internal Component Structure

```typescript
// Types first
interface ButtonProps {
  variant?: 'primary' | 'secondary';
  size?: 'sm' | 'md' | 'lg';
  onClick?: () => void;
  children: React.ReactNode;
}

// Helper functions next
const getButtonClasses = (variant: string, size: string) => {
  // ...
};

// Component last
export function Button({
  variant = 'primary',
  size = 'md',
  onClick,
  children
}: ButtonProps) {
  // ...
}
```

### Props and State

- Define explicit interfaces for component props
- Use destructuring with default values
- Keep state minimal and focused
- Lift state up when shared between components

### Custom Hooks

- Extract complex logic into custom hooks
- Place feature-specific hooks in the feature directory (`hooks.ts`)
- Place shared hooks in `/src/hooks/`
- Follow the `use` prefix naming convention
- Keep hooks focused on a single concern
- Maintain separation between UI and business logic

## Examples

### ✅ Good Example - Feature-Based Organization

```
app/
  └── [locale]/
      └── [tenant]/
          └── deployment/
              ├── _components/
              │   ├── deploymentdetails.tsx
              │   ├── deploymentlist.tsx
              │   └── deploymentwizard.tsx
              ├── actions.ts      # Server actions for deployments
              ├── constants.ts    # Constants for deployments
              ├── page.tsx        # Deployment page
              ├── types.ts        # Type definitions
              ├── usedeployments.ts # Feature-specific hooks
              └── utils.ts        # Utility functions
```

### ✅ Good Example - Component Structure

```tsx
'use client';

// Types first
interface CounterProps {
  initialCount?: number;
  step?: number;
  onCountChange?: (count: number) => void;
}

// Component with clear structure
export function Counter({
  initialCount = 0,
  step = 1,
  onCountChange
}: CounterProps) {
  const [count, setCount] = useState(initialCount);
  
  // Effect to notify parent of changes
  useEffect(() => {
    onCountChange?.(count);
  }, [count, onCountChange]);
  
  // Handlers
  const handleIncrement = () => {
    setCount(prev => prev + step);
  };
  
  const handleDecrement = () => {
    setCount(prev => prev - step);
  };
  
  // UI rendering
  return (
    <div className="flex items-center gap-4">
      <button 
        onClick={handleDecrement}
        className="px-3 py-1 border rounded-md"
      >
        -
      </button>
      <span>{count}</span>
      <button 
        onClick={handleIncrement}
        className="px-3 py-1 border rounded-md"
      >
        +
      </button>
    </div>
  );
}
```

## Common Pitfalls

- **Not following feature-first organization** - Keep all related files for a feature together
- **Mixing client and server concerns** - Keep server components free of client-side code
- **Prop drilling** - Use context or composition instead of passing props through many levels
- **Huge components** - Break down large components into smaller, focused ones
- **Duplicated logic** - Extract shared logic into custom hooks or utility functions
- **Missing 'use client' directive** - Remember to add it when using client-side features
- **Using `React.use()` in client components** - Only use `React.use()` in server components to handle promises
- **Modifying shadcn components** - Never modify components in `/src/components/shadcn/`
- **Using incorrect imports** - Import from the correct layers (never bypass the three-layer architecture)

## Related Rules

- core-code-style.mdc - Core code style standards
- supabase-auth-db.mdc - Authentication with Supabase
- backend-api.mdc - API integration with components 