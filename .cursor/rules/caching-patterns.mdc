---
description: 
globs: 
alwaysApply: false
---
# Next.js Caching Strategy Cursor Rules

This document outlines the standard caching rules for our Next.js application, ensuring efficient performance and minimizing redundant database calls through a hybrid server-side and client-side caching approach.

## Data Flow Architecture

```
┌──────────────────────┐
│  Database Layer      │   No caching, raw data access
│  /lib/supabase/db-*  │
└──────────┬───────────┘
           │
           ▼
┌──────────────────────┐
│  Server Actions      │   Server-side caching with Next.js cache()
│  /app/actions        │
└──────────┬───────────┘
           │
           ▼
┌──────────────────────┐
│  React Query Hooks   │   Client-side caching with React Query
│  /hooks              │
└──────────┬───────────┘
           │
           ▼
┌──────────────────────┐
│  Providers           │   State management & context
│  /app/providers      │
└──────────┬───────────┘
           │
           ▼
┌──────────────────────┐
│  UI Components       │   Consume data, render UI
│  /_components        │
└──────────────────────┘
```

## File Structure Guidelines

| File Type                | Location                        | Purpose                                              |
|--------------------------|----------------------------------|------------------------------------------------------|
| Database Layer           | `/lib/supabase/db-*/*.ts`        | Raw database operations                              |
| Server Actions           | `/app/actions/*.ts`              | Server-side functions with caching                   |
| Context Definitions      | `/src/context/*.ts`              | Define context types and createContext               |
| Provider Components      | `/app/providers/*.tsx`           | Provide context to component tree                    |
| React Query Hooks        | `/hooks/*/*.ts`                  | Data fetching with client-side caching              |
| UI Components            | `/components/*/*.tsx`            | Render UI based on data from hooks                  |

## Core Principles

1. **Layered Caching**: Implement caching for READ operations at the Server Actions Layer on the server and extend caching to the Client Layer for dynamic client-side interactions.
2. **Server-Side Efficiency**: Utilize Next.js's built-in caching tools for server-side READ operations, paired with explicit invalidation methods to keep data fresh.
3. **Client-Side Deduplication**: Employ a client-side caching library to prevent duplicate data fetches and manage state, integrated with server-side pre-fetched data.
4. **Data Consistency**: Ensure cache invalidation is synchronized across server and client layers after WRITE operations to maintain up-to-date data.
5. **No Database Caching**: Keep the Database Layer free of any caching logic to provide raw, uncached data access.
6. **DB Layer Independence**: Each database module must be fully independent and never import from other DB modules. If data from another entity is needed, it must be passed as a parameter.

## Import Patterns

### Context Definition Files
```typescript
// src/context/TeamContext.ts
'use client';

import { createContext } from 'react';

import type { Team } from '@/types/context/teamContextType';

export interface TeamContextState {
  teams: Team[];
  activeTeam: Team | null;
}

export const TeamContext = createContext<TeamContextState>({
  teams: [],
  activeTeam: null,
});
```

### Provider Components
```typescript
// src/app/providers/TeamProvider.tsx
'use client';

import React from 'react';

import { TeamContext } from '@/context/TeamContext';
import type { Team } from '@/types/context/teamContextType';

interface TeamProviderProps {
  children: React.ReactNode;
  teams: Team[];
  activeTeam: Team | null;
}

export function TeamProvider({ children, teams, activeTeam }: TeamProviderProps) {
  return <TeamContext.Provider value={{ teams, activeTeam }}>{children}</TeamContext.Provider>;
}
```

### React Query Hooks
```typescript
// src/hooks/team/useTeam.ts
'use client';

import { useContext } from 'react';
import { useQuery } from '@tanstack/react-query';

import { TeamContext } from '@/context/TeamContext';
import { getTeams } from '@/app/actions/teamAction';

export function useTeam() {
  const context = useContext(TeamContext);
  if (!context) throw new Error('useTeam must be used within a TeamProvider');
  return context;
}

export function useTeamQuery(userId: string) {
  return useQuery({
    queryKey: ['teams', userId],
    queryFn: () => getTeams(userId),
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000,   // 10 minutes
  });
}
```

## Responsibility Table

| Layer              | Responsibility                              | Non-responsibility                       |
|--------------------|---------------------------------------------|------------------------------------------|
| Database Layer     | Raw database access                         | ❌ No caching                            |
| Server Actions     | Server-side caching, data transformation    | ❌ No UI logic                           |
| Context Files      | Define context shape and createContext      | ❌ No components, no providers           |
| Provider Components| Pure data containers via React Context      | ❌ No business logic, no data fetching   |
| React Query Hooks  | Data fetching, business logic, state mgmt   | ❌ No rendering                          |
| UI Components      | Rendering based on data from hooks          | ❌ No direct data fetching               |

## Cross-Referencing Between Layers

- **Context Files** (`/src/context/*.ts`)
  - ✅ Can import types from `/types/*`
  - ❌ Cannot import from providers, hooks, or server actions
  - ❌ Cannot contain React components

- **Provider Components** (`/src/app/providers/*.tsx`)
  - ✅ Must import context from `/src/context/*.ts`
  - ✅ Can accept data as props
  - ❌ Cannot fetch data directly or contain business logic

- **React Query Hooks** (`/src/hooks/*/*.ts`)
  - ✅ Can import context from `/src/context/*.ts`
  - ✅ Can import actions from `/src/app/actions/*.ts`
  - ✅ Contains business logic and data fetching
  - ❌ Cannot contain React components (except for connector components)

- **UI Components**
  - ✅ Must import hooks from `/src/hooks/*`
  - ✅ Can use context through hooks
  - ❌ Should not import context directly

## Three-Tier Architecture

### 1. Database Layer (Located in /lib/supabase/db-*)

- **Purpose**: Handles direct database operations without any caching or business logic.
- **Rules**:
  - Accepts a cookieStore parameter or equivalent for authentication purposes.
  - Executes raw database queries using the Supabase client.
  - Never implements caching at this layer.
  - Never calls other functions within the Database Layer to avoid nesting.
  - **IMPORTANT**: Each DB module must be fully independent. Never import from other DB modules.
  - **CORRECT**: If a function needs data from another entity, it should accept it as a parameter:
    ```typescript
    // Good: Accept teamId as parameter instead of importing team DB functions
    async function fetchUserWithTeam(userId: string, teamId: string) {
      // Process teamId parameter
    }
    ```
  - **INCORRECT**: Importing and using functions from other DB modules:
    ```typescript
    // Bad: Direct dependency between DB modules
    import { fetchTeam } from '../db-teams/teams';
    
    async function fetchUserWithTeam(userId: string) {
      const team = await fetchTeam(userId);  // Wrong! Creates dependency
    }
    ```

### 2. Server Actions Layer (Located in /app/actions/*.ts)

- **Purpose**: Manages server-side caching for READ operations and processes WRITE operations, serving both Server Components and client-side API requests.
- **Rules**:
  - All functions must be marked with the 'use server' directive to ensure server-only execution.
  - Wrap READ operations with Next.js's cache function, using explicit keys like resource identifiers (e.g., user ID).
  - Retrieve cookies using the cookies function from next/headers for authentication.
  - Call Database Layer functions, passing the cookieStore for authenticated queries.
  - Never cache WRITE operations such as create, update, or delete actions.
  - Invalidate caches after WRITE operations using revalidateTag (preferred) or revalidatePath to ensure stale data is refreshed.
  - This is the layer where composition of multiple DB calls is appropriate.

### 3. React Query Hooks (Located in /hooks/*)

- **Purpose**: Provide a clean API for components to access data with client-side caching.
- **Rules**:
  - Hooks should be organized by domain (e.g., `/hooks/team/`, `/hooks/user/`).
  - Use React Query's useQuery for READ operations and useMutation for WRITE operations.
  - Hooks should call Server Actions, never Database Layer functions directly.
  - Handle loading states, errors, and cache invalidation within the hooks.
  - Provide a consistent interface regardless of the data source complexity.

### 4. Providers Layer (Located in /app/providers/*)

- **Purpose**: Hold and provide data for components via Context API.
- **Rules**:
  - Providers should be client components marked with 'use client'.
  - Providers should be **data-only containers** without business logic.
  - Providers should NOT fetch data or contain side effects.
  - All business logic must be moved to dedicated hooks in /hooks/*.
  - Keep providers focused on a single domain (user, team, theme, etc.).
  - Avoid circular dependencies between providers.

### 5. Client-Side UI Components (Located in /app/[locale]/[tenant]/*/components/*.tsx)

- **Purpose**: Render the UI and handle user interactions.
- **Rules**:
  - All components must be marked with the 'use client' directive to indicate client-side execution.
  - Use hooks from the /hooks directory to access data, never call Server Actions directly.
  - Use providers for shared state.
  - Focus on rendering and user interaction logic.
  - Never call Database Layer functions directly from components.

## Migration Guidelines

When converting existing code to follow this architecture:

1. **Start with Context Definitions**:
   - Create/update context files in `/src/context/`
   - Define only the shape of data and createContext

2. **Update Providers**:
   - Remove business logic and data fetching
   - Import context from `/src/context/`
   - Accept data as props

3. **Create/Update React Query Hooks**:
   - Move business logic from providers to hooks
   - Use useQuery with proper caching parameters
   - Handle loading states and errors

4. **Update Component Imports**:
   - Change imports from `@/context` to `@/hooks/*`
   - Use the hooks instead of direct context access

## Anti-Patterns to Avoid

- Do not implement caching in the Database Layer.
- Do not call Database Layer functions directly from Client Components.
- Do not import between different DB modules - maintain full independence.
- Do not cache WRITE operations like create, update, or delete.
- Do not omit cache invalidation (revalidateTag or invalidateQueries) after WRITE operations.
- Do not use excessive dependencies in useEffect hooks that trigger unnecessary refetching.
- Do not perform database queries directly in render functions.
- Do not create contexts in provider files - keep them in `/src/context/`.
- Do not mix provider and context in the same file.

## Debugging Caching Problems

If redundant database queries occur:
1. Confirm that Server Actions use the cache function for READ operations.
2. Verify that revalidateTag or revalidatePath is called after WRITE operations.
3. Ensure client-side query keys are unique and consistent across components.
4. Check that useEffect dependencies in Client Components are minimal and appropriate.
5. Use React Developer Tools and Next.js logs to inspect render cycles and cache behavior.