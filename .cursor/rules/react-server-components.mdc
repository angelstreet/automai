---
description: Guidelines for React Server Components in Next.js with Supabase integration
globs: 
alwaysApply: true
---
# React Server Components Architecture Guidelines

## CRITICAL: Cookie Handling in Database Layer

### ⚠️ Common Error: Synchronous Cookie Access

The most common error you'll encounter looks like this:
```
Error: Route "/[locale]/[tenant]/hosts" used `cookies().get()`. 
`cookies()` should be awaited before using its value.
```

This is caused by accessing cookies synchronously without awaiting:

```typescript
// ❌ WRONG: Will cause errors
async get(name) {
  return cookieHandler.get(name)?.value; // SYNC ACCESS - WILL BREAK
}

// ✅ CORRECT: Always await cookie access
async get(name) {
  try {
    const cookie = await cookieHandler.get(name);
    return cookie?.value;
  } catch (error) {
    console.warn(`Could not get cookie ${name}: ${error.message}`);
    return undefined;
  }
}
```

### Three-Tier Architecture (Required)

1. **Database Layer** (`/lib/supabase/db-*/*.ts`)
   - ✅ ALWAYS use `createClient` from `@/lib/supabase/server` for database access
   - ✅ ALWAYS include `cookieStore` parameter in ALL database functions
   - ✅ ALWAYS keep functions focused on database operations only
   - ❌ NEVER import `cookies()` from 'next/headers' directly in database layer
   - ❌ NEVER create custom browser client implementations

2. **Server Actions** (`/app/actions/*.ts`)
   - ✅ ALWAYS mark with `'use server'` directive at the top of the file
   - ✅ ALWAYS use `cookies()` from `next/headers` to get cookie store
   - ✅ ALWAYS pass cookie store to database functions
   - ✅ ALWAYS re-export necessary types for client usage
   - ❌ NEVER include UI logic or state management

3. **Client Components** (`/context/*.tsx`, `/components/*.tsx`)
   - ✅ ALWAYS mark with `'use client'` directive at the top of the file
   - ✅ ALWAYS import from server actions, NEVER directly from database layer
   - ✅ ALWAYS manage UI state and user interactions here
   - ❌ NEVER directly call database operations

## Creating New Database Modules

### Step-by-Step Implementation Guide

1. Create module file in `/lib/supabase/db-module/module.ts`
2. Import only the server createClient:
   ```typescript
   import { createClient } from '@/lib/supabase/server';
   ```
3. Define functions with cookieStore parameter:
   ```typescript
   export async function myFunction(id: string, cookieStore?: any): Promise<Result> {
     // ...
   }
   ```
4. Initialize Supabase client with cookieStore:
   ```typescript
   const supabase = await createClient(cookieStore);
   ```
5. Add standard logging:
   ```typescript
   console.log(`[@db:module:function] Starting operation for: ${id}`);
   ```
6. Implement proper error handling:
   ```typescript
   try {
     // Database operations...
   } catch (error) {
     console.error(`[@db:module:function] Error:`, error);
     return { success: false, error: error.message };
   }
   ```

## Correct Patterns With Examples

### Database Function Pattern

```typescript
// CORRECT DATABASE FUNCTION
import { createClient } from '@/lib/supabase/server';

export async function getTeamById(teamId: string, cookieStore?: any): Promise<TeamResult> {
  try {
    console.log(`[@db:teams:getTeamById] Getting team: ${teamId}`);
    
    // Pass cookieStore to createClient
    const supabase = await createClient(cookieStore);
    
    const { data, error } = await supabase
      .from('teams')
      .select('*')
      .eq('id', teamId)
      .single();

    if (error) throw error;
    
    return { success: true, data };
  } catch (error) {
    console.error(`[@db:teams:getTeamById] Error:`, error);
    return { success: false, error: error.message };
  }
}
```

### Server Action Pattern

```typescript
// CORRECT SERVER ACTION
'use server';

import { cookies } from 'next/headers';
import { getTeamById } from '@/lib/supabase/db-teams/teams';

export async function getTeam(id: string) {
  // Get cookieStore in server action
  const cookieStore = cookies();
  
  // Pass to database function
  return getTeamById(id, cookieStore);
}
```

## Common Anti-Patterns to Avoid

### ❌ Importing cookies in database layer
```typescript
// NEVER DO THIS
import { cookies } from 'next/headers'; // ❌ WRONG

export async function getUserData(userId: string) {
  const cookieStore = cookies(); // ❌ WRONG
  // ...
}
```

### ❌ Missing cookieStore parameter
```typescript
// NEVER DO THIS
export async function getTeamData(teamId: string) { // ❌ Missing cookieStore parameter
  const supabase = await createClient(); // ❌ Missing cookieStore
  // ...
}
```

### ❌ Synchronous cookie access 
```typescript
// NEVER DO THIS
async get(name) {
  return cookieHandler.get(name)?.value; // ❌ WRONG: Sync access
}
```

## Troubleshooting Cookie Errors

If you encounter cookie-related errors:

1. Check for direct `cookies()` imports in database layer files
2. Verify all database functions accept `cookieStore` parameter
3. Ensure all cookie access is properly awaited
4. Check that server actions pass `cookieStore` to database functions
5. Verify `server.ts` implementation has properly awaited cookie access
6. Add try/catch blocks around cookie operations

## Authentication Flow

- ✅ ALWAYS pass `cookieStore` through the entire call chain
- ✅ Get cookies in server actions: `const cookieStore = cookies();`
- ✅ Pass to database functions: `return dbFunction(id, cookieStore);`
- ❌ NEVER create your own authentication flow outside this pattern

## Module Export Best Practices

- ✅ ALWAYS use named exports to avoid conflicts
- ✅ Use `export type` for TypeScript types to avoid compilation issues
- ✅ Rename exports when consolidating from multiple files
- ❌ NEVER use `export *` from multiple files with overlapping export names