---
description: General rules for the project
globs: 
alwaysApply: true
---
# General Rules

## ðŸš€ Essential Project Information

### Project Architecture
- **Next.js 13+ App Router** application with custom TypeScript server
- **Custom Server**: TypeScript server with lazy-loaded WebSocket support
- **Prisma Client**:  Follow  @Prisma Rules 
- **WebSocket Server**: Integrated with HTTP server, follow @WebSocket Rules
- **HTTP Server**: Custom server on port 3000 with Next.js integration
- **Authentication**: NextAuth.js
- **UI**: Shadcn UI + Tailwind CSS
- **i18n**: next-intl with translations in `src/i18n/messages`

### Critical Development Guidelines
1. **Code Organization**: Follow @Code Organization Rules
   -TODO : add most important rule  and structure folder overview 

2. **Performance Best Practices**:
   - Use React Server Components by default
   - Only add 'use client' when necessary
   - Use dynamic imports for large components
   - Implement proper caching strategies
   - Minimize 'useEffect' and 'setState'; favor React Server Components
   - Wrap client components in Suspense with fallback
   - Use dynamic loading for non-critical components
   - Optimize images: use WebP format, include size data, implement lazy loading
   - Use 'nuqs' for URL search parameter state management
   - Optimize Web Vitals (LCP, CLS, FID)

3. **Development Workflow**:
   - Get approval before creating new files/folders
   - Verify dependencies and content before removing files
   - Fix all warnings/errors before rerunning builds
   - Use the custom server implementation with `npm run dev`

4. **Communication Style**:
   - Keep responses concise and focused
   - Confirm completion without lengthy explanations
   - Focus on solutions over problem descriptions
   - Do not apologize instead explain circumstances and help update cursor rules for improvement

### Required Rules Reference
- **general.mdc** (this file): Essential project context
- **code-organization.mdc**: File organization guidelines
- **nextjs.mdc**: Next.js implementation guidelines
- **yolo-mode.mdc**: Quick reference for rapid development
- **prisma.mdc**: Database access patterns
- **websocket.mdc**: WebSocket implementation details
- **ui.mdc**: Component design patterns
- **refactoring.mdc**: Code refactoring guidelines
- **frontend.mdc**: Frontend development best practices
- **backend.mdc**: API implementation patterns
- **config.mdc**: Configuration and environment setup
- **nextjs-naming.mdc**: Next.js naming conventions

## Project Structure & Components

### Key File Paths
- **Custom Server**: `server.ts` at project root
- **HTTP Service**: `src/lib/services/http.ts`
- **WebSocket Service**: `src/lib/services/websocket.ts`
- **SSH Service**: `src/lib/services/ssh.ts`
- **Terminal Service**: `src/lib/services/terminal.ts`
- **Prisma Client**: `prisma/index.ts`
- **Environment Config**: `src/lib/env.ts`

### Component Organization
- **Shared Components**:`src/components/[feature]/`
- **Shadcn UI Components**: `src/components/Shadcn/`
- **Page Components**: `src/app/[locale]/[tenant]/[feature]/_components/`
- **Private Components**: For components used only within specific pages, create a _components folder within the relevant /app subdirectory
- **Shared Components**: The /src/components folder should contain reusable components used across multiple pages or features
- **Modular Approach**: As the project grows, adopt a more modular structure, where each feature or domain has its own folder containing components, hooks, and utilities specific to that feature

## Server Management

### When to Restart the Server
- After adding new environment variables
- After modifying middleware.ts or next.config.js
- When Fast Refresh fails with an error
- After modifying server.ts or any files in src/lib/services/

## Debugging & Testing

### Debugging Guidelines
- Use proper error handling in API routes
- Check terminal logs for server-side errors
- Use browser tools only when explicitly requested

## Project Glossary

- **Tenant**: Customer organization with isolated data
- **Host**: Server that can be connected via SSH
- **Connection**: Established SSH session
- **WebSocket Server**: Implementation for terminal connections

## Cross-References
- <a id="prisma-rules"></a>**Prisma Rules**: See `prisma.mdc` for database access patterns
- <a id="websocket-rules"></a>**WebSocket Rules**: See `websocket.mdc` for implementation details
- <a id="code-organization-rules"></a>**Code Organization Rules**: See `code-organization.mdc` for file organization
- <a id="performance-guidelines"></a>**Performance Guidelines**: See section above for optimization tips
- <a id="refactoring-guidelines"></a>**Refactoring Guidelines**: See `refactoring.mdc` for detailed patterns
- <a id="ui-guidelines"></a>**UI Guidelines**: See `ui.mdc` for component design patterns
- <a id="backend-guidelines"></a>**Backend Guidelines**: See `backend.mdc` for API implementation patterns
- <a id="frontend-guidelines"></a>**Frontend Guidelines**: See `frontend.mdc` for frontend best practices
- <a id="nextjs-guidelines"></a>**Next.js Guidelines**: See `nextjs.mdc` for Next.js implementation details
- <a id="nextjs-naming-guidelines"></a>**Next.js Naming Guidelines**: See `nextjs-naming.mdc` for naming conventions
- <a id="config-guidelines"></a>**Configuration Guidelines**: See `config.mdc` for environment setup
- <a id="yolo-mode-guidelines"></a>**YOLO Mode Guidelines**: See `yolo-mode.mdc` for rapid development patterns
