---
description: General rules for the project
globs: src/**/*.{ts,tsx}
alwaysApply: true
---
# General Rules

## Initial Setup - READ FIRST

**IMPORTANT: If this is a new chat, read all cursor rules first to understand the project structure and coding standards.**

1. Read these cursor rules in order:
   - general.mdc (this file) - Project overview and general guidelines
   - config.mdc - Environment configuration
   - prisma.mdc - Database and Prisma setup
   - nextjs.mdc - Next.js structure and best practices
   - frontend.mdc - Frontend development guidelines
   - backend.mdc - Backend development guidelines
   - ui.mdc - UI component guidelines
   - websocket.mdc - WebSocket server and terminal implementation
   - code-organization.mdc - Code organization and file size guidelines
   - refactoring.mdc - Guidelines for refactoring and breaking up large files

2. Development workflow guidelines:
   - Always ask for permission before creating any new folder or file
   - Before suggesting removal of any file or folder, examine all related files to ensure nothing important is deleted
   - When troubleshooting issues, identify all possible causes, rank them by probability, and focus on the most likely one
   - For any code changes, first provide a detailed plan specifying:
     - Which files need to be modified
     - What specific changes are needed in each file
     - Why these changes will address the issue
   - Wait for explicit user approval before implementing any code changes

3. Information gathering approach:
   - First consult all cursor rules to find relevant information
   - If cursor rules don't contain the needed information, check documents in the docs folder
   - Only ask the user for information if it cannot be found in existing documentation

4. Communication style:
   - Keep responses concise and focused on the task
   - After implementing changes, confirm completion without explaining what was done
   - Avoid lengthy explanations unless specifically requested
   - Focus on solutions rather than descriptions of problems

5. Tool usage:
   - Do not use browser tools (screenshots, console logs, network logs) unless explicitly requested
   - Do not run tests or execute commands without specific user permission
   - When using tools is necessary, explain why before using them
   - If browser tools are requested but fail to work:
     1. Check if the browser tools server is running
     2. If not running, start it with: `npx @agentdeskai/browser-tools-server`
     3. Wait for the server to initialize before trying again

6. Error handling:
   - If you make a mistake or misunderstand requirements, acknowledge it
   - Propose specific improvements to this general cursor rule to prevent similar issues in the future
   - Focus on fixing the immediate issue before suggesting rule improvements

## Project Overview

This is a Next.js application with the following key features:
- Next.js 13+ App Router with internationalization
- PostgreSQL database with Prisma ORM
- Dedicated WebSocket server implementation:
  - Root-level `websocket.server.js` (standalone server on port 3001)
  - Library module `src/lib/websocket-server.ts` (utility functions)
- Next.js built-in HTTP server (port 3000)
- Authentication with NextAuth.js
- UI built with Shadcn UI and Tailwind CSS
- Health check script for code quality monitoring
- Electron desktop application support

## Project Structure

```
automai/
├── prisma/                   # Prisma schema and migrations at root
│   ├── schema.prisma         # Database schema with models for User, Host, Connection, etc.
│   ├── migrations/           # Database migrations
│   ├── seed.ts               # Database seed script
│   └── index.ts              # Prisma client export (root-level singleton)
├── .env.*                    # Environment files at root (.env.development, .env.production, .env.test)
├── scripts/                  # Utility scripts
│   └── health-check.js       # Script to check file sizes and provide refactoring recommendations
├── src/
│   ├── app/                  # Next.js App Router
│   │   ├── [locale]/         # Internationalized routes
│   │   │   ├── (auth)/       # Auth route group
│   │   │   └── [tenant]/     # Tenant-specific routes including hosts page
│   │   └── api/              # API Route Handlers including hosts API
│   ├── lib/                  # Shared utilities
│   │   ├── services/         # Service layer (data access)
│   │   ├── prisma.ts         # Prisma client singleton (src-level)
│   │   ├── websocket-server.ts # WebSocket utility functions
│   │   ├── utils.ts          # Helper functions
│   │   └── env.ts            # Environment configuration
│   ├── components/           # UI components
│   │   ├── ui/               # Reusable UI components
│   │   └── virtualization/   # Terminal component for WebSocket connections
│   ├── i18n/                 # Internationalization
│   └── middleware.ts         # Next.js middleware
├── websocket.server.js       # Standalone WebSocket server on port 3001 for terminal connections
├── electron/                 # Electron app configuration
├── tests/                    # Test files
├── docs/                     # Project documentation
└── next.config.js            # Next.js configuration
```

## Completed Setup

The following has already been set up and should not be recreated:
- Prisma schema with models for User, Host, Connection, etc.
- Prisma client singletons:
  - Root-level singleton: `prisma/index.ts`
  - Src-level singleton: `src/lib/prisma.ts`
- WebSocket implementations:
  - Standalone server: `websocket.server.js` (port 3001)
  - Utility functions: `src/lib/websocket-server.ts`
- SSH2 integration for terminal connections
- Environment configuration with validation using Zod
- Authentication with NextAuth.js
- Internationalization with next-intl
- Health check script for code quality monitoring
- Electron desktop application configuration

## Code Organization

- Files should be under 300 lines
- If a file exceeds 300 lines, split it into multiple files:
  - For components: Extract subcomponents
  - For utilities: Group by functionality
  - For API routes: Split by endpoint or functionality

## Health Check Process

Before making any refactoring changes:
1. Run the health check script: `node scripts/health-check.js`
2. Review the output to identify files exceeding the 300-line limit
3. Present findings to the user with specific recommendations for each file
4. Wait for user confirmation before implementing any changes
5. Follow the best practices in the code-organization.mdc rule when refactoring

The health check script will:
- Scan the codebase for files exceeding 300 lines
- Provide tailored recommendations for breaking up each file type
- Display a summary of findings and best practices
- Exempt certain files like UI components and modules

When asked to refactor or health check:
- Always run the script first
- Present the results to the user
- Propose a plan for addressing the issues
- Only proceed with changes after explicit user confirmation

## Server Management

- When to restart the Next.js development server:
  - After adding new environment variables
  - After modifying middleware.ts
  - After changing next.config.js
  - When Fast Refresh fails with an error message

- Server restart procedure:
  1. Check if port 3000 is in use: `lsof -i :3000`
  2. If in use, kill the process: `kill -9 <PID>`
  3. Start the server with `npm run dev`
  4. Wait for "Ready" message before proceeding

- UI changes should not require server restart (Next.js Fast Refresh will handle these)

## i18n Handling

- Translation files should be in `src/i18n/messages` directory
- All languages should have the same keys
- Use `next-intl` for translations
- Support language switching via URL parameters

## Debugging Guidelines

- Use proper error handling in API routes
- Check terminal logs only when server-side errors occur
- Use browser tools to debug UI issues only when explicitly requested
- Be concise in task completion confirmations 

## Maintaining Cursor Rules

- Cursor rules should always reflect the current state of the codebase
- When modifying code structure or architecture, update relevant cursor rules to match
- If you identify improvements that should be documented in cursor rules:
  1. Note the improvement in your response
  2. Suggest specific updates to the relevant cursor rule
  3. Wait for user confirmation before updating the rule

- When updating cursor rules:
  1. Be precise and concise
  2. Include examples where helpful
  3. Ensure consistency with other rules
  4. Update the `globs` pattern if file paths have changed

- Periodically verify that cursor rules accurately reflect:
  - Project structure
  - Coding standards
  - Best practices
  - File organization
  - Environment configuration


