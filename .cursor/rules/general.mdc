---
description: General rules for the project
globs: src/**/*.{ts,tsx}
alwaysApply: true
---
# General Rules

## ðŸš€ YOLO Mode Quick Start

**For AI agents in YOLO mode, read this section first to get essential context quickly.**

### Essential Project Context
- **Project Type**: Next.js 13+ App Router application with PostgreSQL/Prisma and WebSocket server
- **Key Architecture**: 
  - Dual WebSocket implementations: Standalone server (port 3001) and utility module
  - Dual Prisma clients: Root-level singleton and src-level singleton
  - Next.js HTTP server (port 3000) with App Router and internationalization

### Critical Patterns to Follow
1. **Database Access**: 
   - Use appropriate Prisma client:
     - For standalone scripts/WebSocket server: `import { prisma } from '../../prisma'`
     - For Next.js application: `import { prisma } from '@/lib/prisma'`
   - See [Prisma Rules](mdc:#prisma-rules) for details

2. **WebSocket Usage**: 
   - Standalone server (`websocket.server.js`) for terminal connections
   - Utility module (`src/lib/websocket-server.ts`) for Next.js integration
   - See [WebSocket Rules](mdc:#websocket-rules) for details

3. **Code Organization**:
   - Keep files under 300 lines
   - Run health check script to identify large files: `node scripts/health-check.js`
   - See [Code Organization Rules](mdc:#code-organization-rules) for refactoring patterns

4. **Performance Optimization**:
   - Minimize client-side JavaScript with Server Components
   - Use proper code splitting and dynamic imports
   - See [Performance Guidelines](mdc:#performance-guidelines) for details

### Required vs Optional Rules

**Required Rules** (read these first in new chats):
- `general.mdc` (this file) - Essential project context
- `prisma.mdc` - Database access patterns
- `websocket.mdc` - WebSocket implementation details
- `code-organization.mdc` - File size and organization guidelines

**Optional Rules** (read as needed):
- `config.mdc` - Environment configuration details
- `nextjs.mdc` - Next.js specific patterns
- `frontend.mdc` - Frontend development guidelines
- `backend.mdc` - Backend API patterns
- `ui.mdc` - UI component guidelines
- `refactoring.mdc` - Detailed refactoring guidelines

## Initial Setup - READ FIRST

**IMPORTANT: If this is a new chat, read all cursor rules first to understand the project structure and coding standards.**

1. Read these cursor rules in order:
   - general.mdc (this file) - Project overview and general guidelines
   - yolo-mode.mdc - Quick reference guide for YOLO mode development
   - config.mdc - Environment configuration
   - prisma.mdc - Database and Prisma setup
   - nextjs.mdc - Next.js structure and best practices
   - frontend.mdc - Frontend development guidelines
   - backend.mdc - Backend development guidelines
   - ui.mdc - UI component guidelines
   - websocket.mdc - WebSocket server and terminal implementation
   - code-organization.mdc - Code organization and file size guidelines
   - refactoring.mdc - Guidelines for refactoring and breaking up large files

2. Development workflow guidelines:
   - Always ask for permission before creating any new folder or file
   - Before suggesting removal of any file or folder, examine all related files to ensure nothing important is deleted
   - When troubleshooting issues, identify all possible causes, rank them by probability, and focus on the most likely one
   - For any code changes, first provide a detailed plan specifying:
     - Which files need to be modified
     - What specific changes are needed in each file
     - Why these changes will address the issue
   - Wait for explicit user approval before implementing any code changes
   - Never use Express.js for any server implementations
   - When running npm build, fix all warnings and errors before rerunning the build

3. Information gathering approach:
   - First consult all cursor rules to find relevant information
   - If cursor rules don't contain the needed information, check documents in the docs folder
   - Only ask the user for information if it cannot be found in existing documentation

4. Communication style:
   - Keep responses concise and focused on the task
   - After implementing changes, confirm completion without explaining what was done
   - Avoid lengthy explanations unless specifically requested
   - Focus on solutions rather than descriptions of problems

5. Tool usage:
   - Do not use browser tools (screenshots, console logs, network logs) unless explicitly requested
   - Do not run tests on browser or execute commands without specific user permission
   - When using tools is necessary, explain why before using them
   - If browser tools are requested but fail to work:
     1. Check if the browser tools server is running
     2. If not running, start it with: `npx @agentdeskai/browser-tools-server`
     3. Wait for the server to initialize before trying again

6. Error handling:
   - If you make a mistake or misunderstand requirements, acknowledge it
   - Propose specific improvements to this general cursor rule to prevent similar issues in the future
   - Focus on fixing the immediate issue before suggesting rule improvements

## Project Overview

This is a Next.js application with the following key features:
- Next.js 13+ App Router with internationalization
- PostgreSQL database with Prisma ORM
- Dedicated WebSocket server implementation:
  - Root-level `websocket.server.js` (standalone server on port 3001)
  - Library module `src/lib/websocket-server.ts` (utility functions)
- Next.js built-in HTTP server (port 3000)
- Authentication with NextAuth.js
- UI built with Shadcn UI and Tailwind CSS
- Health check script for code quality monitoring
- Electron desktop application support

## Project Structure

```
automai/
â”œâ”€â”€ prisma/                   # Prisma schema and migrations at root
â”‚   â”œâ”€â”€ schema.prisma         # Database schema with models for User, Host, Connection, etc.
â”‚   â”œâ”€â”€ migrations/           # Database migrations
â”‚   â”œâ”€â”€ seed.ts               # Database seed script
â”‚   â””â”€â”€ index.ts              # Prisma client export (root-level singleton)
â”œâ”€â”€ .env.*                    # Environment files at root (.env.development, .env.production, .env.test)
â”œâ”€â”€ scripts/                  # Utility scripts
â”‚   â””â”€â”€ health-check.js       # Script to check file sizes and provide refactoring recommendations
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ app/                  # Next.js App Router
â”‚   â”‚   â”œâ”€â”€ [locale]/         # Internationalized routes
â”‚   â”‚   â”‚   â”œâ”€â”€ (auth)/       # Auth route group
â”‚   â”‚   â”‚   â””â”€â”€ [tenant]/     # Tenant-specific routes including hosts page
â”‚   â”‚   â””â”€â”€ api/              # API Route Handlers including hosts API
â”‚   â”œâ”€â”€ lib/                  # Shared utilities
â”‚   â”‚   â”œâ”€â”€ services/         # Service layer (data access)
â”‚   â”‚   â”œâ”€â”€ prisma.ts         # Prisma client singleton (src-level)
â”‚   â”‚   â”œâ”€â”€ websocket-server.ts # WebSocket utility functions
â”‚   â”‚   â”œâ”€â”€ utils.ts          # Helper functions
â”‚   â”‚   â””â”€â”€ env.ts            # Environment configuration
â”‚   â”œâ”€â”€ components/           # UI components
â”‚   â”‚   â”œâ”€â”€ ui/               # Reusable UI components
â”‚   â”‚   â””â”€â”€ virtualization/   # Terminal component for WebSocket connections
â”‚   â”œâ”€â”€ i18n/                 # Internationalization
â”‚   â””â”€â”€ middleware.ts         # Next.js middleware
â”œâ”€â”€ websocket.server.js       # Standalone WebSocket server on port 3001 for terminal connections
â”œâ”€â”€ electron/                 # Electron app configuration
â”œâ”€â”€ tests/                    # Test files
â”œâ”€â”€ docs/                     # Project documentation
â””â”€â”€ next.config.js            # Next.js configuration
```

## Completed Setup

The following has already been set up and should not be recreated:
- Prisma schema with models for User, Host, Connection, etc.
- Prisma client singletons:
  - Root-level singleton: `prisma/index.ts`
  - Src-level singleton: `src/lib/prisma.ts`
- WebSocket implementations:
  - Standalone server: `websocket.server.js` (port 3001)
  - Utility functions: `src/lib/websocket-server.ts`
- SSH2 integration for terminal connections
- Environment configuration with validation using Zod
- Authentication with NextAuth.js
- Internationalization with next-intl
- Health check script for code quality monitoring
- Electron desktop application configuration

## Code Organization

- Files should be under 300 lines
- If a file exceeds 300 lines, split it into multiple files:
  - For components: Extract subcomponents
  - For utilities: Group by functionality
  - For API routes: Split by endpoint or functionality

## Health Check Process

Before making any refactoring changes:
1. Run the health check script: `node scripts/health-check.js`
2. Review the output to identify files exceeding the 300-line limit
3. Present findings to the user with specific recommendations for each file
4. Wait for user confirmation before implementing any changes
5. Follow the best practices in the code-organization.mdc rule when refactoring

### Interpreting Health Check Results

When the health check script identifies large files, follow these guidelines:

1. **For Components (>300 lines)**:
   - Before: Single large component with multiple responsibilities
   - After: Directory structure with main component and subcomponents
   ```
   Button/
   â”œâ”€â”€ index.tsx         # Main component (exports Button)
   â”œâ”€â”€ ButtonIcon.tsx    # Extracted subcomponent
   â””â”€â”€ ButtonLabel.tsx   # Extracted subcomponent
   ```

2. **For Pages (>300 lines)**:
   - Before: Single page file with UI, data fetching, and business logic
   - After: Separate files for UI components and data operations
   ```
   dashboard/
   â”œâ”€â”€ page.tsx          # Main page (composition only)
   â”œâ”€â”€ actions.ts        # Data fetching logic
   â””â”€â”€ _components/      # UI components
   ```

3. **For Utility Files (>300 lines)**:
   - Before: Single utility file with mixed functions
   - After: Grouped by functionality in separate files
   ```
   utils/
   â”œâ”€â”€ index.ts          # Re-exports
   â”œâ”€â”€ string.ts         # String utilities
   â””â”€â”€ date.ts           # Date utilities
   ```

See [Refactoring Guidelines](mdc:#refactoring-guidelines) for detailed patterns.

## <a id="performance-guidelines"></a>Performance Optimization Guidelines

For optimal performance in YOLO mode:

1. **Server-Side Rendering**:
   - Use React Server Components (RSC) by default
   - Only add 'use client' when necessary for interactivity
   - Keep client-side JavaScript minimal

2. **Code Splitting**:
   - Use dynamic imports for large components:
     ```tsx
     const HeavyComponent = dynamic(() => import('./HeavyComponent'), {
       loading: () => <LoadingSpinner />
     });
     ```

3. **Image Optimization**:
   - Always use Next.js Image component with proper sizing
   - Implement lazy loading for below-the-fold images

4. **Data Fetching**:
   - Use React Server Components for data fetching
   - Implement proper caching strategies
   - Use incremental static regeneration where appropriate

5. **Bundle Size**:
   - Avoid large dependencies when alternatives exist
   - Use tree-shakable libraries
   - Monitor bundle size with built-in Next.js analytics

## Server Management

- When to restart the Next.js development server:
  - After adding new environment variables
  - After modifying middleware.ts
  - After changing next.config.js
  - When Fast Refresh fails with an error message

- Server restart procedure:
  1. Check if port 3000 is in use: `lsof -i :3000`
  2. If in use, kill the process: `kill -9 <PID>`
  3. Start the server with `npm run dev`
  4. Wait for "Ready" message before proceeding

- UI changes should not require server restart (Next.js Fast Refresh will handle these)

## i18n Handling

- Translation files should be in `src/i18n/messages` directory
- All languages should have the same keys
- Use `next-intl` for translations
- Support language switching via URL parameters

## Debugging Guidelines

- Use proper error handling in API routes
- Check terminal logs only when server-side errors occur
- Use browser tools to debug UI issues only when explicitly requested
- Be concise in task completion confirmations 

## <a id="testing-guidelines"></a>Testing Guidelines for YOLO Mode

In YOLO mode, focus testing efforts on critical paths:

1. **Priority Testing Areas**:
   - Authentication flows
   - Data persistence operations
   - WebSocket connections
   - Critical user journeys

2. **Testing Approaches**:
   - Manual testing of UI flows
   - Console.log debugging for quick verification
   - Basic API endpoint testing with tools like Postman
   - Visual verification of UI components

3. **Minimal Testing Setup**:
   - Use Next.js built-in testing capabilities
   - Focus on integration tests over unit tests
   - Test real user flows rather than implementation details

4. **When to Skip Testing**:
   - UI styling changes
   - Minor text updates
   - Internal refactoring without behavior changes
   - Low-risk enhancements

## Maintaining Cursor Rules

- Cursor rules should always reflect the current state of the codebase
- When modifying code structure or architecture, update relevant cursor rules to match
- If you identify improvements that should be documented in cursor rules:
  1. Note the improvement in your response
  2. Suggest specific updates to the relevant cursor rule
  3. Wait for user confirmation before updating the rule

- When updating cursor rules:
  1. Be precise and concise
  2. Include examples where helpful
  3. Ensure consistency with other rules
  4. Update the `globs` pattern if file paths have changed

- Periodically verify that cursor rules accurately reflect:
  - Project structure
  - Coding standards
  - Best practices
  - File organization
  - Environment configuration

## <a id="project-glossary"></a>Project Glossary

- **Tenant**: A customer organization with its own isolated data and users
- **Host**: A server or machine that can be connected to via SSH
- **Connection**: An established SSH session to a host
- **WebSocket Server**: The standalone server running on port 3001 for terminal connections
- **WebSocket Utility**: The module in src/lib for WebSocket functionality within Next.js
- **Prisma Client (Root)**: The Prisma client instance at /prisma/index.ts used by standalone servers
- **Prisma Client (Src)**: The Prisma client instance at /src/lib/prisma.ts used by Next.js
- **Health Check**: The process of identifying files exceeding 300 lines that need refactoring
- **YOLO Mode**: Rapid development mode prioritizing speed and efficiency over comprehensive documentation

## Cross-References

- <a id="prisma-rules"></a>**Prisma Rules**: See `prisma.mdc` for database access patterns and client usage
- <a id="websocket-rules"></a>**WebSocket Rules**: See `websocket.mdc` for WebSocket implementation details
- <a id="code-organization-rules"></a>**Code Organization Rules**: See `code-organization.mdc` for file organization guidelines
- <a id="refactoring-guidelines"></a>**Refactoring Guidelines**: See `refactoring.mdc` for detailed refactoring patterns
- <a id="ui-guidelines"></a>**UI Guidelines**: See `ui.mdc` for component design patterns
- <a id="backend-guidelines"></a>**Backend Guidelines**: See `backend.mdc` for API implementation patterns


