---
description: Rules for handling internationalization and debugging in the application
globs: ["**/*"]
alwaysApply: true
---
# Cursor Rules for Debugging and i18n

## Project Structure
1. Server-side code organization
   - **IMPORTANT**: All server-related code is located in `src/server` directory
   - Backend API routes are in `src/server/api`
   - Database models and migrations are in `src/server/prisma`
   - Environment files are in `src/server/config/env`
     - `.env.development` - Development environment variables
     - `.env.production` - Production environment variables
     - `.env.test` - Test environment variables
   - When working with Prisma, always use the schema at `src/server/prisma/schema.prisma`
   - Database file is located at `src/server/prisma/dev.db` for SQLite

## Code Organization
1. File length limits
   - **MANDATORY**: Keep files under 300 lines of code
   - If a file exceeds 300 lines, split it into:
     - Constants -> `src/constants/{feature}.ts`
     - Types -> `src/types/{feature}.ts`
     - Components -> `src/components/{feature}/{Component}.tsx`
   - Break down large components into smaller, focused components
   - Use composition to maintain functionality while reducing file size

## Important
- Always place cursor rules in the `.cursor/rules` directory with appropriate names (e.g., `i18n.mdc`, `debugging.mdc`)

## General Debugging
1. Be concise - no need to summarize what has been implemented
   - **NEVER provide a summary of changes after completing a task**
   - Do not list what you've done or explain the changes you've made
   - Simply confirm the task is complete with a brief acknowledgment
   - Avoid phrases like "Here's what I did" or "I've successfully..."

2. Browser tools usage
   - **IMPORTANT**: Only use browser tools (screenshots, console logs, etc.) when explicitly requested by the user
   - Do not automatically take screenshots or check console logs unless specifically asked
   - When browser tools are requested, use them in this order:
     1. Console logs/errors if debugging is needed
     2. Screenshots if visual verification is needed
     3. Network logs if API/request issues need to be investigated

3. Terminal logs verification
   - **ONLY** check terminal logs in these specific cases:
     1. When the user explicitly requests to check for errors
     2. When the user asks to speed up coding
     3. When you observe obvious compilation or runtime errors in previous outputs
   - Do NOT check terminal logs for routine tasks or minor changes
   - Use `cat` or similar commands to read existing logs; don't restart running services
   - If you need to check server logs, first verify if the server is already running
   - When checking logs, look for these critical errors:
     - Module resolution errors (e.g., "Module not found: Can't resolve...")
     - HTTP error codes (e.g., 500, 404, 403)
     - Runtime errors that cause full page reloads (e.g., "Fast Refresh had to perform a full reload")
     - Compilation errors (e.g., "Failed to compile")
     - Syntax errors in code
   - If errors are found, fix them before proceeding or explicitly acknowledge them

4. **Linter errors**: Only try to fix linter errors once, not 3 times. Fixing linter errors is not mandatory and will consume fast requests. If the fix doesn't work on the first attempt, acknowledge the linter errors and move on.

5. If a server restart is necessary:
   - First check if the port is in use: `lsof -i :3000`
   - If in use, kill the process: `kill -9 <PID>`
   - Only then start the server with `npm run dev`
   - **IMPORTANT**: Always wait for the server to be fully ready before checking browser status
   - Look for "Ready" or similar messages in the terminal output
   - Typically wait for messages like "✓ Ready in X.Xs" and "✓ Compiled" before proceeding
   - After server is ready, wait at least 5 seconds before using browser tools like screenshots or console logs
   - **MANDATORY**: After server restart, check terminal logs for errors before considering the task complete

## Next.js Specific Rules
1. For most UI changes, component modifications, and styling updates, Next.js Fast Refresh will automatically apply changes without requiring a server restart
2. **NEVER restart the Next.js development server except in these specific cases:**
   - When there are explicit errors that require a restart
   - When modifying Next.js configuration files (next.config.js)
   - When changing middleware.ts
   - When modifying environment variables
   - When making changes to routing configuration or internationalization setup
   - When Fast Refresh explicitly fails with an error message
   - When adding new API routes that aren't being detected
3. For all other changes, rely on Next.js Fast Refresh to compile and update the application

## i18n Handling
1. Translation files MUST be located ONLY in `/src/i18n/messages/{locale}.json`
2. When adding translations:
   - Always verify both French (fr) and English (en) files
   - Ensure keys are consistent across both files
   - Keep translations organized by feature/page sections
3. Ensure the `getMessages` function in `src/i18n/index.ts` is loading from the correct location
4. Remember that changes to translation files may require a server restart
5. NEVER create translation files outside of `/src/i18n/messages/`

## Next.js App Router
1. For pages using translations, check that the namespace exists in all locale files
2. The app uses Next.js App Router with the `[locale]` parameter in the URL
3. The middleware in `src/middleware.ts` handles locale routing

## After Making Changes
1. Only restart the development server when necessary (Next.js has fast refresh for most changes)
   - Restart is typically needed for: configuration files, middleware changes, or when fast refresh fails
2. Before restarting, check if port 3000 is in use: `lsof -i :3000`
3. If port 3000 is in use, kill the process: `kill -9 <PID>`
4. Use `npm run dev` to restart the server on port 3000
5. **IMPORTANT**: Only check terminal logs for errors when:
   - The user explicitly requests it
   - The user asks to speed up coding
   - You observe obvious compilation or runtime errors in previous outputs
   - Look for "Ready" or similar messages in the terminal output
   - If checking logs, wait for messages like "✓ Ready in X.Xs" and "✓ Compiled" before proceeding
   - If any errors are found, address them immediately before proceeding
6. If the server starts on a different port (e.g., 3001), stop it and repeat steps 2-4 to ensure it runs on port 3000 