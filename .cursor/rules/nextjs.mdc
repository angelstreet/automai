---
description: Best Practices for Next.js with App Router
globs: src/**/*.{ts,tsx}
---

# Next.js Best Practices

## Core Principles

- Prioritize using server components (RSC) for performance, SEO, and data fetching
- Use client components sparingly, only when interactivity is required
- Take advantage of Next.js file-based routing system for simplicity
- Centralize shared layouts in `layout.tsx` for consistency across pages
- Add `loading.tsx` to handle loading states for better UX
- Implement custom error pages with `error.tsx` to handle errors gracefully
- Use API route handlers to manage backend logic within the app structure
- Optimize server-side rendering (SSR) and static site generation (SSG) for faster loading times

## File Structure

```
src/
├── app/
│   ├── [locale]/        # Internationalization routes
│   ├── layout.tsx       # Root layout
│   ├── error.tsx        # Global error handling
│   └── loading.tsx      # Global loading state
├── components/
│   ├── ui/             # Reusable UI components
│   └── features/       # Feature-specific components
├── lib/
│   └── utils/          # Utility functions
└── types/              # TypeScript type definitions
```

## Component Guidelines

### Server Components (Default)
- Use for data fetching
- SEO requirements
- Static content
- No client-side interactivity needed

```typescript
// app/page.tsx
async function Page() {
  const data = await fetchData();
  return <main>{/* render data */}</main>;
}
```

### Client Components (When Needed)
- Interactive features
- Browser APIs
- Event listeners
- Client-side state

```typescript
'use client';

import { useState } from 'react';

export function InteractiveComponent() {
  const [state, setState] = useState();
  return <div>{/* interactive content */}</div>;
}
```

## Data Fetching

### Server-Side
```typescript
// Prefer server components for data fetching
async function Page() {
  const data = await fetch('api/data', { cache: 'force-cache' });
  return <main>{/* render data */}</main>;
}
```

### Client-Side
```typescript
'use client';

import { useEffect, useState } from 'react';

// Only when real-time updates are needed
function LiveData() {
  const [data, setData] = useState();
  useEffect(() => {
    // Fetch data
  }, []);
}
```

## Error Handling

```typescript
// app/error.tsx
'use client';

export default function Error({
  error,
  reset,
}: {
  error: Error;
  reset: () => void;
}) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={() => reset()}>Try again</button>
    </div>
  );
}
```

## Loading States

```typescript
// app/loading.tsx
export default function Loading() {
  return <div>Loading...</div>;
}
```

## Route Handlers

```typescript
// app/api/route.ts
export async function GET(request: Request) {
  // Handle GET request
}

export async function POST(request: Request) {
  // Handle POST request
}
```

## Performance Optimization

- Use `next/image` for automatic image optimization
- Implement proper caching strategies
- Utilize route segments for code splitting
- Enable static generation where possible
- Use streaming for large data sets

## Authentication

- Implement authentication in layout files for protected routes
- Use middleware for auth checks
- Handle auth state server-side when possible

## Environment Variables

- Use `.env.local` for local development
- Type environment variables
- Validate environment variables at build time

## TypeScript Best Practices

- Use strict mode
- Define proper types for API responses
- Implement proper error types
- Use type inference where possible

## Testing

- Test server components with Jest
- Use React Testing Library for client components
- Implement E2E tests with Playwright or Cypress
- Test API routes independently 