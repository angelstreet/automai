---
description: Next.js Best Practices
globs: src/**/*.{ts,tsx}
alwaysApply: false
---

# Next.js Best Practices

## Project Structure

Follow this structure for Next.js applications:

```
automai/
├── prisma/                   # Prisma schema and migrations at root
│   ├── schema.prisma         # Database schema
│   ├── migrations/           # Database migrations
│   ├── seed.ts               # Database seed script
│   └── index.ts              # Prisma client singleton (root-level)
├── .env.*                    # Environment files at root
├── scripts/                  # Utility scripts
│   └── health-check.js       # Script to check file sizes and provide refactoring 
├── src/
│   ├── app/                  # Next.js App Router
│   │   ├── [locale]/         # Internationalized routes
│   │   │   ├── (auth)/       # Auth route group
│   │   │   └── [tenant]/     # Tenant-specific routes
│   │   └── api/              # API Route Handlers
│   ├── lib/                  # Shared utilities
│   │   ├── services/         # Service layer (data access)
│   │   ├── prisma.ts         # Prisma client singleton (src-level)
│   │   ├── websocket-server.ts # WebSocket utility functions
│   │   ├── utils.ts          # Helper functions
│   │   └── env.ts            # Environment configuration
│   ├── components/           # UI components
│   │   ├── Feature/          # Reusable UI components
│   │   └── Shadcn/           # fe component
│   ├── i18n/                 # Internationalization
│   └── middleware.ts         # Next.js middleware
├── electron/                 # Electron app configuration
├── tests/                    # Test files
├── docs/                     # Project documentation
└── next.config.js            # Next.js configuration
```

## Coding Standards

1. **API Routes**: Place in `src/app/api/` using Route Handlers
2. **Database Access**: Use service layer in `src/lib/services/` for all database operations
3. **Prisma**: Import from `@/lib/prisma` for database access
4. **Environment Variables**: Define in root `.env.*` files, validate with zod
5. **Components**: Create reusable components in `src/components/`
6. **Internationalization**: Use `next-intl` with messages in `src/i18n/messages`
7. **Authentication**: Implement with NextAuth.js
8. **Middleware**: Define in `src/middleware.ts` at the root of src

## Common Patterns

### Prisma Client Singleton

```typescript
// src/lib/prisma.ts
import { PrismaClient } from '@prisma/client'

declare global {
  var prisma: PrismaClient | undefined
}

export const prisma = global.prisma || new PrismaClient()

if (process.env.NODE_ENV !== 'production') {
  global.prisma = prisma
}
```

### API Route Handler

```typescript
// src/app/api/hosts/route.ts
import { NextResponse } from 'next/server'
import { getHosts, createHost } from '@/lib/services/hosts'

export async function GET() {
  try {
    const hosts = await getHosts()
    return NextResponse.json({ success: true, data: hosts })
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to fetch hosts' },
      { status: 500 }
    )
  }
}
```

### Environment Variables

```typescript
// src/lib/env.ts
import { z } from 'zod'

const envSchema = z.object({
  DATABASE_URL: z.string().url(),
  JWT_SECRET: z.string().min(32),
  NEXTAUTH_URL: z.string().url(),
  NEXTAUTH_SECRET: z.string()
})

export const env = envSchema.parse(process.env)
```

## Project Organization

- **IMPORTANT**: Place Prisma at the root level (`/prisma`) as Prisma CLI commands expect the schema there by default
- Environment files (`.env.*`) should be at the root of the project
- Use `src/app` for pages and API routes following the App Router pattern
- Place shared utilities in `src/lib` directory
- Keep UI components in `src/components` directory
- Define middleware at `src/middleware.ts`

## Best Practices

- Use TypeScript for type safety
- Implement proper error handling
- Follow RESTful API design principles
- Use middleware for cross-cutting concerns
- Implement proper authentication and authorization
- Handle environment configuration properly
- Follow security best practices
- Use Server Components where possible
- Minimize client-side JavaScript
- Optimize for Core Web Vitals 

## Frontend Development

### Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types

### Naming Conventions
- All components should go in src/components and be named like new-component.tsx
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components

### TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces

### Syntax and Formatting
- Use the "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use declarative JSX

### UI and Styling
- Use Shadcn UI and Tailwind for components and styling
- Implement responsive design with Tailwind CSS; use a mobile-first approach

### Performance Optimization
- Limit 'use client':
  - Favor server components and Next.js SSR
  - Use only for Web API access in small components
  - Avoid for data fetching or state management
- Use 'nuqs' for URL search parameter state management
- While creating placeholder images as a part of your seed data, use https://placekitten.com/
