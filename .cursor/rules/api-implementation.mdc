# API Implementation

## AI Guidelines
Implement APIs using Server Actions with robust error handling, strong typing, and proper validation. Follow the three-layer architecture, ensure tenant isolation, use standardized response formats, and implement appropriate caching strategies. Create consistent, predictable APIs that handle errors gracefully.

## Key Patterns

### Server Action Implementation
- **Location**: Feature-specific `/src/app/[locale]/[tenant]/[feature]/actions.ts`
- **Directive**: Always include 'use server' at the top of the file
- **Authentication**: Validate user in every action
- **Validation**: Use zod for input validation
- **Response Format**: Return consistent `ActionResult<T>` objects

### Function Structure
- **Parameter Validation**: Validate inputs before processing
- **Authentication Check**: Verify user is authenticated
- **Permission Check**: Verify user has appropriate permissions
- **Cache Check**: Check cache before database access
- **Database Operation**: Perform core operation
- **Response Mapping**: Convert DB types to UI types
- **Cache Update**: Update or invalidate cache as needed
- **Error Handling**: Catch and handle all errors

### Error Handling
- **Try/Catch Blocks**: Wrap all database operations
- **Error Context**: Include operation name in error logs
- **Consistent Format**: Return standardized error responses
- **Client-Friendly Messages**: Simplify error messages for UI
- **Validation Errors**: Return first error message from validation

### Performance Optimization
- **Cache Integration**: Use serverCache for frequently accessed data
- **Partial Updates**: Support updating specific fields
- **Batch Operations**: Support bulk create/update operations
- **Query Optimization**: Limit fields and use efficient queries
- **Type Mapping**: Efficient conversion between DB and UI types

## Examples

### Basic Server Action

```typescript
// In /src/app/[locale]/[tenant]/repositories/actions.ts
'use server';

import { z } from 'zod';
import { getUser } from '@/app/actions/user';
import { getRepositories, mapDbRepoToRepo } from '@/lib/supabase/db-repositories';
import { serverCache } from '@/lib/cache';
import { CACHE_TTL } from './constants';

export async function getRepositoriesAction(
  providerId?: string,
  user?: AuthUser | null
): Promise<ActionResult<Repository[]>> {
  try {
    // Get user if not provided
    if (!user) {
      const userResult = await getUser();
      if (!userResult.success) {
        return { success: false, error: 'Authentication required' };
      }
      user = userResult.data;
    }
    
    // Check cache
    const cacheKey = `tenant:${user.tenant_id}:repositories:${providerId || 'all'}`;
    const cachedData = serverCache.get<Repository[]>(cacheKey);
    if (cachedData) {
      return { success: true, data: cachedData };
    }
    
    // Fetch from database
    const result = await getRepositories(user.tenant_id, providerId);
    
    if (!result.success) {
      return { success: false, error: result.error };
    }
    
    // Map to UI types
    const repositories = result.data.map(mapDbRepoToRepo);
    
    // Cache the result
    serverCache.set(cacheKey, repositories, CACHE_TTL.REPOSITORIES);
    
    return { success: true, data: repositories };
  } catch (error) {
    console.error('Error in getRepositoriesAction:', error);
    return { success: false, error: 'Failed to fetch repositories' };
  }
}
```

### Action with Validation

```typescript
// In /src/app/[locale]/[tenant]/deployments/actions.ts
'use server';

import { z } from 'zod';
import { getUser } from '@/app/actions/user';
import { createDeployment } from '@/lib/supabase/db-deployments';
import { validateAccess } from '@/lib/permissions';

// Input validation schema
const deploymentSchema = z.object({
  name: z.string().min(3, 'Name must be at least 3 characters'),
  repositoryId: z.string().uuid('Invalid repository ID'),
  hostId: z.string().uuid('Invalid host ID'),
  branch: z.string().min(1, 'Branch is required'),
  command: z.string().optional(),
  environmentVariables: z.array(
    z.object({
      name: z.string().min(1, 'Variable name is required'),
      value: z.string()
    })
  ).optional()
});

export async function createDeploymentAction(
  data: z.infer<typeof deploymentSchema>
): Promise<ActionResult<Deployment>> {
  try {
    // Validate input
    const validationResult = deploymentSchema.safeParse(data);
    if (!validationResult.success) {
      const errorMessage = validationResult.error.issues[0].message;
      return { success: false, error: errorMessage };
    }
    
    // Get authenticated user
    const userResult = await getUser();
    if (!userResult.success) {
      return { success: false, error: 'Authentication required' };
    }
    
    // Permission check
    const permissionCheck = await validateAccess(
      userResult.data, 
      'deployment:create',
      { repositoryId: data.repositoryId, hostId: data.hostId }
    );
    
    if (!permissionCheck.success) {
      return { success: false, error: permissionCheck.error };
    }
    
    // Create deployment
    const result = await createDeployment({
      ...validationResult.data,
      tenant_id: userResult.data.tenant_id,
      created_by: userResult.data.id,
      status: 'pending'
    });
    
    if (!result.success) {
      return { success: false, error: result.error };
    }
    
    // Invalidate relevant caches
    serverCache.delete(`tenant:${userResult.data.tenant_id}:deployments`);
    
    // Start deployment process (async)
    startDeploymentProcess(result.data.id).catch(err => {
      console.error('Error starting deployment process:', err);
    });
    
    return { success: true, data: result.data };
  } catch (error) {
    console.error('Error in createDeploymentAction:', error);
    return { success: false, error: 'Failed to create deployment' };
  }
}
```

### API Route Implementation

```typescript
// In /src/app/api/deployments/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getDeploymentsAction } from '@/app/[locale]/[tenant]/deployments/actions';
import { getUser } from '@/app/actions/user';

export async function GET(request: NextRequest) {
  try {
    // Authenticate user
    const userResult = await getUser();
    if (!userResult.success) {
      return NextResponse.json(
        { success: false, error: 'Authentication required' },
        { status: 401 }
      );
    }
    
    // Parse parameters
    const searchParams = request.nextUrl.searchParams;
    const status = searchParams.get('status');
    const hostId = searchParams.get('hostId');
    
    // Get deployments using action
    const result = await getDeploymentsAction(
      { status: status || undefined, hostId: hostId || undefined },
      userResult.data
    );
    
    if (result.success) {
      return NextResponse.json(result);
    } else {
      return NextResponse.json(result, { status: 400 });
    }
  } catch (error) {
    console.error('Error in deployments API:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}
```

## Best Practices

1. **Naming Conventions**
   - Action names should end with "Action" (e.g., `getRepositoriesAction`)
   - Function naming should follow REST conventions (get, create, update, delete)
   - Parameters should use camelCase and be descriptive

2. **Error Handling**
   - Log all errors with appropriate context
   - Return user-friendly error messages
   - Include error codes where appropriate
   - Handle edge cases explicitly

3. **Performance**
   - Cache frequently accessed data
   - Use selective field queries where possible
   - Batch related operations
   - Use transactions for multi-step operations

4. **Security**
   - Never trust client-provided data
   - Validate all inputs with schema validation
   - Check permissions for every operation
   - Sanitize all outputs before returning

## Related Rules
- api-design.mdc - API design patterns
- core-architecture.mdc - Three-layer architecture
- data-supabase.mdc - Database access patterns
- data-auth.mdc - Authentication patterns
- data-caching.mdc - Caching strategies 