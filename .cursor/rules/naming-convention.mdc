---
description: 
globs: 
alwaysApply: false
---
# Naming Conventions

This document defines the naming conventions for files, components, functions, and types within the codebase.

## Component Naming Conventions

### File Naming Pattern

```
[Domain][Entity][Purpose][Type][Client].tsx
```

Where:
- **Domain**: The high-level feature area (Team, Repository, Host, CICD, etc.)
- **Entity**: The specific entity being managed (Member, Resource, Repository, etc.)
- **Purpose**: The specific action/view (Add, Edit, List, View, etc.)
- **Type**: The component type (Dialog, Tab, List, Form, Table, etc.)
- **Client**: Required suffix for client-side components

### Examples:

| Component Type | Naming Pattern                   | Example                           |
|----------------|----------------------------------|-----------------------------------|
| Dialog         | [Domain][Entity][Action]DialogClient.tsx | TeamMemberAddDialogClient.tsx     |
| Tab            | [Domain][Entity]TabClient.tsx    | TeamMembersTabClient.tsx          |
| List           | [Domain][Entity][Type]Client.tsx | TeamResourcesUnassignedClient.tsx |
| Actions        | [Domain]ActionsClient.tsx        | TeamActionsClient.tsx             |
| Table          | [Domain][Entity]TableClient.tsx  | TeamMembersTableClient.tsx        |
| Form           | [Domain][Entity]FormClient.tsx   | RepositoryDetailsFormClient.tsx   |

### Server Component Naming

For server components, follow a similar pattern without the Client suffix:

```
[Domain][Entity][Type].tsx
```

Examples:
- TeamHeader.tsx
- TeamOverview.tsx
- TeamMembersTableSkeleton.tsx

## Folder Structure

```
/[locale]/[tenant]/[domain]/
├── page.tsx                 # Server component page
├── metadata.ts              # Page metadata
└── _components/             # Component folder
    ├── [Domain]Header.tsx   # Server components
    ├── [Domain]Overview.tsx
    ├── [Domain]Skeleton.tsx
    └── client/              # Client components
        ├── [Domain][Entity][Purpose][Type]Client.tsx
```

## Database Layer Naming Conventions

### File Naming Pattern

```
db-[domain]/[entity].ts
```

Examples:
- db-teams/teams.ts
- db-teams/team-members.ts
- db-repositories/repositories.ts

### Function Naming Pattern

```
[action]@Entity
```

Examples:
- `getTeamById(teamId, cookieStore)`
- `createTeam(data, cookieStore)`
- `updateTeamMember(teamId, memberId, data, cookieStore)`

## Server Actions Naming Conventions

### File Naming Pattern

```
actions/[domain]Action.ts
```

Examples:
- actions/teamAction.ts
- actions/teamMemberAction.ts
- actions/repositoriesAction.ts

### Function Naming Pattern

```
[action]@Entity
```

Examples:
- `getTeam(id)`
- `createTeam(data)`
- `updateTeamMember(teamId, memberId, data)`

## Hook Naming Conventions

### File Naming Pattern

```
hooks/[domain]/use[Domain].ts
```

Examples:
- hooks/user/useUser.ts
- hooks/sidebar/useSidebar.ts
- hooks/team/useTeam.ts
- hooks/permission/usePermission.ts

### Function Naming Pattern

```
use[Domain]
```

Each domain should have a single primary hook that handles all the functionality.

Examples:
- `useUser()` - For user authentication and state
- `useSidebar()` - For sidebar state management
- `useTeam()` - For team data and operations
- `usePermission()` - For permission checking

### IMPORTANT RULES:

1. **Keep It Simple**: One primary hook per domain without any suffixes
2. **Domain-First Naming**: Use the domain as the primary identifier (e.g., useUser not useAuth)
3. **Complete Functionality**: Each hook should handle all functionality for its domain
4. **No Specialized Variants**: Avoid creating multiple hooks for the same domain with different suffixes

## Logging Conventions

All logs should follow the format:
```
[@layer:file:function] Message
```

Where layer is one of:
- `@db`: Database operations
- `@action`: Server actions
- `@component`: React components
- `@hook`: React hooks
- `@api`: API routes
- `@middleware`: Middleware

Examples:
- `[@db:teams:getTeamById] Getting team: ${id}`
- `[@action:team:getTeam] Found team: ${id}`
- `[@component:TeamMembersTable:render] Rendering members: ${members.length}`

## Types Naming Conventions

### Directory Structure

```
/src/types/
├── component/                       # Component entity types (data models)
│   ├── [domain]ComponentType.ts     
├── context/                         # Context types (React context)
│   ├── [domain]ContextType.ts  
├── api/                             # API types
│   ├── [domain]ApiType.ts
├── service/                         # Service/auth types
│   ├── [domain]ServiceType.ts
├── db/                              # Database types
│   ├── [domain]DbType.ts 
└── ... 
```

### Component Types

Component types represent the fundamental data models of the application and should be defined in `/src/types/component/[domain]ComponentType.ts` files.

Examples:
- `/src/types/component/repositoryComponentType.ts`
- `/src/types/component/hostComponentType.ts`
- `/src/types/component/cicdComponentType.ts`
- `/src/types/component/deploymentComponentType.ts`

### Context Types

Context types extend component types with React context specific functionality and should be defined in `/src/types/context/[domain]ContextType.ts` files.

Examples:
- `/src/types/context/repositoryContextType.ts`
- `/src/types/context/hostContextType.ts`
- `/src/types/context/cicdContextType.ts`
- `/src/types/context/deploymentContextType.ts`

### Service Types

Service types are used for authentication and service functionality and should be defined in `/src/types/service/[domain]ServiceType.ts` files.

Examples:
- `/src/types/service/userServiceType.ts`
- `/src/types/service/sessionServiceType.ts`

### Type Interface Naming Pattern

```
export interface [Entity] { ... }               # Component entity type
export interface [Entity]Data { ... }           # Context state
export interface [Entity]Actions { ... }        # Context actions
export interface [Entity]ContextType { ... }    # Combined context type
```

Examples:
- `Repository` (component entity)
- `RepositoryData` (context state)
- `RepositoryActions` (context actions)
- `RepositoryContextType` (combined context type)

## General Rules

1. Always use PascalCase for React components and type interfaces
2. Always use camelCase for functions, variables, and file names
3. Always add suffix "Client" to client components
4. Always group related components in appropriate folders
5. Always use explicit and descriptive names over abbreviations
6. Maintain consistent naming across the entire codebase
7. Define component types in `/types/component/` with suffix `ComponentType`
8. Define context types in `/types/context/` with suffix `ContextType`
9. Define service types in `/types/service/` with suffix `ServiceType` 
10. Define API types in `/types/api/` with suffix `ApiType`
11. Define database types in `/types/db/` with suffix `DbType`
12. Always suffix action files with "Action" (e.g., teamAction.ts)
13. Always use hook naming pattern `use[Domain]` without suffixes