---
description: 
globs: 
alwaysApply: false
---
# Naming Conventions

This document defines the naming conventions for files, components, functions, and types within the codebase.

## Component Naming Conventions

### File Naming Pattern

```
[Domain][Entity][Purpose][Type][Client].tsx
```

Where:
- **Domain**: The high-level feature area (Team, Repository, Host, CICD, etc.)
- **Entity**: The specific entity being managed (Member, Resource, Repository, etc.)
- **Purpose**: The specific action/view (Add, Edit, List, View, etc.)
- **Type**: The component type (Dialog, Tab, List, Form, Table, etc.)
- **Client**: Required suffix for client-side components

### Examples:

| Component Type | Naming Pattern                   | Example                           |
|----|----|-----|
| Dialog         | [Domain][Entity][Action]DialogClient.tsx | TeamMemberAddDialogClient.tsx     |
| Tab            | [Domain][Entity]TabClient.tsx    | TeamMembersTabClient.tsx          |
| List           | [Domain][Entity][Type]Client.tsx | TeamResourcesUnassignedClient.tsx |
| Actions        | [Domain]ActionsClient.tsx        | TeamActionsClient.tsx             |
| Table          | [Domain][Entity]TableClient.tsx  | TeamMembersTableClient.tsx        |
| Form           | [Domain][Entity]FormClient.tsx   | RepositoryDetailsFormClient.tsx   |

### Server Component Naming

For server components, follow a similar pattern without the Client suffix:

```
[Domain][Entity][Type].tsx
```

Examples:
- TeamHeader.tsx
- TeamOverview.tsx
- TeamMembersTableSkeleton.tsx

## Project Structure

```
/app/
├── [locale]/
    ├── (auth)/                         # Authentication routes
    ├── (marketing)/                    # Marketing routes
    └── [tenant]/                       # Tenant-specific routes
        ├── _components/                # Shared components for tenant
        │   ├── client/                 # Client components
        │   │   └── [Domain][Type]Client.tsx
        │   └── [Domain][Type].tsx      # Server components
        ├── [domain]/                   # Domain-specific routes (team, hosts, etc.)
            ├── _components/            # Components for this domain
            │   ├── client/             # Client components
            │   │   └── [Domain][Type]Client.tsx
            │   └── [Domain][Type].tsx  # Server components
            ├── page.tsx                # Page component
            └── metadata.ts             # Page metadata
```

## Database Layer Naming Conventions

### File Naming Pattern

```
lib/db/[domain]db.ts
```

Examples:
- lib/db/teamdb.ts
- lib/db/repositorydb.ts
- lib/db/hostdb.ts

### Function Naming Pattern

```
[action][Entity]
```

Examples:
- `getTeamById(teamId, cookieStore)`
- `createTeam(data, cookieStore)`
- `updateTeamMember(teamId, memberId, data, cookieStore)`

## Server Actions Naming Conventions

### File Naming Pattern

```
app/actions/[domain]action.ts
```

Examples:
- app/actions/teamaction.ts
- app/actions/repositoriesaction.ts
- app/actions/hostsaction.ts

### Function Naming Pattern

```
[action][Entity]
```

Examples:
- `getTeam(id)`
- `createTeam(data)`
- `updateTeamMember(teamId, memberId, data)`

## Hook Naming Conventions

### File Naming Pattern

```
hooks/[domain]/use[Domain].ts
```

Examples:
- hooks/team/useTeam.ts
- hooks/user/useUser.ts
- hooks/repository/useRepository.ts

### Function Naming Pattern

```
use[Domain][Purpose]
```

Examples:
- `useTeam()` - Primary hook for team data and operations
- `useTeamData()` - For accessing team data
- `useResourceAssignment()` - For resource assignment functionality
- `useUser()` - For user authentication and state

## Service Layer Naming Conventions

### File Naming Pattern

```
lib/services/[domain]service.ts
```

Examples:
- lib/services/authservice.ts
- lib/services/repositoryservice.ts
- lib/services/teamservice.ts

## Types Naming Conventions

### Directory Structure

```
/types/
├── component/                       # Component entity types (data models)
│   ├── [domain]componenttype.ts     
├── context/                         # Context types (React context)
│   ├── [domain]contexttype.ts  
├── api/                             # API types
│   ├── [domain]apitype.ts
├── service/                         # Service/auth types
│   ├── [domain]servicetype.ts
├── db/                              # Database types
│   ├── [domain]dbtype.ts 
└── ... 
```

### Type Interface Naming Pattern

```
export interface [Entity] { ... }               # Component entity type
export interface [Entity]Data { ... }           # Context state
export interface [Entity]Actions { ... }        # Context actions
export interface [Entity]ContextType { ... }    # Combined context type
```

Examples:
- `Team` (component entity)
- `TeamData` (context state)
- `TeamActions` (context actions)
- `TeamContextType` (combined context type)

## Providers Naming Conventions

### File Naming Pattern

```
app/providers/[domain]provider.tsx
```

Examples:
- app/providers/teamprovider.tsx
- app/providers/userprovider.tsx
- app/providers/sidebarprovider.tsx

### Component Naming Pattern

```
[Domain]Provider
```

Examples:
- `TeamProvider`
- `UserProvider`
- `SidebarProvider`

## Logging Conventions

All logs should follow the format:
```
[@layer:file:function] Message
```

Where layer is one of:
- `@db`: Database operations
- `@action`: Server actions
- `@component`: React components
- `@hook`: React hooks
- `@api`: API routes
- `@middleware`: Middleware
- `@supabase`: Supabase operations

Examples:
- `[@db:teamDb:getTeamById] Getting team: ${id}`
- `[@action:team:getTeam] Found team: ${id}`
- `[@component:TeamMembersTable:render] Rendering members: ${members.length}`

## General Rules

1. Use PascalCase for React components and type interfaces
2. Use camelCase for functions, variables, and file names
3. Add suffix "Client" to client components (e.g., TeamActionsClient.tsx)
4. Group related components in appropriate folders
5. Place client components in client/ subfolders
6. Use explicit and descriptive names over abbreviations
7. Maintain consistent naming across the entire codebase
8. Define component types in `/types/component/` with suffix `ComponentType`
9. Define context types in `/types/context/` with suffix `ContextType`
10. Define service types in `/types/service/` with suffix `ServiceType` 
11. Define API types in `/types/api/` with suffix `ApiType`
12. Define database types in `/types/db/` with suffix `DbType`
13. Always suffix action files with "Action" (e.g., teamAction.ts)
14. Create skeleton components with "Skeleton" suffix (e.g., TeamSkeleton.tsx)
15. Place page-specific components in _components folder under the page directory 