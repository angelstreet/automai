---
description: Guidelines for refactoring code and breaking up large files
globs: **/*.{ts,tsx,js,jsx}
---
# Refactoring Guidelines

## Overview

This document outlines the process and best practices for refactoring code in the project, with a particular focus on breaking up large files to maintain code quality and readability.

## Core Principles

1. **One file at a time**: Always refactor one file at a time to minimize the risk of introducing bugs.
2. **Verify after each change**: Test thoroughly after each file refactor to ensure nothing is broken.
3. **Get explicit agreement**: Always get explicit agreement before moving to the next file.
4. **Document changes**: Keep track of all changes made during refactoring for future reference.
5. **Maintain functionality**: Ensure that the refactored code maintains the same functionality as the original.

## File Size Guidelines

- Files should be under 300 lines of code
- Run the health check script to identify files exceeding this limit:
  ```bash
  node scripts/health-check.js
  ```

## Refactoring Process

### Before Starting

1. **Create a branch**: Always create a new branch for refactoring work
   ```bash
   git checkout -b refactor/component-name
   ```

2. **Run the health check**: Identify files that need refactoring
   ```bash
   node scripts/health-check.js
   ```

3. **Plan the refactoring**: Create a plan for how to break up each file
   - Identify logical components or functions that can be extracted
   - Determine appropriate file and directory structure
   - Consider dependencies and imports

### During Refactoring

1. **Focus on one file**: Complete the refactoring of one file before moving to the next
2. **Make small, incremental changes**: Avoid large, sweeping changes
3. **Commit frequently**: Make small, focused commits with clear messages
4. **Run tests after each significant change**: Ensure functionality is preserved

### After Each File Refactor

1. **Verification checklist**:
   - Run the application
   - Test the affected functionality
   - Check for console errors
   - Verify UI components render correctly
   - Run automated tests if available

2. **Get explicit agreement**: Present the changes to the team and get approval before moving on
3. **Document the changes**: Update documentation if necessary

## Breaking Up Different File Types

### Components

- Create a directory with the component name
- Use index.tsx as the main component file
- Name child components with PascalCase and place in the same directory
- Example:
  ```
  Button/
  ├── index.tsx         # Main Button component
  ├── ButtonIcon.tsx    # Icon subcomponent
  └── ButtonLabel.tsx   # Label subcomponent
  ```

### Pages

- Create a _components directory for page-specific components
- Extract sections into separate components
- Move data fetching to separate files (actions.ts or api.ts)
- Example:
  ```
  app/dashboard/
  ├── page.tsx
  ├── actions.ts        # Data fetching and mutations
  ├── _components/
  │   ├── DashboardHeader.tsx
  │   ├── DashboardStats.tsx
  │   └── DashboardTable.tsx
  ```

### Utility Functions

- Group by functionality in separate files
- Create an index.ts file to re-export functions
- Example:
  ```
  utils/
  ├── index.ts          # Re-exports
  ├── string.ts         # String utilities
  ├── date.ts           # Date utilities
  └── format.ts         # Formatting utilities
  ```

### API Routes

- Split validation logic into separate files
- Move business logic to service layer
- Keep route handlers focused on request/response handling
- Example:
  ```
  app/api/users/
  ├── route.ts          # Route handler
  ├── validation.ts     # Input validation
  └── lib/services/userService.ts  # Business logic
  ```

### Hooks

- Split by functionality
- Follow the pattern: use[Feature][Action].ts
- Organize hook internals:
  - State declarations first
  - Derived state next
  - Event handlers next
  - Effects last
  - Return values in a single object

### Constants

- Group related constants in separate files by domain
- Place in a constants directory organized by feature
- Use index.ts to re-export all constants

## Code Organization Within Files

### Imports Organization

- Group imports by:
  1. External libraries
  2. Internal modules
  3. Types
  4. Styles
- Use absolute imports for cross-directory references
- Use relative imports for files in the same directory

### Component Structure

```tsx
// 1. Imports (grouped as described above)
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { Button } from '@/components/ui';
import type { User } from '@/types';
import styles from './Component.module.css';

// 2. Types
type ComponentProps = {
  user: User;
};

// 3. Helper functions (if small and component-specific)
const formatName = (user: User) => `${user.firstName} ${user.lastName}`;

// 4. Component definition
export function Component({ user }: ComponentProps) {
  // State
  const [isLoading, setIsLoading] = useState(false);
  
  // Derived state
  const fullName = formatName(user);
  
  // Handlers
  const handleClick = () => {
    setIsLoading(true);
    // ...
  };
  
  // Effects
  useEffect(() => {
    // ...
  }, []);
  
  // Render
  return (
    <div>
      {/* JSX */}
    </div>
  );
}
```

## Common Refactoring Patterns

### Extract Component

When a component becomes too large or handles multiple concerns, extract parts into separate components.

### Extract Hook

When component logic becomes complex, extract it into a custom hook.

### Extract Function

When a function becomes too long or handles multiple concerns, break it into smaller functions.

### Extract Constants

Move magic numbers and strings to named constants.

## Testing After Refactoring

- Run existing tests to ensure functionality is preserved
- Add new tests for extracted components or functions
- Test edge cases that might be affected by the refactoring

## Conclusion

Following these guidelines will help maintain a clean, organized codebase that is easier to understand, test, and maintain. Remember that refactoring is an ongoing process, not a one-time task.

When in doubt, run the health check script to identify files that need attention:

```bash
node scripts/health-check.js
``` 