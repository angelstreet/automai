---
description: Guidelines for refactoring code and breaking up large files
globs: **/*.{ts,tsx,js,jsx}
alwaysApply: false
---
# Refactoring Guidelines

## Overview

This document outlines the process and best practices for refactoring code in the project, with a particular focus on breaking up large files to maintain code quality and readability.

## Important: Read These Rules First

Before starting any refactoring work, you MUST read and understand these cursor rules:
- `nextjs.mdc` - For Next.js project structure and organization
- `code-organization.mdc` - For code organization best practices
- `general.mdc` - For general project guidelines

These rules provide essential context about the project structure and coding standards that must be followed during refactoring.

## Special Considerations

### Shadcn UI Components

Components in `src/components/ui/` that are part of the Shadcn UI library should NOT be refactored. These components:
- Are exempted from the 300-line limit
- Should be kept as close to their original implementation as possible
- May be customized but should remain in single files

If a Shadcn UI component has been heavily customized and exceeds the line limit:
1. Create a new directory outside of `src/components/ui/` for the customized version
2. Keep the original Shadcn component intact in `src/components/ui/`
3. Import and extend the original component in your custom implementation

## Core Principles

1. **One file at a time**: Always refactor one file at a time to minimize the risk of introducing bugs.
2. **Verify after each change**: Check the terminal for errors after each file refactor to ensure nothing is broken.
3. **Get explicit agreement**: Always get explicit agreement before implementing changes and before moving to the next file.
4. **Document changes**: Keep track of all changes made during refactoring for future reference.
5. **Maintain functionality**: Ensure that the refactored code maintains the same functionality as the original.
6. **Commit after each file**: Make a commit after each file is fully refactored to maintain a clean history.

## File Size Guidelines

- Files should be under 300 lines of code
- Run the health check script to identify files exceeding this limit:
  ```bash
  node scripts/health-check.js
  ```

## Refactoring Process

### Before Starting

1. **Assess the component**: Determine if the component should be refactored
   - Is it a Shadcn UI component? If yes, do not refactor
   - Is it in an exempted directory? If yes, confirm before refactoring
   - Does it follow the project structure in `nextjs.mdc`? If not, plan accordingly

2. **Commit current state**: Make a commit before starting refactoring
   ```bash
   git add .
   git commit -m "pre-refactor: save current state before refactoring component-name"
   ```

3. **Run the health check**: Identify files that need refactoring
   ```bash
   node scripts/health-check.js
   ```

4. **Plan the refactoring**: Create a plan for how to break up each file
   - Identify logical components or functions that can be extracted
   - Determine appropriate file and directory structure according to `code-organization.mdc`
   - Consider dependencies and imports
   - Ensure the plan aligns with the project structure in `nextjs.mdc`

5. **Get approval**: Present the plan and get explicit approval before implementing

### During Refactoring

1. **Focus on one file**: Complete the refactoring of one file before moving to the next
2. **Make small, incremental changes**: Avoid large, sweeping changes
3. **Check for import issues**: Verify that imports in other files are updated if needed

### After Each File Refactor

1. **Verification checklist**:
   - Check the terminal where the Next.js server is running for errors
   - Verify the application reloads without errors
   - Check for console errors related to your modifications
   - Verify UI components render correctly

2. **Get explicit agreement**: Present the changes and get approval before moving on

3. **Commit the changes**: Make a commit after refactoring is complete
   ```bash
   git add .
   git commit -m "refactor: break down ComponentName into smaller files"
   ```

## Breaking Up Different File Types

### Components

- Create a directory with the component name
- Use index.tsx as the main component file
- Name child components with PascalCase and place in the same directory
- Example:
  ```
  Button/
  ├── index.tsx         # Main Button component
  ├── ButtonIcon.tsx    # Icon subcomponent
  └── ButtonLabel.tsx   # Label subcomponent
  ```

### Pages

- Create a _components directory for page-specific components
- Extract sections into separate components
- Move data fetching to separate files (actions.ts or api.ts)
- Example:
  ```
  app/dashboard/
  ├── page.tsx
  ├── actions.ts        # Data fetching and mutations
  ├── _components/
  │   ├── DashboardHeader.tsx
  │   ├── DashboardStats.tsx
  │   └── DashboardTable.tsx
  ```

### Utility Functions

- Group by functionality in separate files
- Create an index.ts file to re-export functions
- Example:
  ```
  utils/
  ├── index.ts          # Re-exports
  ├── string.ts         # String utilities
  ├── date.ts           # Date utilities
  └── format.ts         # Formatting utilities
  ```

### API Routes

- Split validation logic into separate files
- Move business logic to service layer
- Keep route handlers focused on request/response handling
- Example:
  ```
  app/api/users/
  ├── route.ts          # Route handler
  ├── validation.ts     # Input validation
  └── lib/services/userService.ts  # Business logic
  ```

### Hooks

- Split by functionality
- Follow the pattern: use[Feature][Action].ts
- Organize hook internals:
  - State declarations first
  - Derived state next
  - Event handlers next
  - Effects last
  - Return values in a single object

### Constants

- Group related constants in separate files by domain
- Place in a constants directory organized by feature
- Use index.ts to re-export all constants

## Code Organization Within Files

### Imports Organization

- Group imports by:
  1. External libraries
  2. Internal modules
  3. Types
  4. Styles
- Use absolute imports for cross-directory references
- Use relative imports for files in the same directory

### Component Structure

```tsx
// 1. Imports (grouped as described above)
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { Button } from '@/components/ui';
import type { User } from '@/types';
import styles from './Component.module.css';

// 2. Types
type ComponentProps = {
  user: User;
};

// 3. Helper functions (if small and component-specific)
const formatName = (user: User) => `${user.firstName} ${user.lastName}`;

// 4. Component definition
export function Component({ user }: ComponentProps) {
  // State
  const [isLoading, setIsLoading] = useState(false);
  
  // Derived state
  const fullName = formatName(user);
  
  // Handlers
  const handleClick = () => {
    setIsLoading(true);
    // ...
  };
  
  // Effects
  useEffect(() => {
    // ...
  }, []);
  
  // Render
  return (
    <div>
      {/* JSX */}
    </div>
  );
}
```

## Common Refactoring Patterns

### Extract Component

When a component becomes too large or handles multiple concerns, extract parts into separate components.

### Extract Hook

When component logic becomes complex, extract it into a custom hook.

### Extract Function

When a function becomes too long or handles multiple concerns, break it into smaller functions.

### Extract Constants

Move magic numbers and strings to named constants.

## Conclusion

Following these guidelines will help maintain a clean, organized codebase that is easier to understand and maintain. Remember that refactoring is an ongoing process, not a one-time task.

When in doubt, run the health check script to identify files that need attention:

```bash
node scripts/health-check.js
``` 