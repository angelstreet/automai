---
description: 
globs: 
alwaysApply: false
---
# Feature-Specific Implementation Guidelines

## Host Management Implementation
- Store host data in the centralized HostContext
- Use the following components for host management:
  - `HostList` - Main list container
  - `HostGrid`/`HostTable` - Display hosts in grid or table view
  - `HostCard` - Individual host card
  - `ConnectHostDialog` - Add/edit host dialog
  - `ConnectionForm` - Form for host connection details
- Host status tracking has these states: 'connected', 'failed', 'pending', 'testing'
- Test connection flow should set status -> testing -> connected|failed
- Support both SSH and Docker connection types

## Repository Management
- Support GitHub, GitLab, and Gitea integrations
- Use repository explorer pattern for file navigation
- Implement branch/tag selection via dropdown
- Enable repository synchronization with clear status indicators
- Use the same centralized context pattern as host management

## Deployment Management
- Implement wizard-based deployment creation
- Display pipeline visualization with status indicators
- Support environment variables configuration
- Enable scheduling for one-time and recurring deployments
- Connect with CI/CD systems like Jenkins

## Terminal Implementation
- Use xterm.js for terminal emulation
- Stream terminal data over WebSockets
- Support connection to hosts via SSH
- Implement proper cleanup on disconnection
- Handle terminal resize and window events

## Common Feature Patterns
- Always display loading states during async operations
- Implement appropriate error messages and recovery paths
- Design multi-step processes with proper state preservation
- Support filtering, sorting, and pagination where needed
- Consistent refresh/sync mechanisms across features