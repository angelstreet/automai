---
description: UI Best Practices
globs: src/components/**/*.{ts,tsx}
---

# UI Best Practices

## Core Principles

- Use Shadcn UI components with proper composition and customization
- Leverage Radix UI primitives for accessible interactive components
- Follow Tailwind CSS class naming conventions and utility patterns
- Implement mobile-first responsive design with Tailwind breakpoints
- Maintain consistent spacing and layout using Tailwind's spacing scale
- Use Tailwind's color system for consistent theming
- Implement dark mode support using Tailwind's dark variant
- Ensure components are accessible following WCAG guidelines
- Keep component styles modular and reusable
- Optimize component bundle size through proper code splitting

## Component Structure

```typescript
// components/ui/Button.tsx
import { cn } from "@/lib/utils";
import { ButtonProps } from "@/types/ui";

export function Button({ 
  className, 
  variant = "default",
  size = "default",
  ...props 
}: ButtonProps) {
  return (
    <button
      className={cn(
        "rounded-md font-medium transition-colors",
        "focus-visible:outline-none focus-visible:ring-2",
        "disabled:opacity-50 disabled:pointer-events-none",
        {
          "bg-primary text-white hover:bg-primary/90": variant === "default",
          "bg-destructive text-destructive-foreground": variant === "destructive",
        },
        {
          "h-9 px-4 py-2": size === "default",
          "h-8 px-3 text-sm": size === "sm",
        },
        className
      )}
      {...props}
    />
  );
}
```

## Responsive Design

```typescript
// Proper mobile-first approach
const Card = () => (
  <div className="
    p-4 md:p-6 lg:p-8
    text-sm md:text-base lg:text-lg
    grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3
    gap-4 md:gap-6
  ">
    {/* content */}
  </div>
);
```

## Dark Mode Implementation

```typescript
// components/ui/ThemeToggle.tsx
'use client';

import { useTheme } from "next-themes";

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  
  return (
    <button
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="p-2 rounded-md bg-background hover:bg-accent"
    >
      {/* icons */}
    </button>
  );
}
```

## Accessibility Patterns

```typescript
// Proper accessibility implementation
const Dialog = () => (
  <DialogPrimitive.Root>
    <DialogPrimitive.Trigger
      aria-label="Open dialog"
      className="focus:outline-none focus:ring-2"
    >
      Open
    </DialogPrimitive.Trigger>
    <DialogPrimitive.Portal>
      <DialogPrimitive.Overlay className="fixed inset-0 bg-black/50" />
      <DialogPrimitive.Content
        className="fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
        role="dialog"
        aria-labelledby="dialog-title"
      >
        {/* content */}
      </DialogPrimitive.Content>
    </DialogPrimitive.Portal>
  </DialogPrimitive.Root>
);
```

## Color System

```typescript
// tailwind.config.js
const colors = {
  primary: {
    DEFAULT: "hsl(var(--primary))",
    foreground: "hsl(var(--primary-foreground))",
  },
  secondary: {
    DEFAULT: "hsl(var(--secondary))",
    foreground: "hsl(var(--secondary-foreground))",
  },
  // Add your color palette
};
```

## Spacing Scale

```typescript
// Consistent spacing using Tailwind's scale
const Layout = () => (
  <div className="space-y-4"> {/* 1rem */}
    <header className="p-6"> {/* 1.5rem */}
      <nav className="gap-8"> {/* 2rem */}
        {/* content */}
      </nav>
    </header>
    <main className="p-4 md:p-6 lg:p-8">
      {/* content */}
    </main>
  </div>
);
```

## Component Composition

```typescript
// Proper component composition
const Card = ({ className, ...props }) => (
  <div
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
);

const CardHeader = ({ className, ...props }) => (
  <div
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
);

// Usage
<Card>
  <CardHeader>
    <CardTitle>Title</CardTitle>
    <CardDescription>Description</CardDescription>
  </CardHeader>
</Card>
```

## Best Practices

### Component Organization
- Keep UI components in `components/ui`
- Place feature-specific components in `components/features`
- Use composition over inheritance
- Create variants using Tailwind classes

### Accessibility
- Use proper ARIA labels and roles
- Ensure keyboard navigation works
- Maintain proper color contrast
- Support screen readers
- Handle focus management

### Performance
- Lazy load components when possible
- Use proper code splitting
- Optimize images and assets
- Minimize bundle size
- Use proper caching strategies

### Responsive Design
- Start with mobile layout
- Use Tailwind breakpoints consistently
- Test on various screen sizes
- Ensure touch targets are adequate
- Consider different input methods

### State Management
- Use controlled components when needed
- Implement proper form validation
- Handle loading and error states
- Maintain consistent UI feedback
- Use proper state management patterns

### Animation
- Use CSS transitions for simple animations
- Implement reduced motion preferences
- Keep animations subtle and purposeful
- Use proper animation timing
- Consider performance impact

### Code Quality
- Maintain consistent naming conventions
- Document complex components
- Write reusable utilities
- Follow DRY principles
- Use TypeScript for type safety 