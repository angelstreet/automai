---
description: 
globs: 
alwaysApply: false
---
# Code Quality Standards

## AI Guidelines
Follow consistent naming conventions, file organization patterns, and component structures. Keep functions simple, use proper TypeScript typing, maintain efficient error handling, and document code appropriately. Adhere to established project patterns.

## Key Patterns

### Naming Conventions
- **Components**: PascalCase (`UserProfile.tsx`)
- **Functions/Variables**: camelCase (`getUserData()`)
- **Constants**: UPPER_CASE (`MAX_RETRY_COUNT`)
- **Types/Interfaces**: PascalCase (`UserData`, `HostConfig`)
- **Boolean Variables**: Prefix with is/has/should (`isLoading`, `hasPermission`)
- **Event Handlers**: Prefix with handle/on (`handleSubmit`, `onUserUpdate`)
- **Custom Hooks**: Prefix with use (`useAuthentication`)
- **Files**: Component files in PascalCase, utilities in camelCase

### Component Structure
- **Props Interface First**:
```typescript
interface ButtonProps {
  variant?: 'primary' | 'secondary';
  size?: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
  onClick?: () => void;
}
```
- **Constants & Helpers Next**:
```typescript
const VARIANT_STYLES = {
  primary: 'bg-blue-500 text-white',
  secondary: 'bg-gray-200 text-gray-800'
};

const getSizeClass = (size: string) => {
  switch(size) {
    case 'sm': return 'text-sm py-1 px-2';
    case 'lg': return 'text-lg py-3 px-6';
    default: return 'py-2 px-4';
  }
};
```
- **Component Implementation Last**:
```typescript
export function Button({
  variant = 'primary',
  size = 'md',
  children,
  onClick
}: ButtonProps) {
  return (
    <button 
      className={`${VARIANT_STYLES[variant]} ${getSizeClass(size)} rounded`}
      onClick={onClick}
    >
      {children}
    </button>
  );
}
```

### TypeScript Usage
- **Explicit Types**: Define types for function parameters and returns
- **Avoid any**: Use appropriate types, unions, or unknown instead
- **Discriminated Unions**: Use for complex state management
```typescript
type RequestState<T> = 
  | { status: 'idle' }
  | { status: 'loading' }
  | { status: 'success', data: T }
  | { status: 'error', error: string };
```
- **Function Type Definitions**:
```typescript
function fetchData<T>(url: string): Promise<T> {
  // Implementation
}
```

### Functions and Methods
- **Single Responsibility**: Functions should do one thing well
- **Parameter Limits**: 3 max, use objects for more
- **Early Returns**: Use to avoid deep nesting
```typescript
function validateUser(user: User): string | null {
  if (!user.name) return 'Name is required';
  if (!user.email) return 'Email is required';
  if (!isValidEmail(user.email)) return 'Email is invalid';
  return null;
}
```
- **Pure Functions**: Prefer pure functions where possible

### Error Handling
- **Consistent Pattern**:
```typescript
try {
  const result = await riskyOperation();
  return { success: true, data: result };
} catch (error) {
  console.error('Error in riskyOperation:', error);
  return { 
    success: false, 
    error: error instanceof Error ? error.message : 'Unknown error' 
  };
}
```
- **Error Context**: Include operation name in error logs
- **Client-Friendly Messages**: Don't expose internal error details

### Code Organization
- **Import Order**: External, internal, types, styles
- **Logical Grouping**: Group related code within files
- **Line Limits**: Keep files under 300 lines where possible
- **Code Separation**: Extract reusable logic to separate files

## Examples

### Good Component Structure
```typescript
// UserProfile.tsx
import { useState } from 'react';
import { Avatar } from '@/components/ui/Avatar';
import { formatDate } from '@/utils/formatters';
import type { User } from '@/types';

interface UserProfileProps {
  user: User;
  showDetails?: boolean;
  onUpdate?: (user: User) => void;
}

const ROLE_LABELS = {
  admin: 'Administrator',
  user: 'Standard User',
  guest: 'Guest'
};

export function UserProfile({
  user,
  showDetails = false,
  onUpdate
}: UserProfileProps) {
  const [isEditing, setIsEditing] = useState(false);
  
  const handleEdit = () => {
    setIsEditing(true);
  };
  
  return (
    <div className="user-profile">
      <Avatar user={user} size="lg" />
      <h2>{user.name}</h2>
      <div>{ROLE_LABELS[user.role]}</div>
      
      {showDetails && (
        <div className="user-details">
          <p>Email: {user.email}</p>
          <p>Joined: {formatDate(user.createdAt)}</p>
        </div>
      )}
      
      {onUpdate && (
        <button onClick={handleEdit}>
          Edit Profile
        </button>
      )}
      
      {/* More component code */}
    </div>
  );
}
```

### Good Error Handling
```typescript
// In an API action
export async function updateUserAction(
  userData: UserUpdateData
): Promise<ActionResult<User>> {
  try {
    // Validate input
    const validation = validateUserData(userData);
    if (validation) {
      return { success: false, error: validation };
    }
    
    // Get current user for permission check
    const currentUser = await getUser();
    if (!currentUser.success) {
      return { success: false, error: 'Authentication required' };
    }
    
    // Permission check
    if (!canEditUser(currentUser.data, userData.id)) {
      return { success: false, error: 'Permission denied' };
    }
    
    // Update in database
    const result = await db.users.update(userData);
    if (!result.success) {
      return { success: false, error: result.error };
    }
    
    return { success: true, data: result.data };
  } catch (error) {
    console.error('Error in updateUserAction:', error);
    return { 
      success: false, 
      error: 'Failed to update user. Please try again.' 
    };
  }
}
```

## Related Rules
- core-architecture.mdc - Three-layer architecture
- ui-components.mdc - Component design
- api-design.mdc - API implementation
- ui-state.mdc - State management 