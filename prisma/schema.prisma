// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Host {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  ip          String
  port        Int?
  user        String?
  password    String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Connection {
  id            String           @id @default(cuid())
  name          String
  host          String
  port          Int             @default(22)
  username      String
  password      String?
  privateKey    String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  tenantId      String?
  user          User            @relation(fields: [userId], references: [id])
  tenant        Tenant?         @relation(fields: [tenantId], references: [id])
  logs          ConnectionLog[]

  @@map("connections")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  role            String            @default("user")
  tenantId        String?
  tenant          Tenant?           @relation(fields: [tenantId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  provider        String?
  accounts        Account[]
  sessions        Session[]
  connections     Connection[]
  logs            ConnectionLog[]
  hostFingerprint HostFingerprint[]
  gitProviders    GitProvider[]
  projects        Project[]         @relation(name: "ProjectOwner")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Tenant {
  id          String            @id @default(cuid())
  name        String
  domain      String?           @unique
  plan        String            @default("free")
  users       User[]
  connections Connection[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("tenants")
}

model ConnectionLog {
  id           String      @id @default(cuid())
  connectionId String
  connection   Connection  @relation(fields: [connectionId], references: [id])
  timestamp    DateTime    @default(now())
  action       String?
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?

  @@map("connection_logs")
}

model HostFingerprint {
  id          String   @id @default(cuid())
  host        String
  fingerprint String
  verified    Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([host, fingerprint])
  @@map("host_fingerprints")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  repositories Repository[]

  @@map("projects")
}

model GitProvider {
  id                String        @id @default(cuid())
  name              String        // "github", "gitlab", "gitea"
  displayName       String        // "GitHub", "GitLab", "Gitea"
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  repositories      Repository[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("git_providers")
}

model Repository {
  id                String       @id @default(cuid())
  name              String
  description       String?
  url               String
  defaultBranch     String       @default("main")
  providerId        String
  provider          GitProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  projectId         String?
  project           Project?     @relation(fields: [projectId], references: [id])
  lastSyncedAt      DateTime?
  syncStatus        String       @default("IDLE") // "IDLE", "SYNCING", "ERROR", "SYNCED"
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@unique([providerId, name])
  @@map("repositories")
} 