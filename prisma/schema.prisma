generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Host {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  ip          String
  port        Int?
  user        String?
  password    String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Connection {
  id         String   @id @default(cuid())
  name       String
  host       String
  port       Int      @default(22)
  username   String
  password   String?
  privateKey String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  tenantId   String?
  tenant     Tenant?  @relation(fields: [tenantId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("connections")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String       @default("user")
  tenantId      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  provider      String?
  accounts      Account[]
  connections   Connection[]
  tenant        Tenant?      @relation(fields: [tenantId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Tenant {
  id          String       @id @default(cuid())
  name        String
  domain      String?      @unique
  plan        String       @default("admin")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  connections Connection[]
  users       User[]

  @@map("tenants")
}

model GitProvider {
  id           String       @id @default(cuid())
  name         String
  displayName  String?
  type         String
  serverUrl    String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  repositories Repository[]

  @@map("git_providers")
}

model Repository {
  id          String     @id @default(cuid())
  name        String
  description String?
  url         String?
  defaultBranch String?
  providerId  String
  provider    GitProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  syncStatus  String     @default("PENDING")
  lastSyncedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("repositories")
}
