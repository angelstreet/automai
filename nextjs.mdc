# Next.js Best Practices

## IMPORTANT: Use Next.js Route Handlers ONLY

We exclusively use Next.js Route Handlers for all API endpoints. Express is NOT used in this project.

## Project Structure

Follow this structure for Next.js applications:

```
automai/
├── prisma/                   # Prisma schema and migrations at root
│   ├── schema.prisma         # Database schema
│   ├── migrations/           # Database migrations
│   ├── seed.ts              # Database seed script
│   └── index.ts             # Prisma client singleton (root-level)
├── .env.*                    # Environment files at root
├── scripts/                  # Utility scripts
│   └── health-check.js      # Script to check file sizes
├── src/
│   ├── app/                 # Next.js App Router
│   │   ├── [locale]/        # Internationalized routes
│   │   │   ├── (auth)/      # Auth route group
│   │   │   └── [tenant]/    # Tenant-specific routes
│   │   └── api/             # API Route Handlers ONLY
│   ├── lib/                 # Shared utilities
│   │   ├── services/        # Service layer (data access)
│   │   ├── prisma.ts        # Prisma client singleton (src-level)
│   │   ├── utils.ts         # Helper functions
│   │   └── env.ts           # Environment configuration
│   ├── components/          # UI components
│   │   ├── ui/              # Reusable UI components
│   │   └── hosts/           # Host-specific components
│   ├── i18n/                # Internationalization
│   └── middleware.ts        # Next.js middleware
└── next.config.js           # Next.js configuration
```

## API Routes

1. Use Next.js Route Handlers:
```typescript
// src/app/api/[route]/route.ts
import { NextResponse } from 'next/server';

export async function GET(request: Request) {
  try {
    // Handle GET request
    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json(
      { error: 'Error message' },
      { status: 500 }
    );
  }
}
```

2. Authentication with NextAuth.js:
```typescript
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

export async function GET(request: Request) {
  const session = await getServerSession(authOptions);
  if (!session) {
    return NextResponse.json(
      { error: 'Unauthorized' },
      { status: 401 }
    );
  }
  // Handle authenticated request
}
```

3. Database Access:
```typescript
import { prisma } from '@/lib/prisma';

export async function GET() {
  const data = await prisma.model.findMany();
  return NextResponse.json(data);
}
```

## Server Components

1. Default to Server Components
2. Only use 'use client' when needed
3. Keep client-side JS minimal

## Data Fetching

1. Use Server Components for data fetching
2. Implement proper caching strategies
3. Use incremental static regeneration where appropriate

## Environment Variables

1. Use environment-specific files:
   - `.env.development` for development
   - `.env.production` for production
   - `.env.test` for testing
2. DO NOT use `.env` file
3. Next.js automatically loads the correct file based on NODE_ENV 