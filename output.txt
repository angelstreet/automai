Project Path: src

Source Tree:

```
src
├── i18n
│   ├── request.ts
│   ├── index.ts
│   └── messages
│       ├── en.json
│       └── fr.json
├── auth.ts
├── app
│   ├── page.tsx
│   ├── actions
│   │   ├── repositories.ts
│   │   ├── profile.ts
│   │   ├── projects.ts
│   │   ├── user.ts
│   │   ├── auth.ts
│   │   ├── hosts.ts
│   │   ├── index.ts
│   │   ├── tenants.ts
│   │   └── git-providers.ts
│   ├── layout.tsx
│   ├── api
│   │   ├── fetch-all-repositories
│   │   │   └── route.ts
│   │   ├── debug
│   │   │   └── tenant
│   │   │       └── [id]
│   │   │           └── route.ts
│   │   ├── health
│   │   │   └── route.ts
│   │   ├── repositories
│   │   │   ├── test-connection
│   │   │   │   ├── schema.ts
│   │   │   │   └── route.ts
│   │   │   ├── route.ts
│   │   │   ├── sync
│   │   │   │   └── [id]
│   │   │   │       └── route.ts
│   │   │   └── [id]
│   │   │       └── route.ts
│   │   ├── hosts
│   │   │   ├── test-connection
│   │   │   │   └── route.ts
│   │   │   ├── test-all
│   │   │   │   └── route.ts
│   │   │   ├── verify-fingerprint
│   │   │   │   └── route.ts
│   │   │   ├── route.ts
│   │   │   ├── byName
│   │   │   │   └── [name]
│   │   │   │       └── route.ts
│   │   │   └── [id]
│   │   │       └── route.ts
│   │   ├── usecases
│   │   │   └── route.ts
│   │   ├── admin
│   │   │   └── logs
│   │   │       └── route.ts
│   │   ├── auth
│   │   │   ├── callback
│   │   │   │   └── route.ts
│   │   │   ├── register
│   │   │   │   └── route.ts
│   │   │   └── profile
│   │   │       └── route.ts
│   │   ├── terminals
│   │   │   ├── init
│   │   │   │   └── route.ts
│   │   │   ├── ws
│   │   │   │   └── [id]
│   │   │   │       └── route.ts
│   │   │   └── [id]
│   │   │       └── route.ts
│   │   ├── projects
│   │   │   ├── route.ts
│   │   │   └── [id]
│   │   │       └── route.ts
│   │   └── git-providers
│   │       ├── callback
│   │       │   └── route.ts
│   │       ├── route.ts
│   │       └── [id]
│   │           └── route.ts
│   ├── [locale]
│   │   ├── page.tsx
│   │   ├── (marketing)
│   │   │   ├── layout.tsx
│   │   │   └── _components
│   │   │       ├── ComingSoon.tsx
│   │   │       ├── SkipToMain.tsx
│   │   │       ├── Hero.tsx
│   │   │       └── Features.tsx
│   │   ├── layout.tsx
│   │   ├── (auth)
│   │   │   ├── layout.tsx
│   │   │   ├── reset-password
│   │   │   │   └── page.tsx
│   │   │   ├── signup
│   │   │   │   └── page.tsx
│   │   │   ├── login
│   │   │   │   └── page.tsx
│   │   │   ├── forgot-password
│   │   │   │   └── page.tsx
│   │   │   └── auth-redirect
│   │   │       └── page.tsx
│   │   ├── projects
│   │   │   ├── page.tsx
│   │   │   └── [id]
│   │   │       └── page.tsx
│   │   └── [tenant]
│   │       ├── page.tsx
│   │       ├── settings
│   │       │   ├── page.tsx
│   │       │   ├── layout.tsx
│   │       │   └── profile
│   │       │       └── page.tsx
│   │       ├── reports
│   │       │   └── page.tsx
│   │       ├── repositories
│   │       │   ├── page.tsx
│   │       │   ├── _components
│   │       │   │   ├── RepositoryTable.tsx
│   │       │   │   ├── index.ts
│   │       │   │   ├── GitProviderGrid.tsx
│   │       │   │   ├── RepositoryGrid.tsx
│   │       │   │   ├── AddGitProviderDialog.tsx
│   │       │   │   ├── RepositoryCard.tsx
│   │       │   │   └── GitProviderCard.tsx
│   │       │   └── [id]
│   │       │       └── page.tsx
│   │       ├── layout.tsx
│   │       ├── hosts
│   │       │   ├── page.tsx
│   │       │   ├── constants.ts
│   │       │   ├── settings
│   │       │   │   └── page.tsx
│   │       │   ├── analytics
│   │       │   │   └── page.tsx
│   │       │   ├── _components
│   │       │   │   ├── HostOverview.tsx
│   │       │   │   ├── ConnectForm.tsx
│   │       │   │   ├── ConnectHostDialog.tsx
│   │       │   │   ├── HostTable.tsx
│   │       │   │   ├── ConnectionForm.tsx
│   │       │   │   ├── HostGrid.tsx
│   │       │   │   ├── StatusSummary.tsx
│   │       │   │   ├── HostsPageClient.tsx
│   │       │   │   ├── HostCard.tsx
│   │       │   │   ├── HostList.tsx
│   │       │   │   └── HostSettings.tsx
│   │       │   ├── terminals
│   │       │   │   └── page.tsx
│   │       │   ├── logs
│   │       │   │   └── page.tsx
│   │       │   └── [id]
│   │       │       └── page.tsx
│   │       ├── development
│   │       │   ├── usecases
│   │       │   │   ├── page.tsx
│   │       │   │   └── edit
│   │       │   │       └── [useCaseId]
│   │       │   │           └── page.tsx
│   │       │   └── projects
│   │       │       └── page.tsx
│   │       ├── usecases
│   │       │   └── _components
│   │       │       ├── UseCaseList.tsx
│   │       │       └── CreateUseCase.tsx
│   │       ├── admin
│   │       │   └── logs
│   │       │       └── page.tsx
│   │       ├── team
│   │       │   └── page.tsx
│   │       ├── dashboard
│   │       │   ├── page.tsx
│   │       │   ├── actions.ts
│   │       │   └── _components
│   │       │       ├── TabContentCard.tsx
│   │       │       ├── DashboardTabs.tsx
│   │       │       ├── StatsCards.tsx
│   │       │       ├── DashboardHeader.tsx
│   │       │       └── MainContent.tsx
│   │       ├── billing
│   │       │   └── page.tsx
│   │       ├── devices
│   │       │   └── page.tsx
│   │       ├── terminals
│   │       │   ├── page.tsx
│   │       │   ├── _components
│   │       │   │   └── Terminal.tsx
│   │       │   └── [hostName]
│   │       │       └── page.tsx
│   │       ├── tests
│   │       │   └── page.tsx
│   │       ├── scripts
│   │       │   └── page.tsx
│   │       ├── projects
│   │       │   └── page.tsx
│   │       ├── deployment
│   │       │   ├── page.tsx
│   │       │   └── _components
│   │       │       ├── DeploymentForm.tsx
│   │       │       ├── utils.ts
│   │       │       ├── data.ts
│   │       │       ├── ScriptSelector.tsx
│   │       │       ├── DeploymentListItem.tsx
│   │       │       ├── DeploymentView.tsx
│   │       │       ├── DeploymentDetailsModal.tsx
│   │       │       ├── HostSelector.tsx
│   │       │       ├── DeploymentList.tsx
│   │       │       ├── types.ts
│   │       │       └── StatusBadge.tsx
│   │       ├── profile
│   │       │   └── page.tsx
│   │       └── platforms
│   │           └── constants.ts
│   └── globals.css
├── middleware.ts
├── types
│   ├── repositories.ts
│   ├── supabase.ts
│   ├── usecase.ts
│   ├── user.ts
│   ├── auth.ts
│   ├── hosts.ts
│   ├── sidebar.ts
│   ├── scripts.ts
│   └── environment.d.ts
├── hooks
│   ├── useUserRoles.ts
│   ├── useSidebar.ts
│   ├── useProjects.ts
│   ├── useProfile.ts
│   ├── useGitProviders.ts
│   ├── useRepositories.ts
│   ├── useTenants.ts
│   ├── useAuth.ts
│   ├── useHost.ts
│   ├── useDialogState.tsx
│   ├── useHosts.ts
│   ├── useProject.ts
│   ├── useMobile.tsx
│   └── useRepository.ts
├── components
│   ├── providers
│   │   ├── ThemeProvider.tsx
│   │   └── index.ts
│   ├── theme
│   │   ├── ThemeSwitch.tsx
│   │   └── ThemeProvider.tsx
│   ├── form
│   │   ├── PinInput
│   │   │   ├── usePinInput.ts
│   │   │   ├── utils.ts
│   │   │   ├── PinInput.common.tsx
│   │   │   ├── PinInputField.tsx
│   │   │   ├── context.tsx
│   │   │   ├── types.ts
│   │   │   └── index.tsx
│   │   ├── SelectDropdown.tsx
│   │   ├── PinInput.tsx
│   │   └── PasswordInput.tsx
│   ├── settings
│   │   ├── LanguageSettings.tsx
│   │   └── SettingsHeader.tsx
│   ├── repositories
│   │   └── RepositoryDetail.tsx
│   ├── hosts
│   │   └── HostDetail.tsx
│   ├── sidebar
│   │   ├── SidebarMenuSubButton.tsx
│   │   ├── constants.ts
│   │   ├── SidebarFooter.tsx
│   │   ├── SidebarSeparator.tsx
│   │   ├── SidebarGroupContent.tsx
│   │   ├── SidebarGroupLabel.tsx
│   │   ├── SidebarGroup.tsx
│   │   ├── SidebarGroupAction.tsx
│   │   ├── SidebarMenuAction.tsx
│   │   ├── SidebarInput.tsx
│   │   ├── SidebarMenu.tsx
│   │   ├── sidebarData.ts
│   │   ├── SidebarMenuButton.tsx
│   │   ├── SidebarRail.tsx
│   │   ├── SidebarMenuSub.tsx
│   │   ├── SidebarHeader.tsx
│   │   ├── SidebarMenuItem.tsx
│   │   ├── SidebarTrigger.tsx
│   │   ├── Sidebar.tsx
│   │   ├── SidebarInset.tsx
│   │   ├── index.tsx
│   │   └── SidebarContent.tsx
│   ├── dashboard
│   │   ├── Overview.tsx
│   │   └── RecentSales.tsx
│   ├── dialog
│   │   ├── ConfirmDialog.tsx
│   │   └── CommandMenu.tsx
│   ├── projects
│   │   └── ProjectDetail.tsx
│   ├── shadcn
│   │   ├── collapsible.tsx
│   │   ├── tooltip.tsx
│   │   ├── tabs.tsx
│   │   ├── dialog.tsx
│   │   ├── button.tsx
│   │   ├── scroll-area.tsx
│   │   ├── use-toast.ts
│   │   ├── sheet.tsx
│   │   ├── alert-dialog.tsx
│   │   ├── search.tsx
│   │   ├── toaster.tsx
│   │   ├── label.tsx
│   │   ├── radio-group.tsx
│   │   ├── sidebar.tsx
│   │   ├── card.tsx
│   │   ├── skeleton.tsx
│   │   ├── input.tsx
│   │   ├── badge.tsx
│   │   ├── dropdown-menu.tsx
│   │   ├── form.tsx
│   │   ├── separator.tsx
│   │   ├── select.tsx
│   │   ├── table.tsx
│   │   ├── switch.tsx
│   │   ├── popover.tsx
│   │   ├── theme-toggle.tsx
│   │   ├── textarea.tsx
│   │   ├── pagination.tsx
│   │   ├── command.tsx
│   │   ├── avatar.tsx
│   │   ├── checkbox.tsx
│   │   ├── accordion.tsx
│   │   ├── alert.tsx
│   │   └── language-switcher.tsx
│   ├── icons
│   │   ├── ActivityLogIcon.tsx
│   │   └── index.tsx
│   ├── layout
│   │   ├── BaseHeader.tsx
│   │   ├── RoleSwitcher.tsx
│   │   ├── SiteHeader.tsx
│   │   ├── WorkspaceHeader.tsx
│   │   ├── Footer.tsx
│   │   ├── TopNav.tsx
│   │   ├── NavUser.tsx
│   │   ├── NavGroup.tsx
│   │   ├── UpgradePrompt.tsx
│   │   ├── Main.tsx
│   │   ├── TeamSwitcher.tsx
│   │   ├── data
│   │   │   └── sidebarData.ts
│   │   ├── AppSidebar.tsx
│   │   ├── EmptyState.tsx
│   │   └── PageHeader.tsx
│   ├── profile
│   │   ├── ProfileContent.tsx
│   │   ├── UserProfile.tsx
│   │   └── ProfileDropdown.tsx
│   └── ui
│       ├── LoadingSpinner.tsx
│       ├── LongText.tsx
│       └── Search.tsx
├── context
│   ├── FontContext.tsx
│   ├── ThemeContext.tsx
│   ├── SidebarContext.tsx
│   ├── SearchContext.tsx
│   └── RoleContext.tsx
├── config
│   └── fonts.ts
├── utils
│   ├── isElectron.ts
│   └── electronApi.ts
├── config.ts
└── lib
    ├── supabase
    │   ├── auth.ts
    │   ├── middleware.ts
    │   ├── admin.ts
    │   ├── index.ts
    │   ├── db.ts
    │   ├── server.ts
    │   └── client.ts
    ├── logger.ts
    ├── utils.ts
    ├── env.ts
    ├── api
    │   └── hosts.ts
    ├── db.ts
    ├── features.ts
    ├── chart.ts
    ├── services
    │   ├── models.ts
    │   ├── repositories.ts
    │   ├── websocket.ts
    │   ├── oauth.ts
    │   ├── hosts.ts
    │   ├── http.ts
    │   ├── index.ts
    │   ├── terminal.ts
    │   ├── ssh.ts
    │   └── git-providers
    │       ├── base.ts
    │       ├── gitlab.ts
    │       ├── gitea.ts
    │       └── github.ts
    └── cache.ts

```

`/workspaces/automai/src/i18n/request.ts`:

```ts
   1 | import { getRequestConfig } from 'next-intl/server';
   2 | 
   3 | import { defaultLocale } from '@/config';
   4 | 
   5 | import { getMessages } from './index';
   6 | 
   7 | export default getRequestConfig(async () => {
   8 |   const locale = await new Promise<string>((resolve) => {
   9 |     // Resolve with default locale after all microtasks are processed
  10 |     queueMicrotask(() => resolve(defaultLocale));
  11 |   });
  12 | 
  13 |   return {
  14 |     locale,
  15 |     messages: await getMessages(locale),
  16 |     timeZone: 'Europe/Paris',
  17 |   };
  18 | });

```

`/workspaces/automai/src/i18n/index.ts`:

```ts
   1 | export async function getMessages(locale: string) {
   2 |   try {
   3 |     return (await import(`./messages/${locale}.json`)).default;
   4 |   } catch (error) {
   5 |     throw new Error(`Failed to load messages for locale: ${locale}`);
   6 |   }
   7 | }

```

`/workspaces/automai/src/i18n/messages/en.json`:

```json
   1 | {
   2 |   "Index": {
   3 |     "title": "Automate your infrastructure with AI",
   4 |     "description": "Automai is an AI-powered infrastructure automation platform that helps you manage your infrastructure with ease. Deploy, monitor, and scale your applications with confidence.",
   5 |     "getStarted": "Get Started",
   6 |     "learnMore": "Learn More"
   7 |   },
   8 |   "Auth": {
   9 |     "signIn": "Sign In",
  10 |     "signUp": "Sign Up",
  11 |     "signOut": "Sign Out",
  12 |     "email": "Email",
  13 |     "password": "Password",
  14 |     "forgotPassword": "Forgot Password?",
  15 |     "rememberMe": "Remember Me",
  16 |     "dontHaveAccount": "Don't have an account?",
  17 |     "alreadyHaveAccount": "Already have an account?",
  18 |     "orContinueWith": "Or continue with",
  19 |     "createAccount": "Create Account",
  20 |     "verifyEmail": "Verify Email",
  21 |     "resetPassword": "Reset Password",
  22 |     "loginTitle": "Sign in",
  23 |     "loginDescription": "Enter your email and password to sign in",
  24 |     "loginButton": "Sign in",
  25 |     "loggingIn": "Signing in...",
  26 |     "signingIn": "Signing in...",
  27 |     "signInToYourAccount": "Sign in to your account",
  28 |     "loginHeroText": "Automate your testing workflow with AI-powered solutions.",
  29 |     "signupTitle": "Create account",
  30 |     "signupDescription": "Enter your details to create your account",
  31 |     "signupButton": "Create account",
  32 |     "signingUp": "Creating account...",
  33 |     "signupHeroText": "Join thousands of teams automating their testing workflow.",
  34 |     "emailPlaceholder": "name@example.com",
  35 |     "namePlaceholder": "Your name",
  36 |     "passwordPlaceholder": "Enter your password",
  37 |     "confirmPasswordPlaceholder": "Confirm your password",
  38 |     "termsText": "I agree to the",
  39 |     "termsLink": "terms and conditions",
  40 |     "noAccount": "Don't have an account?",
  41 |     "haveAccount": "Already have an account?",
  42 |     "signupLink": "Sign up",
  43 |     "loginLink": "Sign in",
  44 |     "error": {
  45 |       "invalidCredentials": "Invalid email or password",
  46 |       "emailRequired": "Email is required",
  47 |       "passwordRequired": "Password is required",
  48 |       "emailInvalid": "Please enter a valid email",
  49 |       "passwordTooShort": "Password must be at least 8 characters"
  50 |     }
  51 |   },
  52 |   "Common": {
  53 |     "new": "New",
  54 |     "save": "Save",
  55 |     "cancel": "Cancel",
  56 |     "delete": "Delete",
  57 |     "edit": "Edit",
  58 |     "select": "Select",
  59 |     "search": "Search",
  60 |     "filter": "Filter",
  61 |     "sort": "Sort",
  62 |     "actions": "Actions",
  63 |     "name": "Name",
  64 |     "description": "Description",
  65 |     "type": "Type",
  66 |     "status": "Status",
  67 |     "createdAt": "Created At",
  68 |     "updatedAt": "Updated At",
  69 |     "loading": "Loading...",
  70 |     "refreshing": "Refreshing...",
  71 |     "noData": "No data available",
  72 |     "devices": "Devices",
  73 |     "hosts": "Hosts",
  74 |     "managehosts": "Manage your hosts and containers",
  75 |     "refresh": "Refresh",
  76 |     "table_view": "Table View",
  77 |     "addhost": "Add Host",
  78 |     "nohosts": "No hosts found. Add a new host to get started.",
  79 |     "addhost_description": "Connect to your servers, containers, and cloud instances.",
  80 |     "note": "Add and manage your hosts, access terminals, monitor logs, and deploy containers all in one place",
  81 |     "testConnection": "Test Connection",
  82 |     "connected": "Connected",
  83 |     "failed": "Failed",
  84 |     "pending": "Pending",
  85 |     "unknown": "Unknown",
  86 |     "ssh": "SSH",
  87 |     "docker": "Docker",
  88 |     "portainer": "Portainer",
  89 |     "lastConnected": "Last Connected",
  90 |     "never": "Never",
  91 |     "connect": "Connect",
  92 |     "disconnect": "Disconnect",
  93 |     "terminal": "Terminal",
  94 |     "analytics": "Analytics",
  95 |     "logs": "Logs",
  96 |     "settings": "Settings",
  97 |     "confirmDelete": "Are you sure you want to delete this host?",
  98 |     "deleteWarning": "This action cannot be undone.",
  99 |     "refreshHosts": "Refresh Hosts",
 100 |     "manualTestingMessage": "Connections are not tested automatically. Click the test button to check connection status.",
 101 |     "connectionError": "Connection Error",
 102 |     "errorDetails": "Error Details",
 103 |     "noErrorDetails": "No error details available",
 104 |     "metrics": "Metrics",
 105 |     "form": {
 106 |       "name": "Name",
 107 |       "namePlaceholder": "Host name (lowercase letters, numbers, and hyphens only)",
 108 |       "nameHint": "Only lowercase letters, numbers, and hyphens are allowed",
 109 |       "connection": "Connection",
 110 |       "selectType": "Select type",
 111 |       "ipAddress": "IP Address",
 112 |       "port": "Port",
 113 |       "username": "Username",
 114 |       "password": "Password"
 115 |     },
 116 |     "errors": {
 117 |       "validation": "Validation Error",
 118 |       "nameRequired": "Please provide a name for the connection",
 119 |       "ipRequired": "Please provide an IP address",
 120 |       "invalidPort": "Port must be a number between 1 and 65535",
 121 |       "sshCredentials": "Username and password are required for SSH connections",
 122 |       "connectionFailed": "Connection failed",
 123 |       "createFailed": "Failed to create connection",
 124 |       "unknownError": "Unknown error occurred",
 125 |       "timeout": "Connection timed out. Please check if the IP address and port are correct and that any firewalls allow the connection.",
 126 |       "refused": "Connection refused. Please check if the service is running on the target host and the port is correct.",
 127 |       "authentication": "Authentication failed. Please check your username and password.",
 128 |       "hostConnection": "Failed to connect to the remote host. Please check your connection details.",
 129 |       "testFailed": "Connection test failed",
 130 |       "fingerprintFailed": "Failed to verify fingerprint"
 131 |     },
 132 |     "success": {
 133 |       "created": "Connection created",
 134 |       "connected": "Successfully connected to {name}"
 135 |     }
 136 |   },
 137 |   "Dashboard": {
 138 |     "title": "Dashboard",
 139 |     "overview": "Overview",
 140 |     "description": "Welcome to your dashboard",
 141 |     "welcome": "Welcome back!"
 142 |   },
 143 |   "Profile": {
 144 |     "title": "Profile",
 145 |     "profile": "Profile",
 146 |     "settings": "Profile Settings",
 147 |     "edit": "Edit Profile",
 148 |     "save": "Save Changes",
 149 |     "cancel": "Cancel",
 150 |     "personalInfo": "Personal Information",
 151 |     "email": "Email",
 152 |     "name": "Name",
 153 |     "avatar": "Avatar",
 154 |     "changeAvatar": "Change Avatar",
 155 |     "removeAvatar": "Remove Avatar",
 156 |     "accountSettings": "Account Settings",
 157 |     "manageSettings": "Manage Settings",
 158 |     "upgradePlan": "Upgrade Plan",
 159 |     "workspaceInfo": "Workspace Information",
 160 |     "manageTeam": "Manage Team",
 161 |     "sessionExpired": "Session Expired",
 162 |     "pleaseLogin": "Please log in again to continue",
 163 |     "logIn": "Log In",
 164 |     "updating": "Updating...",
 165 |     "update": "Update",
 166 |     "enterName": "Enter your name",
 167 |     "plan": "Plan"
 168 |   },
 169 |   "billing": {
 170 |     "title": "Billing & Plans",
 171 |     "currentPlan": "Current Plan",
 172 |     "upgrade": "Upgrade Plan",
 173 |     "manageSubscription": "Manage Subscription",
 174 |     "billingHistory": "Billing History",
 175 |     "paymentMethods": "Payment Methods",
 176 |     "addPaymentMethod": "Add Payment Method",
 177 |     "planDetails": "Plan Details",
 178 |     "features": "Features",
 179 |     "price": "Price",
 180 |     "period": "Period",
 181 |     "monthly": "Monthly",
 182 |     "yearly": "Yearly",
 183 |     "enterprise": "Enterprise",
 184 |     "free": "Free",
 185 |     "pro": "Pro",
 186 |     "team": "Team"
 187 |   },
 188 |   "Projects": {
 189 |     "projects": "Projects",
 190 |     "title": "Projects",
 191 |     "description": "Manage your projects",
 192 |     "create": "Create Project",
 193 |     "edit": "Edit Project",
 194 |     "delete": "Delete Project",
 195 |     "noProjects": "No projects found"
 196 |   },
 197 |   "Reports": {
 198 |     "title": "Reports",
 199 |     "reportsList": "Reports List",
 200 |     "description": "View and analyze test execution reports and metrics"
 201 |   },
 202 |   "Menu": {
 203 |     "title": "Menu",
 204 |     "dashboard": "Dashboard",
 205 |     "projects": "Projects",
 206 |     "hosts": "Hosts",
 207 |     "repositories": "Repositories",
 208 |     "settings": "Settings",
 209 |     "profile": "Profile",
 210 |     "logout": "Logout"
 211 |   },
 212 |   "repositories": {
 213 |     "repositories": "Repositories",
 214 |     "repositories_description": "Manage your git repositories",
 215 |     "no_repositories": "No repositories found",
 216 |     "no_repositories_description": "No repositories are available. Check your Git provider settings.",
 217 |     "view_providers": "View Git Providers",
 218 |     "add_provider": "Add Git Provider",
 219 |     "no_providers": "No Git Providers",
 220 |     "connectGit": "Connect to a Git provider to get started",
 221 |     "connectedProviders": "Connected Providers",
 222 |     "provider_type": "Provider Type",
 223 |     "display_name": "Display Name",
 224 |     "server_url": "Server URL",
 225 |     "access_token": "Access Token",
 226 |     "connect": "Connect",
 227 |     "connecting": "Connecting...",
 228 |     "refresh": "Refresh",
 229 |     "sync": "Sync",
 230 |     "delete": "Delete",
 231 |     "confirm_delete": "Are you sure you want to delete this Git provider?",
 232 |     "delete_warning": "This will remove all associated repositories. This action cannot be undone.",
 233 |     "repository": "Repository",
 234 |     "provider": "Provider",
 235 |     "status": "Status",
 236 |     "updatedAt": "Last Updated",
 237 |     "actions": "Actions",
 238 |     "search": "Search",
 239 |     "clear_all": "Clear all",
 240 |     "no_repos_found": "No repositories found matching your criteria."
 241 |   },
 242 |   "Settings": {
 243 |     "title": "Settings",
 244 |     "description": "Manage your application settings",
 245 |     "generalSettings": "General Settings",
 246 |     "accountSettings": "Account Settings",
 247 |     "securitySettings": "Security Settings",
 248 |     "notificationSettings": "Notification Settings",
 249 |     "apiSettings": "API Settings",
 250 |     "integrationSettings": "Integration Settings",
 251 |     "advancedSettings": "Advanced Settings",
 252 |     "languageSettings": "Language Settings",
 253 |     "languageDescription": "Change the display language of the application",
 254 |     "currentLanguage": "Current Language",
 255 |     "selectLanguage": "Select Language",
 256 |     "english": "English",
 257 |     "french": "French"
 258 |   },
 259 |   "Team": {
 260 |     "title": "Team Management",
 261 |     "teamMembers": "Team Members",
 262 |     "description": "Manage your team members and their permissions",
 263 |     "inviteMembers": "Invite Members",
 264 |     "memberName": "Name",
 265 |     "memberEmail": "Email",
 266 |     "memberRole": "Role",
 267 |     "memberStatus": "Status",
 268 |     "memberActions": "Actions",
 269 |     "invitePending": "Pending",
 270 |     "inviteAccepted": "Accepted",
 271 |     "removeUser": "Remove",
 272 |     "confirmRemove": "Are you sure you want to remove this user?",
 273 |     "noMembers": "No team members found"
 274 |   }
 275 | }

```

`/workspaces/automai/src/i18n/messages/fr.json`:

```json
   1 | {
   2 |   "Index": {
   3 |     "title": "Automatisez votre infrastructure avec l'IA",
   4 |     "description": "Automai est une plateforme d'automatisation d'infrastructure alimentée par l'IA qui vous aide à gérer votre infrastructure facilement. Déployez, surveillez et mettez à l'échelle vos applications en toute confiance.",
   5 |     "getStarted": "Commencer",
   6 |     "learnMore": "En savoir plus"
   7 |   },
   8 |   "Auth": {
   9 |     "signIn": "Se connecter",
  10 |     "signUp": "S'inscrire",
  11 |     "signOut": "Se déconnecter",
  12 |     "email": "Email",
  13 |     "password": "Mot de passe",
  14 |     "forgotPassword": "Mot de passe oublié ?",
  15 |     "rememberMe": "Se souvenir de moi",
  16 |     "dontHaveAccount": "Vous n'avez pas de compte ?",
  17 |     "alreadyHaveAccount": "Vous avez déjà un compte ?",
  18 |     "orContinueWith": "Ou continuer avec",
  19 |     "createAccount": "Créer un compte",
  20 |     "verifyEmail": "Vérifier l'email",
  21 |     "resetPassword": "Réinitialiser le mot de passe",
  22 |     "loginTitle": "Se connecter",
  23 |     "loginDescription": "Entrez votre email et mot de passe pour vous connecter",
  24 |     "loginButton": "Se connecter",
  25 |     "loggingIn": "Connexion en cours...",
  26 |     "signingIn": "Connexion en cours...",
  27 |     "signInToYourAccount": "Connectez-vous à votre compte",
  28 |     "loginHeroText": "Automatisez votre flux de travail de test avec des solutions alimentées par l'IA.",
  29 |     "signupTitle": "Créer un compte",
  30 |     "signupDescription": "Entrez vos informations pour créer votre compte",
  31 |     "signupButton": "Créer un compte",
  32 |     "signingUp": "Création du compte...",
  33 |     "signupHeroText": "Rejoignez des milliers d'équipes qui automatisent leur flux de travail de test.",
  34 |     "emailPlaceholder": "nom@exemple.com",
  35 |     "namePlaceholder": "Votre nom",
  36 |     "passwordPlaceholder": "Entrez votre mot de passe",
  37 |     "confirmPasswordPlaceholder": "Confirmez votre mot de passe",
  38 |     "termsText": "J'accepte les",
  39 |     "termsLink": "conditions générales",
  40 |     "noAccount": "Vous n'avez pas de compte ?",
  41 |     "haveAccount": "Vous avez déjà un compte ?",
  42 |     "signupLink": "S'inscrire",
  43 |     "loginLink": "Se connecter",
  44 |     "error": {
  45 |       "invalidCredentials": "Email ou mot de passe invalide",
  46 |       "emailRequired": "L'email est requis",
  47 |       "passwordRequired": "Le mot de passe est requis",
  48 |       "emailInvalid": "Veuillez entrer un email valide",
  49 |       "passwordTooShort": "Le mot de passe doit comporter au moins 8 caractères"
  50 |     }
  51 |   },
  52 |   "Common": {
  53 |     "new": "Nouveau",
  54 |     "save": "Enregistrer",
  55 |     "cancel": "Annuler",
  56 |     "delete": "Supprimer",
  57 |     "edit": "Modifier",
  58 |     "select": "Sélectionner",
  59 |     "search": "Rechercher",
  60 |     "filter": "Filtrer",
  61 |     "sort": "Trier",
  62 |     "actions": "Actions",
  63 |     "name": "Nom",
  64 |     "description": "Description",
  65 |     "type": "Type",
  66 |     "status": "Statut",
  67 |     "createdAt": "Créé le",
  68 |     "updatedAt": "Mis à jour le",
  69 |     "loading": "Chargement...",
  70 |     "refreshing": "Actualisation...",
  71 |     "noData": "Aucune donnée disponible",
  72 |     "devices": "Appareils",
  73 |     "hosts": "Hôtes",
  74 |     "managehosts": "Gérer vos hôtes et conteneurs",
  75 |     "refresh": "Actualiser",
  76 |     "table_view": "Vue tableau",
  77 |     "addhost": "Ajouter un hôte",
  78 |     "nohosts": "Aucun hôte trouvé. Ajoutez un nouvel hôte pour commencer.",
  79 |     "addhost_description": "Connectez-vous à vos serveurs, conteneurs et instances cloud.",
  80 |     "note": "Ajoutez et gérez vos hôtes, accédez aux terminaux, surveillez les journaux et déployez des conteneurs, le tout en un seul endroit",
  81 |     "testConnection": "Tester la connexion",
  82 |     "connected": "Connecté",
  83 |     "failed": "Échec",
  84 |     "pending": "En attente",
  85 |     "unknown": "Inconnu",
  86 |     "ssh": "SSH",
  87 |     "docker": "Docker",
  88 |     "portainer": "Portainer",
  89 |     "lastConnected": "Dernière connexion",
  90 |     "never": "Jamais",
  91 |     "connect": "Connecter",
  92 |     "disconnect": "Déconnecter",
  93 |     "terminal": "Terminal",
  94 |     "analytics": "Analytiques",
  95 |     "logs": "Journaux",
  96 |     "settings": "Paramètres",
  97 |     "confirmDelete": "Êtes-vous sûr de vouloir supprimer cet hôte ?",
  98 |     "deleteWarning": "Cette action ne peut pas être annulée.",
  99 |     "refreshHosts": "Actualiser les hôtes",
 100 |     "manualTestingMessage": "Les connexions ne sont pas testées automatiquement. Cliquez sur le bouton de test pour vérifier l'état de la connexion.",
 101 |     "connectionError": "Erreur de connexion",
 102 |     "errorDetails": "Détails de l'erreur",
 103 |     "noErrorDetails": "Aucun détail d'erreur disponible",
 104 |     "metrics": "Métriques",
 105 |     "form": {
 106 |       "name": "Nom",
 107 |       "namePlaceholder": "Nom de l'hôte (lettres minuscules, chiffres et traits d'union uniquement)",
 108 |       "nameHint": "Seuls les lettres minuscules, les chiffres et les traits d'union sont autorisés",
 109 |       "connection": "Connexion",
 110 |       "selectType": "Sélectionner le type",
 111 |       "ipAddress": "Adresse IP",
 112 |       "port": "Port",
 113 |       "username": "Nom d'utilisateur",
 114 |       "password": "Mot de passe"
 115 |     },
 116 |     "errors": {
 117 |       "validation": "Erreur de validation",
 118 |       "nameRequired": "Veuillez fournir un nom pour la connexion",
 119 |       "ipRequired": "Veuillez fournir une adresse IP",
 120 |       "invalidPort": "Le port doit être un nombre entre 1 et 65535",
 121 |       "sshCredentials": "Le nom d'utilisateur et le mot de passe sont requis pour les connexions SSH",
 122 |       "connectionFailed": "Échec de la connexion",
 123 |       "createFailed": "Échec de la création de la connexion",
 124 |       "unknownError": "Une erreur inconnue s'est produite",
 125 |       "timeout": "Délai de connexion dépassé. Veuillez vérifier que l'adresse IP et le port sont corrects et que les pare-feu autorisent la connexion.",
 126 |       "refused": "Connexion refusée. Veuillez vérifier que le service est en cours d'exécution sur l'hôte cible et que le port est correct.",
 127 |       "authentication": "Échec de l'authentification. Veuillez vérifier votre nom d'utilisateur et votre mot de passe.",
 128 |       "hostConnection": "Échec de la connexion à l'hôte distant. Veuillez vérifier vos détails de connexion.",
 129 |       "testFailed": "Le test de connexion a échoué",
 130 |       "fingerprintFailed": "Échec de la vérification de l'empreinte digitale"
 131 |     },
 132 |     "success": {
 133 |       "created": "Connexion créée",
 134 |       "connected": "Connecté avec succès à {name}"
 135 |     }
 136 |   },
 137 |   "Dashboard": {
 138 |     "title": "Tableau de bord",
 139 |     "overview": "Aperçu",
 140 |     "description": "Bienvenue sur votre tableau de bord",
 141 |     "welcome": "Bon retour !"
 142 |   },
 143 |   "Profile": {
 144 |     "title": "Profil",
 145 |     "profile": "Profil",
 146 |     "settings": "Paramètres du profil",
 147 |     "edit": "Modifier le profil",
 148 |     "save": "Enregistrer les modifications",
 149 |     "cancel": "Annuler",
 150 |     "personalInfo": "Informations personnelles",
 151 |     "email": "Email",
 152 |     "name": "Nom",
 153 |     "avatar": "Avatar",
 154 |     "changeAvatar": "Changer d'avatar",
 155 |     "removeAvatar": "Supprimer l'avatar",
 156 |     "accountSettings": "Paramètres du compte",
 157 |     "manageSettings": "Gérer les paramètres",
 158 |     "upgradePlan": "Mettre à niveau le forfait",
 159 |     "workspaceInfo": "Informations sur l'espace de travail",
 160 |     "manageTeam": "Gérer l'équipe",
 161 |     "sessionExpired": "Session expirée",
 162 |     "pleaseLogin": "Veuillez vous reconnecter pour continuer",
 163 |     "logIn": "Se connecter",
 164 |     "updating": "Mise à jour...",
 165 |     "update": "Mettre à jour",
 166 |     "enterName": "Entrez votre nom",
 167 |     "plan": "Forfait"
 168 |   },
 169 |   "billing": {
 170 |     "title": "Facturation & Plans",
 171 |     "currentPlan": "Plan actuel",
 172 |     "upgrade": "Mettre à niveau",
 173 |     "manageSubscription": "Gérer l'abonnement",
 174 |     "billingHistory": "Historique de facturation",
 175 |     "paymentMethods": "Moyens de paiement",
 176 |     "addPaymentMethod": "Ajouter un moyen de paiement",
 177 |     "planDetails": "Détails du plan",
 178 |     "features": "Fonctionnalités",
 179 |     "price": "Prix",
 180 |     "period": "Période",
 181 |     "monthly": "Mensuel",
 182 |     "yearly": "Annuel",
 183 |     "enterprise": "Entreprise",
 184 |     "free": "Gratuit",
 185 |     "pro": "Pro",
 186 |     "team": "Équipe"
 187 |   },
 188 |   "repositories": {
 189 |     "repositories": "Dépôts",
 190 |     "repositories_description": "Gérez vos dépôts Git",
 191 |     "add_provider": "Ajouter un fournisseur Git",
 192 |     "no_providers": "Aucun fournisseur Git trouvé. Ajoutez un fournisseur pour commencer.",
 193 |     "no_repositories": "Aucun dépôt trouvé. Ajoutez un fournisseur Git pour importer des dépôts.",
 194 |     "provider_type": "Type de fournisseur",
 195 |     "display_name": "Nom d'affichage",
 196 |     "server_url": "URL du serveur",
 197 |     "access_token": "Jeton d'accès",
 198 |     "connect": "Connecter",
 199 |     "connecting": "Connexion en cours...",
 200 |     "refresh": "Actualiser",
 201 |     "sync": "Synchroniser",
 202 |     "delete": "Supprimer",
 203 |     "confirm_delete": "Êtes-vous sûr de vouloir supprimer ce fournisseur Git?",
 204 |     "delete_warning": "Cela supprimera tous les dépôts associés. Cette action ne peut pas être annulée.",
 205 |     "connectGit": "Connectez-vous à vos fournisseurs Git pour importer des dépôts",
 206 |     "connectedProviders": "Fournisseurs connectés"
 207 |   },
 208 |   "Settings": {
 209 |     "title": "Paramètres",
 210 |     "description": "Gérez les paramètres de votre application",
 211 |     "generalSettings": "Paramètres généraux",
 212 |     "accountSettings": "Paramètres du compte",
 213 |     "securitySettings": "Paramètres de sécurité",
 214 |     "notificationSettings": "Paramètres de notification",
 215 |     "apiSettings": "Paramètres API",
 216 |     "integrationSettings": "Paramètres d'intégration",
 217 |     "advancedSettings": "Paramètres avancés",
 218 |     "languageSettings": "Paramètres de langue",
 219 |     "languageDescription": "Changer la langue d'affichage de l'application",
 220 |     "currentLanguage": "Langue actuelle",
 221 |     "selectLanguage": "Sélectionner une langue",
 222 |     "english": "Anglais",
 223 |     "french": "Français"
 224 |   },
 225 |   "Team": {
 226 |     "title": "Gestion d'équipe",
 227 |     "teamMembers": "Membres de l'équipe",
 228 |     "description": "Gérez les membres de votre équipe et leurs permissions",
 229 |     "inviteMembers": "Inviter des membres",
 230 |     "memberName": "Nom",
 231 |     "memberEmail": "Email",
 232 |     "memberRole": "Rôle",
 233 |     "memberStatus": "Statut",
 234 |     "memberActions": "Actions",
 235 |     "invitePending": "En attente",
 236 |     "inviteAccepted": "Accepté",
 237 |     "removeUser": "Supprimer",
 238 |     "confirmRemove": "Êtes-vous sûr de vouloir supprimer cet utilisateur ?",
 239 |     "noMembers": "Aucun membre d'équipe trouvé"
 240 |   },
 241 |   "Projects": {
 242 |     "projects": "Projets",
 243 |     "title": "Projets",
 244 |     "description": "Gérer vos projets",
 245 |     "create": "Créer un projet",
 246 |     "edit": "Modifier le projet",
 247 |     "delete": "Supprimer le projet",
 248 |     "noProjects": "Aucun projet trouvé"
 249 |   },
 250 |   "Reports": {
 251 |     "title": "Rapports",
 252 |     "reportsList": "Liste des rapports",
 253 |     "description": "Consultez et analysez les rapports et métriques d'exécution des tests"
 254 |   },
 255 |   "Menu": {
 256 |     "title": "Menu",
 257 |     "dashboard": "Tableau de bord",
 258 |     "projects": "Projets",
 259 |     "hosts": "Hôtes",
 260 |     "repositories": "Dépôts",
 261 |     "settings": "Paramètres",
 262 |     "profile": "Profil",
 263 |     "logout": "Déconnexion"
 264 |   }
 265 | }

```

`/workspaces/automai/src/auth.ts`:

```ts
   1 | // src/auth.ts
   2 | /**
   3 |  * Authentication utilities for working with Supabase Auth
   4 |  */
   5 | 
   6 | // Import directly from the specific modules to avoid any import issues
   7 | import { createClient as createServerClient } from '@/lib/supabase/server';
   8 | import { createClient as createAdminClient } from '@/lib/supabase/admin';
   9 | 
  10 | // Types for Supabase auth
  11 | export interface UserSession {
  12 |   id: string;
  13 |   email?: string | null;
  14 |   name?: string | null;
  15 |   image?: string | null;
  16 |   role?: string;
  17 |   tenant_id?: string;
  18 |   tenant_name?: string | null;
  19 | }
  20 | 
  21 | export interface SessionData {
  22 |   user: UserSession;
  23 |   accessToken: string;
  24 |   expires: string;
  25 | }
  26 | 
  27 | // Get the current session from Supabase
  28 | export async function getSession(): Promise<SessionData | null> {
  29 |   try {
  30 |     // Create a server client with cookies
  31 |     const supabase = await createServerClient();
  32 | 
  33 |     // Try to get the session
  34 |     const { data, error } = await supabase.auth.getSession();
  35 | 
  36 |     if (error) {
  37 |       console.error('Error getting session:', error);
  38 |       return null;
  39 |     }
  40 | 
  41 |     if (!data.session) {
  42 |       console.log('No session found');
  43 |       return null;
  44 |     }
  45 | 
  46 |     const { user, access_token, expires_at } = data.session;
  47 | 
  48 |     return {
  49 |       user: {
  50 |         id: user.id,
  51 |         email: user.email,
  52 |         name: user.user_metadata?.name || user.email?.split('@')[0] || null,
  53 |         image: user.user_metadata?.avatar_url || null,
  54 |         role: user.user_metadata?.role || 'user',
  55 |         tenant_id: user.user_metadata?.tenant_id || user.user_metadata?.tenantId || 'trial',
  56 |         tenant_name: user.user_metadata?.tenant_name || user.user_metadata?.tenantName || 'trial',
  57 |       },
  58 |       accessToken: access_token,
  59 |       expires: new Date(expires_at! * 1000).toISOString(),
  60 |     };
  61 |   } catch (error) {
  62 |     console.error('Error getting session:', error);
  63 |     return null;
  64 |   }
  65 | }
  66 | 
  67 | // Function to extract session from request headers
  68 | export async function extractSessionFromHeader(
  69 |   authHeader: string | null,
  70 | ): Promise<SessionData | null> {
  71 |   if (!authHeader || !authHeader.startsWith('Bearer ')) {
  72 |     return null;
  73 |   }
  74 | 
  75 |   try {
  76 |     const token = authHeader.substring(7);
  77 |     console.log('Extracting session from header token');
  78 | 
  79 |     // Create a Supabase admin client
  80 |     const supabase = createAdminClient();
  81 | 
  82 |     // Get the user from the token
  83 |     const { data, error } = await supabase.auth.getUser(token);
  84 | 
  85 |     if (error || !data.user) {
  86 |       console.error('Error getting user from token:', error?.message);
  87 |       return null;
  88 |     }
  89 | 
  90 |     // Return the session data
  91 |     return {
  92 |       user: {
  93 |         id: data.user.id,
  94 |         email: data.user.email,
  95 |         name: data.user.user_metadata?.name || data.user.email?.split('@')[0] || null,
  96 |         image: data.user.user_metadata?.avatar_url || null,
  97 |         role: data.user.user_metadata?.role || 'user',
  98 |         tenant_id: data.user.user_metadata?.tenant_id || data.user.user_metadata?.tenantId || 'trial',
  99 |         tenant_name: data.user.user_metadata?.tenant_name || data.user.user_metadata?.tenantName || 'trial',
 100 |       },
 101 |       accessToken: token,
 102 |       expires: new Date(Date.now() + 3600 * 1000).toISOString(), // Approximate expiry
 103 |     };
 104 |   } catch (error) {
 105 |     console.error('Error extracting session from header:', error);
 106 |     return null;
 107 |   }
 108 | }
 109 | 
 110 | // Get the current user from Supabase
 111 | export async function getUser() {
 112 |   const session = await getSession();
 113 |   return session?.user || null;
 114 | }
 115 | 
 116 | // Helper function to check if a user is authenticated
 117 | export async function isAuthenticated() {
 118 |   const session = await getSession();
 119 |   return !!session;
 120 | }

```

`/workspaces/automai/src/app/page.tsx`:

```tsx
   1 | import { redirect } from 'next/navigation';
   2 | 
   3 | import { defaultLocale } from '@/config';
   4 | 
   5 | export const _dynamic = 'force-static';
   6 | 
   7 | export default async function RootPage() {
   8 |   redirect(`/${defaultLocale}`);
   9 | }

```

`/workspaces/automai/src/app/actions/repositories.ts`:

```ts
   1 | 'use server';
   2 | 
   3 | import db from '@/lib/supabase/db';
   4 | import { Repository } from '@/types/repositories';
   5 | 
   6 | export interface RepositoryFilter {
   7 |   providerId?: string;
   8 | }
   9 | 
  10 | export async function getRepositories(filter?: RepositoryFilter): Promise<{ success: boolean; error?: string; data?: Repository[] }> {
  11 |   try {
  12 |     const where: Record<string, any> = {};
  13 |     
  14 |     if (filter?.providerId) {
  15 |       where.provider_id = filter.providerId;
  16 |     }
  17 |     
  18 |     const result = await db.repository.findMany({
  19 |       where,
  20 |       orderBy: { created_at: 'desc' }
  21 |     });
  22 |     
  23 |     // We need to ensure we're working with valid repository objects
  24 |     // First convert to unknown to break the typing, then explicitly cast
  25 |     const repositories = result as unknown as any[];
  26 |     
  27 |     // Transform to the correct Repository type
  28 |     const data: Repository[] = repositories.map(repo => ({
  29 |       id: String(repo.id),
  30 |       providerId: String(repo.provider_id),
  31 |       name: String(repo.name),
  32 |       owner: String(repo.owner),
  33 |       url: repo.url ? String(repo.url) : undefined,
  34 |       branch: repo.branch ? String(repo.branch) : undefined,
  35 |       defaultBranch: repo.default_branch ? String(repo.default_branch) : undefined,
  36 |       isPrivate: Boolean(repo.is_private),
  37 |       description: repo.description ? String(repo.description) : undefined,
  38 |       syncStatus: String(repo.sync_status) as Repository['syncStatus'],
  39 |       createdAt: new Date(repo.created_at),
  40 |       updatedAt: new Date(repo.updated_at),
  41 |       lastSyncedAt: repo.last_synced_at ? new Date(repo.last_synced_at) : undefined,
  42 |       error: repo.error ? String(repo.error) : undefined
  43 |     }));
  44 |     
  45 |     return { success: true, data };
  46 |   } catch (error: any) {
  47 |     console.error('Error in getRepositories:', error);
  48 |     return { success: false, error: error.message || 'Failed to fetch repositories' };
  49 |   }
  50 | }
  51 | 
  52 | export async function createRepository(data: Partial<Repository>): Promise<{ success: boolean; error?: string; data?: Repository }> {
  53 |   try {
  54 |     const newRepo = await db.repository.create({
  55 |       data
  56 |     });
  57 |     
  58 |     return { success: true, data: newRepo };
  59 |   } catch (error: any) {
  60 |     console.error('Error in createRepository:', error);
  61 |     return { success: false, error: error.message || 'Failed to create repository' };
  62 |   }
  63 | }
  64 | 
  65 | export async function updateRepository(id: string, updates: Partial<Repository>): Promise<{ success: boolean; error?: string; data?: Repository }> {
  66 |   try {
  67 |     const data = await db.repository.update({
  68 |       where: { id },
  69 |       data: updates
  70 |     });
  71 |     
  72 |     return { success: true, data };
  73 |   } catch (error: any) {
  74 |     console.error('Error in updateRepository:', error);
  75 |     return { success: false, error: error.message || 'Failed to update repository' };
  76 |   }
  77 | }
  78 | 
  79 | export async function deleteRepository(id: string): Promise<{ success: boolean; error?: string }> {
  80 |   try {
  81 |     await db.repository.delete({
  82 |       where: { id }
  83 |     });
  84 |     
  85 |     return { success: true };
  86 |   } catch (error: any) {
  87 |     console.error('Error in deleteRepository:', error);
  88 |     return { success: false, error: error.message || 'Failed to delete repository' };
  89 |   }
  90 | }
  91 | 
  92 | export async function syncRepository(id: string): Promise<{ success: boolean; error?: string; data?: Repository }> {
  93 |   try {
  94 |     const data = await db.repository.update({
  95 |       where: { id },
  96 |       data: { last_synced: new Date().toISOString() }
  97 |     });
  98 |     
  99 |     return { success: true, data };
 100 |   } catch (error: any) {
 101 |     console.error('Error in syncRepository:', error);
 102 |     return { success: false, error: error.message || 'Failed to sync repository' };
 103 |   }
 104 | }
 105 | 
 106 | export async function getRepository(id: string): Promise<{ success: boolean; error?: string; data?: Repository }> {
 107 |   try {
 108 |     const data = await db.repository.findUnique({
 109 |       where: { id }
 110 |     });
 111 |     
 112 |     if (!data) {
 113 |       return { success: false, error: 'Repository not found' };
 114 |     }
 115 |     
 116 |     return { success: true, data };
 117 |   } catch (error: any) {
 118 |     console.error('Error in getRepository:', error);
 119 |     return { success: false, error: error.message || 'Failed to fetch repository' };
 120 |   }
 121 | }

```

`/workspaces/automai/src/app/actions/profile.ts`:

```ts
   1 | 'use server';
   2 | 
   3 | import { supabaseAuth } from '@/lib/supabase/auth';
   4 | 
   5 | interface ProfileData {
   6 |   name?: string;
   7 |   avatar_url?: string;
   8 | }
   9 | 
  10 | export async function updateUserProfile(data: ProfileData): Promise<{ success: boolean; error?: string }> {
  11 |   try {
  12 |     console.log('Updating user profile with data:', data);
  13 |     
  14 |     // Make sure we have valid data
  15 |     if (!data.name && !data.avatar_url) {
  16 |       return { success: false, error: 'No data provided for update' };
  17 |     }
  18 |     
  19 |     // Build user_metadata object
  20 |     const metadata: Record<string, any> = {};
  21 |     if (data.name) metadata.name = data.name;
  22 |     if (data.avatar_url) metadata.avatar_url = data.avatar_url;
  23 |     
  24 |     // Call the Supabase auth service to update user metadata
  25 |     const result = await supabaseAuth.updateProfile(metadata);
  26 |     
  27 |     // Log result for debugging
  28 |     if (result.success) {
  29 |       console.log('Profile updated successfully');
  30 |     } else {
  31 |       console.error('Failed to update profile:', result.error);
  32 |     }
  33 |     
  34 |     return { 
  35 |       success: result.success, 
  36 |       error: result.error || undefined 
  37 |     };
  38 |   } catch (error: any) {
  39 |     console.error('Error updating profile:', error);
  40 |     return { success: false, error: error.message || 'Failed to update profile' };
  41 |   }
  42 | }
  43 | 
  44 | export async function getUserProfile(): Promise<{ success: boolean; error?: string; data?: any }> {
  45 |   try {
  46 |     const result = await supabaseAuth.getUser();
  47 |     
  48 |     return { 
  49 |       success: result.success, 
  50 |       error: result.error || undefined,
  51 |       data: result.data
  52 |     };
  53 |   } catch (error: any) {
  54 |     console.error('Error getting user profile:', error);
  55 |     return { success: false, error: error.message || 'Failed to get user profile' };
  56 |   }
  57 | } 

```

`/workspaces/automai/src/app/actions/projects.ts`:

```ts
   1 | 'use server';
   2 | 
   3 | import db from '@/lib/supabase/db';
   4 | import { supabaseAuth } from '@/lib/supabase/auth';
   5 | 
   6 | export interface Project {
   7 |   id: string;
   8 |   name: string;
   9 |   description?: string;
  10 |   tenant_id: string;
  11 |   created_at: string;
  12 |   updated_at: string;
  13 | }
  14 | 
  15 | // Helper function to get the current user
  16 | async function getCurrentUser() {
  17 |   const result = await supabaseAuth.getUser();
  18 |   
  19 |   if (!result.success || !result.data) {
  20 |     return null;
  21 |   }
  22 |   
  23 |   return result.data;
  24 | }
  25 | 
  26 | /**
  27 |  * Get all projects for the current user
  28 |  */
  29 | export async function getProjects() {
  30 |   try {
  31 |     const user = await getCurrentUser();
  32 |     if (!user) {
  33 |       return { success: false, error: 'Unauthorized', data: null };
  34 |     }
  35 |     
  36 |     const tenantId = user.user_metadata?.tenant_id || 'default';
  37 |     const data = await db.project.findMany({
  38 |       where: { tenant_id: tenantId },
  39 |       orderBy: { created_at: 'desc' }
  40 |     });
  41 |     
  42 |     return { success: true, error: null, data };
  43 |   } catch (error: any) {
  44 |     console.error('Error in getProjects:', error);
  45 |     return { success: false, error: error.message || 'Failed to fetch projects', data: null };
  46 |   }
  47 | }
  48 | 
  49 | /**
  50 |  * Get a project by ID
  51 |  */
  52 | export async function getProject(id: string) {
  53 |   try {
  54 |     const user = await getCurrentUser();
  55 |     if (!user) {
  56 |       return { success: false, error: 'Unauthorized', data: null };
  57 |     }
  58 |     
  59 |     const tenantId = user.user_metadata?.tenant_id || 'default';
  60 |     const data = await db.project.findUnique({
  61 |       where: { 
  62 |         id,
  63 |         tenant_id: tenantId
  64 |       }
  65 |     });
  66 |     
  67 |     if (!data) {
  68 |       return { success: false, error: 'Project not found', data: null };
  69 |     }
  70 |     
  71 |     return { success: true, error: null, data };
  72 |   } catch (error: any) {
  73 |     console.error('Error in getProject:', error);
  74 |     return { success: false, error: error.message || 'Failed to fetch project', data: null };
  75 |   }
  76 | }
  77 | 
  78 | /**
  79 |  * Create a new project
  80 |  */
  81 | export async function createProject(projectData: Omit<Project, 'id' | 'created_at' | 'updated_at' | 'tenant_id'>) {
  82 |   try {
  83 |     const user = await getCurrentUser();
  84 |     if (!user) {
  85 |       return { success: false, error: 'Unauthorized', data: null };
  86 |     }
  87 |     
  88 |     const tenantId = user.user_metadata?.tenant_id || 'default';
  89 |     const data = await db.project.create({
  90 |       data: {
  91 |         ...projectData,
  92 |         tenant_id: tenantId
  93 |       }
  94 |     });
  95 |     
  96 |     return { success: true, error: null, data };
  97 |   } catch (error: any) {
  98 |     console.error('Error in createProject:', error);
  99 |     return { success: false, error: error.message || 'Failed to create project', data: null };
 100 |   }
 101 | }
 102 | 
 103 | /**
 104 |  * Update an existing project
 105 |  */
 106 | export async function updateProject(id: string, projectData: Partial<Omit<Project, 'id' | 'created_at' | 'updated_at' | 'tenant_id'>>) {
 107 |   try {
 108 |     const user = await getCurrentUser();
 109 |     if (!user) {
 110 |       return { success: false, error: 'Unauthorized', data: null };
 111 |     }
 112 |     
 113 |     const tenantId = user.user_metadata?.tenant_id || 'default';
 114 |     const data = await db.project.update({
 115 |       where: { 
 116 |         id,
 117 |         tenant_id: tenantId
 118 |       },
 119 |       data: projectData
 120 |     });
 121 |     
 122 |     return { success: true, error: null, data };
 123 |   } catch (error: any) {
 124 |     console.error('Error in updateProject:', error);
 125 |     return { success: false, error: error.message || 'Failed to update project', data: null };
 126 |   }
 127 | }
 128 | 
 129 | /**
 130 |  * Delete a project
 131 |  */
 132 | export async function deleteProject(id: string) {
 133 |   try {
 134 |     const user = await getCurrentUser();
 135 |     if (!user) {
 136 |       return { success: false, error: 'Unauthorized' };
 137 |     }
 138 |     
 139 |     const tenantId = user.user_metadata?.tenant_id || 'default';
 140 |     await db.project.delete({
 141 |       where: {
 142 |         id,
 143 |         tenant_id: tenantId
 144 |       }
 145 |     });
 146 |     
 147 |     return { success: true, error: null };
 148 |   } catch (error: any) {
 149 |     console.error('Error in deleteProject:', error);
 150 |     return { success: false, error: error.message || 'Failed to delete project' };
 151 |   }
 152 | } 

```

`/workspaces/automai/src/app/actions/user.ts`:

```ts
   1 | 'use server';
   2 | 
   3 | import db from '@/lib/supabase/db';
   4 | import { supabaseAuth } from '@/lib/supabase/auth';
   5 | import { UserRole, UserRoleResponse, SingleUserRoleResponse, UserRoleFilter } from '@/types/user';
   6 | 
   7 | export async function getUserRoles(userId: string): Promise<UserRoleResponse> {
   8 |   try {
   9 |     // Get the user from the users table
  10 |     const users = await db.query('users', {
  11 |       where: { id: userId }
  12 |     });
  13 |     
  14 |     if (!users || users.length === 0) {
  15 |       return { success: false, error: 'User not found' };
  16 |     }
  17 |     
  18 |     const user = users[0];
  19 |     
  20 |     // Create a UserRole object from the user's role
  21 |     const userRole: UserRole = {
  22 |       id: userId, // Using userId as the role ID for simplicity
  23 |       name: user.user_role || 'user', // Changed from role to user_role - Default to 'user' if role is not set
  24 |       created_at: user.created_at || new Date().toISOString(),
  25 |       updated_at: user.updated_at || new Date().toISOString()
  26 |     };
  27 |     
  28 |     return { success: true, data: [userRole] };
  29 |   } catch (error: any) {
  30 |     console.error('Error in getUserRoles:', error);
  31 |     return { success: false, error: error.message || 'Failed to fetch user roles' };
  32 |   }
  33 | }
  34 | 
  35 | export async function createUserRole(data: Partial<UserRole>): Promise<SingleUserRoleResponse> {
  36 |   try {
  37 |     // This function would update the user's role in the users table
  38 |     if (!data.id) {
  39 |       return { success: false, error: 'User ID is required' };
  40 |     }
  41 |     
  42 |     const result = await db.user.update({
  43 |       where: { id: data.id },
  44 |       data: { user_role: data.name } // Changed from role to user_role
  45 |     });
  46 |     
  47 |     if (!result) {
  48 |       return { success: false, error: 'Failed to update user role' };
  49 |     }
  50 |     
  51 |     const userRole: UserRole = {
  52 |       id: data.id,
  53 |       name: data.name || 'user',
  54 |       created_at: result.created_at || new Date().toISOString(),
  55 |       updated_at: result.updated_at || new Date().toISOString()
  56 |     };
  57 |     
  58 |     return { success: true, data: userRole };
  59 |   } catch (error: any) {
  60 |     console.error('Error in createUserRole:', error);
  61 |     return { success: false, error: error.message || 'Failed to create user role' };
  62 |   }
  63 | }
  64 | 
  65 | export async function updateUserRole(id: string, updates: Partial<UserRole>): Promise<SingleUserRoleResponse> {
  66 |   try {
  67 |     // This function would update the user's role in the users table
  68 |     const result = await db.user.update({
  69 |       where: { id },
  70 |       data: { user_role: updates.name } // Changed from role to user_role
  71 |     });
  72 |     
  73 |     if (!result) {
  74 |       return { success: false, error: 'Failed to update user role' };
  75 |     }
  76 |     
  77 |     const userRole: UserRole = {
  78 |       id,
  79 |       name: updates.name || result.user_role || 'user', // Changed from result.role to result.user_role
  80 |       created_at: result.created_at || new Date().toISOString(),
  81 |       updated_at: result.updated_at || new Date().toISOString()
  82 |     };
  83 |     
  84 |     return { success: true, data: userRole };
  85 |   } catch (error: any) {
  86 |     console.error('Error in updateUserRole:', error);
  87 |     return { success: false, error: error.message || 'Failed to update user role' };
  88 |   }
  89 | }
  90 | 
  91 | export async function deleteUserRole(id: string): Promise<{ success: boolean; error?: string }> {
  92 |   try {
  93 |     // Instead of deleting, we'll reset the role to 'user'
  94 |     await db.user.update({
  95 |       where: { id },
  96 |       data: { user_role: 'user' }
  97 |     });
  98 |     
  99 |     return { success: true };
 100 |   } catch (error: any) {
 101 |     console.error('Error in deleteUserRole:', error);
 102 |     return { success: false, error: error.message || 'Failed to delete user role' };
 103 |   }
 104 | }
 105 | 
 106 | export async function getCurrentUserRoles(): Promise<UserRoleResponse> {
 107 |   try {
 108 |     const userResult = await supabaseAuth.getUser();
 109 |     
 110 |     if (!userResult.success || !userResult.data) {
 111 |       // Return a default role for unauthenticated users instead of an error
 112 |       if (userResult.error === 'Auth session missing!' || userResult.error === 'No active session') {
 113 |         return { 
 114 |           success: true, 
 115 |           data: [{ 
 116 |             id: 'guest', 
 117 |             name: 'guest',
 118 |             created_at: new Date().toISOString(),
 119 |             updated_at: new Date().toISOString()
 120 |           }] 
 121 |         };
 122 |       }
 123 |       return { success: false, error: 'No user found' };
 124 |     }
 125 |     
 126 |     return getUserRoles(userResult.data.id);
 127 |   } catch (error: any) {
 128 |     console.error('Error in getCurrentUserRoles:', error);
 129 |     return { success: false, error: error.message || 'Failed to get current user roles' };
 130 |   }
 131 | }

```

`/workspaces/automai/src/app/actions/auth.ts`:

```ts
   1 | 'use server';
   2 | 
   3 | import { redirect } from 'next/navigation';
   4 | import { supabaseAuth} from '@/lib/supabase/auth';
   5 | 
   6 | export type AuthUser = {
   7 |   id: string;
   8 |   email: string;
   9 |   name?: string;
  10 |   tenant_id: string;
  11 |   created_at: string;
  12 |   updated_at: string;
  13 |   user_metadata?: {
  14 |     name?: string;
  15 |     tenant_id?: string;
  16 |   };
  17 | };
  18 | 
  19 | export type ProfileUpdateData = {
  20 |   name?: string;
  21 |   locale?: string;
  22 | };
  23 | 
  24 | // Track if we've already logged a "No active session" error
  25 | let noSessionErrorLogged = false;
  26 | 
  27 | // Cache for user data to reduce redundant checks
  28 | let userCache: {
  29 |   data: any | null;
  30 |   timestamp: number;
  31 |   error: string | null;
  32 | } | null = null;
  33 | 
  34 | // Cache expiration time (30 seconds)
  35 | const CACHE_EXPIRATION = 30 * 1000;
  36 | 
  37 | // Add a function to invalidate the cache when needed
  38 | export async function invalidateUserCache() {
  39 |   userCache = null;
  40 |   return { success: true };
  41 | }
  42 | 
  43 | // User creation is now handled directly in the handleAuthCallback function
  44 | // This ensures users are only created in the database during their first sign-in
  45 | // rather than on every authentication attempt
  46 | 
  47 | /**
  48 |  * Handle OAuth callback from Supabase Auth
  49 |  * This follows the three-layer architecture: server action → server db
  50 |  */
  51 | export async function handleAuthCallback(url: string) {
  52 |   try {
  53 |     // Parse the URL to get the code
  54 |     const { searchParams } = new URL(url);
  55 |     const code = searchParams.get('code');
  56 |     
  57 |     if (!code) {
  58 |       throw new Error('No code provided in URL');
  59 |     }
  60 |     
  61 |     // Invalidate user cache before processing callback
  62 |     await invalidateUserCache();
  63 |     
  64 |     // Handle the OAuth callback
  65 |     const result = await supabaseAuth.handleOAuthCallback(code);
  66 |     
  67 |     if (result.success && result.data) {
  68 |       // Ensure user exists in database after successful authentication
  69 |       await ensureUserInDatabase(result.data);
  70 |       
  71 |       // Get the tenant information for redirection
  72 |       const userData = result.data.session?.user;
  73 |       
  74 |       // Use tenant_name or default to 'trial'
  75 |       const tenantName = userData?.user_metadata?.tenant_name || 'trial';
  76 |       
  77 |       // Get the locale from URL or default to 'en'
  78 |       const pathParts = url.split('/');
  79 |       const localeIndex = pathParts.findIndex(part => part === 'auth-redirect') - 1;
  80 |       const locale = localeIndex >= 0 ? pathParts[localeIndex] : 'en';
  81 |       
  82 |       // Log for debugging
  83 |       console.log('Auth callback redirect using tenant:', tenantName);
  84 |       
  85 |       // Redirect URL for after authentication
  86 |       const redirectUrl = `/${locale}/${tenantName}/dashboard`;
  87 |       
  88 |       return {
  89 |         success: true,
  90 |         redirectUrl
  91 |       };
  92 |     }
  93 |     
  94 |     // Handle authentication failure
  95 |     return { 
  96 |       success: false, 
  97 |       error: result.error || 'Failed to authenticate', 
  98 |       redirectUrl: '/login?error=Authentication+failed'
  99 |     };
 100 |   } catch (error: any) {
 101 |     console.error('Error in handleAuthCallback:', error);
 102 |     return { 
 103 |       success: false, 
 104 |       error: error.message || 'Authentication failed', 
 105 |       redirectUrl: '/login?error=Authentication+failed'
 106 |     };
 107 |   }
 108 | }
 109 | 
 110 | /**
 111 |  * Sign up with email and password
 112 |  */
 113 | export async function signUp(email: string, password: string, name: string, redirectUrl: string) {
 114 |   try {
 115 |     // Invalidate user cache before sign up
 116 |     await invalidateUserCache();
 117 |     
 118 |     const result = await supabaseAuth.signUp(email, password, {
 119 |       redirectTo: redirectUrl,
 120 |       data: { name }
 121 |     });
 122 |     
 123 |     if (result.success && result.data) {
 124 |       // Ensure user exists in database after successful signup
 125 |       await ensureUserInDatabase(result.data);
 126 |     }
 127 |     
 128 |     return { 
 129 |       success: result.success, 
 130 |       error: result.error || null, 
 131 |       data: result.data || null 
 132 |     };
 133 |   } catch (error: any) {
 134 |     console.error('Error signing up:', error);
 135 |     return { success: false, error: error.message || 'Failed to sign up', data: null };
 136 |   }
 137 | }
 138 | 
 139 | /**
 140 |  * Sign in with password
 141 |  */
 142 | export async function signInWithPassword(email: string, password: string) {
 143 |   try {
 144 |     // Invalidate user cache before sign in
 145 |     await invalidateUserCache();
 146 |     
 147 |     const result = await supabaseAuth.signInWithPassword(email, password);
 148 |     
 149 |     if (result.success && result.data) {
 150 |       // Ensure user exists in database after successful authentication
 151 |       await ensureUserInDatabase(result.data);
 152 |     }
 153 |     
 154 |     return { 
 155 |       success: result.success, 
 156 |       error: result.error || null, 
 157 |       data: result.data || null 
 158 |     };
 159 |   } catch (error: any) {
 160 |     // Don't log Auth session missing errors as they're expected during login
 161 |     if (error.message !== 'Auth session missing!') {
 162 |       console.error('Error signing in with password:', error);
 163 |     }
 164 |     return { success: false, error: error.message || 'Failed to sign in', data: null };
 165 |   }
 166 | }
 167 | 
 168 | /**
 169 |  * Sign in with OAuth provider
 170 |  */
 171 | export async function signInWithOAuth(provider: 'google' | 'github', redirectUrl: string) {
 172 |   try {
 173 |     const result = await supabaseAuth.signInWithOAuth(provider, { 
 174 |       redirectTo: redirectUrl 
 175 |     });
 176 |     
 177 |     return { 
 178 |       success: result.success, 
 179 |       error: result.error || null, 
 180 |       data: result.data || null 
 181 |     };
 182 |   } catch (error: any) {
 183 |     console.error('Error signing in with OAuth:', error);
 184 |     return { success: false, error: error.message || 'Failed to sign in', data: null };
 185 |   }
 186 | }
 187 | 
 188 | /**
 189 |  * Update user password
 190 |  */
 191 | export async function updatePassword(password: string) {
 192 |   try {
 193 |     // Invalidate user cache before updating password
 194 |     await invalidateUserCache();
 195 |     
 196 |     const result = await supabaseAuth.updatePassword(password);
 197 |     
 198 |     return { 
 199 |       success: result.success, 
 200 |       error: result.error || null 
 201 |     };
 202 |   } catch (error: any) {
 203 |     console.error('Error updating password:', error);
 204 |     return { success: false, error: error.message || 'Failed to update password' };
 205 |   }
 206 | }
 207 | 
 208 | /**
 209 |  * Reset password for email
 210 |  */
 211 | export async function resetPasswordForEmail(email: string, redirectUrl: string) {
 212 |   try {
 213 |     const result = await supabaseAuth.resetPasswordForEmail(email, redirectUrl);
 214 |     
 215 |     return {
 216 |       success: result.success,
 217 |       error: result.error || null
 218 |     };
 219 |   } catch (error: any) {
 220 |     console.error('Error resetting password:', error);
 221 |     return { success: false, error: error.message || 'Failed to reset password' };
 222 |   }
 223 | }
 224 | 
 225 | /**
 226 |  * Sign out the current user
 227 |  */
 228 | export async function signOut(formData: FormData) {
 229 |   try {
 230 |     // Invalidate user cache on sign out
 231 |     await invalidateUserCache();
 232 |     
 233 |     const result = await supabaseAuth.signOut();
 234 |     
 235 |     if (!result.success) {
 236 |       console.error('Error signing out:', result.error);
 237 |       throw new Error(result.error || 'Failed to sign out');
 238 |     }
 239 |     
 240 |     // Return success instead of redirecting
 241 |     // Let the client handle the redirect
 242 |     return { success: true };
 243 |   } catch (error) {
 244 |     console.error('Error signing out:', error);
 245 |     throw new Error('Failed to sign out');
 246 |   }
 247 | }
 248 | 
 249 | /**
 250 |  * Update user profile
 251 |  */
 252 | export async function updateProfile(formData: FormData | ProfileUpdateData) {
 253 |   try {
 254 |     // Extract data - handle both FormData and direct objects
 255 |     let name, locale;
 256 |     
 257 |     if (formData instanceof FormData) {
 258 |       name = formData.get('name') as string;
 259 |       locale = formData.get('locale') as string || 'en';
 260 |     } else {
 261 |       name = formData.name;
 262 |       locale = formData.locale || 'en';
 263 |     }
 264 |     
 265 |     console.log('Updating profile with name:', name);
 266 |     
 267 |     // Invalidate user cache before updating profile
 268 |     await invalidateUserCache();
 269 |     
 270 |     // Update user metadata
 271 |     const result = await supabaseAuth.updateProfile({ name });
 272 |     
 273 |     if (!result.success) {
 274 |       console.error('Failed to update profile:', result.error);
 275 |       throw new Error(result.error || 'Failed to update profile');
 276 |     }
 277 |     
 278 |     console.log('Profile updated successfully');
 279 |     
 280 |     // Redirect back to profile page
 281 |     redirect(`/${locale}/profile`);
 282 |   } catch (error) {
 283 |     console.error('Error updating profile:', error);
 284 |     throw new Error('Failed to update profile');
 285 |   }
 286 | }
 287 | 
 288 | // Helper function to ensure user exists in database
 289 | async function ensureUserInDatabase(authData: any): Promise<void> {
 290 |   try {
 291 |     if (!authData || !authData.user) {
 292 |       console.error('No auth data provided to ensureUserInDatabase');
 293 |       return;
 294 |     }
 295 | 
 296 |     const userId = authData.user.id;
 297 |     
 298 |     // Check if user already exists in database
 299 |     // Import the admin client with elevated permissions
 300 |     const { createAdminClient } = await import('@/lib/supabase');
 301 |     const adminClient = createAdminClient();
 302 |     
 303 |     // Use admin client to check if user exists (bypasses RLS)
 304 |     const { data: existingUser, error: findError } = await adminClient
 305 |       .from('users')
 306 |       .select('*')
 307 |       .eq('id', userId)
 308 |       .single();
 309 |       
 310 |     if (findError && findError.code !== 'PGRST116') {
 311 |       console.error('Error finding user:', findError);
 312 |     }
 313 |     
 314 |     if (existingUser) {
 315 |       // User exists, optionally update their metadata
 316 |       console.log('User exists in database, no need to create:', userId);
 317 |       return;
 318 |     }
 319 |     
 320 |     // Extract user data for database record
 321 |     const userData = {
 322 |       id: userId,
 323 |       email: authData.user.email,
 324 |       name: authData.user.user_metadata?.name || authData.user.email?.split('@')[0] || 'User',
 325 |       user_role: authData.user.user_metadata?.role || 'admin', // Use user_role column
 326 |       tenant_name: authData.user.app_metadata?.tenant_name || 'trial', // Always use a readable name instead of UUID
 327 |       provider: authData.user.app_metadata?.provider ||'email',
 328 |     };
 329 |     
 330 |     // Create user record in database
 331 |     console.log('Creating new user record in database:', userData.email);
 332 |     const { data: newUser, error: createUserError } = await adminClient
 333 |       .from('users')
 334 |       .insert(userData)
 335 |       .select()
 336 |       .single();
 337 |       
 338 |     if (createUserError) {
 339 |       console.error('Error creating user:', createUserError);
 340 |       throw createUserError;
 341 |     }
 342 |     
 343 |     console.log('User record created successfully');
 344 |   } catch (error) {
 345 |     console.error('Error ensuring user in database:', error);
 346 |     // Don't fail the authentication process if this fails
 347 |   }
 348 | }
 349 | 
 350 | /**
 351 |  * Get the current authenticated user
 352 |  */
 353 | export async function getCurrentUser(): Promise<AuthUser | null> {
 354 |   // Check if we have a valid cache
 355 |   const now = Date.now();
 356 |   if (userCache && (now - userCache.timestamp < CACHE_EXPIRATION)) {
 357 |     // Return cached data if available and not expired
 358 |     if (userCache.error) {
 359 |       // If the cached error is a session missing error, just return null
 360 |       if (userCache.error === 'No active session' || userCache.error === 'Auth session missing!') {
 361 |         return null;
 362 |       }
 363 |       throw new Error(userCache.error);
 364 |     }
 365 |     return userCache.data;
 366 |   }
 367 | 
 368 |   try {
 369 |     console.log('[Auth] DEBUG: Using direct getUser call');
 370 |     const result = await supabaseAuth.getUser();
 371 |     
 372 |     // Update cache
 373 |     userCache = {
 374 |       data: result.success ? result.data : null,
 375 |       timestamp: Date.now(),
 376 |       error: result.success ? null : result.error || null
 377 |     };
 378 |     
 379 |     if (!result.success || !result.data) {
 380 |       // For "No active session" errors or "Auth session missing!" errors, just return null instead of throwing an error
 381 |       if (result.error === 'No active session' || result.error === 'Auth session missing!') {
 382 |         return null;
 383 |       }
 384 |       
 385 |       // Reset the flag when we get a new error
 386 |       if (result.error !== 'No active session' && result.error !== 'Auth session missing!') {
 387 |         noSessionErrorLogged = false;
 388 |       }
 389 |       
 390 |       throw new Error(result.error || 'Not authenticated');
 391 |     }
 392 |     
 393 |     // Reset the flag when successful
 394 |     noSessionErrorLogged = false;
 395 |     return result.data as AuthUser;
 396 |   } catch (error) {
 397 |     // Update cache with error
 398 |     userCache = {
 399 |       data: null,
 400 |       timestamp: Date.now(),
 401 |       error: error instanceof Error ? error.message : 'Unknown error'
 402 |     };
 403 |     
 404 |     // Only log if we haven't logged this specific error before
 405 |     if (error instanceof Error && 
 406 |         (error.message === 'No active session' || error.message === 'Auth session missing!') && 
 407 |         !noSessionErrorLogged) {
 408 |       console.error('Error getting current user:', error);
 409 |       noSessionErrorLogged = true;
 410 |       return null; // Return null instead of throwing for session-related errors
 411 |     } else if (!(error instanceof Error) || 
 412 |               (error.message !== 'No active session' && error.message !== 'Auth session missing!')) {
 413 |       // Always log other types of errors
 414 |       console.error('Error getting current user:', error);
 415 |     }
 416 |     
 417 |     // Only throw for errors other than session-related errors
 418 |     if (error instanceof Error && 
 419 |         (error.message === 'No active session' || error.message === 'Auth session missing!')) {
 420 |       return null;
 421 |     }
 422 |     
 423 |     throw new Error('Failed to get current user');
 424 |   }
 425 | } 

```

`/workspaces/automai/src/app/actions/hosts.ts`:

```ts
   1 | 'use server';
   2 | 
   3 | import db from '@/lib/supabase/db';
   4 | import { Host } from '@/types/hosts';
   5 | 
   6 | export interface HostFilter {
   7 |   status?: string;
   8 | }
   9 | 
  10 | export async function getHosts(filter?: HostFilter): Promise<{ success: boolean; error?: string; data?: Host[] }> {
  11 |   try {
  12 |     const where: Record<string, any> = {};
  13 |     
  14 |     if (filter?.status) {
  15 |       where.status = filter.status;
  16 |     }
  17 |     
  18 |     const data = await db.host.findMany({
  19 |       where,
  20 |       orderBy: { created_at: 'desc' }
  21 |     });
  22 |     
  23 |     return { success: true, data };
  24 |   } catch (error: any) {
  25 |     console.error('Error in getHosts:', error);
  26 |     return { success: false, error: error.message || 'Failed to fetch hosts' };
  27 |   }
  28 | }
  29 | 
  30 | export async function getHost(id: string): Promise<{ success: boolean; error?: string; data?: Host }> {
  31 |   try {
  32 |     const data = await db.host.findUnique({
  33 |       where: { id }
  34 |     });
  35 |     
  36 |     if (!data) {
  37 |       return { success: false, error: 'Host not found' };
  38 |     }
  39 |     
  40 |     return { success: true, data };
  41 |   } catch (error: any) {
  42 |     console.error('Error in getHost:', error);
  43 |     return { success: false, error: error.message || 'Failed to fetch host' };
  44 |   }
  45 | }
  46 | 
  47 | export async function addHost(data: Omit<Host, 'id'>): Promise<{ success: boolean; error?: string; data?: Host }> {
  48 |   try {
  49 |     const newHost = await db.host.create({
  50 |       data
  51 |     });
  52 |     
  53 |     return { success: true, data: newHost };
  54 |   } catch (error: any) {
  55 |     console.error('Error in addHost:', error);
  56 |     return { success: false, error: error.message || 'Failed to add host' };
  57 |   }
  58 | }
  59 | 
  60 | export async function updateHost(id: string, updates: Partial<Omit<Host, 'id'>>): Promise<{ success: boolean; error?: string; data?: Host }> {
  61 |   try {
  62 |     const data = await db.host.update({
  63 |       where: { id },
  64 |       data: updates
  65 |     });
  66 |     
  67 |     return { success: true, data };
  68 |   } catch (error: any) {
  69 |     console.error('Error in updateHost:', error);
  70 |     return { success: false, error: error.message || 'Failed to update host' };
  71 |   }
  72 | }
  73 | 
  74 | export async function deleteHost(id: string): Promise<{ success: boolean; error?: string }> {
  75 |   try {
  76 |     await db.host.delete({
  77 |       where: { id }
  78 |     });
  79 |     
  80 |     return { success: true };
  81 |   } catch (error: any) {
  82 |     console.error('Error in deleteHost:', error);
  83 |     return { success: false, error: error.message || 'Failed to delete host' };
  84 |   }
  85 | }
  86 | 
  87 | export async function testHostConnection(id: string): Promise<{ success: boolean; error?: string; message?: string }> {
  88 |   try {
  89 |     await db.host.update({
  90 |       where: { id },
  91 |       data: { last_connection_test: new Date().toISOString() }
  92 |     });
  93 |     
  94 |     // In a real application, you would actually test the connection here
  95 |     // For now, we'll just simulate a successful connection
  96 |     return { success: true, message: 'Connection successful' };
  97 |   } catch (error: any) {
  98 |     console.error('Error in testHostConnection:', error);
  99 |     return { success: false, error: error.message || 'Failed to test connection' };
 100 |   }
 101 | }
 102 | 
 103 | export async function testAllHosts(): Promise<{ success: boolean; error?: string; results?: Array<{ id: string; success: boolean; message?: string }> }> {
 104 |   try {
 105 |     const hostsResult = await getHosts();
 106 |     
 107 |     if (!hostsResult.success) {
 108 |       return { success: false, error: hostsResult.error };
 109 |     }
 110 |     
 111 |     const hosts = hostsResult.data || [];
 112 |     const results = await Promise.all(
 113 |       hosts.map(async (host) => {
 114 |         const result = await testHostConnection(host.id);
 115 |         return { id: host.id, success: result.success, message: result.message };
 116 |       })
 117 |     );
 118 | 
 119 |     return {
 120 |       success: true,
 121 |       results
 122 |     };
 123 |   } catch (error: any) {
 124 |     console.error('Error in testAllHosts:', error);
 125 |     return { success: false, error: error.message || 'Failed to test all hosts' };
 126 |   }
 127 | }

```

`/workspaces/automai/src/app/actions/index.ts`:

```ts
   1 | export * from './auth';
   2 | export * from './git-providers';
   3 | export * from './hosts';
   4 | export * from './profile';
   5 | export * from './repositories';
   6 | export * from './tenants';
   7 | export * from './user'; 

```

`/workspaces/automai/src/app/actions/tenants.ts`:

```ts
   1 | 'use server';
   2 | 
   3 | import db from '@/lib/supabase/db';
   4 | import { supabaseAuth } from '@/lib/supabase/auth';
   5 | import { cookies } from 'next/headers';
   6 | import { createClient } from '@/lib/supabase/server';
   7 | 
   8 | interface Tenant {
   9 |   id: string;
  10 |   name: string;
  11 |   created_at: string;
  12 |   updated_at: string;
  13 | }
  14 | 
  15 | export async function getTenants(userId: string): Promise<{ success: boolean; error?: string; data?: Tenant[] }> {
  16 |   try {
  17 |     // First, get the user to check which tenant they belong to
  18 |     const user = await supabaseAuth.getUser();
  19 |     
  20 |     if (!user.success || !user.data) {
  21 |       return { success: false, error: 'User not found' };
  22 |     }
  23 |     
  24 |     // Get the tenant_id from user metadata
  25 |     const tenantId = user.data.tenant_id;
  26 |     console.log('getTenants: User tenant_id from metadata:', tenantId);
  27 |     
  28 |     // Import the admin client for elevated permissions
  29 |     const { createClient: createAdminClient } = await import('@/lib/supabase/admin');
  30 |     const adminClient = createAdminClient();
  31 |     
  32 |     if (!tenantId) {
  33 |       console.log('getTenants: No tenant_id in metadata, getting all tenants with admin client');
  34 |       // If no tenant_id in metadata, get all tenants (or default) using admin client
  35 |       const { data, error } = await adminClient
  36 |         .from('tenants')
  37 |         .select('*')
  38 |         .order('created_at', { ascending: false });
  39 |       
  40 |       if (error) {
  41 |         console.error('getTenants: Error fetching all tenants with admin client:', error);
  42 |         return { success: false, error: error.message };
  43 |       }
  44 |       
  45 |       if (!data || data.length === 0) {
  46 |         // No tenants found, create a default one using admin client
  47 |         console.log('getTenants: No tenants found, creating default tenant with admin client');
  48 |         try {
  49 |           const { data: defaultTenant, error: createError } = await adminClient
  50 |             .from('tenants')
  51 |             .insert({
  52 |               id: 'default',
  53 |               name: 'Default',
  54 |               plan: 'free',
  55 |               created_at: new Date().toISOString(),
  56 |               updated_at: new Date().toISOString()
  57 |             })
  58 |             .select()
  59 |             .single();
  60 |           
  61 |           if (createError) {
  62 |             console.error('getTenants: Error creating default tenant with admin client:', createError);
  63 |             return { success: false, error: 'Failed to create default tenant: ' + createError.message };
  64 |           }
  65 |           
  66 |           return { success: true, data: [defaultTenant] };
  67 |         } catch (createError: any) {
  68 |           console.error('getTenants: Exception creating default tenant:', createError);
  69 |           return { success: false, error: 'Failed to create default tenant: ' + createError.message };
  70 |         }
  71 |       }
  72 |       
  73 |       return { success: true, data };
  74 |     }
  75 |     
  76 |     // Get the specific tenant using admin client
  77 |     console.log('getTenants: Getting specific tenant by ID using admin client:', tenantId);
  78 |     const { data: tenant, error: tenantError } = await adminClient
  79 |       .from('tenants')
  80 |       .select('*')
  81 |       .eq('id', tenantId)
  82 |       .single();
  83 |     
  84 |     if (tenantError && tenantError.code !== 'PGRST116') {
  85 |       console.error('getTenants: Error fetching tenant with admin client:', tenantError);
  86 |       
  87 |       // If there's a real error (not just "no rows returned"), try to fetch all tenants
  88 |       const { data: allTenants, error: allError } = await adminClient
  89 |         .from('tenants')
  90 |         .select('*')
  91 |         .order('created_at', { ascending: false });
  92 |         
  93 |       if (allError) {
  94 |         console.error('getTenants: Error fetching all tenants after tenant error:', allError);
  95 |         return { success: false, error: 'Failed to fetch tenants: ' + allError.message };
  96 |       }
  97 |       
  98 |       return { success: true, data: allTenants || [] };
  99 |     }
 100 |     
 101 |     if (!tenant) {
 102 |       console.log('getTenants: Tenant not found, creating it using ID with admin client');
 103 |       // Tenant not found, create it using the ID with admin client
 104 |       try {
 105 |         const { data: newTenant, error: createError } = await adminClient
 106 |           .from('tenants')
 107 |           .insert({
 108 |             id: tenantId,
 109 |             name: tenantId.toLowerCase(),
 110 |             plan: 'free',
 111 |             created_at: new Date().toISOString(),
 112 |             updated_at: new Date().toISOString()
 113 |           })
 114 |           .select()
 115 |           .single();
 116 |         
 117 |         if (createError) {
 118 |           console.error('getTenants: Failed to create missing tenant with admin client:', createError);
 119 |           
 120 |           // If tenant creation fails, fall back to getting all tenants
 121 |           console.log('getTenants: Falling back to getting all tenants with admin client');
 122 |           const { data: allTenants, error: allError } = await adminClient
 123 |             .from('tenants')
 124 |             .select('*')
 125 |             .order('created_at', { ascending: false });
 126 |           
 127 |           if (allError) {
 128 |             console.error('getTenants: Error fetching all tenants after create failure:', allError);
 129 |             return { success: false, error: 'Failed to create tenant and fetch alternatives: ' + allError.message };
 130 |           }
 131 |           
 132 |           return { success: true, data: allTenants || [] };
 133 |         }
 134 |         
 135 |         console.log('getTenants: Successfully created missing tenant with admin client:', newTenant);
 136 |         return { success: true, data: [newTenant] };
 137 |       } catch (createError: any) {
 138 |         console.error('getTenants: Exception creating missing tenant:', createError);
 139 |         
 140 |         // If tenant creation fails with exception, fall back to getting all tenants
 141 |         console.log('getTenants: Falling back to getting all tenants after exception');
 142 |         const { data: allTenants, error: allError } = await adminClient
 143 |           .from('tenants')
 144 |           .select('*')
 145 |           .order('created_at', { ascending: false });
 146 |         
 147 |         if (allError) {
 148 |           console.error('getTenants: Error fetching all tenants after exception:', allError);
 149 |           return { success: false, error: 'Failed to create tenant and fetch alternatives: ' + createError.message };
 150 |         }
 151 |         
 152 |         return { success: true, data: allTenants || [] };
 153 |       }
 154 |     }
 155 |     
 156 |     console.log('getTenants: Found tenant with admin client:', tenant);
 157 |     // Return the tenant as an array
 158 |     return { success: true, data: [tenant] };
 159 |   } catch (error: any) {
 160 |     console.error('Error in getTenants:', error);
 161 |     return { success: false, error: error.message || 'Failed to fetch tenants' };
 162 |   }
 163 | }
 164 | 
 165 | export async function switchTenant(tenantName: string): Promise<{ success: boolean; error?: string }> {
 166 |   try {
 167 |     console.log('switchTenant: Switching to tenant:', tenantName);
 168 |     
 169 |     // Update the user profile with tenant_name only
 170 |     const result = await supabaseAuth.updateProfile({ 
 171 |       tenant_name: tenantName
 172 |     });
 173 |     
 174 |     return { 
 175 |       success: result.success, 
 176 |       error: result.error || undefined 
 177 |     };
 178 |   } catch (error: any) {
 179 |     console.error('Error switching tenant:', error);
 180 |     return { success: false, error: error.message || 'Failed to switch tenant' };
 181 |   }
 182 | }
 183 | 
 184 | /**
 185 |  * Directly check if a specific tenant exists by ID
 186 |  * This function is for debugging purposes
 187 |  */
 188 | export async function checkTenantExists(tenantId: string): Promise<{ 
 189 |   exists: boolean; 
 190 |   tenant?: any; 
 191 |   error?: string;
 192 |   rawQuery?: any;
 193 | }> {
 194 |   try {
 195 |     console.log('Directly checking if tenant exists with ID:', tenantId);
 196 |     
 197 |     // First, try using the db.tenant.findUnique method
 198 |     const tenant = await db.tenant.findUnique({
 199 |       where: { id: tenantId }
 200 |     });
 201 |     
 202 |     if (tenant) {
 203 |       console.log('Found tenant using findUnique:', tenant);
 204 |       return { exists: true, tenant };
 205 |     }
 206 |     
 207 |     // If that fails, try a direct query with admin permissions
 208 |     console.log('Tenant not found with findUnique, trying direct query with admin client...');
 209 |     
 210 |     // Import the admin client for elevated permissions
 211 |     const { createClient: createAdminClient } = await import('@/lib/supabase/admin');
 212 |     const adminClient = createAdminClient();
 213 |     
 214 |     // Log the raw query details for debugging
 215 |     console.log(`Executing raw query with admin privileges: SELECT * FROM tenants WHERE id = '${tenantId}'`);
 216 |     
 217 |     // Try an exact match with admin client
 218 |     const { data: exactMatch, error: exactError } = await adminClient
 219 |       .from('tenants')
 220 |       .select('*')
 221 |       .eq('id', tenantId);
 222 |     
 223 |     if (exactError) {
 224 |       console.error('Error with exact query using admin client:', exactError);
 225 |       return { exists: false, error: exactError.message, rawQuery: { method: 'exact', error: exactError } };
 226 |     }
 227 |     
 228 |     if (exactMatch && exactMatch.length > 0) {
 229 |       console.log('Found tenant with exact query using admin client:', exactMatch);
 230 |       return { exists: true, tenant: exactMatch[0], rawQuery: { method: 'exact', results: exactMatch } };
 231 |     }
 232 |     
 233 |     // Try a case-insensitive search with admin client
 234 |     const { data: iexactMatch, error: iexactError } = await adminClient
 235 |       .from('tenants')
 236 |       .select('*')
 237 |       .ilike('id', tenantId);
 238 |     
 239 |     if (iexactError) {
 240 |       console.error('Error with case-insensitive query using admin client:', iexactError);
 241 |       return { 
 242 |         exists: false, 
 243 |         error: iexactError.message, 
 244 |         rawQuery: { method: 'ilike', error: iexactError } 
 245 |       };
 246 |     }
 247 |     
 248 |     if (iexactMatch && iexactMatch.length > 0) {
 249 |       console.log('Found tenant with case-insensitive query using admin client:', iexactMatch);
 250 |       return { 
 251 |         exists: true, 
 252 |         tenant: iexactMatch[0], 
 253 |         rawQuery: { method: 'ilike', results: iexactMatch } 
 254 |       };
 255 |     }
 256 |     
 257 |     // Try a broader search to see all tenants using admin client
 258 |     const { data: allTenants, error: allError } = await adminClient
 259 |       .from('tenants')
 260 |       .select('*')
 261 |       .limit(10);
 262 |     
 263 |     if (allError) {
 264 |       console.error('Error fetching all tenants using admin client:', allError);
 265 |       return { 
 266 |         exists: false, 
 267 |         error: allError.message, 
 268 |         rawQuery: { method: 'all', error: allError } 
 269 |       };
 270 |     }
 271 |     
 272 |     console.log('All tenants in database (first 10) using admin client:', allTenants);
 273 |     
 274 |     // Check if the table exists
 275 |     const { data: tableInfo, error: tableError } = await adminClient
 276 |       .from('information_schema.tables')
 277 |       .select('table_name')
 278 |       .eq('table_name', 'tenants')
 279 |       .limit(1);
 280 |     
 281 |     if (tableError) {
 282 |       console.error('Error checking if tenants table exists:', tableError);
 283 |       return {
 284 |         exists: false,
 285 |         error: 'Error checking tenants table: ' + tableError.message,
 286 |         rawQuery: { table_check: { error: tableError } }
 287 |       };
 288 |     }
 289 |     
 290 |     if (!tableInfo || tableInfo.length === 0) {
 291 |       return {
 292 |         exists: false,
 293 |         error: 'The tenants table does not exist in the database',
 294 |         rawQuery: { table_check: { exists: false } }
 295 |       };
 296 |     }
 297 |     
 298 |     return { 
 299 |       exists: false, 
 300 |       error: 'Tenant not found in the database using admin privileges', 
 301 |       rawQuery: { method: 'all', results: allTenants, table_exists: true } 
 302 |     };
 303 |   } catch (error: any) {
 304 |     console.error('Error checking if tenant exists:', error);
 305 |     return { 
 306 |       exists: false, 
 307 |       error: error.message || 'Failed to check if tenant exists',
 308 |       rawQuery: { error: String(error) }
 309 |     };
 310 |   }
 311 | } 

```

`/workspaces/automai/src/app/actions/git-providers.ts`:

```ts
   1 | 'use server';
   2 | 
   3 | import db from '@/lib/supabase/db';
   4 | import { GitProvider } from '@/types/repositories';
   5 | import { z } from 'zod';
   6 | import { supabaseAuth } from '@/lib/supabase/auth';
   7 | 
   8 | // Schema for testing a connection
   9 | const testConnectionSchema = z.object({
  10 |   type: z.enum(['github', 'gitlab', 'gitea'] as const, {
  11 |     required_error: 'Provider type is required',
  12 |   }),
  13 |   serverUrl: z.string().url('Invalid URL').optional(),
  14 |   token: z.string({
  15 |     required_error: 'Access token is required',
  16 |   }),
  17 | });
  18 | 
  19 | type TestConnectionInput = z.infer<typeof testConnectionSchema>;
  20 | 
  21 | // Schema for creating a git provider
  22 | const gitProviderCreateSchema = z.object({
  23 |   type: z.enum(['github', 'gitlab', 'gitea']),
  24 |   displayName: z.string().min(2, 'Display name must be at least 2 characters'),
  25 |   serverUrl: z.string().url('Invalid URL').optional(),
  26 |   token: z.string().optional(),
  27 | });
  28 | 
  29 | type GitProviderCreateInput = z.infer<typeof gitProviderCreateSchema>;
  30 | 
  31 | // Helper function to get the current user
  32 | async function getCurrentUser() {
  33 |   const result = await supabaseAuth.getUser();
  34 |   
  35 |   if (!result.success || !result.data) {
  36 |     return null;
  37 |   }
  38 |   
  39 |   return result.data;
  40 | }
  41 | 
  42 | /**
  43 |  * Test a connection to a git provider
  44 |  */
  45 | export async function testGitProviderConnection(data: TestConnectionInput): Promise<{ success: boolean; error?: string; message?: string }> {
  46 |   try {
  47 |     // Validate input data
  48 |     const validatedData = testConnectionSchema.parse(data);
  49 |     
  50 |     // Test connection with timeout
  51 |     const controller = new AbortController();
  52 |     const timeout = setTimeout(() => controller.abort(), 5000);
  53 | 
  54 |     const baseUrl =
  55 |       validatedData.type === 'gitea'
  56 |         ? validatedData.serverUrl
  57 |         : validatedData.type === 'github'
  58 |           ? 'https://api.github.com'
  59 |           : 'https://gitlab.com/api/v4';
  60 | 
  61 |     const response = await fetch(`${baseUrl}/api/v1/user`, {
  62 |       headers: {
  63 |         Authorization: `token ${validatedData.token}`,
  64 |       },
  65 |       signal: controller.signal,
  66 |     });
  67 | 
  68 |     clearTimeout(timeout);
  69 | 
  70 |     // Handle response
  71 |     if (!response.ok) {
  72 |       return {
  73 |         success: false,
  74 |         error: 'Connection to git provider failed'
  75 |       };
  76 |     }
  77 | 
  78 |     return {
  79 |       success: true,
  80 |       message: 'Connection test successful'
  81 |     };
  82 |   } catch (error: any) {
  83 |     console.error('Error in testGitProviderConnection:', error);
  84 |     
  85 |     // Handle specific errors
  86 |     if (error instanceof Error) {
  87 |       return {
  88 |         success: false,
  89 |         error: error.name === 'AbortError' ? 'Connection timeout after 5s' : error.message
  90 |       };
  91 |     }
  92 |     
  93 |     return {
  94 |       success: false,
  95 |       error: error.message || 'Connection to git provider failed'
  96 |     };
  97 |   }
  98 | }
  99 | 
 100 | /**
 101 |  * List all git providers for the current user
 102 |  */
 103 | export async function getGitProviders(): Promise<{ success: boolean; error?: string; data?: any[] }> {
 104 |   try {
 105 |     const user = await getCurrentUser();
 106 |     if (!user) {
 107 |       return { success: false, error: 'Unauthorized', data: [] };
 108 |     }
 109 |     
 110 |     const data = await db.gitProvider.findMany({
 111 |       where: { user_id: user.id },
 112 |       orderBy: { created_at: 'desc' }
 113 |     });
 114 |     
 115 |     return { success: true, data };
 116 |   } catch (error: any) {
 117 |     console.error('Error in getGitProviders:', error);
 118 |     return { success: false, error: error.message || 'Failed to fetch git providers' };
 119 |   }
 120 | }
 121 | 
 122 | /**
 123 |  * Get a git provider by ID
 124 |  */
 125 | export async function getGitProvider(id: string): Promise<{ success: boolean; error?: string; data?: any }> {
 126 |   try {
 127 |     const user = await getCurrentUser();
 128 |     if (!user) {
 129 |       return { success: false, error: 'Unauthorized', data: null };
 130 |     }
 131 |     
 132 |     const data = await db.gitProvider.findUnique({
 133 |       where: { 
 134 |         id,
 135 |         user_id: user.id
 136 |       }
 137 |     });
 138 |     
 139 |     if (!data) {
 140 |       return { success: false, error: 'Git provider not found' };
 141 |     }
 142 |     
 143 |     return { success: true, data };
 144 |   } catch (error: any) {
 145 |     console.error('Error in getGitProvider:', error);
 146 |     return { success: false, error: error.message || 'Failed to fetch git provider' };
 147 |   }
 148 | }
 149 | 
 150 | /**
 151 |  * Delete a git provider by ID
 152 |  */
 153 | export async function deleteGitProvider(id: string): Promise<{ success: boolean; error?: string }> {
 154 |   try {
 155 |     const user = await getCurrentUser();
 156 |     if (!user) {
 157 |       return { success: false, error: 'Unauthorized' };
 158 |     }
 159 |     
 160 |     try {
 161 |       await db.gitProvider.delete({
 162 |         where: {
 163 |           id,
 164 |           user_id: user.id
 165 |         }
 166 |       });
 167 |       
 168 |       return { success: true };
 169 |     } catch (error: any) {
 170 |       console.error('Error deleting git provider:', error);
 171 |       return { success: false, error: error.message };
 172 |     }
 173 |   } catch (error: any) {
 174 |     console.error('Error in deleteGitProvider:', error);
 175 |     return { success: false, error: error.message || 'Failed to delete git provider' };
 176 |   }
 177 | }
 178 | 
 179 | export async function addGitProvider(provider: Omit<GitProvider, 'id'>): Promise<GitProvider> {
 180 |   try {
 181 |     const result = await db.gitProvider.create({
 182 |       data: provider
 183 |     });
 184 |     
 185 |     return result;
 186 |   } catch (error) {
 187 |     console.error('Error in addGitProvider:', error);
 188 |     throw error;
 189 |   }
 190 | }
 191 | 
 192 | export async function updateGitProvider(id: string, updates: Partial<GitProvider>): Promise<GitProvider> {
 193 |   try {
 194 |     const result = await db.gitProvider.update({
 195 |       where: { id },
 196 |       data: updates
 197 |     });
 198 |     
 199 |     return result;
 200 |   } catch (error) {
 201 |     console.error('Error in updateGitProvider:', error);
 202 |     throw error;
 203 |   }
 204 | }
 205 | 
 206 | export async function refreshGitProvider(id: string): Promise<GitProvider> {
 207 |   try {
 208 |     const result = await db.gitProvider.update({
 209 |       where: { id },
 210 |       data: { last_synced: new Date().toISOString() }
 211 |     });
 212 |     
 213 |     return result;
 214 |   } catch (error) {
 215 |     console.error('Error in refreshGitProvider:', error);
 216 |     throw error;
 217 |   }
 218 | }
 219 | 
 220 | /**
 221 |  * Handle OAuth callback for git providers
 222 |  */
 223 | export async function handleOAuthCallback(code: string, state: string): Promise<{ success: boolean; error?: string; redirectUrl?: string }> {
 224 |   try {
 225 |     const user = await getCurrentUser();
 226 |     if (!user) {
 227 |       return { success: false, error: 'Unauthorized' };
 228 |     }
 229 |     
 230 |     // Parse the state parameter
 231 |     let stateData;
 232 |     try {
 233 |       stateData = JSON.parse(Buffer.from(state, 'base64').toString('utf-8'));
 234 |     } catch (e) {
 235 |       return { success: false, error: 'Invalid state parameter' };
 236 |     }
 237 |     
 238 |     const { providerId, redirectUri } = stateData;
 239 |     
 240 |     // Get the provider
 241 |     const provider = await db.gitProvider.findUnique({
 242 |       where: {
 243 |         id: providerId,
 244 |         user_id: user.id
 245 |       }
 246 |     });
 247 |     
 248 |     if (!provider) {
 249 |       return { success: false, error: 'Provider not found or not authorized' };
 250 |     }
 251 |     
 252 |     // Update provider with success status
 253 |     try {
 254 |       await db.gitProvider.update({
 255 |         where: { id: providerId },
 256 |         data: { 
 257 |           status: 'connected',
 258 |           last_synced_at: new Date().toISOString()
 259 |         }
 260 |       });
 261 |     } catch (updateError) {
 262 |       return { success: false, error: 'Failed to update provider' };
 263 |     }
 264 |     
 265 |     // Return success with redirect URL
 266 |     return { 
 267 |       success: true, 
 268 |       redirectUrl: `/repositories?provider=${providerId}`
 269 |     };
 270 |   } catch (error: any) {
 271 |     console.error('Error in handleOAuthCallback:', error);
 272 |     return { success: false, error: error.message || 'Failed to process OAuth callback' };
 273 |   }
 274 | }
 275 | 
 276 | /**
 277 |  * Create a new git provider
 278 |  */
 279 | export async function createGitProvider(data: GitProviderCreateInput): Promise<{ success: boolean; error?: string; data?: any; authUrl?: string }> {
 280 |   try {
 281 |     const user = await getCurrentUser();
 282 |     if (!user) {
 283 |       return { success: false, error: 'Unauthorized' };
 284 |     }
 285 |     
 286 |     // Validate input data
 287 |     const validatedData = gitProviderCreateSchema.parse(data);
 288 |     
 289 |     // Create the provider
 290 |     let provider;
 291 |     try {
 292 |       provider = await db.gitProvider.create({
 293 |         data: {
 294 |           type: validatedData.type,
 295 |           display_name: validatedData.displayName,
 296 |           server_url: validatedData.serverUrl,
 297 |           token: validatedData.token,
 298 |           user_id: user.id,
 299 |           status: validatedData.token ? 'connected' : 'pending'
 300 |         }
 301 |       });
 302 |     } catch (createError: any) {
 303 |       console.error('Error creating git provider:', createError);
 304 |       return { success: false, error: createError.message };
 305 |     }
 306 |     
 307 |     // If token is provided, we're done
 308 |     if (validatedData.token) {
 309 |       return { success: true, data: provider };
 310 |     }
 311 |     
 312 |     // Otherwise, generate OAuth URL based on provider type
 313 |     let authUrl = '';
 314 |     const stateData = {
 315 |       providerId: provider.id,
 316 |       redirectUri: `${process.env.NEXT_PUBLIC_APP_URL}/api/git-providers/callback`
 317 |     };
 318 |     const state = Buffer.from(JSON.stringify(stateData)).toString('base64');
 319 |     
 320 |     if (validatedData.type === 'github') {
 321 |       const clientId = process.env.GITHUB_CLIENT_ID;
 322 |       authUrl = `https://github.com/login/oauth/authorize?client_id=${clientId}&scope=repo&state=${state}`;
 323 |     } else if (validatedData.type === 'gitlab') {
 324 |       const clientId = process.env.GITLAB_CLIENT_ID;
 325 |       authUrl = `https://gitlab.com/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(stateData.redirectUri)}&response_type=code&state=${state}&scope=api`;
 326 |     } else {
 327 |       return { success: false, error: 'Unsupported provider type for OAuth' };
 328 |     }
 329 |     
 330 |     return { success: true, data: provider, authUrl };
 331 |   } catch (error: any) {
 332 |     console.error('Error in createGitProvider:', error);
 333 |     
 334 |     if (error instanceof z.ZodError) {
 335 |       return { success: false, error: error.errors[0].message };
 336 |     }
 337 |     
 338 |     return { success: false, error: error.message || 'Failed to create git provider' };
 339 |   }
 340 | } 

```

`/workspaces/automai/src/app/layout.tsx`:

```tsx
   1 | import './globals.css';
   2 | import { Inter } from 'next/font/google';
   3 | import { Metadata } from 'next';
   4 | import { ThemeProviders } from '@/components/providers';
   5 | import { cookies } from 'next/headers';
   6 | 
   7 | const inter = Inter({
   8 |   subsets: ['latin'],
   9 |   display: 'swap',
  10 |   preload: true,
  11 |   fallback: ['system-ui', 'sans-serif'],
  12 |   adjustFontFallback: true,
  13 | });
  14 | 
  15 | export const metadata: Metadata = {
  16 |   title: {
  17 |     default: 'AutomAI',
  18 |     template: '%s | AutomAI',
  19 |   },
  20 |   description: 'Automate your development workflow with AI',
  21 |   icons: {
  22 |     icon: '/favicon.ico',
  23 |   },
  24 | };
  25 | 
  26 | export default async function RootLayout({
  27 |   children,
  28 | }: {
  29 |   children: React.ReactNode;
  30 | }) {
  31 |   // Get theme from cookies for server-side rendering
  32 |   const cookieStore = await cookies();
  33 |   const themeCookie = cookieStore.get('theme');
  34 |   const theme = (themeCookie?.value ?? 'system') as 'light' | 'dark' | 'system';
  35 |   
  36 |   return (
  37 |     <html lang="en" className={inter.className} suppressHydrationWarning>
  38 |       <head>
  39 |         <meta name="theme-color" content="#ffffff" />
  40 |         {/* next-themes will handle theme flashing with suppressHydrationWarning */}
  41 |       </head>
  42 |       <body>
  43 |         <ThemeProviders defaultTheme={theme}>{children}</ThemeProviders>
  44 |       </body>
  45 |     </html>
  46 |   );
  47 | }

```

`/workspaces/automai/src/app/api/fetch-all-repositories/route.ts`:

```ts
   1 | import { NextResponse } from 'next/server';
   2 | import { getRepositories } from '@/app/actions/repositories';
   3 | 
   4 | // GET /api/fetch-all-repositories
   5 | export async function GET(request: Request) {
   6 |   try {
   7 |     // Call the server action to get all repositories
   8 |     const result = await getRepositories();
   9 |     
  10 |     if (!result.success) {
  11 |       return NextResponse.json(
  12 |         { success: false, error: result.error || 'Failed to fetch repositories' },
  13 |         { status: 400 }
  14 |       );
  15 |     }
  16 |     
  17 |     return NextResponse.json(result.data);
  18 |   } catch (error) {
  19 |     console.error('Error in GET /api/fetch-all-repositories:', error);
  20 |     return NextResponse.json(
  21 |       { error: 'Internal server error' },
  22 |       { status: 500 }
  23 |     );
  24 |   }
  25 | }

```

`/workspaces/automai/src/app/api/debug/tenant/[id]/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { checkTenantExists } from '@/app/actions/tenants';
   3 | 
   4 | /**
   5 |  * This is a debugging endpoint to check if a tenant exists
   6 |  * Example: /api/debug/tenant/a317a10a-776a-47de-9347-81806b36a03e
   7 |  */
   8 | export async function GET(
   9 |   request: NextRequest,
  10 |   { params }: { params: { id: string } }
  11 | ) {
  12 |   try {
  13 |     const tenantId = params.id;
  14 |     console.log('Debug API: Checking tenant with ID:', tenantId);
  15 |     
  16 |     // Check if the tenant exists
  17 |     const result = await checkTenantExists(tenantId);
  18 |     
  19 |     // Log the result for server-side debugging
  20 |     console.log('Debug API: Tenant check result:', JSON.stringify(result, null, 2));
  21 |     
  22 |     return NextResponse.json(result);
  23 |   } catch (error) {
  24 |     console.error('Debug API: Error checking tenant:', error);
  25 |     return NextResponse.json(
  26 |       { error: 'Failed to check tenant', details: error instanceof Error ? error.message : String(error) },
  27 |       { status: 500 }
  28 |     );
  29 |   }
  30 | } 

```

`/workspaces/automai/src/app/api/health/route.ts`:

```ts
   1 | import { NextResponse } from 'next/server';
   2 | 
   3 | export async function GET() {
   4 |   return NextResponse.json({ status: 'ok', _timestamp: new Date().toISOString() });
   5 | }

```

`/workspaces/automai/src/app/api/repositories/test-connection/schema.ts`:

```ts
   1 | import { z } from 'zod';
   2 | 
   3 | export const testConnectionSchema = z.object({
   4 |   type: z.enum(['github', 'gitlab', 'gitea'] as const, {
   5 |     requirederror: 'Provider type is required',
   6 |   }),
   7 |   serverUrl: z.string().url('Invalid URL').optional(),
   8 |   token: z.string({
   9 |     requirederror: 'Access token is required',
  10 |   }),
  11 | });

```

`/workspaces/automai/src/app/api/repositories/test-connection/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { testGitProviderConnection } from '@/app/actions/git-providers';
   3 | 
   4 | /**
   5 |  * POST /api/repositories/test-connection
   6 |  * Test a connection to a git provider
   7 |  */
   8 | export async function POST(request: NextRequest) {
   9 |   try {
  10 |     // Parse request body
  11 |     const body = await request.json();
  12 |     
  13 |     // Call the server action to test connection
  14 |     const result = await testGitProviderConnection(body);
  15 |     
  16 |     if (!result.success) {
  17 |       return NextResponse.json(
  18 |         { success: false, error: result.error || 'Failed to test connection' },
  19 |         { status: 400 }
  20 |       );
  21 |     }
  22 |     
  23 |     return NextResponse.json({
  24 |       success: true,
  25 |       message: result.message || 'Connection test successful'
  26 |     });
  27 |   } catch (error) {
  28 |     console.error('Error in POST /api/repositories/test-connection:', error);
  29 |     return NextResponse.json(
  30 |       { error: 'Internal server error' },
  31 |       { status: 500 }
  32 |     );
  33 |   }
  34 | }

```

`/workspaces/automai/src/app/api/repositories/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { 
   3 |   getRepositories, 
   4 |   createRepository 
   5 | } from '@/app/actions/repositories';
   6 | 
   7 | /**
   8 |  * GET /api/repositories
   9 |  * Get all repositories for the current user
  10 |  */
  11 | export async function GET(request: NextRequest) {
  12 |   try {
  13 |     // Get query parameters
  14 |     const url = new URL(request.url);
  15 |     const providerId = url.searchParams.get('providerId');
  16 |     
  17 |     // Call the server action to get repositories
  18 |     const result = await getRepositories(providerId ? { providerId } : undefined);
  19 |     
  20 |     if (!result.success) {
  21 |       return NextResponse.json(
  22 |         { error: result.error || 'Failed to fetch repositories' },
  23 |         { status: 400 }
  24 |       );
  25 |     }
  26 |     
  27 |     return NextResponse.json(result.data);
  28 |   } catch (error) {
  29 |     console.error('Error in GET /api/repositories:', error);
  30 |     return NextResponse.json(
  31 |       { error: 'Internal server error' },
  32 |       { status: 500 }
  33 |     );
  34 |   }
  35 | }
  36 | 
  37 | /**
  38 |  * POST /api/repositories
  39 |  * Create a new repository
  40 |  */
  41 | export async function POST(request: NextRequest) {
  42 |   try {
  43 |     // Parse request body
  44 |     const body = await request.json();
  45 |     
  46 |     // Call the server action to create repository
  47 |     const result = await createRepository(body);
  48 |     
  49 |     if (!result.success) {
  50 |       return NextResponse.json(
  51 |         { error: result.error || 'Failed to create repository' },
  52 |         { status: 400 }
  53 |       );
  54 |     }
  55 |     
  56 |     return NextResponse.json(result.data, { status: 201 });
  57 |   } catch (error) {
  58 |     console.error('Error in POST /api/repositories:', error);
  59 |     return NextResponse.json(
  60 |       { error: 'Internal server error' },
  61 |       { status: 500 }
  62 |     );
  63 |   }
  64 | }

```

`/workspaces/automai/src/app/api/repositories/sync/[id]/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { syncRepository } from '@/app/actions/repositories';
   3 | 
   4 | type Props = {
   5 |   params: { id: string };
   6 | };
   7 | 
   8 | /**
   9 |  * POST /api/repositories/sync/[id]
  10 |  * Sync a repository by ID
  11 |  */
  12 | export async function POST(request: NextRequest, { params }: Props) {
  13 |   try {
  14 |     const { id } = params;
  15 |     
  16 |     // Call the server action to sync repository
  17 |     const result = await syncRepository(id);
  18 |     
  19 |     if (!result.success) {
  20 |       return NextResponse.json(
  21 |         { error: result.error || 'Failed to sync repository' },
  22 |         { status: 400 }
  23 |       );
  24 |     }
  25 |     
  26 |     return NextResponse.json(result.data);
  27 |   } catch (error) {
  28 |     console.error('Error in POST /api/repositories/sync/[id]:', error);
  29 |     return NextResponse.json(
  30 |       { error: 'Internal server error' },
  31 |       { status: 500 }
  32 |     );
  33 |   }
  34 | }

```

`/workspaces/automai/src/app/api/repositories/[id]/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { 
   3 |   getRepository, 
   4 |   updateRepository, 
   5 |   deleteRepository 
   6 | } from '@/app/actions/repositories';
   7 | 
   8 | import { z } from 'zod';
   9 | 
  10 | import db from '@/lib/supabase/db';
  11 | import * as repositoryService from '@/lib/services/repositories';
  12 | 
  13 | // Schema for repository update
  14 | const RepositoryUpdateSchema = z.object({
  15 |   name: z.string().min(1, 'Name is required').optional(),
  16 |   description: z.string().optional(),
  17 |   defaultBranch: z.string().optional(),
  18 |   projectId: z.string().optional().nullable(),
  19 | });
  20 | 
  21 | // Helper to check if user has access to the repository
  22 | async function checkRepositoryAccess(id: string, userId: string) {
  23 |   const repository = await db.repository.findUnique({
  24 |     where: { id },
  25 |     include: {
  26 |       provider: true,
  27 |     },
  28 |   });
  29 | 
  30 |   if (!repository) {
  31 |     return { success: false, message: 'Repository not found', status: 404 };
  32 |   }
  33 | 
  34 |   if (repository.provider.userId !== userId) {
  35 |     return { success: false, message: 'Not authorized to access this repository', status: 403 };
  36 |   }
  37 | 
  38 |   return { success: true, repository };
  39 | }
  40 | 
  41 | type Props = {
  42 |   params: { id: string };
  43 | };
  44 | 
  45 | /**
  46 |  * GET /api/repositories/[id]
  47 |  * Get a repository by ID
  48 |  */
  49 | export async function GET(request: NextRequest, { params }: Props) {
  50 |   try {
  51 |     const { id } = params;
  52 |     
  53 |     // Call the server action to get repository
  54 |     const result = await getRepository(id);
  55 |     
  56 |     if (!result.success) {
  57 |       return NextResponse.json(
  58 |         { error: result.error || 'Failed to fetch repository' },
  59 |         { status: 400 }
  60 |       );
  61 |     }
  62 |     
  63 |     return NextResponse.json(result.data);
  64 |   } catch (error) {
  65 |     console.error('Error in GET /api/repositories/[id]:', error);
  66 |     return NextResponse.json(
  67 |       { error: 'Internal server error' },
  68 |       { status: 500 }
  69 |     );
  70 |   }
  71 | }
  72 | 
  73 | /**
  74 |  * PATCH /api/repositories/[id]
  75 |  * Update a repository by ID
  76 |  */
  77 | export async function PATCH(request: NextRequest, { params }: Props) {
  78 |   try {
  79 |     const { id } = params;
  80 |     
  81 |     // Parse request body
  82 |     const body = await request.json();
  83 |     
  84 |     // Call the server action to update repository
  85 |     const result = await updateRepository(id, body);
  86 |     
  87 |     if (!result.success) {
  88 |       return NextResponse.json(
  89 |         { error: result.error || 'Failed to update repository' },
  90 |         { status: 400 }
  91 |       );
  92 |     }
  93 |     
  94 |     return NextResponse.json(result.data);
  95 |   } catch (error) {
  96 |     console.error('Error in PATCH /api/repositories/[id]:', error);
  97 |     return NextResponse.json(
  98 |       { error: 'Internal server error' },
  99 |       { status: 500 }
 100 |     );
 101 |   }
 102 | }
 103 | 
 104 | /**
 105 |  * DELETE /api/repositories/[id]
 106 |  * Delete a repository by ID
 107 |  */
 108 | export async function DELETE(request: NextRequest, { params }: Props) {
 109 |   try {
 110 |     const { id } = params;
 111 |     
 112 |     // Call the server action to delete repository
 113 |     const result = await deleteRepository(id);
 114 |     
 115 |     if (!result.success) {
 116 |       return NextResponse.json(
 117 |         { error: result.error || 'Failed to delete repository' },
 118 |         { status: 400 }
 119 |       );
 120 |     }
 121 |     
 122 |     return NextResponse.json({ success: true, message: 'Repository deleted successfully' });
 123 |   } catch (error) {
 124 |     console.error('Error in DELETE /api/repositories/[id]:', error);
 125 |     return NextResponse.json(
 126 |       { error: 'Internal server error' },
 127 |       { status: 500 }
 128 |     );
 129 |   }
 130 | }

```

`/workspaces/automai/src/app/api/hosts/test-connection/route.ts`:

```ts
   1 | import { NextResponse } from 'next/server';
   2 | 
   3 | import { testHostConnection } from '@/lib/services/hosts';
   4 | 
   5 | export async function POST(request: Request) {
   6 |   try {
   7 |     const host = await request.json();
   8 |     console.log(`Test connection request for ${host.type} at ${new Date().toISOString()}:`, {
   9 |       ...host,
  10 |       password: '***',
  11 |       username: host.username || host.user || 'not provided',
  12 |     });
  13 | 
  14 |     // Add cache control headers
  15 |     const headers = new Headers();
  16 |     headers.append('Cache-Control', 'no-cache, no-store, must-revalidate');
  17 |     headers.append('Pragma', 'no-cache');
  18 |     headers.append('Expires', '0');
  19 | 
  20 |     // Validate required fields
  21 |     if (!host.ip) {
  22 |       console.log('Validation failed: IP address is required');
  23 |       return NextResponse.json(
  24 |         {
  25 |           success: false,
  26 |           message: 'IP address is required',
  27 |         },
  28 |         { status: 400, headers },
  29 |       );
  30 |     }
  31 | 
  32 |     if (host.type === 'ssh' && !(host.username || host.user)) {
  33 |       console.log('Validation failed: Username is required for SSH connections');
  34 |       return NextResponse.json(
  35 |         {
  36 |           success: false,
  37 |           message: 'Username is required for SSH connections',
  38 |         },
  39 |         { status: 400, headers },
  40 |       );
  41 |     }
  42 | 
  43 |     // Ensure username is properly mapped from either username or user field
  44 |     const connectionData = {
  45 |       type: host.type,
  46 |       ip: host.ip,
  47 |       port: host.port,
  48 |       username: host.username || host.user,
  49 |       password: host.password,
  50 |       hostId: host.hostId,
  51 |     };
  52 | 
  53 |     // Log the exact parameters being passed to testHostConnection
  54 |     console.log('Calling testHostConnection with:', {
  55 |       type: connectionData.type,
  56 |       ip: connectionData.ip,
  57 |       port: connectionData.port,
  58 |       username: connectionData.username,
  59 |       hostId: connectionData.hostId,
  60 |       // Don't log password
  61 |     });
  62 | 
  63 |     const result = await testHostConnection(connectionData);
  64 |     console.log(`Test connection result at ${new Date().toISOString()}:`, result);
  65 | 
  66 |     // Log Windows detection result
  67 |     if (result.is_windows) {
  68 |       console.log(`[Windows Detection] 🪟 Host ${host.ip} detected as Windows in API response`);
  69 |     } else {
  70 |       console.log(`[Windows Detection] Host ${host.ip} not detected as Windows in API response`);
  71 |     }
  72 | 
  73 |     // Log the status that will be set in the database
  74 |     if (host.hostId) {
  75 |       console.log(
  76 |         `Host ${host.hostId} status updated to: ${result.success ? 'connected' : 'failed'}, is_windows: ${result.is_windows || false}`,
  77 |       );
  78 |     }
  79 | 
  80 |     return NextResponse.json(result, { headers });
  81 |   } catch (error) {
  82 |     console.error(
  83 |       `Error in POST /api/hosts/test-connection at ${new Date().toISOString()}:`,
  84 |       error,
  85 |     );
  86 |     return NextResponse.json(
  87 |       {
  88 |         success: false,
  89 |         message: error instanceof Error ? error.message : 'Failed to test connection',
  90 |       },
  91 |       { status: 500 },
  92 |     );
  93 |   }
  94 | }

```

`/workspaces/automai/src/app/api/hosts/test-all/route.ts`:

```ts
   1 | import { NextResponse } from 'next/server';
   2 | 
   3 | import { getHosts, testHostConnection } from '@/lib/services/hosts';
   4 | 
   5 | export async function GET() {
   6 |   try {
   7 |     // Get all hosts
   8 |     const hosts = await getHosts();
   9 |     console.log(`Testing connections for ${hosts.length} hosts at ${new Date().toISOString()}`);
  10 | 
  11 |     // Add cache control headers
  12 |     const headers = new Headers();
  13 |     headers.append('Cache-Control', 'no-cache, no-store, must-revalidate');
  14 |     headers.append('Pragma', 'no-cache');
  15 |     headers.append('Expires', '0');
  16 | 
  17 |     // Test connection for each host
  18 |     const results = await Promise.all(
  19 |       hosts.map(async (host) => {
  20 |         try {
  21 |           // Validate required fields
  22 |           if (!host.ip) {
  23 |             return {
  24 |               id: host.id,
  25 |               name: host.name,
  26 |               success: false,
  27 |               message: 'IP address is required',
  28 |             };
  29 |           }
  30 | 
  31 |           if (host.type === 'ssh' && !host.user) {
  32 |             return {
  33 |               id: host.id,
  34 |               name: host.name,
  35 |               success: false,
  36 |               message: 'Username is required for SSH connections',
  37 |             };
  38 |           }
  39 | 
  40 |           const result = await testHostConnection({
  41 |             type: host.type,
  42 |             ip: host.ip,
  43 |             port: host.port,
  44 |             username: host.user,
  45 |             password: host.password,
  46 |             hostId: host.id,
  47 |           });
  48 | 
  49 |           return {
  50 |             id: host.id,
  51 |             name: host.name,
  52 |             success: result.success,
  53 |             message: result.message,
  54 |           };
  55 |         } catch (error) {
  56 |           console.error(`Error testing connection for host ${host.id}:`, error);
  57 |           return {
  58 |             id: host.id,
  59 |             name: host.name,
  60 |             success: false,
  61 |             message: error instanceof Error ? error.message : 'Unknown error',
  62 |           };
  63 |         }
  64 |       }),
  65 |     );
  66 | 
  67 |     console.log(
  68 |       `All connection tests completed: ${results.length} hosts tested at ${new Date().toISOString()}`,
  69 |     );
  70 |     console.log(
  71 |       `Results summary: ${results.filter((r) => r.success).length} successful, ${results.filter((r) => !r.success).length} failed`,
  72 |     );
  73 | 
  74 |     return NextResponse.json(
  75 |       {
  76 |         success: true,
  77 |         results,
  78 |       },
  79 |       { headers },
  80 |     );
  81 |   } catch (error) {
  82 |     console.error('Error in GET /api/hosts/test-all:', error);
  83 |     return NextResponse.json(
  84 |       {
  85 |         success: false,
  86 |         message: error instanceof Error ? error.message : 'Failed to test connections',
  87 |         results: [],
  88 |       },
  89 |       { status: 500 },
  90 |     );
  91 |   }
  92 | }

```

`/workspaces/automai/src/app/api/hosts/verify-fingerprint/route.ts`:

```ts
   1 | import { NextResponse } from 'next/server';
   2 | import { Client } from 'ssh2';
   3 | 
   4 | export async function POST(request: Request) {
   5 |   try {
   6 |     const data = await request.json();
   7 |     const { host, port = 22 } = data;
   8 | 
   9 |     if (!host) {
  10 |       return NextResponse.json({ success: false, message: 'Host is required' }, { status: 400 });
  11 |     }
  12 | 
  13 |     // Get SSH fingerprint
  14 |     return new Promise<Response>((resolve) => {
  15 |       const conn = new Client();
  16 |       let resolved = false;
  17 | 
  18 |       // Set a timeout for the connection attempt
  19 |       const timeout = setTimeout(() => {
  20 |         if (!resolved) {
  21 |           conn.end();
  22 |           resolved = true;
  23 |           resolve(
  24 |             NextResponse.json({ success: false, message: 'Connection timed out' }, { status: 408 }),
  25 |           );
  26 |         }
  27 |       }, 5000);
  28 | 
  29 |       conn.on('handshake', (handshake) => {
  30 |         clearTimeout(timeout);
  31 |         if (!resolved) {
  32 |           conn.end();
  33 |           resolved = true;
  34 |           resolve(
  35 |             NextResponse.json({
  36 |               success: true,
  37 |               fingerprint: handshake.hashAlgo + ' ' + handshake.fingerprint,
  38 |             }),
  39 |           );
  40 |         }
  41 |       });
  42 | 
  43 |       conn.on('error', (err) => {
  44 |         clearTimeout(timeout);
  45 |         if (!resolved) {
  46 |           resolved = true;
  47 |           resolve(NextResponse.json({ success: false, message: err.message }, { status: 500 }));
  48 |         }
  49 |       });
  50 | 
  51 |       // Attempt connection to get fingerprint
  52 |       conn.connect({
  53 |         host,
  54 |         port,
  55 |         username: 'dummy', // Not used for fingerprint verification
  56 |         password: 'dummy', // Not used for fingerprint verification
  57 |         readyTimeout: 5000,
  58 |         hostVerifier: () => true, // Accept any host key
  59 |       });
  60 |     });
  61 |   } catch (error) {
  62 |     console.error('Error verifying fingerprint:', error);
  63 |     return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });
  64 |   }
  65 | }

```

`/workspaces/automai/src/app/api/hosts/route.ts`:

```ts
   1 | import { NextResponse } from 'next/server';
   2 | 
   3 | import { getHosts, createHost, deleteHost } from '@/lib/services/hosts';
   4 | 
   5 | export async function GET() {
   6 |   try {
   7 |     console.log('Fetching hosts from database...');
   8 | 
   9 |     // Add a cache-control header to the response
  10 |     const headers = new Headers();
  11 |     headers.append('Cache-Control', 'no-cache, no-store, must-revalidate');
  12 |     headers.append('Pragma', 'no-cache');
  13 |     headers.append('Expires', '0');
  14 | 
  15 |     const hosts = await getHosts();
  16 |     console.log(`Hosts fetched successfully: ${hosts.length} hosts found`);
  17 | 
  18 |     // Add timestamps to help with debugging
  19 |     const response = NextResponse.json(hosts, { headers });
  20 |     console.log(`GET /api/hosts returning ${hosts.length} hosts at ${new Date().toISOString()}`);
  21 | 
  22 |     return response;
  23 |   } catch (error) {
  24 |     console.error('Error in GET /api/hosts:', error);
  25 |     return NextResponse.json({ error: 'Failed to fetch hosts' }, { status: 500 });
  26 |   }
  27 | }
  28 | 
  29 | /**
  30 |  * POST /api/hosts
  31 |  * Creates a new host
  32 |  *
  33 |  * Required fields:
  34 |  * - name: string - Host name
  35 |  * - type: string - Host type (ssh, docker, portainer)
  36 |  * - ip: string - Host IP address
  37 |  *
  38 |  * For SSH connections, also required:
  39 |  * - user: string - SSH username
  40 |  * - password: string - SSH password
  41 |  *
  42 |  * Optional fields:
  43 |  * - description: string - Host description
  44 |  * - port: number - Host port (defaults to 22 for SSH)
  45 |  * - status: string - Initial status (defaults to 'pending')
  46 |  *
  47 |  * @returns The created host
  48 |  */
  49 | export async function POST(request: Request) {
  50 |   try {
  51 |     const data = await request.json();
  52 |     console.log('Creating host with data:', data);
  53 | 
  54 |     // Validate required fields
  55 |     if (!data.name || !data.type || !data.ip) {
  56 |       return NextResponse.json(
  57 |         { success: false, message: 'Missing required fields: name, type, and ip are required' },
  58 |         { status: 400 },
  59 |       );
  60 |     }
  61 | 
  62 |     if (data.type === 'ssh' && (!data.user || !data.password)) {
  63 |       return NextResponse.json(
  64 |         { success: false, message: 'SSH connections require user and password' },
  65 |         { status: 400 },
  66 |       );
  67 |     }
  68 | 
  69 |     const host = await createHost({
  70 |       ...data,
  71 |     });
  72 |     console.log('Host created successfully:', host);
  73 | 
  74 |     return NextResponse.json(host);
  75 |   } catch (error) {
  76 |     console.error('Error creating host:', error);
  77 |     return NextResponse.json(
  78 |       {
  79 |         success: false,
  80 |         error: 'Failed to create host',
  81 |         details: error instanceof Error ? error.message : String(error),
  82 |       },
  83 |       { status: 500 },
  84 |     );
  85 |   }
  86 | }
  87 | 
  88 | export async function DELETE(request: Request) {
  89 |   try {
  90 |     const id = request.url.split('/').pop();
  91 |     if (!id) {
  92 |       return NextResponse.json({ error: 'Host ID is required' }, { status: 400 });
  93 |     }
  94 |     await deleteHost(id);
  95 |     return NextResponse.json({ success: true });
  96 |   } catch (error) {
  97 |     console.error('Error in DELETE /api/hosts:', error);
  98 |     return NextResponse.json({ error: 'Failed to delete host' }, { status: 500 });
  99 |   }
 100 | }

```

`/workspaces/automai/src/app/api/hosts/byName/[name]/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | 
   3 | import db from '@/lib/supabase/db';
   4 | 
   5 | export async function GET(request: NextRequest, context: { params: { name: string } }) {
   6 |   try {
   7 |     console.log('API route called: /api/hosts/byName/[name]');
   8 |     const { name } = context.params;
   9 | 
  10 |     if (!name) {
  11 |       console.log('No name provided in params');
  12 |       return NextResponse.json({ success: false, error: 'Host name is required' }, { status: 400 });
  13 |     }
  14 | 
  15 |     console.log(`Looking up host by name: ${name}`);
  16 | 
  17 |     // Try to find the host with case-insensitive search
  18 |     const host = await db.host.findFirst({
  19 |       where: {
  20 |         name: {
  21 |           equals: name,
  22 |           mode: 'insensitive',
  23 |         },
  24 |       },
  25 |     });
  26 | 
  27 |     console.log('Database query completed');
  28 | 
  29 |     if (!host) {
  30 |       console.log(`Host not found with name: ${name}`);
  31 | 
  32 |       // For debugging, create a mock host
  33 |       const mockHost = {
  34 |         id: 'mock-id-' + Date.now(),
  35 |         name: name,
  36 |         ip: '192.168.1.100',
  37 |         type: 'ssh',
  38 |         port: 22,
  39 |         username: 'admin',
  40 |         password: 'password123',
  41 |         createdAt: new Date(),
  42 |         updatedAt: new Date(),
  43 |       };
  44 | 
  45 |       console.log('Returning mock host for debugging:', mockHost);
  46 |       return NextResponse.json({ success: true, data: mockHost });
  47 | 
  48 |       // Uncomment this for production
  49 |       // return NextResponse.json(
  50 |       //   { success: false, error: 'Host not found' },
  51 |       //   { status: 404 }
  52 |       // );
  53 |     }
  54 | 
  55 |     console.log(`Host found: ${host.name} (${host.id})`);
  56 |     return NextResponse.json({ success: true, data: host });
  57 |   } catch (error) {
  58 |     console.error('Error fetching host by name:', error);
  59 |     return NextResponse.json({ success: false, error: 'Failed to fetch host' }, { status: 500 });
  60 |   }
  61 | }

```

`/workspaces/automai/src/app/api/hosts/[id]/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | /* eslint-disable unused-imports/no-unused-vars */
   3 | 
   4 | import { getHostById, deleteHost } from '@/lib/services';
   5 | 
   6 | export async function GET(request: NextRequest, context: { params: Promise<{ id: string }> }) {
   7 |   try {
   8 |     const { id } = await context.params;
   9 |     const host = await getHostById(id);
  10 | 
  11 |     if (!host) {
  12 |       return NextResponse.json({ success: false, error: 'Host not found' }, { status: 404 });
  13 |     }
  14 | 
  15 |     return NextResponse.json({ success: true, _data: host });
  16 |   } catch (error) {
  17 |     console.error('Error fetching host:', error);
  18 |     return NextResponse.json({ success: false, error: 'Failed to fetch host' }, { status: 500 });
  19 |   }
  20 | }
  21 | 
  22 | export async function DELETE(request: NextRequest, context: { params: Promise<{ id: string }> }) {
  23 |   try {
  24 |     const { id } = await context.params;
  25 |     await deleteHost(id);
  26 | 
  27 |     return NextResponse.json({
  28 |       success: true,
  29 |       message: 'Host deleted successfully',
  30 |     });
  31 |   } catch (error) {
  32 |     console.error('Error deleting host:', error);
  33 |     return NextResponse.json({ success: false, error: 'Failed to delete host' }, { status: 500 });
  34 |   }
  35 | }

```

`/workspaces/automai/src/app/api/usecases/route.ts`:

```ts
   1 | import { NextResponse } from 'next/server';
   2 | import { getSession } from '@/lib/supabase/auth';
   3 | import db from '@/lib/supabase/db';
   4 | 
   5 | // Find the next available number for a prefix
   6 | async function findNextNumber(prefix: string) {
   7 |   const useCases = await db.useCase.findMany({
   8 |     where: {
   9 |       shortId: {
  10 |         startsWith: `${prefix}-`,
  11 |       },
  12 |     },
  13 |     orderBy: {
  14 |       shortId: 'desc',
  15 |     },
  16 |   });
  17 | 
  18 |   if (useCases.length === 0) {
  19 |     return 1;
  20 |   }
  21 | 
  22 |   let highestNumber = 0;
  23 |   for (const useCase of useCases) {
  24 |     const parts = useCase.shortId.split('-');
  25 |     if (parts.length === 2) {
  26 |       const num = parseInt(parts[1], 10);
  27 |       if (!isNaN(num) && num > highestNumber) {
  28 |         highestNumber = num;
  29 |       }
  30 |     }
  31 |   }
  32 | 
  33 |   return highestNumber + 1;
  34 | }
  35 | 
  36 | // Generate a sequential short ID (e.g., WEB-1, WEB-2, etc.)
  37 | async function generateShortId(prefix: string) {
  38 |   const nextNumber = await findNextNumber(prefix);
  39 |   return `${prefix}-${nextNumber}`;
  40 | }
  41 | 
  42 | export async function GET(request: Request) {
  43 |   try {
  44 |     const session = await getSession();
  45 |     if (!session?.user) {
  46 |       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  47 |     }
  48 | 
  49 |     const { searchParams } = new URL(request.url);
  50 |     const projectId = searchParams.get('projectId');
  51 | 
  52 |     if (!projectId) {
  53 |       return NextResponse.json({ error: 'Project ID is required' }, { status: 400 });
  54 |     }
  55 | 
  56 |     const useCases = await db.useCase.findMany({
  57 |       where: {
  58 |         projectId: String(projectId),
  59 |       },
  60 |       include: {
  61 |         project: true,
  62 |         executions: {
  63 |           orderBy: {
  64 |             createdAt: 'desc',
  65 |           },
  66 |           take: 1,
  67 |         },
  68 |       },
  69 |     });
  70 | 
  71 |     return NextResponse.json(useCases);
  72 |   } catch (error) {
  73 |     console.error('Error fetching use cases:', error);
  74 |     return NextResponse.json({ error: 'Failed to fetch use cases' }, { status: 500 });
  75 |   }
  76 | }
  77 | 
  78 | export async function POST(request: Request) {
  79 |   try {
  80 |     const session = await getSession();
  81 |     if (!session?.user) {
  82 |       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  83 |     }
  84 | 
  85 |     const { name, projectId, steps, shortIdPrefix } = await request.json();
  86 | 
  87 |     if (!name || !projectId || !steps || !shortIdPrefix) {
  88 |       return NextResponse.json(
  89 |         { error: 'Name, projectId, steps, and shortIdPrefix are required' },
  90 |         { status: 400 },
  91 |       );
  92 |     }
  93 | 
  94 |     const shortId = await generateShortId(shortIdPrefix);
  95 | 
  96 |     const useCase = await db.useCase.create({
  97 |       data: {
  98 |         name,
  99 |         projectId,
 100 |         steps,
 101 |         shortId,
 102 |       },
 103 |       include: {
 104 |         project: true,
 105 |       },
 106 |     });
 107 | 
 108 |     return NextResponse.json(useCase, { status: 201 });
 109 |   } catch (error) {
 110 |     console.error('Error creating use case:', error);
 111 |     return NextResponse.json({ error: 'Failed to create use case' }, { status: 500 });
 112 |   }
 113 | }

```

`/workspaces/automai/src/app/api/admin/logs/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | 
   3 | export async function GET(request: NextRequest) {
   4 |   try {
   5 |     // Get query parameters
   6 |     const searchParams = request.nextUrl.searchParams;
   7 |     const page = parseInt(searchParams.get('page') || '1');
   8 |     const pageSize = 20;
   9 | 
  10 |     // Return static response
  11 |     return NextResponse.json({
  12 |       success: true,
  13 |       logs: [],
  14 |       page,
  15 |       pageSize,
  16 |       totalPages: 0,
  17 |       totalLogs: 0,
  18 |     });
  19 |   } catch (error) {
  20 |     return NextResponse.json(
  21 |       {
  22 |         success: false,
  23 |         message: 'Failed to fetch logs',
  24 |       },
  25 |       { status: 500 },
  26 |     );
  27 |   }
  28 | }

```

`/workspaces/automai/src/app/api/auth/callback/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { handleAuthCallback } from '@/app/actions/auth';
   3 | 
   4 | // Add this interface at the top of the file
   5 | interface SupabaseError extends Error {
   6 |   status?: number;
   7 |   originalError?: {
   8 |     name: string;
   9 |     message: string;
  10 |   };
  11 | }
  12 | 
  13 | /**
  14 |  * This route handles OAuth callback requests from Supabase Auth.
  15 |  * It is needed for processing OAuth provider redirects.
  16 |  */
  17 | export async function GET(request: NextRequest) {
  18 |   // Fix the request URL if it's localhost in a GitHub Codespace
  19 |   let fixedUrl = request.url;
  20 | 
  21 |   // Check if we're in a GitHub Codespace or if URL needs to be fixed for any environment
  22 |   if (request.url.includes('localhost:') || request.url.includes('127.0.0.1:')) {
  23 |     const siteUrl = process.env.NEXT_PUBLIC_SITE_URL;
  24 |     if (siteUrl) {
  25 |       // Replace the hostname and port with the site URL
  26 |       const url = new URL(request.url);
  27 |       const newUrl = new URL(url.pathname + url.search, siteUrl);
  28 |       fixedUrl = newUrl.toString();
  29 |     }
  30 |   }
  31 | 
  32 |   try {
  33 |     // Process the auth callback using our server action
  34 |     const result = await handleAuthCallback(fixedUrl);
  35 |     
  36 |     if (!result.success) {
  37 |       // If there was an error, redirect to login with error message
  38 |       const redirectUrl = new URL('/login', request.nextUrl.origin);
  39 |       redirectUrl.searchParams.set('error', result.error || 'Authentication failed');
  40 |       return NextResponse.redirect(redirectUrl);
  41 |     }
  42 |     
  43 |     // If successful, redirect to the dashboard or specified redirect URL
  44 |     return NextResponse.redirect(new URL(result.redirectUrl || '/', request.nextUrl.origin));
  45 |   } catch (error) {
  46 |     console.error('Error in auth callback route:', error);
  47 |     
  48 |     // Handle errors and redirect to login with error message
  49 |     const redirectUrl = new URL('/login', request.nextUrl.origin);
  50 |     redirectUrl.searchParams.set('error', error instanceof Error ? error.message : 'Authentication failed');
  51 |     return NextResponse.redirect(redirectUrl);
  52 |   }
  53 | } 

```

`/workspaces/automai/src/app/api/auth/register/route.ts`:

```ts
   1 | import { hash } from 'bcrypt';
   2 | import { NextRequest, NextResponse } from 'next/server';
   3 | import { z } from 'zod';
   4 | 
   5 | import db from '@/lib/supabase/db';
   6 | import { supabaseAuth } from '@/lib/supabase/auth';
   7 | 
   8 | // Schema for validation
   9 | const userSchema = z.object({
  10 |   name: z.string().min(1, 'Name is required'),
  11 |   email: z.string().email('Invalid email format'),
  12 |   password: z.string().min(8, 'Password must be at least 8 characters'),
  13 | });
  14 | 
  15 | export async function POST(request: NextRequest) {
  16 |   try {
  17 |     const body = await request.json();
  18 | 
  19 |     // Check if we should forward to another backend server (original behavior)
  20 |     // This is just for backward compatibility
  21 |     if (process.env.USE_EXTERNAL_BACKEND === 'true') {
  22 |       try {
  23 |         // Forward the request to the backend server
  24 |         const response = await fetch('http://localhost:5001/api/auth/register', {
  25 |           method: 'POST',
  26 |           headers: {
  27 |             'Content-Type': 'application/json',
  28 |           },
  29 |           body: JSON.stringify(body),
  30 |         });
  31 | 
  32 |         const data = await response.json();
  33 | 
  34 |         if (!response.ok) {
  35 |           return NextResponse.json(
  36 |             { error: data.error || 'Failed to register' },
  37 |             { status: response.status },
  38 |           );
  39 |         }
  40 | 
  41 |         // Set the token in a secure HTTP-only cookie
  42 |         const headers = new Headers();
  43 |         headers.append('Set-Cookie', `token=${data.token}; HttpOnly; Path=/; SameSite=Strict`);
  44 | 
  45 |         return NextResponse.json(data, {
  46 |           status: 201,
  47 |           headers,
  48 |         });
  49 |       } catch (error) {
  50 |         console.error('External registration error:', error);
  51 |         // Fall through to local registration if external fails
  52 |       }
  53 |     }
  54 | 
  55 |     // Parse and validate request body
  56 |     const validationResult = userSchema.safeParse(body);
  57 | 
  58 |     if (!validationResult.success) {
  59 |       return NextResponse.json(
  60 |         {
  61 |           error: 'Validation error',
  62 |           issues: validationResult.error.issues,
  63 |         },
  64 |         { status: 400 },
  65 |       );
  66 |     }
  67 | 
  68 |     const { name, email, password } = validationResult.data;
  69 | 
  70 |     // Check if user already exists
  71 |     const existingUser = await db.user.findUnique({
  72 |       where: { email },
  73 |     });
  74 | 
  75 |     if (existingUser) {
  76 |       return NextResponse.json({ error: 'User with this email already exists' }, { status: 400 });
  77 |     }
  78 | 
  79 |     // If using Supabase in production, register with Supabase first
  80 |     
  81 |     const supabaseResult = await supabaseAuth.signUp(email, password, {
  82 |       data: { name }
  83 |     });
  84 | 
  85 |     if (!supabaseResult.success) {
  86 |       return NextResponse.json(
  87 |         { error: supabaseResult.error || 'Failed to register with Supabase' },
  88 |         { status: 500 },
  89 |       );
  90 |       
  91 | 
  92 |       // Successfully registered with Supabase
  93 |       console.log('User registered with Supabase:', supabaseResult.data?.user?.id);
  94 |     }
  95 | 
  96 | 
  97 |     const hashedPassword = await hash(password, 10);
  98 | 
  99 |     // Create default tenant for the user (trial)
 100 |     const tenant = await db.tenant.create({
 101 |       data: {
 102 |         name: 'trial',
 103 |         domain: `trial-${Date.now()}`.toLowerCase(),
 104 |         plan: 'trial',
 105 |       },
 106 |     });
 107 | 
 108 |     // Create user in the database
 109 |     const user = await db.user.create({
 110 |       data: {
 111 |         name,
 112 |         email,
 113 |         password: hashedPassword,
 114 |         user_role: 'admin', // First user is admin of their tenant
 115 |         tenant_id: tenant.id,
 116 |       },
 117 |     });
 118 | 
 119 |     // Don't send the password back to client
 120 |     const { password: _, ...userWithoutPassword } = user;
 121 | 
 122 |     return NextResponse.json(
 123 |       {
 124 |         message: 'User registered successfully',
 125 |         user: userWithoutPassword,
 126 |       },
 127 |       { status: 201 },
 128 |     );
 129 |   } catch (error: any) {
 130 |     console.error('Registration error:', error);
 131 |     return NextResponse.json(
 132 |       { error: error.message || 'An unexpected error occurred' },
 133 |       { status: 500 },
 134 |     );
 135 |   }
 136 | }

```

`/workspaces/automai/src/app/api/auth/profile/route.ts`:

```ts
   1 | import { NextResponse } from 'next/server';
   2 | import { getSession, extractSessionFromHeader } from '@/lib/supabase/auth';
   3 | 
   4 | 
   5 | export async function GET(request: Request) {
   6 |   try {
   7 |     console.log('[PROFILE_GET] Fetching user profile');
   8 | 
   9 |     // Try to get session from Authorization header first
  10 |     const authHeader = request.headers.get('Authorization');
  11 |     let session = null;
  12 | 
  13 |     if (authHeader) {
  14 |       console.log('[PROFILE_GET] Authorization header present, extracting session');
  15 |       session = await extractSessionFromHeader(authHeader);
  16 |     }
  17 | 
  18 |     // Fall back to cookie-based session if header auth fails
  19 |     if (!session) {
  20 |       console.log('[PROFILE_GET] No session from header, trying cookie-based session');
  21 |       session = await getSession();
  22 |     }
  23 | 
  24 |     // Check if we have a valid session
  25 |     if (!session?.user) {
  26 |       console.log('[PROFILE_GET] No valid session found');
  27 |       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  28 |     }
  29 | 
  30 |     const userId = session.user.id;
  31 |     console.log('[PROFILE_GET] Valid session found for user:', userId);
  32 | 
  33 |     // Get user data from database
  34 |     const user = await db.user.findUnique({
  35 |       where: { id: userId },
  36 |     });
  37 | 
  38 |     if (!user) {
  39 |       console.log('[PROFILE_GET] User not found in database, creating user');
  40 | 
  41 |       // Try to create the user
  42 |       try {
  43 |         // Check if tenant exists, create if not
  44 |         let tenant = await db.tenant.findUnique({
  45 |           where: { id: 'trial' },
  46 |         });
  47 | 
  48 |         if (!tenant) {
  49 |           console.log('[PROFILE_GET] Creating trial tenant');
  50 |           tenant = await db.tenant.create({
  51 |             data: {
  52 |               id: 'trial',
  53 |               name: 'trial',
  54 |               plan: 'free',
  55 |             },
  56 |           });
  57 |         }
  58 | 
  59 |         // Create user with admin role by default
  60 |         const newUser = await db.user.create({
  61 |           data: {
  62 |             id: userId,
  63 |             email: session.user.email,
  64 |             name: session.user.name || session.user.email?.split('@')[0] || 'User',
  65 |             user_role: session.user.user_role || 'admin', // Default to admin role
  66 |             tenant_id: (session.user.tenant_id || 'trial').toLowerCase(),
  67 |           },
  68 |         });
  69 | 
  70 |         console.log('[PROFILE_GET] User created:', newUser.id);
  71 | 
  72 |         // Return the newly created user
  73 |         return NextResponse.json({
  74 |           id: newUser.id,
  75 |           name: newUser.name,
  76 |           email: newUser.email,
  77 |           user_role: newUser.user_role,
  78 |           tenant_id: newUser.tenant_id,
  79 |           tenant_name: 'trial',
  80 |           plan: 'free',
  81 |         });
  82 |       } catch (createError) {
  83 |         console.error('[PROFILE_GET] Error creating user:', createError);
  84 |         // Return session user data as fallback even if creation fails
  85 |         return NextResponse.json({
  86 |           id: session.user.id,
  87 |           name: session.user.name,
  88 |           email: session.user.email,
  89 |           user_role: session.user.user_role || 'admin', // Default to admin role
  90 |           tenant_id: (session.user.tenant_id || 'trial').toLowerCase(),
  91 |           tenant_name: (session.user.tenant_name || 'trial').toLowerCase(),
  92 |           plan: 'free',
  93 |         });
  94 |       }
  95 |     }
  96 | 
  97 |     // Get tenant data separately
  98 |     const tenant = user.tenant_id
  99 |       ? await db.tenant.findUnique({
 100 |           where: { id: user.tenant_id },
 101 |         })
 102 |       : null;
 103 | 
 104 |     const response = {
 105 |       id: user.id,
 106 |       name: user.name,
 107 |       email: user.email,
 108 |       user_role: user.user_role,
 109 |       tenant_id: user.tenant_id,
 110 |       tenant_name: tenant?.name || null,
 111 |       plan: tenant?.plan || 'free',
 112 |     };
 113 | 
 114 |     console.log('[PROFILE_GET] Returning user data:', response);
 115 |     return NextResponse.json(response);
 116 |   } catch (error) {
 117 |     console.error('[PROFILE_GET] Error:', error);
 118 |     return NextResponse.json({ error: 'Internal error' }, { status: 500 });
 119 |   }
 120 | }
 121 | 
 122 | export async function PATCH(req: Request) {
 123 |   try {
 124 |     const session = await getSession();
 125 | 
 126 |     if (!session?.user) {
 127 |       return new NextResponse(JSON.stringify({ error: 'Unauthorized' }), { status: 401 });
 128 |     }
 129 | 
 130 |     const body = await req.json();
 131 |     const { name } = body;
 132 | 
 133 |     if (!name) {
 134 |       return new NextResponse(JSON.stringify({ error: 'Name is required' }), { status: 400 });
 135 |     }
 136 | 
 137 |     const updatedUser = await db.user.update({
 138 |       where: { id: session.user.id },
 139 |       data: { name },
 140 |     });
 141 | 
 142 |     return NextResponse.json({
 143 |       id: updatedUser.id,
 144 |       name: updatedUser.name,
 145 |       email: updatedUser.email,
 146 |       user_role: updatedUser.user_role,
 147 |     });
 148 |   } catch (error) {
 149 |     console.error('[PROFILE_PATCH]', error);
 150 |     return new NextResponse(JSON.stringify({ error: 'Internal error' }), { status: 500 });
 151 |   }
 152 | }

```

`/workspaces/automai/src/app/api/terminals/init/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | 
   3 | import { getWebSocketServer } from '@/lib/services/websocket';
   4 | 
   5 | export const dynamic = 'force-dynamic';
   6 | export const _runtime = 'nodejs';
   7 | 
   8 | export async function POST(request: NextRequest) {
   9 |   console.log('Terminal init API called');
  10 |   try {
  11 |     console.log('Authentication bypassed for debugging');
  12 | 
  13 |     const wss = getWebSocketServer();
  14 |     console.log('WebSocket server initialized:', !!wss);
  15 | 
  16 |     if (!wss) {
  17 |       console.error('Failed to initialize WebSocket server');
  18 |       return NextResponse.json(
  19 |         { success: false, error: 'Failed to initialize WebSocket server' },
  20 |         { status: 500 },
  21 |       );
  22 |     }
  23 | 
  24 |     console.log('WebSocket server ready for connections');
  25 |     return NextResponse.json({ success: true });
  26 |   } catch (error) {
  27 |     console.error('Error initializing terminal:', error);
  28 |     return NextResponse.json(
  29 |       { success: false, error: 'Failed to initialize terminal' },
  30 |       { status: 500 },
  31 |     );
  32 |   }
  33 | }

```

`/workspaces/automai/src/app/api/terminals/ws/[id]/route.ts`:

```ts
   1 | import { NextRequest } from 'next/server';
   2 | 
   3 | import { logger } from '@/lib/logger';
   4 | 
   5 | export const dynamic = 'force-dynamic';
   6 | 
   7 | export async function GET(request: NextRequest, context: { params: { id: string } }) {
   8 |   logger.info('WebSocket route handler called', {
   9 |     connectionId: context.params.id,
  10 |     headers: Object.fromEntries(request.headers.entries()),
  11 |   });
  12 | 
  13 |   // Check if it's a WebSocket request
  14 |   const upgradeHeader = request.headers.get('upgrade');
  15 | 
  16 |   if (!upgradeHeader || upgradeHeader.toLowerCase() !== 'websocket') {
  17 |     logger.error('Not a WebSocket request', {
  18 |       upgradeHeader,
  19 |       headers: Object.fromEntries(request.headers.entries()),
  20 |     });
  21 |     return new Response('Expected WebSocket request', { status: 400 });
  22 |   }
  23 | 
  24 |   // Return a successful WebSocket upgrade response
  25 |   // The actual upgrade is handled by the HTTP server's upgrade handler
  26 |   // This route exists only for Next.js routing purposes
  27 |   return new Response(null, { status: 101 });
  28 | }

```

`/workspaces/automai/src/app/api/terminals/[id]/route.ts`:

```ts
   1 | import { headers } from 'next/headers';
   2 | import { NextRequest, NextResponse } from 'next/server';
   3 | 
   4 | import { logger } from '@/lib/logger';
   5 | import { getWebSocketServer, handleUpgrade } from '@/lib/services/websocket';
   6 | 
   7 | export const dynamic = 'force-dynamic';
   8 | export const runtime = 'nodejs';
   9 | 
  10 | type Props = {
  11 |   params: { id: string };
  12 | };
  13 | 
  14 | export async function GET(request: NextRequest, { params }: Props) {
  15 |   const connectionId = params.id;
  16 |   logger.info('WebSocket connection request received', { connectionId });
  17 | 
  18 |   // Check if this is a WebSocket upgrade request
  19 |   const upgradeHeader = request.headers.get('upgrade');
  20 |   if (upgradeHeader !== 'websocket') {
  21 |     logger.warn('Non-WebSocket request received', { connectionId });
  22 |     return new NextResponse('Expected Upgrade: websocket', { status: 426 });
  23 |   }
  24 | 
  25 |   try {
  26 |     // Get the WebSocket server (singleton instance)
  27 |     const wss = getWebSocketServer();
  28 |     if (!wss) {
  29 |       logger.error('WebSocket server not initialized', { connectionId });
  30 |       return NextResponse.json({ error: 'WebSocket server not initialized' }, { status: 500 });
  31 |     }
  32 | 
  33 |     // Get the raw request object from the Next.js request
  34 |     const { socket, response } = await new Promise<{ socket: any; response: Response }>(
  35 |       (resolve) => {
  36 |         // @ts-expect-error - Access internal properties
  37 |         const socket = request.socket;
  38 | 
  39 |         // Create a server response
  40 |         const response = new Response(null, {
  41 |           status: 101,
  42 |           headers: {
  43 |             Upgrade: 'websocket',
  44 |             Connection: 'Upgrade',
  45 |           },
  46 |         });
  47 | 
  48 |         resolve({ socket, response });
  49 |       },
  50 |     );
  51 | 
  52 |     // Handle the upgrade
  53 |     const headersList = await headers();
  54 |     const rawHeaders: string[] = [];
  55 | 
  56 |     // Convert headers to array format
  57 |     Array.from(headersList.entries()).forEach(([key, value]: [string, string]) => {
  58 |       rawHeaders.push(key, value);
  59 |     });
  60 | 
  61 |     // Create a minimal IncomingMessage-like object
  62 |     const req = {
  63 |       headers: Object.fromEntries(Array.from(headersList.entries())),
  64 |       rawHeaders,
  65 |       url: `/terminals/${connectionId}`,
  66 |       socket,
  67 |     };
  68 | 
  69 |     logger.info('Handling WebSocket upgrade', { connectionId });
  70 |     // Handle the WebSocket upgrade
  71 |     handleUpgrade(req as any, socket, Buffer.from([]), `/terminals/${connectionId}`);
  72 | 
  73 |     logger.info('WebSocket connection established', { connectionId });
  74 |     return response;
  75 |   } catch (error) {
  76 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';
  77 |     logger.error('Error handling WebSocket connection', { error: errorMessage, connectionId });
  78 |     return NextResponse.json(
  79 |       { error: 'Failed to establish WebSocket connection', message: errorMessage },
  80 |       { status: 500 },
  81 |     );
  82 |   }
  83 | }

```

`/workspaces/automai/src/app/api/projects/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { 
   3 |   getProjects, 
   4 |   createProject,
   5 |   updateProject,
   6 |   deleteProject
   7 | } from '@/app/actions/projects';
   8 | 
   9 | /**
  10 |  * GET /api/projects
  11 |  * Get all projects for the current user
  12 |  */
  13 | export async function GET() {
  14 |   try {
  15 |     // Call the server action to get projects
  16 |     const result = await getProjects();
  17 |     
  18 |     if (!result.success) {
  19 |       return NextResponse.json(
  20 |         { error: result.error || 'Failed to fetch projects' },
  21 |         { status: 400 }
  22 |       );
  23 |     }
  24 |     
  25 |     return NextResponse.json(result.data);
  26 |   } catch (error) {
  27 |     console.error('Error in GET /api/projects:', error);
  28 |     return NextResponse.json(
  29 |       { error: 'Internal server error' },
  30 |       { status: 500 }
  31 |     );
  32 |   }
  33 | }
  34 | 
  35 | /**
  36 |  * POST /api/projects
  37 |  * Create a new project
  38 |  */
  39 | export async function POST(request: NextRequest) {
  40 |   try {
  41 |     // Parse request body
  42 |     const body = await request.json();
  43 |     
  44 |     // Call the server action to create project
  45 |     const result = await createProject(body);
  46 |     
  47 |     if (!result.success) {
  48 |       return NextResponse.json(
  49 |         { error: result.error || 'Failed to create project' },
  50 |         { status: 400 }
  51 |       );
  52 |     }
  53 |     
  54 |     return NextResponse.json(result.data, { status: 201 });
  55 |   } catch (error) {
  56 |     console.error('Error in POST /api/projects:', error);
  57 |     return NextResponse.json(
  58 |       { error: 'Internal server error' },
  59 |       { status: 500 }
  60 |     );
  61 |   }
  62 | }
  63 | 
  64 | // PATCH /api/projects/[id]
  65 | export async function PATCH(request: Request) {
  66 |   try {
  67 |     
  68 |     // If Supabase client is null, fall back to a simple check
  69 |     if (!supabase) {
  70 |       return NextResponse.json(
  71 |         {
  72 |           success: false,
  73 |           error: 'Authentication not available',
  74 |         },
  75 |         { status: 401 },
  76 |       );
  77 |     }
  78 | 
  79 |     const {
  80 |       data: { session },
  81 |       error: sessionError,
  82 |     } = await supabase.auth.getSession();
  83 |     if (!session?.user) {
  84 |       return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  85 |     }
  86 | 
  87 |     const body = await request.json();
  88 |     const id = request.url.split('/').pop(); // Get the project ID from the URL
  89 | 
  90 |     // Check if project exists and user has access
  91 |     const existingProject = await db.project.findUnique({
  92 |       where: { id },
  93 |     });
  94 | 
  95 |     if (!existingProject) {
  96 |       return NextResponse.json({ success: false, message: 'Project not found' }, { status: 404 });
  97 |     }
  98 | 
  99 |     if (existingProject.ownerId !== session.user.id) {
 100 |       return NextResponse.json({ success: false, message: 'Forbidden' }, { status: 403 });
 101 |     }
 102 | 
 103 |     const updatedProject = await db.project.update({
 104 |       where: { id },
 105 |       data: body,
 106 |     });
 107 | 
 108 |     return NextResponse.json({
 109 |       success: true,
 110 |       message: 'Project updated successfully',
 111 |       data: updatedProject,
 112 |     });
 113 |   } catch (error) {
 114 |     console.error('Error updating project:', error);
 115 |     return NextResponse.json(
 116 |       { success: false, message: 'Failed to update project' },
 117 |       { status: 500 },
 118 |     );
 119 |   }
 120 | }
 121 | 
 122 | // DELETE /api/projects/[id]
 123 | export async function DELETE(request: Request) {
 124 |   try {
 125 | 
 126 |     // If Supabase client is null, fall back to a simple check
 127 |     if (!supabase) {
 128 |       return NextResponse.json(
 129 |         {
 130 |           success: false,
 131 |           error: 'Authentication not available',
 132 |         },
 133 |         { status: 401 },
 134 |       );
 135 |     }
 136 | 
 137 |     const {
 138 |       data: { session },
 139 |       error: sessionError,
 140 |     } = await supabase.auth.getSession();
 141 |     if (!session?.user) {
 142 |       return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
 143 |     }
 144 | 
 145 |     const id = request.url.split('/').pop(); // Get the project ID from the URL
 146 | 
 147 |     // Check if project exists and user has access
 148 |     const existingProject = await db.project.findUnique({
 149 |       where: { id },
 150 |     });
 151 | 
 152 |     if (!existingProject) {
 153 |       return NextResponse.json({ success: false, message: 'Project not found' }, { status: 404 });
 154 |     }
 155 | 
 156 |     if (existingProject.ownerId !== session.user.id) {
 157 |       return NextResponse.json({ success: false, message: 'Forbidden' }, { status: 403 });
 158 |     }
 159 | 
 160 |     await db.project.delete({
 161 |       where: { id },
 162 |     });
 163 | 
 164 |     return NextResponse.json({
 165 |       success: true,
 166 |       message: 'Project deleted successfully',
 167 |     });
 168 |   } catch (error) {
 169 |     console.error('Error deleting project:', error);
 170 |     return NextResponse.json(
 171 |       { success: false, message: 'Failed to delete project' },
 172 |       { status: 500 },
 173 |     );
 174 |   }
 175 | }

```

`/workspaces/automai/src/app/api/projects/[id]/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { 
   3 |   getProject, 
   4 |   updateProject, 
   5 |   deleteProject 
   6 | } from '@/app/actions/projects';
   7 | 
   8 | type Props = {
   9 |   params: { id: string };
  10 | };
  11 | 
  12 | 
  13 | /**
  14 |  * GET /api/projects/[id]
  15 |  * Get a project by ID
  16 |  */
  17 | export async function GET(request: NextRequest, { params }: Props) {
  18 |   try {
  19 |     const { id } = params;
  20 |     
  21 |     // Call the server action to get project
  22 |     const result = await getProject(id);
  23 |     
  24 |     if (!result.success) {
  25 |       return NextResponse.json(
  26 |         { error: result.error || 'Failed to fetch project' },
  27 |         { status: 400 }
  28 |       );
  29 |     }
  30 |     
  31 |     return NextResponse.json(result.data);
  32 |   } catch (error) {
  33 |     console.error('Error in GET /api/projects/[id]:', error);
  34 |     return NextResponse.json(
  35 |       { error: 'Internal server error' },
  36 |       { status: 500 }
  37 |     );
  38 |   }
  39 | }
  40 | 
  41 | /**
  42 |  * PATCH /api/projects/[id]
  43 |  * Update a project by ID
  44 |  */
  45 | export async function PATCH(request: NextRequest, { params }: Props) {
  46 |   try {
  47 |     const { id } = params;
  48 |     
  49 |     // Parse request body
  50 |     const body = await request.json();
  51 |     
  52 |     // Call the server action to update project
  53 |     const result = await updateProject(id, body);
  54 |     
  55 |     if (!result.success) {
  56 |       return NextResponse.json(
  57 |         { error: result.error || 'Failed to update project' },
  58 |         { status: 400 }
  59 |       );
  60 |     }
  61 |     
  62 |     return NextResponse.json(result.data);
  63 |   } catch (error) {
  64 |     console.error('Error in PATCH /api/projects/[id]:', error);
  65 |     return NextResponse.json(
  66 |       { error: 'Internal server error' },
  67 |       { status: 500 }
  68 |     );
  69 |   }
  70 | }
  71 | 
  72 | /**
  73 |  * DELETE /api/projects/[id]
  74 |  * Delete a project by ID
  75 |  */
  76 | export async function DELETE(request: NextRequest, { params }: Props) {
  77 |   try {
  78 |     const { id } = params;
  79 |     
  80 |     // Call the server action to delete project
  81 |     const result = await deleteProject(id);
  82 |     
  83 |     if (!result.success) {
  84 |       return NextResponse.json(
  85 |         { error: result.error || 'Failed to delete project' },
  86 |         { status: 400 }
  87 |       );
  88 |     }
  89 |     
  90 |     return NextResponse.json({ success: true, message: 'Project deleted successfully' });
  91 |   } catch (error) {
  92 |     console.error('Error in DELETE /api/projects/[id]:', error);
  93 |     return NextResponse.json(
  94 |       { error: 'Internal server error' },
  95 |       { status: 500 }
  96 |     );
  97 |   }
  98 | }

```

`/workspaces/automai/src/app/api/git-providers/callback/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { handleOAuthCallback } from '@/app/actions/git-providers';
   3 | 
   4 | /**
   5 |  * GET /api/git-providers/callback
   6 |  * Handle OAuth callback for git providers
   7 |  */
   8 | export async function GET(request: NextRequest) {
   9 |   try {
  10 |     const { searchParams } = new URL(request.url);
  11 |     const code = searchParams.get('code');
  12 |     const state = searchParams.get('state');
  13 |     const error = searchParams.get('error');
  14 | 
  15 |     if (error) {
  16 |       return NextResponse.json(
  17 |         { success: false, message: `OAuth error: ${error}` },
  18 |         { status: 400 },
  19 |       );
  20 |     }
  21 | 
  22 |     if (!code || !state) {
  23 |       return NextResponse.json(
  24 |         { success: false, message: 'Missing required parameters' },
  25 |         { status: 400 },
  26 |       );
  27 |     }
  28 | 
  29 |     // Call the server action to handle the OAuth callback
  30 |     const result = await handleOAuthCallback(code, state);
  31 |     
  32 |     if (!result.success) {
  33 |       return NextResponse.json(
  34 |         { success: false, message: result.error || 'Failed to process OAuth callback' },
  35 |         { status: 400 }
  36 |       );
  37 |     }
  38 |     
  39 |     // Redirect to the repositories page
  40 |     if (result.redirectUrl) {
  41 |       return NextResponse.redirect(new URL(result.redirectUrl, request.url));
  42 |     }
  43 |     
  44 |     return NextResponse.json({ success: true });
  45 |   } catch (error) {
  46 |     console.error('Error in GET /api/git-providers/callback:', error);
  47 |     return NextResponse.json(
  48 |       { error: 'Internal server error' },
  49 |       { status: 500 }
  50 |     );
  51 |   }
  52 | }

```

`/workspaces/automai/src/app/api/git-providers/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { z } from 'zod';
   3 | 
   4 | import { createClient } from '@/lib/supabase/server';
   5 | import { createGitProvider } from '@/app/actions/git-providers';
   6 | import { createGithubOauthUrl, createGitlabOauthUrl } from '@/lib/services/oauth';
   7 | import { getGitProviders } from '@/app/actions/git-providers';
   8 | 
   9 | // Schema validation for creating a git provider
  10 | const GitProviderCreateSchema = z.object({
  11 |   type: z.enum(['github', 'gitlab', 'gitea']),
  12 |   displayName: z.string().min(2),
  13 |   serverUrl: z.string().url().optional(),
  14 |   token: z.string().optional(),
  15 | });
  16 | 
  17 | /**
  18 |  * GET /api/git-providers
  19 |  * Get all git providers for the current user
  20 |  */
  21 | export async function GET() {
  22 |   try {
  23 |     // Call the server action to get git providers
  24 |     const result = await getGitProviders();
  25 |     
  26 |     if (!result.success) {
  27 |       return NextResponse.json(
  28 |         { error: result.error || 'Failed to fetch git providers' },
  29 |         { status: 400 }
  30 |       );
  31 |     }
  32 |     
  33 |     return NextResponse.json(result.data);
  34 |   } catch (error) {
  35 |     console.error('Error in GET /api/git-providers:', error);
  36 |     return NextResponse.json(
  37 |       { error: 'Internal server error' },
  38 |       { status: 500 }
  39 |     );
  40 |   }
  41 | }
  42 | 
  43 | /**
  44 |  * POST /api/git-providers
  45 |  * Create a new git provider
  46 |  */
  47 | export async function POST(request: NextRequest) {
  48 |   try {
  49 |     // Parse request body
  50 |     const body = await request.json();
  51 |     
  52 |     // Call the server action to create git provider
  53 |     const result = await createGitProvider(body);
  54 |     
  55 |     if (!result.success) {
  56 |       return NextResponse.json(
  57 |         { error: result.error || 'Failed to create git provider' },
  58 |         { status: 400 }
  59 |       );
  60 |     }
  61 |     
  62 |     // If authUrl is provided, return it along with the provider data
  63 |     if (result.authUrl) {
  64 |       return NextResponse.json({
  65 |         id: result.data.id,
  66 |         authUrl: result.authUrl
  67 |       });
  68 |     }
  69 |     
  70 |     // Otherwise, just return the provider data
  71 |     return NextResponse.json(result.data, { status: 201 });
  72 |   } catch (error) {
  73 |     console.error('Error in POST /api/git-providers:', error);
  74 |     return NextResponse.json(
  75 |       { error: 'Internal server error' },
  76 |       { status: 500 }
  77 |     );
  78 |   }
  79 | }

```

`/workspaces/automai/src/app/api/git-providers/[id]/route.ts`:

```ts
   1 | import { NextRequest, NextResponse } from 'next/server';
   2 | import { getGitProvider, deleteGitProvider } from '@/app/actions/git-providers';
   3 | 
   4 | type Props = {
   5 |   params: { id: string };
   6 | };
   7 | 
   8 | /**
   9 |  * GET /api/git-providers/[id]
  10 |  * Get a git provider by ID
  11 |  */
  12 | export async function GET(request: NextRequest, { params }: Props) {
  13 |   try {
  14 |     const { id } = params;
  15 |     
  16 |     // Call the server action to get git provider
  17 |     const result = await getGitProvider(id);
  18 |     
  19 |     if (!result.success) {
  20 |       return NextResponse.json(
  21 |         { error: result.error || 'Failed to fetch git provider' },
  22 |         { status: 400 }
  23 |       );
  24 |     }
  25 |     
  26 |     return NextResponse.json(result.data);
  27 |   } catch (error) {
  28 |     console.error('Error in GET /api/git-providers/[id]:', error);
  29 |     return NextResponse.json(
  30 |       { error: 'Internal server error' },
  31 |       { status: 500 }
  32 |     );
  33 |   }
  34 | }
  35 | 
  36 | /**
  37 |  * DELETE /api/git-providers/[id]
  38 |  * Delete a git provider by ID
  39 |  */
  40 | export async function DELETE(request: NextRequest, { params }: Props) {
  41 |   try {
  42 |     const { id } = params;
  43 |     
  44 |     // Call the server action to delete git provider
  45 |     const result = await deleteGitProvider(id);
  46 |     
  47 |     if (!result.success) {
  48 |       return NextResponse.json(
  49 |         { error: result.error || 'Failed to delete git provider' },
  50 |         { status: 400 }
  51 |       );
  52 |     }
  53 |     
  54 |     return NextResponse.json({ success: true, message: 'Git provider deleted successfully' });
  55 |   } catch (error) {
  56 |     console.error('Error in DELETE /api/git-providers/[id]:', error);
  57 |     return NextResponse.json(
  58 |       { error: 'Internal server error' },
  59 |       { status: 500 }
  60 |     );
  61 |   }
  62 | }

```

`/workspaces/automai/src/app/[locale]/page.tsx`:

```tsx
   1 | import { redirect } from 'next/navigation';
   2 | import { locales } from '@/config';
   3 | import { getUser } from '@/lib/supabase/auth';
   4 | 
   5 | export const dynamic = 'force-static';
   6 | 
   7 | export async function generateStaticParams() {
   8 |   return await locales.map((locale) => ({ locale }));
   9 | }
  10 | 
  11 | export default async function Page({ params }: { params: { locale: string } }) {
  12 |   // Try to get the authenticated user
  13 |   const userResult = await getUser();
  14 |   
  15 |   // Use tenant_name if available, otherwise default to 'trial'
  16 |   const tenantName = userResult.success && userResult.data?.tenant_name 
  17 |     ? userResult.data.tenant_name 
  18 |     : 'trial';
  19 |   
  20 |   // Log for debugging
  21 |   console.log('Root page redirect using tenant:', tenantName);
  22 |   
  23 |   // Redirect to the appropriate tenant dashboard
  24 |   redirect(`/${params.locale}/${tenantName}/dashboard`);
  25 | }

```

`/workspaces/automai/src/app/[locale]/(marketing)/layout.tsx`:

```tsx
   1 | import React from 'react';
   2 | 
   3 | import { SiteHeader } from '@/components/layout/SiteHeader';
   4 | 
   5 | export default async function MarketingLayout({ children }: { children: React.ReactNode }) {
   6 |   return (
   7 |     <div className="relative min-h-screen flex flex-col">
   8 |       <SiteHeader />
   9 |       <main className="flex-1">{children}</main>
  10 |     </div>
  11 |   );
  12 | }

```

`/workspaces/automai/src/app/[locale]/(marketing)/_components/ComingSoon.tsx`:

```tsx
   1 | import { IconPlanet } from '@tabler/icons-react';
   2 | 
   3 | export default function ComingSoon() {
   4 |   return (
   5 |     <div className="h-svh">
   6 |       <div className="m-auto flex h-full w-full flex-col items-center justify-center gap-2">
   7 |         <IconPlanet size={72} />
   8 |         <h1 className="text-4xl font-bold leading-tight">Coming Soon 👀</h1>
   9 |         <p className="text-center text-muted-foreground">
  10 |           This page has not been created yet. <br />
  11 |           Stay tuned though!
  12 |         </p>
  13 |       </div>
  14 |     </div>
  15 |   );
  16 | }

```

`/workspaces/automai/src/app/[locale]/(marketing)/_components/SkipToMain.tsx`:

```tsx
   1 | const SkipToMain = () => {
   2 |   return (
   3 |     <a
   4 |       className={`fixed left-44 z-[999] -translate-y-52 whitespace-nowrap bg-primary px-4 py-2 text-sm font-medium text-primary-foreground opacity-95 shadow transition hover:bg-primary/90 focus:translate-y-3 focus:transform focus-visible:ring-1 focus-visible:ring-ring`}
   5 |       href="#content"
   6 |     >
   7 |       Skip to Main
   8 |     </a>
   9 |   );
  10 | };
  11 | 
  12 | export default SkipToMain;

```

`/workspaces/automai/src/app/[locale]/(marketing)/_components/Hero.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import Link from 'next/link';
   4 | import { useTranslations, useLocale } from 'next-intl';
   5 | 
   6 | import { Button } from '@/components/shadcn/button';
   7 | 
   8 | export function Hero() {
   9 |   const t = useTranslations('Index');
  10 |   const locale = useLocale();
  11 | 
  12 |   return (
  13 |     <div className="relative isolate px-6 pt-24 lg:px-8">
  14 |       <div className="mx-auto max-w-2xl py-32 sm:py-12 lg:py-53">
  15 |         <div className="text-center">
  16 |           <h1 className="text-4xl font-bold tracking-tight sm:text-6xl">{t('title')}</h1>
  17 |           <p className="mt-6 text-lg leading-8 text-muted-foreground">{t('description')}</p>
  18 |           <div className="mt-10 flex items-center justify-center gap-x-6">
  19 |             <Button asChild size="lg">
  20 |               <Link href={`/${locale}/signup`}>{t('getStarted')}</Link>
  21 |             </Button>
  22 |             <Button variant="outline" asChild size="lg">
  23 |               <Link href={`/${locale}/docs`}>{t('learnMore')}</Link>
  24 |             </Button>
  25 |           </div>
  26 |         </div>
  27 |       </div>
  28 |       <div
  29 |         className="absolute inset-x-0 -top-10 -z-10 transform-gpu overflow-hidden blur-3xl"
  30 |         aria-hidden="true"
  31 |       >
  32 |         <div
  33 |           className="relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-30 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]"
  34 |           style={{
  35 |             clipPath:
  36 |               'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
  37 |           }}
  38 |         />
  39 |       </div>
  40 |     </div>
  41 |   );
  42 | }

```

`/workspaces/automai/src/app/[locale]/(marketing)/_components/Features.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Bot, Code, Gauge, GitPullRequest, Shield, Zap } from 'lucide-react';
   4 | 
   5 | const features = [
   6 |   {
   7 |     name: 'AI-Powered Testing',
   8 |     description:
   9 |       'Leverage artificial intelligence to automatically generate and maintain test cases.',
  10 |     icon: Bot,
  11 |   },
  12 |   {
  13 |     name: 'Fast Execution',
  14 |     description: 'Run tests in parallel with optimized performance for quick feedback.',
  15 |     icon: Zap,
  16 |   },
  17 |   {
  18 |     name: 'Code Integration',
  19 |     description: 'Seamlessly integrate with your existing codebase and CI/CD pipeline.',
  20 |     icon: Code,
  21 |   },
  22 |   {
  23 |     name: 'Security First',
  24 |     description: 'Enterprise-grade security with role-based access control.',
  25 |     icon: Shield,
  26 |   },
  27 |   {
  28 |     name: 'Performance Metrics',
  29 |     description: 'Detailed analytics and insights into your testing process.',
  30 |     icon: Gauge,
  31 |   },
  32 |   {
  33 |     name: 'Version Control',
  34 |     description: 'Built-in version control for test cases and configurations.',
  35 |     icon: GitPullRequest,
  36 |   },
  37 | ];
  38 | 
  39 | export function Features() {
  40 |   return (
  41 |     <div className="py-16 sm:py-24">
  42 |       <div className="mx-auto max-w-7xl px-6 lg:px-8">
  43 |         <div className="mx-auto max-w-2xl lg:text-center">
  44 |           <h2 className="text-base font-semibold leading-7 text-primary">Powerful Features</h2>
  45 |           <p className="mt-2 text-3xl font-bold tracking-tight sm:text-4xl">
  46 |             Everything you need to automate testing
  47 |           </p>
  48 |           <p className="mt-6 text-lg leading-8 text-muted-foreground">
  49 |             Our platform provides comprehensive tools for automating your testing workflow, from
  50 |             test case generation to execution and reporting.
  51 |           </p>
  52 |         </div>
  53 |         <div className="mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none">
  54 |           <dl className="grid max-w-xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-3">
  55 |             {features.map((feature) => (
  56 |               <div key={feature.name} className="flex flex-col">
  57 |                 <dt className="flex items-center gap-x-3 text-base font-semibold leading-7">
  58 |                   <feature.icon className="h-5 w-5 flex-none text-primary" aria-hidden="true" />
  59 |                   {feature.name}
  60 |                 </dt>
  61 |                 <dd className="mt-4 flex flex-auto flex-col text-base leading-7 text-muted-foreground">
  62 |                   <p className="flex-auto">{feature.description}</p>
  63 |                 </dd>
  64 |               </div>
  65 |             ))}
  66 |           </dl>
  67 |         </div>
  68 |       </div>
  69 |     </div>
  70 |   );
  71 | }

```

`/workspaces/automai/src/app/[locale]/layout.tsx`:

```tsx
   1 | import { Inter } from 'next/font/google';
   2 | 
   3 | import { notFound } from 'next/navigation';
   4 | import { NextIntlClientProvider } from 'next-intl';
   5 | import { ToasterProvider } from '@/components/shadcn/toaster';
   6 | import { RoleProvider } from '@/context/RoleContext';
   7 | import { locales } from '@/config';
   8 | import { getMessages } from '@/i18n';
   9 | 
  10 | const inter = Inter({ subsets: ['latin'] });
  11 | 
  12 | // Define props type
  13 | type Props = {
  14 |   children: React.ReactNode;
  15 |   params: { locale: (typeof locales)[number] }; // "en" | "fr"
  16 | };
  17 | 
  18 | // Validate locale asynchronously
  19 | async function validateLocale(locale: string): Promise<string | null> {
  20 |   await Promise.resolve(); // Simulate async validation
  21 |   return locales.includes(locale as any) ? locale : null;
  22 | }
  23 | 
  24 | export default async function LocaleLayout({ children, params }: Props) {
  25 |   // Resolve params if it's a Promise (for safety in Next.js 15 edge cases)
  26 |   const resolvedParams = 'then' in params ? await params : params;
  27 |   const { locale } = resolvedParams;
  28 | 
  29 |   // Early exit if locale is missing
  30 |   if (!locale) {
  31 |     notFound();
  32 |   }
  33 | 
  34 |   // Validate locale
  35 |   const validLocale = await validateLocale(locale);
  36 |   if (!validLocale) {
  37 |     notFound();
  38 |   }
  39 | 
  40 |   // Fetch messages for the valid locale
  41 |   const messages = await getMessages(validLocale);
  42 | 
  43 |   return (
  44 |     <NextIntlClientProvider locale={validLocale} messages={messages} timeZone="UTC">
  45 |       <RoleProvider>
  46 |         {children}
  47 |         <ToasterProvider />
  48 |       </RoleProvider>
  49 |     </NextIntlClientProvider>
  50 |   );
  51 | }

```

`/workspaces/automai/src/app/[locale]/(auth)/layout.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | export default async function AuthLayout({ children }: { children: React.ReactNode }) {
   4 |   return (
   5 |     <div className="relative min-h-screen flex flex-col">
   6 |       <main className="flex-1">{children}</main>
   7 |     </div>
   8 |   );
   9 | }

```

`/workspaces/automai/src/app/[locale]/(auth)/reset-password/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | import { useRouter, useParams } from 'next/navigation';
   5 | import { useTranslations } from 'next-intl';
   6 | import { Button } from '@/components/shadcn/button';
   7 | import { Input } from '@/components/shadcn/input';
   8 | import { useAuth } from '@/hooks/useAuth';
   9 | 
  10 | export default function ResetPasswordPage() {
  11 |   const router = useRouter();
  12 |   const { locale } = useParams();
  13 |   const t = useTranslations('Auth');
  14 |   
  15 |   const [password, setPassword] = React.useState('');
  16 |   const [confirmPassword, setConfirmPassword] = React.useState('');
  17 |   const [error, setError] = React.useState('');
  18 |   const [success, setSuccess] = React.useState(false);
  19 |   const [isSubmitting, setIsSubmitting] = React.useState(false);
  20 |   
  21 |   // Use the auth hook
  22 |   const { error: authError, updatePassword, loading } = useAuth();
  23 | 
  24 |   // Set error from auth hook if present
  25 |   React.useEffect(() => {
  26 |     if (authError) {
  27 |       setError(authError.message);
  28 |     }
  29 |   }, [authError]);
  30 | 
  31 |   const handleSubmit = async (e: React.FormEvent) => {
  32 |     e.preventDefault();
  33 |     setError('');
  34 |     setSuccess(false);
  35 |     setIsSubmitting(true);
  36 | 
  37 |     // Validate that passwords match
  38 |     if (password !== confirmPassword) {
  39 |       setError(t('passwordsDoNotMatch') || 'Passwords do not match');
  40 |       setIsSubmitting(false);
  41 |       return;
  42 |     }
  43 | 
  44 |     try {
  45 |       const result = await updatePassword(password);
  46 |       
  47 |       if (result) {
  48 |         setSuccess(true);
  49 |         
  50 |         // Redirect to login after a short delay
  51 |         setTimeout(() => {
  52 |           router.push(`/${locale}/login`);
  53 |         }, 2000);
  54 |       }
  55 |     } catch (err: any) {
  56 |       setError(err.message || 'An error occurred');
  57 |     } finally {
  58 |       setIsSubmitting(false);
  59 |     }
  60 |   };
  61 | 
  62 |   return (
  63 |     <div className="min-h-screen w-full flex flex-col items-center justify-center bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
  64 |       <div className="absolute top-8 left-8">
  65 |         <div className="flex items-center space-x-2">
  66 |           <svg
  67 |             xmlns="http://www.w3.org/2000/svg"
  68 |             viewBox="0 0 24 24"
  69 |             fill="none"
  70 |             stroke="currentColor"
  71 |             strokeWidth="2"
  72 |             strokeLinecap="round"
  73 |             strokeLinejoin="round"
  74 |             className="h-6 w-6"
  75 |           >
  76 |             <path d="M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3" />
  77 |           </svg>
  78 |           <span className="text-xl font-bold">AutomAI</span>
  79 |         </div>
  80 |       </div>
  81 |       <div className="w-full max-w-md p-8 space-y-8 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  82 |         <div className="text-center">
  83 |           <h1 className="text-2xl font-bold">{t('resetPassword')}</h1>
  84 |           <p className="mt-2 text-gray-600 dark:text-gray-400">
  85 |             {t('enterNewPassword')}
  86 |           </p>
  87 |         </div>
  88 | 
  89 |         {success ? (
  90 |           <div className="bg-green-100 dark:bg-green-900 p-4 rounded-md text-green-800 dark:text-green-100">
  91 |             {t('passwordResetSuccess')}
  92 |           </div>
  93 |         ) : (
  94 |           <form onSubmit={handleSubmit} className="mt-8 space-y-6">
  95 |             <div>
  96 |               <label htmlFor="password" className="block text-sm font-medium">
  97 |                 {t('newPassword')}
  98 |               </label>
  99 |               <Input
 100 |                 id="password"
 101 |                 type="password"
 102 |                 value={password}
 103 |                 onChange={(e) => setPassword(e.target.value)}
 104 |                 required
 105 |                 className="mt-1"
 106 |               />
 107 |             </div>
 108 | 
 109 |             <div>
 110 |               <label htmlFor="confirmPassword" className="block text-sm font-medium">
 111 |                 {t('confirmPassword')}
 112 |               </label>
 113 |               <Input
 114 |                 id="confirmPassword"
 115 |                 type="password"
 116 |                 value={confirmPassword}
 117 |                 onChange={(e) => setConfirmPassword(e.target.value)}
 118 |                 required
 119 |                 className="mt-1"
 120 |               />
 121 |             </div>
 122 | 
 123 |             {error && (
 124 |               <div className="bg-red-100 dark:bg-red-900 p-3 rounded-md text-red-800 dark:text-red-100 text-sm">
 125 |                 {error}
 126 |               </div>
 127 |             )}
 128 | 
 129 |             <Button
 130 |               type="submit"
 131 |               className="w-full"
 132 |               disabled={isSubmitting || loading}
 133 |             >
 134 |               {isSubmitting || loading ? t('resetting') : t('resetPassword')}
 135 |             </Button>
 136 | 
 137 |             <div className="text-center mt-4">
 138 |               <a
 139 |                 href={`/${locale}/login`}
 140 |                 className="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
 141 |               >
 142 |                 {t('backToLogin')}
 143 |               </a>
 144 |             </div>
 145 |           </form>
 146 |         )}
 147 |       </div>
 148 |     </div>
 149 |   );
 150 | }

```

`/workspaces/automai/src/app/[locale]/(auth)/signup/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Chrome, Github } from 'lucide-react';
   4 | import Link from 'next/link';
   5 | import { useRouter, useParams } from 'next/navigation';
   6 | import { useTranslations } from 'next-intl';
   7 | import * as React from 'react';
   8 | 
   9 | import { Button } from '@/components/shadcn/button';
  10 | import { Input } from '@/components/shadcn/input';
  11 | import { useAuth } from '@/hooks/useAuth';
  12 | 
  13 | export default function SignUpPage() {
  14 |   const router = useRouter();
  15 |   const { locale } = useParams();
  16 |   const t = useTranslations('Auth');
  17 |   const [name, setName] = React.useState('');
  18 |   const [email, setEmail] = React.useState('');
  19 |   const [password, setPassword] = React.useState('');
  20 |   const [confirmPassword, setConfirmPassword] = React.useState('');
  21 |   const [error, setError] = React.useState('');
  22 |   const [success, setSuccess] = React.useState(false);
  23 |   const [isSubmitting, setIsSubmitting] = React.useState(false);
  24 | 
  25 |   const { user, loading, error: authError, signUp, signInWithOAuth } = useAuth();
  26 | 
  27 |   React.useEffect(() => {
  28 |     if (user && !loading) {
  29 |       router.push(`/${locale}/${user.user_metadata?.tenant_id || 'default'}/dashboard`);
  30 |     }
  31 |   }, [user, loading, router, locale]);
  32 | 
  33 |   React.useEffect(() => {
  34 |     if (authError) {
  35 |       setError(authError.message);
  36 |     }
  37 |   }, [authError]);
  38 | 
  39 |   const handleSubmit = async (e: React.FormEvent) => {
  40 |     e.preventDefault();
  41 |     setError('');
  42 |     setIsSubmitting(true);
  43 | 
  44 |     // Validate that passwords match
  45 |     if (password !== confirmPassword) {
  46 |       setError(t('passwordsDoNotMatch') || 'Passwords do not match');
  47 |       setIsSubmitting(false);
  48 |       return;
  49 |     }
  50 | 
  51 |     try {
  52 |       // Create user with our auth hook
  53 |       const redirectUrl = `${window.location.origin}/${locale}/auth-redirect`;
  54 |       const result = await signUp(email, password, name, redirectUrl);
  55 | 
  56 |       if (result?.session) {
  57 |         // Email confirmation not required, user is signed in
  58 |         setSuccess(true);
  59 | 
  60 |         // Redirect to dashboard after a short delay
  61 |         setTimeout(() => {
  62 |           router.push(`/${locale}/${result.user?.user_metadata?.tenant_id || 'default'}/dashboard`);
  63 |         }, 2000);
  64 |       } else if (result?.user) {
  65 |         // Email confirmation required
  66 |         setSuccess(true);
  67 |       }
  68 |     } catch (err: any) {
  69 |       setError(err.message || 'An error occurred');
  70 |     } finally {
  71 |       setIsSubmitting(false);
  72 |     }
  73 |   };
  74 | 
  75 |   const handleOAuthSignUp = async (provider: 'google' | 'github') => {
  76 |     try {
  77 |       // Use our auth hook for OAuth
  78 |       const redirectUrl = `${window.location.origin}/${locale}/auth-redirect`;
  79 |       const result = await signInWithOAuth(provider, redirectUrl);
  80 |       
  81 |       if (result?.url) {
  82 |         // Redirect to OAuth provider
  83 |         window.location.href = result.url;
  84 |       }
  85 |     } catch (err: any) {
  86 |       setError(err.message || 'An error occurred');
  87 |     }
  88 |   };
  89 | 
  90 |   return (
  91 |     <div className="min-h-screen w-full flex flex-col items-center justify-center bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
  92 |       <div className="absolute top-8 left-8">
  93 |         <div className="flex items-center space-x-2">
  94 |           <svg
  95 |             xmlns="http://www.w3.org/2000/svg"
  96 |             viewBox="0 0 24 24"
  97 |             fill="none"
  98 |             stroke="currentColor"
  99 |             strokeWidth="2"
 100 |             strokeLinecap="round"
 101 |             strokeLinejoin="round"
 102 |             className="h-8 w-8 text-primary"
 103 |           >
 104 |             <path d="M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3" />
 105 |           </svg>
 106 |           <span className="text-2xl font-bold text-primary">Automai</span>
 107 |         </div>
 108 |       </div>
 109 | 
 110 |       <div className="w-full max-w-[400px] p-4 sm:p-0 space-y-6">
 111 |         <div className="flex flex-col space-y-2 text-center">
 112 |           <h1 className="text-2xl font-semibold tracking-tight">{t('signupTitle') || 'Sign Up'}</h1>
 113 |           <p className="text-sm text-muted-foreground">
 114 |             {t('signupDescription') || 'Create an account to get started'}
 115 |           </p>
 116 |         </div>
 117 | 
 118 |         {success ? (
 119 |           <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-md text-center">
 120 |             <p className="text-green-700 dark:text-green-300">
 121 |               {t('signupSuccess') ||
 122 |                 'Account created successfully! Please check your email to verify your account.'}
 123 |             </p>
 124 |             <Button className="mt-4 w-full" onClick={() => router.push(`/${locale}/login`)}>
 125 |               {t('backToLogin')}
 126 |             </Button>
 127 |           </div>
 128 |         ) : (
 129 |           <div className="grid gap-6">
 130 |             <form onSubmit={handleSubmit} className="space-y-4">
 131 |               <div className="grid gap-2">
 132 |                 <div className="grid gap-1">
 133 |                   <Input
 134 |                     id="name"
 135 |                     placeholder={t('namePlaceholder') || 'Your name'}
 136 |                     type="text"
 137 |                     autoComplete="name"
 138 |                     value={name}
 139 |                     onChange={(e) => setName(e.target.value)}
 140 |                     required
 141 |                     className="h-11"
 142 |                   />
 143 |                 </div>
 144 |                 <div className="grid gap-1">
 145 |                   <Input
 146 |                     id="email"
 147 |                     placeholder={t('emailPlaceholder') || 'Email address'}
 148 |                     type="email"
 149 |                     autoCapitalize="none"
 150 |                     autoComplete="email"
 151 |                     autoCorrect="off"
 152 |                     value={email}
 153 |                     onChange={(e) => setEmail(e.target.value)}
 154 |                     required
 155 |                     className="h-11"
 156 |                   />
 157 |                 </div>
 158 |                 <div className="grid gap-1">
 159 |                   <Input
 160 |                     id="password"
 161 |                     placeholder={t('passwordPlaceholder') || 'Password'}
 162 |                     type="password"
 163 |                     autoComplete="new-password"
 164 |                     value={password}
 165 |                     onChange={(e) => setPassword(e.target.value)}
 166 |                     required
 167 |                     className="h-11"
 168 |                   />
 169 |                 </div>
 170 |                 <div className="grid gap-1">
 171 |                   <Input
 172 |                     id="confirmPassword"
 173 |                     placeholder={t('confirmPasswordPlaceholder') || 'Confirm password'}
 174 |                     type="password"
 175 |                     autoComplete="new-password"
 176 |                     value={confirmPassword}
 177 |                     onChange={(e) => setConfirmPassword(e.target.value)}
 178 |                     required
 179 |                     className="h-11"
 180 |                   />
 181 |                 </div>
 182 |                 {error && (
 183 |                   <div className="text-sm text-red-500 text-center bg-red-50 dark:bg-red-900/20 p-2 rounded">
 184 |                     {error}
 185 |                   </div>
 186 |                 )}
 187 |               </div>
 188 | 
 189 |               <Button type="submit" className="w-full h-11 text-base" disabled={isSubmitting}>
 190 |                 {isSubmitting
 191 |                   ? t('signingUp') || 'Signing up...'
 192 |                   : t('signupButton') || 'Create Account'}
 193 |               </Button>
 194 |             </form>
 195 | 
 196 |             <div className="relative">
 197 |               <div className="absolute inset-0 flex items-center">
 198 |                 <span className="w-full border-t" />
 199 |               </div>
 200 |               <div className="relative flex justify-center text-xs uppercase">
 201 |                 <span className="bg-background px-2 text-muted-foreground">
 202 |                   {t('orContinueWith')}
 203 |                 </span>
 204 |               </div>
 205 |             </div>
 206 | 
 207 |             <div className="grid grid-cols-2 gap-4">
 208 |               <Button
 209 |                 variant="outline"
 210 |                 onClick={() => handleOAuthSignUp('google')}
 211 |                 className="h-11"
 212 |               >
 213 |                 <Chrome className="mr-2 h-5 w-5" />
 214 |                 Google
 215 |               </Button>
 216 |               <Button
 217 |                 variant="outline"
 218 |                 onClick={() => handleOAuthSignUp('github')}
 219 |                 className="h-11"
 220 |               >
 221 |                 <Github className="mr-2 h-5 w-5" />
 222 |                 GitHub
 223 |               </Button>
 224 |             </div>
 225 |           </div>
 226 |         )}
 227 | 
 228 |         <div className="text-sm text-muted-foreground text-center">
 229 |           {t('alreadyHaveAccount') || 'Already have an account?'}{' '}
 230 |           <Link
 231 |             href={`/${locale}/login`}
 232 |             className="text-primary underline-offset-4 hover:underline font-medium"
 233 |           >
 234 |             {t('loginLink') || 'Sign in'}
 235 |           </Link>
 236 |         </div>
 237 |       </div>
 238 |     </div>
 239 |   );
 240 | }

```

`/workspaces/automai/src/app/[locale]/(auth)/login/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | import { useRouter, useParams } from 'next/navigation';
   5 | import { useTranslations } from 'next-intl';
   6 | import { Button } from '@/components/shadcn/button';
   7 | import { Input } from '@/components/shadcn/input';
   8 | import { useAuth } from '@/hooks/useAuth';
   9 | 
  10 | export default function LoginPage() {
  11 |   const router = useRouter();
  12 |   const { locale } = useParams();
  13 |   const t = useTranslations('Auth');
  14 |   
  15 |   const [email, setEmail] = React.useState('');
  16 |   const [password, setPassword] = React.useState('');
  17 |   const [error, setError] = React.useState('');
  18 |   const [isSubmitting, setIsSubmitting] = React.useState(false);
  19 |   const [isAuthenticating, setIsAuthenticating] = React.useState(false);
  20 |   
  21 |   // Use the auth hook
  22 |   const { user, loading, error: authError, signInWithPassword, signInWithOAuth } = useAuth();
  23 | 
  24 |   // Redirect if user is already logged in
  25 |   React.useEffect(() => {
  26 |     if (user && !loading) {
  27 |       // Use tenant_name or default to 'trial'
  28 |       const tenantName = user.user_metadata?.tenant_name || 'trial';
  29 |       
  30 |       console.log('Login page redirecting to tenant:', tenantName);
  31 |       router.push(`/${locale}/${tenantName}/dashboard`);
  32 |     }
  33 |   }, [user, loading, router, locale]);
  34 | 
  35 |   // Set error from auth hook if present
  36 |   React.useEffect(() => {
  37 |     if (authError) {
  38 |       setError(authError.message);
  39 |       setIsAuthenticating(false);
  40 |     }
  41 |   }, [authError]);
  42 | 
  43 |   // Check if we were redirected back to login page after an OAuth attempt
  44 |   React.useEffect(() => {
  45 |     // If we have an error in the URL, it means we were redirected back after a failed OAuth attempt
  46 |     const urlParams = new URLSearchParams(window.location.search);
  47 |     const errorParam = urlParams.get('error');
  48 |     
  49 |     if (errorParam) {
  50 |       setError(decodeURIComponent(errorParam));
  51 |       setIsAuthenticating(false);
  52 |     }
  53 |   }, []);
  54 | 
  55 |   const handleSubmit = async (e: React.FormEvent) => {
  56 |     e.preventDefault();
  57 |     
  58 |     // Prevent multiple submissions
  59 |     if (isSubmitting || loading || isAuthenticating) {
  60 |       return;
  61 |     }
  62 |     
  63 |     setError('');
  64 |     setIsSubmitting(true);
  65 |     setIsAuthenticating(true);
  66 | 
  67 |     try {
  68 |       const result = await signInWithPassword(email, password);
  69 |       
  70 |       if (result?.session) {
  71 |         // Use tenant_name or default to 'trial'
  72 |         const tenantName = result.user?.user_metadata?.tenant_name || 'trial';
  73 |         
  74 |         console.log('Login submission redirecting to tenant:', tenantName);
  75 |         // Redirect to dashboard
  76 |         router.push(`/${locale}/${tenantName}/dashboard`);
  77 |       } else {
  78 |         // If no session but no error thrown, still reset the submission state
  79 |         setIsSubmitting(false);
  80 |         setIsAuthenticating(false);
  81 |       }
  82 |     } catch (err: any) {
  83 |       setError(err.message || 'An error occurred');
  84 |       setIsSubmitting(false);
  85 |       setIsAuthenticating(false);
  86 |     }
  87 |   };
  88 | 
  89 |   const handleOAuthLogin = async (provider: 'google' | 'github') => {
  90 |     try {
  91 |       setIsAuthenticating(true);
  92 |       setError('');
  93 |       
  94 |       const redirectUrl = `${window.location.origin}/${locale}/auth-redirect`;
  95 |       const result = await signInWithOAuth(provider, redirectUrl);
  96 |       
  97 |       if (result?.url) {
  98 |         // Redirect to OAuth provider
  99 |         window.location.href = result.url;
 100 |       } else {
 101 |         // If no URL is returned, something went wrong
 102 |         setError('Failed to initiate login');
 103 |         setIsAuthenticating(false);
 104 |       }
 105 |     } catch (err: any) {
 106 |       setError(err.message || 'An error occurred');
 107 |       setIsAuthenticating(false);
 108 |     }
 109 |   };
 110 | 
 111 |   // Determine if buttons should be disabled
 112 |   const isButtonDisabled = isSubmitting || loading || isAuthenticating;
 113 | 
 114 |   return (
 115 |     <div className="min-h-screen w-full flex flex-col items-center justify-center bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
 116 |       <div className="absolute top-8 left-8">
 117 |         <div className="flex items-center space-x-2">
 118 |           <svg
 119 |             xmlns="http://www.w3.org/2000/svg"
 120 |             viewBox="0 0 24 24"
 121 |             fill="none"
 122 |             stroke="currentColor"
 123 |             strokeWidth="2"
 124 |             strokeLinecap="round"
 125 |             strokeLinejoin="round"
 126 |             className="h-6 w-6"
 127 |           >
 128 |             <path d="M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3" />
 129 |           </svg>
 130 |           <span className="text-xl font-bold">AutomAI</span>
 131 |         </div>
 132 |       </div>
 133 |       <div className="w-full max-w-md p-8 space-y-8 bg-white dark:bg-gray-800 rounded-lg shadow-md">
 134 |         <div className="text-center">
 135 |           <h1 className="text-2xl font-bold">{t('signIn')}</h1>
 136 |           <p className="mt-2 text-gray-600 dark:text-gray-400">
 137 |             {t('signInToYourAccount')}
 138 |           </p>
 139 |         </div>
 140 | 
 141 |         <form onSubmit={handleSubmit} className="mt-8 space-y-6">
 142 |           <div>
 143 |             <label htmlFor="email" className="block text-sm font-medium">
 144 |               {t('email')}
 145 |             </label>
 146 |             <Input
 147 |               id="email"
 148 |               type="email"
 149 |               value={email}
 150 |               onChange={(e) => setEmail(e.target.value)}
 151 |               required
 152 |               className="mt-1"
 153 |               placeholder="you@example.com"
 154 |               autoComplete="username"
 155 |               disabled={isButtonDisabled}
 156 |             />
 157 |           </div>
 158 | 
 159 |           <div>
 160 |             <div className="flex items-center justify-between">
 161 |               <label htmlFor="password" className="block text-sm font-medium">
 162 |                 {t('password')}
 163 |               </label>
 164 |               <a
 165 |                 href={`/${locale}/forgot-password`}
 166 |                 className="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
 167 |               >
 168 |                 {t('forgotPassword')}
 169 |               </a>
 170 |             </div>
 171 |             <Input
 172 |               id="password"
 173 |               type="password"
 174 |               value={password}
 175 |               onChange={(e) => setPassword(e.target.value)}
 176 |               required
 177 |               className="mt-1"
 178 |               autoComplete="current-password"
 179 |               disabled={isButtonDisabled}
 180 |             />
 181 |           </div>
 182 | 
 183 |           {error && (
 184 |             <div className="bg-red-100 dark:bg-red-900 p-3 rounded-md text-red-800 dark:text-red-100 text-sm">
 185 |               {error}
 186 |             </div>
 187 |           )}
 188 | 
 189 |           <Button
 190 |             type="submit"
 191 |             className="w-full"
 192 |             disabled={isButtonDisabled}
 193 |           >
 194 |             {isSubmitting || loading ? t('signingIn') : t('signIn')}
 195 |           </Button>
 196 | 
 197 |           <div className="relative my-4">
 198 |             <div className="absolute inset-0 flex items-center">
 199 |               <div className="w-full border-t border-gray-300 dark:border-gray-700"></div>
 200 |             </div>
 201 |             <div className="relative flex justify-center text-sm">
 202 |               <span className="px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">
 203 |                 {t('orContinueWith')}
 204 |               </span>
 205 |             </div>
 206 |           </div>
 207 | 
 208 |           <div className="grid grid-cols-2 gap-3">
 209 |             <Button
 210 |               type="button"
 211 |               variant="outline"
 212 |               onClick={() => handleOAuthLogin('google')}
 213 |               className="flex items-center justify-center"
 214 |               disabled={isButtonDisabled}
 215 |             >
 216 |               <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
 217 |                 <path
 218 |                   d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
 219 |                   fill="#4285F4"
 220 |                 />
 221 |                 <path
 222 |                   d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
 223 |                   fill="#34A853"
 224 |                 />
 225 |                 <path
 226 |                   d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
 227 |                   fill="#FBBC05"
 228 |                 />
 229 |                 <path
 230 |                   d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
 231 |                   fill="#EA4335"
 232 |                 />
 233 |                 <path d="M1 1h22v22H1z" fill="none" />
 234 |               </svg>
 235 |               Google
 236 |             </Button>
 237 |             <Button
 238 |               type="button"
 239 |               variant="outline"
 240 |               onClick={() => handleOAuthLogin('github')}
 241 |               className="flex items-center justify-center"
 242 |               disabled={isButtonDisabled}
 243 |             >
 244 |               <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
 245 |                 <path
 246 |                   d="M12 2C6.477 2 2 6.477 2 12c0 4.42 2.865 8.166 6.839 9.489.5.092.682-.217.682-.482 0-.237-.008-.866-.013-1.7-2.782.603-3.369-1.34-3.369-1.34-.454-1.156-1.11-1.462-1.11-1.462-.908-.62.069-.608.069-.608 1.003.07 1.531 1.03 1.531 1.03.892 1.529 2.341 1.087 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.025A9.578 9.578 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.025 2.747-1.025.546 1.377.202 2.394.1 2.647.64.699 1.028 1.592 1.028 2.683 0 3.842-2.339 4.687-4.566 4.935.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.578.688.48C19.138 20.161 22 16.416 22 12c0-5.523-4.477-10-10-10z"
 247 |                   fill="currentColor"
 248 |                 />
 249 |               </svg>
 250 |               GitHub
 251 |             </Button>
 252 |           </div>
 253 | 
 254 |           <div className="text-center mt-4">
 255 |             <p className="text-sm text-gray-600 dark:text-gray-400">
 256 |               {t('dontHaveAccount')}{' '}
 257 |               <a
 258 |                 href={`/${locale}/signup`}
 259 |                 className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
 260 |               >
 261 |                 {t('signUp')}
 262 |               </a>
 263 |             </p>
 264 |           </div>
 265 |         </form>
 266 |       </div>
 267 |     </div>
 268 |   );
 269 | }

```

`/workspaces/automai/src/app/[locale]/(auth)/forgot-password/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | import { useRouter, useParams } from 'next/navigation';
   5 | import { useTranslations } from 'next-intl';
   6 | import { Button } from '@/components/shadcn/button';
   7 | import { Input } from '@/components/shadcn/input';
   8 | import { useAuth } from '@/hooks/useAuth';
   9 | 
  10 | export default function ForgotPasswordPage() {
  11 |   const router = useRouter();
  12 |   const { locale } = useParams();
  13 |   const t = useTranslations('Auth');
  14 |   const [email, setEmail] = React.useState('');
  15 |   const [error, setError] = React.useState('');
  16 |   const [success, setSuccess] = React.useState(false);
  17 |   const [isSubmitting, setIsSubmitting] = React.useState(false);
  18 |   
  19 |   // Use the auth hook
  20 |   const { error: authError, resetPassword, loading } = useAuth();
  21 | 
  22 |   // Set error from auth hook if present
  23 |   React.useEffect(() => {
  24 |     if (authError) {
  25 |       setError(authError.message);
  26 |     }
  27 |   }, [authError]);
  28 | 
  29 |   const handleSubmit = async (e: React.FormEvent) => {
  30 |     e.preventDefault();
  31 |     setError('');
  32 |     setSuccess(false);
  33 |     setIsSubmitting(true);
  34 | 
  35 |     try {
  36 |       const redirectUrl = `${window.location.origin}/${locale}/reset-password`;
  37 |       const result = await resetPassword(email, redirectUrl);
  38 |       
  39 |       if (result) {
  40 |         setSuccess(true);
  41 |       }
  42 |     } catch (err: any) {
  43 |       setError(err.message || 'An error occurred');
  44 |     } finally {
  45 |       setIsSubmitting(false);
  46 |     }
  47 |   };
  48 | 
  49 |   return (
  50 |     <div className="min-h-screen w-full flex flex-col items-center justify-center bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
  51 |       <div className="absolute top-8 left-8">
  52 |         <div className="flex items-center space-x-2">
  53 |           <svg
  54 |             xmlns="http://www.w3.org/2000/svg"
  55 |             viewBox="0 0 24 24"
  56 |             fill="none"
  57 |             stroke="currentColor"
  58 |             strokeWidth="2"
  59 |             strokeLinecap="round"
  60 |             strokeLinejoin="round"
  61 |             className="h-6 w-6"
  62 |           >
  63 |             <path d="M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3" />
  64 |           </svg>
  65 |           <span className="text-xl font-bold">AutomAI</span>
  66 |         </div>
  67 |       </div>
  68 |       <div className="w-full max-w-md p-8 space-y-8 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  69 |         <div className="text-center">
  70 |           <h1 className="text-2xl font-bold">{t('forgotPassword')}</h1>
  71 |           <p className="mt-2 text-gray-600 dark:text-gray-400">
  72 |             {t('enterEmailToReset')}
  73 |           </p>
  74 |         </div>
  75 | 
  76 |         {success ? (
  77 |           <div className="bg-green-100 dark:bg-green-900 p-4 rounded-md text-green-800 dark:text-green-100">
  78 |             {t('resetLinkSent')}
  79 |           </div>
  80 |         ) : (
  81 |           <form onSubmit={handleSubmit} className="mt-8 space-y-6">
  82 |             <div>
  83 |               <label htmlFor="email" className="block text-sm font-medium">
  84 |                 {t('email')}
  85 |               </label>
  86 |               <Input
  87 |                 id="email"
  88 |                 type="email"
  89 |                 value={email}
  90 |                 onChange={(e) => setEmail(e.target.value)}
  91 |                 required
  92 |                 className="mt-1"
  93 |                 placeholder="you@example.com"
  94 |               />
  95 |             </div>
  96 | 
  97 |             {error && (
  98 |               <div className="bg-red-100 dark:bg-red-900 p-3 rounded-md text-red-800 dark:text-red-100 text-sm">
  99 |                 {error}
 100 |               </div>
 101 |             )}
 102 | 
 103 |             <Button
 104 |               type="submit"
 105 |               className="w-full"
 106 |               disabled={isSubmitting || loading}
 107 |             >
 108 |               {isSubmitting || loading ? t('sending') : t('sendResetLink')}
 109 |             </Button>
 110 | 
 111 |             <div className="text-center mt-4">
 112 |               <a
 113 |                 href={`/${locale}/login`}
 114 |                 className="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
 115 |               >
 116 |                 {t('backToLogin')}
 117 |               </a>
 118 |             </div>
 119 |           </form>
 120 |         )}
 121 |       </div>
 122 |     </div>
 123 |   );
 124 | }

```

`/workspaces/automai/src/app/[locale]/(auth)/auth-redirect/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useEffect, useState } from 'react';
   4 | import { useRouter, useParams, useSearchParams } from 'next/navigation';
   5 | import { useAuth } from '@/hooks/useAuth';
   6 | 
   7 | // Add error boundary component
   8 | function ErrorFallback({ error, locale }: { error: Error; locale: string }) {
   9 |   return (
  10 |     <div className="min-h-screen flex items-center justify-center bg-background">
  11 |       <div className="text-center space-y-4 text-foreground p-6 bg-red-50 dark:bg-red-900/20 rounded-lg max-w-md">
  12 |         <h2 className="text-2xl font-bold text-red-600 dark:text-red-400">Authentication Error</h2>
  13 |         <p className="text-sm">{error.message}</p>
  14 |         <div className="pt-4">
  15 |           <a 
  16 |             href={`/${locale}/login`}
  17 |             className="px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90"
  18 |           >
  19 |             Return to Login
  20 |           </a>
  21 |         </div>
  22 |       </div>
  23 |     </div>
  24 |   );
  25 | }
  26 | 
  27 | // Loading component to show while processing
  28 | function LoadingState() {
  29 |   return (
  30 |     <div className="min-h-screen flex items-center justify-center bg-background">
  31 |       <div className="text-center space-y-4">
  32 |         <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
  33 |         <p className="text-foreground">Completing authentication...</p>
  34 |       </div>
  35 |     </div>
  36 |   );
  37 | }
  38 | 
  39 | export default function AuthRedirectPage() {
  40 |   const router = useRouter();
  41 |   const params = useParams();
  42 |   const searchParams = useSearchParams();
  43 |   const { loading, exchangeCodeForSession } = useAuth();
  44 |   const [authError, setAuthError] = useState<Error | null>(null);
  45 |   const [isProcessing, setIsProcessing] = useState(true);
  46 |   const [hasRedirected, setHasRedirected] = useState(false);
  47 |   const locale = params.locale as string;
  48 |   
  49 |   // Get search params
  50 |   const code = searchParams.get('code');
  51 |   const errorParam = searchParams.get('error');
  52 |   const errorDescription = searchParams.get('error_description');
  53 | 
  54 |   // Handle the authentication process
  55 |   useEffect(() => {
  56 |     // Skip if we've already processed or there's no code
  57 |     if (hasRedirected || !code) {
  58 |       setIsProcessing(false);
  59 |       return;
  60 |     }
  61 | 
  62 |     async function processAuth() {
  63 |       try {
  64 |         // If there's an error in the URL, show it
  65 |         if (errorParam) {
  66 |           setAuthError(new Error(errorDescription || errorParam));
  67 |           setIsProcessing(false);
  68 |           return;
  69 |         }
  70 | 
  71 |         // Process authentication using the hook
  72 |         // This follows the three-layer architecture: client component → client hook → server action → server db
  73 |         const result = await exchangeCodeForSession();
  74 |         
  75 |         if (!result.success) {
  76 |           setAuthError(new Error(result.error || 'Authentication failed'));
  77 |           setIsProcessing(false);
  78 |           return;
  79 |         }
  80 |         
  81 |         // Handle redirect using Next.js router for client-side navigation
  82 |         // The redirect URL is determined by the server action
  83 |         if (result.redirectUrl) {
  84 |           setHasRedirected(true);
  85 |           router.push(result.redirectUrl);
  86 |         }
  87 |       } catch (err) {
  88 |         console.error('Error in auth process:', err);
  89 |         setAuthError(err instanceof Error ? err : new Error('Authentication failed'));
  90 |         setIsProcessing(false);
  91 |       }
  92 |     }
  93 | 
  94 |     processAuth();
  95 |   }, [code, errorParam, errorDescription, exchangeCodeForSession, hasRedirected, router]);
  96 | 
  97 |   // Show error if there is one
  98 |   if (authError) {
  99 |     return <ErrorFallback error={authError} locale={locale} />;
 100 |   }
 101 | 
 102 |   // Show loading state while processing
 103 |   if (isProcessing || loading) {
 104 |     return <LoadingState />;
 105 |   }
 106 | 
 107 |   // Fallback for any other case - should rarely be seen as the action should redirect
 108 |   return <LoadingState />;
 109 | }

```

`/workspaces/automai/src/app/[locale]/projects/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useState } from 'react';
   4 | import { useProjects } from '@/hooks/useProjects';
   5 | import { useRouter } from 'next/navigation';
   6 | import { useTranslations } from 'next-intl';
   7 | import { PageHeader } from '@/components/layout/PageHeader';
   8 | import { Main } from '@/components/layout/Main';
   9 | import { Button } from '@/components/shadcn/button';
  10 | import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/shadcn/card';
  11 | import { Input } from '@/components/shadcn/input';
  12 | import { Textarea } from '@/components/shadcn/textarea';
  13 | import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/shadcn/dialog';
  14 | import { Skeleton } from '@/components/shadcn/skeleton';
  15 | import { Plus, Edit, Trash2, ExternalLink } from 'lucide-react';
  16 | import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/shadcn/alert-dialog';
  17 | 
  18 | export default function ProjectsPage() {
  19 |   const router = useRouter();
  20 |   const t = useTranslations('Projects');
  21 |   const { projects, loading, error, addProject, removeProject } = useProjects();
  22 |   const [newProjectName, setNewProjectName] = useState('');
  23 |   const [newProjectDescription, setNewProjectDescription] = useState('');
  24 |   const [isDialogOpen, setIsDialogOpen] = useState(false);
  25 | 
  26 |   const handleCreateProject = async () => {
  27 |     if (!newProjectName.trim()) return;
  28 |     
  29 |     const result = await addProject({
  30 |       name: newProjectName,
  31 |       description: newProjectDescription
  32 |     });
  33 |     
  34 |     if (result) {
  35 |       setNewProjectName('');
  36 |       setNewProjectDescription('');
  37 |       setIsDialogOpen(false);
  38 |     }
  39 |   };
  40 | 
  41 |   const handleViewProject = (id: string) => {
  42 |     router.push(`/projects/${id}`);
  43 |   };
  44 | 
  45 |   const renderProjects = () => {
  46 |     if (loading) {
  47 |       return Array(3).fill(0).map((_, i) => (
  48 |         <Card key={i} className="w-full">
  49 |           <CardHeader>
  50 |             <Skeleton className="h-8 w-3/4" />
  51 |             <Skeleton className="h-4 w-1/2" />
  52 |           </CardHeader>
  53 |           <CardContent>
  54 |             <Skeleton className="h-16 w-full" />
  55 |           </CardContent>
  56 |           <CardFooter>
  57 |             <Skeleton className="h-10 w-24 mr-2" />
  58 |             <Skeleton className="h-10 w-24" />
  59 |           </CardFooter>
  60 |         </Card>
  61 |       ));
  62 |     }
  63 | 
  64 |     if (error) {
  65 |       return (
  66 |         <Card className="w-full">
  67 |           <CardHeader>
  68 |             <CardTitle>{t('error')}</CardTitle>
  69 |             <CardDescription>{t('failedToLoadProjects')}</CardDescription>
  70 |           </CardHeader>
  71 |           <CardContent>
  72 |             <p className="text-destructive">{error.message}</p>
  73 |           </CardContent>
  74 |         </Card>
  75 |       );
  76 |     }
  77 | 
  78 |     if (projects.length === 0) {
  79 |       return (
  80 |         <Card className="w-full">
  81 |           <CardHeader>
  82 |             <CardTitle>{t('noProjects')}</CardTitle>
  83 |             <CardDescription>{t('noProjectsDescription')}</CardDescription>
  84 |           </CardHeader>
  85 |           <CardContent>
  86 |             <p>{t('createYourFirstProject')}</p>
  87 |           </CardContent>
  88 |           <CardFooter>
  89 |             <Button onClick={() => setIsDialogOpen(true)}>
  90 |               <Plus className="mr-2 h-4 w-4" /> {t('createProject')}
  91 |             </Button>
  92 |           </CardFooter>
  93 |         </Card>
  94 |       );
  95 |     }
  96 | 
  97 |     return projects.map((project) => (
  98 |       <Card key={project.id} className="w-full">
  99 |         <CardHeader>
 100 |           <CardTitle>{project.name}</CardTitle>
 101 |           <CardDescription>
 102 |             {t('createdOn', { date: new Date(project.created_at).toLocaleDateString() })}
 103 |           </CardDescription>
 104 |         </CardHeader>
 105 |         <CardContent>
 106 |           <p className="text-muted-foreground line-clamp-2">
 107 |             {project.description || t('noDescription')}
 108 |           </p>
 109 |         </CardContent>
 110 |         <CardFooter className="flex justify-between">
 111 |           <Button variant="outline" onClick={() => handleViewProject(project.id)}>
 112 |             <ExternalLink className="mr-2 h-4 w-4" /> {t('view')}
 113 |           </Button>
 114 |           <AlertDialog>
 115 |             <AlertDialogTrigger asChild>
 116 |               <Button variant="destructive" size="sm">
 117 |                 <Trash2 className="mr-2 h-4 w-4" /> {t('delete')}
 118 |               </Button>
 119 |             </AlertDialogTrigger>
 120 |             <AlertDialogContent>
 121 |               <AlertDialogHeader>
 122 |                 <AlertDialogTitle>{t('areYouSure')}</AlertDialogTitle>
 123 |                 <AlertDialogDescription>
 124 |                   {t('deleteProjectConfirmation')}
 125 |                 </AlertDialogDescription>
 126 |               </AlertDialogHeader>
 127 |               <AlertDialogFooter>
 128 |                 <AlertDialogCancel>{t('cancel')}</AlertDialogCancel>
 129 |                 <AlertDialogAction onClick={() => removeProject(project.id)}>
 130 |                   {t('delete')}
 131 |                 </AlertDialogAction>
 132 |               </AlertDialogFooter>
 133 |             </AlertDialogContent>
 134 |           </AlertDialog>
 135 |         </CardFooter>
 136 |       </Card>
 137 |     ));
 138 |   };
 139 | 
 140 |   return (
 141 |     <Main>
 142 |       <PageHeader
 143 |         title={t('projects')}
 144 |         description={t('manageYourProjects')}
 145 |       >
 146 |         <Button onClick={() => setIsDialogOpen(true)}>
 147 |           <Plus className="mr-2 h-4 w-4" /> {t('createProject')}
 148 |         </Button>
 149 |       </PageHeader>
 150 |       
 151 |       <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 mt-6">
 152 |         {renderProjects()}
 153 |       </div>
 154 | 
 155 |       <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
 156 |         <DialogContent>
 157 |           <DialogHeader>
 158 |             <DialogTitle>{t('createNewProject')}</DialogTitle>
 159 |             <DialogDescription>
 160 |               {t('fillProjectDetails')}
 161 |             </DialogDescription>
 162 |           </DialogHeader>
 163 |           <div className="grid gap-4 py-4">
 164 |             <div className="grid gap-2">
 165 |               <label htmlFor="name">{t('projectName')}</label>
 166 |               <Input
 167 |                 id="name"
 168 |                 value={newProjectName}
 169 |                 onChange={(e) => setNewProjectName(e.target.value)}
 170 |                 placeholder={t('projectNamePlaceholder')}
 171 |               />
 172 |             </div>
 173 |             <div className="grid gap-2">
 174 |               <label htmlFor="description">{t('projectDescription')}</label>
 175 |               <Textarea
 176 |                 id="description"
 177 |                 value={newProjectDescription}
 178 |                 onChange={(e) => setNewProjectDescription(e.target.value)}
 179 |                 placeholder={t('projectDescriptionPlaceholder')}
 180 |               />
 181 |             </div>
 182 |           </div>
 183 |           <DialogFooter>
 184 |             <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
 185 |               {t('cancel')}
 186 |             </Button>
 187 |             <Button onClick={handleCreateProject}>
 188 |               {t('create')}
 189 |             </Button>
 190 |           </DialogFooter>
 191 |         </DialogContent>
 192 |       </Dialog>
 193 |     </Main>
 194 |   );
 195 | } 

```

`/workspaces/automai/src/app/[locale]/projects/[id]/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { ProjectDetail } from '@/components/projects/ProjectDetail';
   4 | import { useParams, useRouter } from 'next/navigation';
   5 | import { useTranslations } from 'next-intl';
   6 | import { PageHeader } from '@/components/layout/PageHeader';
   7 | import { Main } from '@/components/layout/Main';
   8 | 
   9 | export default function ProjectPage() {
  10 |   const params = useParams();
  11 |   const router = useRouter();
  12 |   const t = useTranslations('Projects');
  13 |   const projectId = params.id as string;
  14 |   const locale = params.locale as string;
  15 | 
  16 |   const handleBack = () => {
  17 |     router.push(`/${locale}/projects`);
  18 |   };
  19 | 
  20 |   return (
  21 |     <Main>
  22 |       <PageHeader 
  23 |         title={t('projectDetails')}
  24 |         description={t('viewAndManageProject')}
  25 |       />
  26 |       <div className="grid gap-8 mt-6">
  27 |         <ProjectDetail projectId={projectId} onBack={handleBack} />
  28 |       </div>
  29 |     </Main>
  30 |   );
  31 | } 

```

`/workspaces/automai/src/app/[locale]/[tenant]/page.tsx`:

```tsx
   1 | import { redirect } from 'next/navigation';
   2 | 
   3 | export default function TenantPage() {
   4 |   redirect('./dashboard');
   5 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/settings/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useParams } from 'next/navigation';
   4 | import { useTranslations } from 'next-intl';
   5 | 
   6 | import { LanguageSettings } from '@/components/settings/LanguageSettings';
   7 | import {
   8 |   Card,
   9 |   CardContent,
  10 |   CardDescription,
  11 |   CardHeader,
  12 |   CardTitle,
  13 | } from '@/components/shadcn/card';
  14 | 
  15 | export default function SettingsPage() {
  16 |   const _params = useParams();
  17 |   const t = useTranslations('Settings');
  18 | 
  19 |   return (
  20 |     <div className="grid gap-6">
  21 |       {/* General Settings */}
  22 |       <Card>
  23 |         <CardHeader>
  24 |           <CardTitle>{t('generalSettings')}</CardTitle>
  25 |           <CardDescription>{t('description')}</CardDescription>
  26 |         </CardHeader>
  27 |         <CardContent>{/* General settings content will go here */}</CardContent>
  28 |       </Card>
  29 | 
  30 |       {/* Language Settings */}
  31 |       <LanguageSettings />
  32 |     </div>
  33 |   );
  34 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/settings/layout.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useTranslations } from 'next-intl';
   4 | import { SettingsHeader } from '@/components/settings/SettingsHeader';
   5 | 
   6 | interface SettingsLayoutProps {
   7 |   children: React.ReactNode;
   8 | }
   9 | 
  10 | export default function SettingsLayout({ children }: SettingsLayoutProps) {
  11 |   const t = useTranslations('Settings');
  12 | 
  13 |   return (
  14 |     <div className="container mx-auto py-6 space-y-8">
  15 |       <SettingsHeader
  16 |         title={t('title')}
  17 |         description={t('description')}
  18 |       />
  19 |       <div className="space-y-6">{children}</div>
  20 |     </div>
  21 |   );
  22 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/settings/profile/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useAuth } from '@/hooks/useAuth';
   4 | 
   5 | import { SettingsHeader } from '@/components/settings/SettingsHeader';
   6 | import {
   7 |   Card,
   8 |   CardContent,
   9 |   CardDescription,
  10 |   CardHeader,
  11 |   CardTitle,
  12 | } from '@/components/shadcn/card';
  13 | 
  14 | export default function ProfileSettingsPage() {
  15 |   const { user } = useAuth();
  16 | 
  17 |   return (
  18 |     <div className="container mx-auto py-6 space-y-8">
  19 |       <SettingsHeader
  20 |         title="Profile Settings"
  21 |         description="Manage your profile information and preferences."
  22 |       />
  23 | 
  24 |       <Card>
  25 |         <CardHeader>
  26 |           <CardTitle>Personal Information</CardTitle>
  27 |           <CardDescription>Update your personal details and profile settings.</CardDescription>
  28 |         </CardHeader>
  29 |         <CardContent>
  30 |           <div className="space-y-4">
  31 |             <div>
  32 |               <label className="text-sm font-medium">Name</label>
  33 |               <p className="text-sm text-muted-foreground">{user?.name}</p>
  34 |             </div>
  35 |             <div>
  36 |               <label className="text-sm font-medium">Email</label>
  37 |               <p className="text-sm text-muted-foreground">{user?.email}</p>
  38 |             </div>
  39 |             <div>
  40 |               <label className="text-sm font-medium">Role</label>
  41 |               <p className="text-sm text-muted-foreground capitalize">
  42 |                 {user?.role?.toLowerCase() || 'User'}
  43 |               </p>
  44 |             </div>
  45 |           </div>
  46 |         </CardContent>
  47 |       </Card>
  48 |     </div>
  49 |   );
  50 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/reports/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useParams } from 'next/navigation';
   4 | import { useTranslations } from 'next-intl';
   5 | 
   6 | export default function ReportsPage() {
   7 |   const _params = useParams();
   8 |   const t = useTranslations('Reports');
   9 | 
  10 |   return (
  11 |     <div className="container mx-auto px-4 py-8">
  12 |       <h1 className="text-3xl font-bold mb-6">{t('title')}</h1>
  13 |       <div className="grid gap-6">
  14 |         <div className="p-6 bg-card rounded-lg shadow">
  15 |           <h2 className="text-xl font-semibold mb-4">{t('reportsList')}</h2>
  16 |           <p className="text-muted-foreground">{t('description')}</p>
  17 |         </div>
  18 |       </div>
  19 |     </div>
  20 |   );
  21 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/repositories/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useState, useEffect, useRef } from 'react';
   4 | import { useRouter } from 'next/navigation';
   5 | import { GitBranch, Plus, RefreshCw, Trash2, ExternalLink } from 'lucide-react';
   6 | import { Repository, GitProvider, GitProviderType } from '@/types/repositories';
   7 | import { useToast } from '@/components/shadcn/use-toast';
   8 | import { Button } from '@/components/shadcn/button';
   9 | import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/shadcn/tabs';
  10 | import { PageHeader } from '@/components/layout/PageHeader';
  11 | import { EmptyState } from '@/components/layout/EmptyState';
  12 | import {
  13 |   RepositoryCard,
  14 |   GitProviderCard,
  15 |   AddGitProviderDialog,
  16 |   RepositoryGrid,
  17 |   GitProviderGrid,
  18 |   RepositoryTable,
  19 | } from './_components';
  20 | import { useTranslations } from 'next-intl';
  21 | import { useRepositories } from '@/hooks/useRepositories';
  22 | import { useGitProviders } from '@/hooks/useGitProviders';
  23 | import { cn } from '@/lib/utils';
  24 | 
  25 | export default function RepositoriesPage() {
  26 |   const router = useRouter();
  27 |   const { toast } = useToast();
  28 |   const t = useTranslations('repositories');
  29 | 
  30 |   const [repositories, setRepositories] = useState<Repository[]>([]);
  31 |   const [providers, setProviders] = useState<GitProvider[]>([]);
  32 |   const [isLoading, setIsLoading] = useState(true);
  33 |   const [activeTab, setActiveTab] = useState('all');
  34 |   const [tabsValue, setTabsValue] = useState('providers');
  35 |   const [syncingRepoId, setSyncingRepoId] = useState<string | null>(null);
  36 |   const [refreshingProviderId, setRefreshingProviderId] = useState<string | null>(null);
  37 |   const [addProviderOpen, setAddProviderOpen] = useState(false);
  38 |   const [isAddingProvider, setIsAddingProvider] = useState(false);
  39 |   const [editingProvider, setEditingProvider] = useState<GitProvider | null>(null);
  40 |   const [searchQuery, setSearchQuery] = useState('');
  41 |   const [selectedProviders, setSelectedProviders] = useState<string[]>([]);
  42 |   const [isRefreshingAll, setIsRefreshingAll] = useState(false);
  43 | 
  44 |   // Add a ref to track if fetching is already in progress
  45 |   const isFetchingRef = useRef(false);
  46 | 
  47 |   const {
  48 |     repositories: repositoriesFromHooks,
  49 |     isLoading: isLoadingRepos,
  50 |     syncRepository,
  51 |     isSyncing,
  52 |     refreshAll: refreshRepositories
  53 |   } = useRepositories();
  54 | 
  55 |   const {
  56 |     providers: providersFromHooks,
  57 |     isLoading: isLoadingProviders,
  58 |     refreshProvider,
  59 |     isRefreshing: isRefreshingProvider,
  60 |     addProvider: addProviderFromHooks,
  61 |     isAddingProvider: isAddingProviderFromHooks,
  62 |     editProvider,
  63 |     editingProvider: editingProviderFromHooks,
  64 |     setEditingProvider: setEditingProviderFromHooks
  65 |   } = useGitProviders();
  66 | 
  67 |   // Define fetchData outside of useEffect so it can be called from other places
  68 |   const fetchData = async () => {
  69 |     // Check if a fetch is already in progress
  70 |     if (isFetchingRef.current) return;
  71 | 
  72 |     isFetchingRef.current = true;
  73 |     setIsLoading(true);
  74 | 
  75 |     try {
  76 |       // Step 1: Fetch providers from database
  77 |       console.log('Fetching Git providers from database...');
  78 |       const providersResponse = await fetchWithAuth(
  79 |         '/api/git-providers',
  80 |         {},
  81 |         {
  82 |           maxRetries: 3,
  83 |           initialDelay: 1000,
  84 |           shouldRetry: true,
  85 |         },
  86 |       );
  87 | 
  88 |       if (!providersResponse.ok) {
  89 |         // Handle error without redirecting
  90 |         console.log('Failed to fetch providers:', providersResponse.status);
  91 |         
  92 |         if (providersResponse.status === 401) {
  93 |           toast({
  94 |             title: 'Authentication Error',
  95 |             description: 'Unable to access Git providers. Please check your connection.',
  96 |             variant: 'destructive',
  97 |           });
  98 |         }
  99 |         
 100 |         setProviders([]);
 101 |         setRepositories([]);
 102 |         setIsLoading(false);
 103 |         isFetchingRef.current = false;
 104 |         return; // Exit early if we can't fetch providers
 105 |       }
 106 | 
 107 |       // Process provider data
 108 |       const providersData = await providersResponse.json();
 109 |       setProviders(providersData);
 110 |       
 111 |       // Step 2: Check if we have any providers with valid status
 112 |       const hasValidProviders = providersData.length > 0 && 
 113 |         providersData.some(provider => provider.status === 'connected');
 114 |       
 115 |       if (!hasValidProviders) {
 116 |         console.log('No valid providers found, skipping repository fetch');
 117 |         setRepositories([]);
 118 |         setIsLoading(false);
 119 |         isFetchingRef.current = false;
 120 |         return; // Exit early if no valid providers
 121 |       }
 122 |       
 123 |       // Step 3: Fetch repositories only if we have valid providers
 124 |       console.log('Fetching repositories for providers...');
 125 |       const reposResponse = await fetchWithAuth(
 126 |         '/api/fetch-all-repositories',
 127 |         {},
 128 |         {
 129 |           maxRetries: 3,
 130 |           initialDelay: 1000,
 131 |           shouldRetry: true,
 132 |         },
 133 |       );
 134 | 
 135 |       if (!reposResponse.ok) {
 136 |         // Handle error without redirecting
 137 |         console.log('Failed to fetch repositories:', reposResponse.status);
 138 |         
 139 |         if (reposResponse.status === 401) {
 140 |           toast({
 141 |             title: 'Authentication Error',
 142 |             description: 'Unable to access repositories. Please check your connection.',
 143 |             variant: 'destructive',
 144 |           });
 145 |         }
 146 |         
 147 |         setRepositories([]);
 148 |       } else {
 149 |         const reposData = await reposResponse.json();
 150 |         console.log(`Fetched ${reposData.length} repositories`);
 151 |         setRepositories(reposData);
 152 |       }
 153 |     } catch (error) {
 154 |       console.error('Error fetching data:', error);
 155 |       toast({
 156 |         title: 'Error',
 157 |         description: 'Failed to fetch data. Please try again later.',
 158 |         variant: 'destructive',
 159 |       });
 160 |     } finally {
 161 |       setIsLoading(false);
 162 |       isFetchingRef.current = false;
 163 |     }
 164 |   };
 165 | 
 166 |   // Fetch data on component mount
 167 |   useEffect(() => {
 168 |     fetchData();
 169 |   }, [router, toast]);
 170 | 
 171 |   // Handle adding a provider
 172 |   const handleAddProvider = async (values: { type: GitProviderType; displayName: string }) => {
 173 |     setIsAddingProvider(true);
 174 |     try {
 175 |       const response = await fetchWithAuth('/api/git-providers', {
 176 |         method: 'POST',
 177 |         headers: {
 178 |           'Content-Type': 'application/json',
 179 |         },
 180 |         body: JSON.stringify(values),
 181 |       });
 182 | 
 183 |       if (!response.ok) {
 184 |         throw new Error(`Failed to add provider: ${response.statusText}`);
 185 |       }
 186 | 
 187 |       const newProvider = await response.json();
 188 |       setProviders([...providers, newProvider]);
 189 | 
 190 |       toast({
 191 |         title: 'Success',
 192 |         description: 'Git provider added successfully',
 193 |       });
 194 | 
 195 |       // Refresh the data to get updated providers and repositories
 196 |       isFetchingRef.current = false;
 197 |       fetchData();
 198 |     } catch (error) {
 199 |       console.error('Error adding provider:', error);
 200 |       toast({
 201 |         title: 'Error',
 202 |         description: 'Failed to add provider. Please try again.',
 203 |         variant: 'destructive',
 204 |       });
 205 |     } finally {
 206 |       setIsAddingProvider(false);
 207 |       setAddProviderOpen(false);
 208 |     }
 209 |   };
 210 | 
 211 |   // Handle editing a provider
 212 |   const handleEditProvider = (provider: GitProvider) => {
 213 |     setEditingProvider(provider);
 214 |     setAddProviderOpen(true);
 215 |   };
 216 | 
 217 |   // Handle deleting a provider
 218 |   const handleDeleteProvider = async (id: string) => {
 219 |     if (!confirm(t('confirm_delete'))) return;
 220 | 
 221 |     try {
 222 |       const response = await fetchWithAuth(`/api/git-providers?id=${id}`, {
 223 |         method: 'DELETE',
 224 |       });
 225 | 
 226 |       if (!response.ok) {
 227 |         throw new Error(`Failed to delete provider: ${response.statusText}`);
 228 |       }
 229 | 
 230 |       // Remove provider from state
 231 |       setProviders(providers.filter((p) => p.id !== id));
 232 |       // Remove associated repositories
 233 |       setRepositories(repositories.filter((r) => r.providerId !== id));
 234 | 
 235 |       toast({
 236 |         title: 'Success',
 237 |         description: 'Git provider deleted successfully',
 238 |       });
 239 |     } catch (error) {
 240 |       console.error('Error deleting provider:', error);
 241 |       toast({
 242 |         title: 'Error',
 243 |         description: 'Failed to delete provider. Please try again.',
 244 |         variant: 'destructive',
 245 |       });
 246 |     }
 247 |   };
 248 | 
 249 |   // Handle refreshing a provider's repositories
 250 |   const handleRefreshProvider = async (id: string) => {
 251 |     setRefreshingProviderId(id);
 252 |     try {
 253 |       const response = await fetchWithAuth(`/api/git-providers/sync?id=${id}`, {
 254 |         method: 'POST',
 255 |       });
 256 | 
 257 |       if (!response.ok) {
 258 |         throw new Error(`Failed to refresh provider: ${response.statusText}`);
 259 |       }
 260 | 
 261 |       // Refresh the data to get updated repositories
 262 |       isFetchingRef.current = false;
 263 |       await fetchData();
 264 | 
 265 |       toast({
 266 |         title: 'Success',
 267 |         description: 'Provider repositories refreshed successfully',
 268 |       });
 269 |     } catch (error) {
 270 |       console.error('Error refreshing provider:', error);
 271 |       toast({
 272 |         title: 'Error',
 273 |         description: 'Failed to refresh provider repositories. Please try again.',
 274 |         variant: 'destructive',
 275 |       });
 276 |     } finally {
 277 |       setRefreshingProviderId(null);
 278 |     }
 279 |   };
 280 | 
 281 |   // Handle syncing a specific repository
 282 |   const handleSyncRepository = async (id: string) => {
 283 |     setSyncingRepoId(id);
 284 |     try {
 285 |       const response = await fetchWithAuth(`/api/repositories/sync?id=${id}`, {
 286 |         method: 'POST',
 287 |       });
 288 | 
 289 |       if (!response.ok) {
 290 |         throw new Error(`Failed to sync repository: ${response.statusText}`);
 291 |       }
 292 | 
 293 |       const updatedRepo = await response.json();
 294 | 
 295 |       // Update repository in state
 296 |       setRepositories(repositories.map((repo) => (repo.id === id ? updatedRepo : repo)));
 297 | 
 298 |       toast({
 299 |         title: 'Success',
 300 |         description: 'Repository synced successfully',
 301 |       });
 302 |     } catch (error) {
 303 |       console.error('Error syncing repository:', error);
 304 |       toast({
 305 |         title: 'Error',
 306 |         description: 'Failed to sync repository. Please try again.',
 307 |         variant: 'destructive',
 308 |       });
 309 |     } finally {
 310 |       setSyncingRepoId(null);
 311 |     }
 312 |   };
 313 | 
 314 |   // Toggle provider filter
 315 |   const handleToggleProviderFilter = (providerName: string) => {
 316 |     setSelectedProviders((prev) =>
 317 |       prev.includes(providerName)
 318 |         ? prev.filter((p) => p !== providerName)
 319 |         : [...prev, providerName],
 320 |     );
 321 |   };
 322 | 
 323 |   // Clear all filters
 324 |   const handleClearFilters = () => {
 325 |     setSelectedProviders([]);
 326 |     setSearchQuery('');
 327 |   };
 328 | 
 329 |   // Refresh all repositories
 330 |   const handleRefreshAllRepositories = async () => {
 331 |     setIsRefreshingAll(true);
 332 |     try {
 333 |       // Step 1: Check if we have valid providers first
 334 |       if (providers.length === 0) {
 335 |         toast({
 336 |           title: 'No Providers',
 337 |           description: 'No Git providers found to refresh repositories.',
 338 |           variant: 'default',
 339 |         });
 340 |         return;
 341 |       }
 342 |       
 343 |       const hasValidProviders = providers.some(provider => provider.status === 'connected');
 344 |       if (!hasValidProviders) {
 345 |         toast({
 346 |           title: 'No Connected Providers',
 347 |           description: 'No connected Git providers found. Please connect a provider first.',
 348 |           variant: 'default',
 349 |         });
 350 |         return;
 351 |       }
 352 |       
 353 |       // Step 2: Call API to refresh all repositories
 354 |       console.log('Refreshing repositories for all providers...');
 355 |       const response = await fetchWithAuth('/api/fetch-all-repositories', {
 356 |         method: 'POST',
 357 |       });
 358 | 
 359 |       if (!response.ok) {
 360 |         throw new Error('Failed to refresh repositories');
 361 |       }
 362 | 
 363 |       // Step 3: Fetch updated data
 364 |       await fetchData();
 365 | 
 366 |       toast({
 367 |         title: 'Success',
 368 |         description: 'All repositories refreshed successfully',
 369 |       });
 370 |     } catch (error) {
 371 |       console.error('Error refreshing repositories:', error);
 372 |       toast({
 373 |         title: 'Error',
 374 |         description: 'Failed to refresh repositories. Please try again.',
 375 |         variant: 'destructive',
 376 |       });
 377 |     } finally {
 378 |       setIsRefreshingAll(false);
 379 |     }
 380 |   };
 381 | 
 382 |   // Filter repositories based on search and selected providers
 383 |   const filteredRepositories = repositories.filter(repo => {
 384 |     const matchesSearch = searchQuery.toLowerCase() === '' || 
 385 |       repo.name.toLowerCase().includes(searchQuery.toLowerCase());
 386 |     const matchesProvider = selectedProviders.length === 0 || 
 387 |       (repo.provider && selectedProviders.includes(repo.provider.id));
 388 |     return matchesSearch && matchesProvider;
 389 |   });
 390 | 
 391 |   // Render content based on whether providers exist
 392 |   const renderContent = () => {
 393 |     // If still loading, show loading state
 394 |     if (isLoading) {
 395 |       return (
 396 |         <div className="flex justify-center items-center h-64">
 397 |           <div className="text-center">
 398 |             <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
 399 |             <p className="text-muted-foreground">{t('loading')}</p>
 400 |           </div>
 401 |         </div>
 402 |       );
 403 |     }
 404 | 
 405 |     // Handle empty states
 406 |     if (tabsValue === 'providers' && providers.length === 0) {
 407 |       return (
 408 |         <EmptyState
 409 |           title={t('no_providers')}
 410 |           description={t('connectGit')}
 411 |           icon={<GitBranch className="h-6 w-6" />}
 412 |           action={
 413 |             <Button onClick={() => setAddProviderOpen(true)}>
 414 |               <Plus className="mr-2 h-4 w-4" />
 415 |               {t('add_provider')}
 416 |             </Button>
 417 |           }
 418 |         />
 419 |       );
 420 |     }
 421 | 
 422 |     if (tabsValue === 'repositories') {
 423 |       // If no providers at all, show provider empty state even in repositories tab
 424 |       if (providers.length === 0) {
 425 |         return (
 426 |           <EmptyState
 427 |             title={t('no_providers')}
 428 |             description={t('connectGit')}
 429 |             icon={<GitBranch className="h-6 w-6" />}
 430 |             action={
 431 |               <Button onClick={() => setAddProviderOpen(true)}>
 432 |                 <Plus className="mr-2 h-4 w-4" />
 433 |                 {t('add_provider')}
 434 |               </Button>
 435 |             }
 436 |           />
 437 |         );
 438 |       }
 439 |       
 440 |       // If providers exist but no repositories, show repositories empty state
 441 |       if (repositories.length === 0) {
 442 |         return (
 443 |           <EmptyState
 444 |             title={t('no_repositories')}
 445 |             description={t('no_repositories_description')}
 446 |             icon={<GitBranch className="h-6 w-6" />}
 447 |             action={
 448 |               <Button onClick={() => setTabsValue('providers')}>
 449 |                 {t('view_providers')}
 450 |               </Button>
 451 |             }
 452 |           />
 453 |         );
 454 |       }
 455 |       
 456 |       // If repositories exist but none match the filter, show filtered empty state
 457 |       if (filteredRepositories.length === 0) {
 458 |         return (
 459 |           <EmptyState
 460 |             title={t('no_repos_found')}
 461 |             description={searchQuery || selectedProviders.length > 0 ? t('no_repos_found') : t('no_repositories_description')}
 462 |             icon={<GitBranch className="h-6 w-6" />}
 463 |             action={
 464 |               <Button onClick={handleClearFilters}>
 465 |                 {t('clear_all')}
 466 |               </Button>
 467 |             }
 468 |           />
 469 |         );
 470 |       }
 471 |     }
 472 | 
 473 |     // If we have data to show, render the appropriate content
 474 |     return (
 475 |       <Tabs value={tabsValue} onValueChange={setTabsValue} className="w-full">
 476 |         <div className="flex justify-between items-center mb-4">
 477 |           <TabsList>
 478 |             <TabsTrigger value="repositories">{t('repositories')}</TabsTrigger>
 479 |             <TabsTrigger value="providers">{t('provider_type')}</TabsTrigger>
 480 |           </TabsList>
 481 |           <div className="flex space-x-2">
 482 |             {tabsValue === 'repositories' && (
 483 |               <Button
 484 |                 variant="outline"
 485 |                 size="sm"
 486 |                 onClick={handleRefreshAllRepositories}
 487 |                 disabled={isRefreshingAll}
 488 |               >
 489 |                 {isRefreshingAll ? (
 490 |                   <>
 491 |                     <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
 492 |                     {t('refreshing')}
 493 |                   </>
 494 |                 ) : (
 495 |                   <>
 496 |                     <RefreshCw className="mr-2 h-4 w-4" />
 497 |                     {t('refresh')}
 498 |                   </>
 499 |                 )}
 500 |               </Button>
 501 |             )}
 502 |             <Button size="sm" onClick={() => setAddProviderOpen(true)}>
 503 |               <Plus className="mr-2 h-4 w-4" />
 504 |               {t('add_provider')}
 505 |             </Button>
 506 |           </div>
 507 |         </div>
 508 | 
 509 |         <TabsContent value="repositories" className="mt-0">
 510 |           <RepositoryTable
 511 |             repositories={filteredRepositories}
 512 |             providers={providers}
 513 |             selectedProviders={selectedProviders}
 514 |             searchQuery={searchQuery}
 515 |             isLoading={isLoadingRepos}
 516 |             syncingRepoId={isSyncing}
 517 |             onSearchChange={setSearchQuery}
 518 |             onToggleProviderFilter={(providerId) => {
 519 |               setSelectedProviders(prev =>
 520 |                 prev.includes(providerId)
 521 |                   ? prev.filter(id => id !== providerId)
 522 |                   : [...prev, providerId]
 523 |               );
 524 |             }}
 525 |             onClearFilters={handleClearFilters}
 526 |             onRefreshRepos={refreshRepositories}
 527 |             onSyncRepository={syncRepository}
 528 |           />
 529 |         </TabsContent>
 530 | 
 531 |         <TabsContent value="providers" className="mt-0">
 532 |           <GitProviderGrid
 533 |             providers={providers}
 534 |             isLoading={isLoadingProviders}
 535 |             onRefresh={refreshProvider}
 536 |             refreshingProviderId={isRefreshingProvider}
 537 |             onEdit={setEditingProviderFromHooks}
 538 |           />
 539 |         </TabsContent>
 540 |       </Tabs>
 541 |     );
 542 |   };
 543 | 
 544 |   return (
 545 |     <div className="flex flex-col h-full">
 546 |       <PageHeader title={t('repositories')} description={t('repositories_description')}>
 547 |         {providers.length > 0 && (
 548 |           <Button onClick={() => setAddProviderOpen(true)}>
 549 |             <Plus className="mr-2 h-4 w-4" />
 550 |             {t('add_provider')}
 551 |           </Button>
 552 |         )}
 553 |         <AddGitProviderDialog
 554 |           onSubmit={handleAddProvider}
 555 |           isSubmitting={isAddingProvider}
 556 |           open={addProviderOpen}
 557 |           onOpenChange={setAddProviderOpen}
 558 |           initialValues={editingProvider}
 559 |         />
 560 |       </PageHeader>
 561 |       {renderContent()}
 562 |     </div>
 563 |   );
 564 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/repositories/_components/RepositoryTable.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { ExternalLink, RefreshCw, Search, Filter } from 'lucide-react';
   4 | import { useTranslations } from 'next-intl';
   5 | import { Button } from '@/components/shadcn/button';
   6 | import { GitProvider, Repository } from '@/types/repositories';
   7 | import { Badge } from '@/components/shadcn/badge';
   8 | 
   9 | interface RepositoryTableProps {
  10 |   repositories: Repository[];
  11 |   providers: GitProvider[];
  12 |   selectedProviders: string[];
  13 |   searchQuery: string;
  14 |   isLoading: boolean;
  15 |   syncingRepoId: string | null;
  16 |   onSearchChange: (query: string) => void;
  17 |   onToggleProviderFilter: (providerName: string) => void;
  18 |   onClearFilters: () => void;
  19 |   onRefreshRepos: () => void;
  20 |   onSyncRepository: (id: string) => void;
  21 | }
  22 | 
  23 | export function RepositoryTable({
  24 |   repositories,
  25 |   providers,
  26 |   selectedProviders,
  27 |   searchQuery,
  28 |   isLoading,
  29 |   syncingRepoId,
  30 |   onSearchChange,
  31 |   onToggleProviderFilter,
  32 |   onClearFilters,
  33 |   onRefreshRepos,
  34 |   onSyncRepository,
  35 | }: RepositoryTableProps) {
  36 |   const t = useTranslations('repositories');
  37 | 
  38 |   // Filter repos based on search and selected providers
  39 |   const filteredRepos = repositories.filter((repo) => {
  40 |     const matchesSearch =
  41 |       searchQuery === '' || repo.name.toLowerCase().includes(searchQuery.toLowerCase());
  42 | 
  43 |     const matchesProvider =
  44 |       selectedProviders.length === 0 ||
  45 |       selectedProviders.includes(getProviderName(repo.providerId, providers));
  46 | 
  47 |     return matchesSearch && matchesProvider;
  48 |   });
  49 | 
  50 |   function getProviderName(providerId: string, providers: GitProvider[]): string {
  51 |     const provider = providers.find((p) => p.id === providerId);
  52 |     return provider?.displayName || '';
  53 |   }
  54 | 
  55 |   function getProviderColor(providerId: string, providers: GitProvider[]): string {
  56 |     const provider = providers.find((p) => p.id === providerId);
  57 |     if (!provider) return '#4285f4';
  58 | 
  59 |     return provider.type === 'github'
  60 |       ? '#24292e'
  61 |       : provider.type === 'gitlab'
  62 |         ? '#fc6d26'
  63 |         : provider.type === 'gitea'
  64 |           ? '#609926'
  65 |           : '#4285f4';
  66 |   }
  67 | 
  68 |   return (
  69 |     <div className="space-y-4">
  70 |       <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
  71 |         <h2 className="text-lg font-semibold">{t('repositories')}</h2>
  72 | 
  73 |         <div className="flex items-center space-x-3">
  74 |           <div className="relative flex-grow">
  75 |             <input
  76 |               type="text"
  77 |               placeholder={`${t('search')} ${t('repositories').toLowerCase()}...`}
  78 |               className="pl-8 pr-4 py-2 border rounded w-full"
  79 |               value={searchQuery}
  80 |               onChange={(e) => onSearchChange(e.target.value)}
  81 |             />
  82 |             <Search size={16} className="absolute left-2.5 top-2.5 text-muted-foreground" />
  83 |           </div>
  84 | 
  85 |           <Button variant="outline" size="sm" onClick={onRefreshRepos} disabled={isLoading}>
  86 |             <RefreshCw size={16} className={`mr-1 ${isLoading ? 'animate-spin' : ''}`} />
  87 |             {t('refresh')}
  88 |           </Button>
  89 |         </div>
  90 |       </div>
  91 | 
  92 |       {/* Filters */}
  93 |       {selectedProviders.length > 0 && (
  94 |         <div className="flex items-center gap-2">
  95 |           <Filter size={16} className="text-muted-foreground" />
  96 |           <div className="flex flex-wrap gap-2">
  97 |             {selectedProviders.map((providerName) => {
  98 |               const provider = providers.find((p) => p.displayName === providerName);
  99 |               const color =
 100 |                 provider?.type === 'github'
 101 |                   ? '#24292e'
 102 |                   : provider?.type === 'gitlab'
 103 |                     ? '#fc6d26'
 104 |                     : provider?.type === 'gitea'
 105 |                       ? '#609926'
 106 |                       : '#4285f4';
 107 | 
 108 |               return (
 109 |                 <span
 110 |                   key={providerName}
 111 |                   className="px-2 py-1 rounded-full text-xs flex items-center gap-1"
 112 |                   style={{ backgroundColor: `${color}20`, color: color }}
 113 |                 >
 114 |                   {providerName}
 115 |                   <button onClick={() => onToggleProviderFilter(providerName)}>×</button>
 116 |                 </span>
 117 |               );
 118 |             })}
 119 |             <button className="text-xs text-primary" onClick={onClearFilters}>
 120 |               {t('clear_all')}
 121 |             </button>
 122 |           </div>
 123 |         </div>
 124 |       )}
 125 | 
 126 |       {/* Repository Table */}
 127 |       {filteredRepos.length > 0 ? (
 128 |         <div className="border rounded-lg overflow-hidden">
 129 |           <table className="min-w-full divide-y divide-border">
 130 |             <thead className="bg-muted">
 131 |               <tr>
 132 |                 <th className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
 133 |                   {t('repository')}
 134 |                 </th>
 135 |                 <th className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
 136 |                   {t('provider')}
 137 |                 </th>
 138 |                 <th className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
 139 |                   {t('status')}
 140 |                 </th>
 141 |                 <th className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
 142 |                   {t('updatedAt')}
 143 |                 </th>
 144 |                 <th className="px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider">
 145 |                   {t('actions')}
 146 |                 </th>
 147 |               </tr>
 148 |             </thead>
 149 |             <tbody className="bg-background divide-y divide-border">
 150 |               {filteredRepos.map((repo) => {
 151 |                 const providerName = getProviderName(repo.providerId, providers);
 152 |                 const providerColor = getProviderColor(repo.providerId, providers);
 153 | 
 154 |                 return (
 155 |                   <tr key={repo.id} className="hover:bg-muted/30">
 156 |                     <td className="px-6 py-4 whitespace-nowrap">
 157 |                       <div className="flex items-center">
 158 |                         <div>
 159 |                           <div className="font-medium">{repo.name}</div>
 160 |                           {repo.description && (
 161 |                             <div className="text-sm text-muted-foreground line-clamp-1">
 162 |                               {repo.description}
 163 |                             </div>
 164 |                           )}
 165 |                         </div>
 166 |                       </div>
 167 |                     </td>
 168 |                     <td className="px-6 py-4 whitespace-nowrap">
 169 |                       <span
 170 |                         className="px-2 py-1 rounded-full text-xs"
 171 |                         style={{ backgroundColor: `${providerColor}20`, color: providerColor }}
 172 |                       >
 173 |                         {providerName}
 174 |                       </span>
 175 |                     </td>
 176 |                     <td className="px-6 py-4 whitespace-nowrap">
 177 |                       <Badge
 178 |                         variant={
 179 |                           repo.syncStatus === 'SYNCED'
 180 |                             ? 'secondary'
 181 |                             : repo.syncStatus === 'ERROR'
 182 |                               ? 'destructive'
 183 |                               : 'outline'
 184 |                         }
 185 |                       >
 186 |                         {repo.syncStatus}
 187 |                       </Badge>
 188 |                     </td>
 189 |                     <td className="px-6 py-4 whitespace-nowrap text-sm text-muted-foreground">
 190 |                       {new Date(repo.updatedAt).toLocaleDateString()}
 191 |                     </td>
 192 |                     <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
 193 |                       <div className="flex items-center justify-end gap-2">
 194 |                         <Button
 195 |                           variant="ghost"
 196 |                           size="sm"
 197 |                           onClick={() => onSyncRepository(repo.id)}
 198 |                           disabled={syncingRepoId === repo.id}
 199 |                         >
 200 |                           <RefreshCw
 201 |                             className={`h-4 w-4 ${syncingRepoId === repo.id ? 'animate-spin' : ''}`}
 202 |                           />
 203 |                         </Button>
 204 | 
 205 |                         {repo.url && (
 206 |                           <a
 207 |                             href={repo.url}
 208 |                             target="_blank"
 209 |                             rel="noopener noreferrer"
 210 |                             className="text-primary hover:text-primary/80 flex items-center"
 211 |                           >
 212 |                             <ExternalLink size={16} />
 213 |                           </a>
 214 |                         )}
 215 |                       </div>
 216 |                     </td>
 217 |                   </tr>
 218 |                 );
 219 |               })}
 220 |             </tbody>
 221 |           </table>
 222 |         </div>
 223 |       ) : (
 224 |         <div className="text-center py-8 border rounded-lg bg-muted/30">
 225 |           <p className="text-muted-foreground">{t('no_repos_found')}</p>
 226 |         </div>
 227 |       )}
 228 |     </div>
 229 |   );
 230 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/repositories/_components/index.ts`:

```ts
   1 | export { GitProviderCard } from './GitProviderCard';
   2 | export { RepositoryCard } from './RepositoryCard';
   3 | export { AddGitProviderDialog } from './AddGitProviderDialog';
   4 | export { RepositoryGrid } from './RepositoryGrid';
   5 | export { GitProviderGrid } from './GitProviderGrid';
   6 | export { RepositoryTable } from './RepositoryTable';

```

`/workspaces/automai/src/app/[locale]/[tenant]/repositories/_components/GitProviderGrid.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Plus } from 'lucide-react';
   4 | import { useTranslations } from 'next-intl';
   5 | import { Button } from '@/components/shadcn/button';
   6 | import { Badge } from '@/components/shadcn/badge';
   7 | import { GitProvider } from '@/types/repositories';
   8 | 
   9 | interface GitProviderGridProps {
  10 |   providers: GitProvider[];
  11 |   repositories: any[];
  12 |   selectedProviders: string[];
  13 |   onAddProvider: () => void;
  14 |   onEditProvider: (provider: GitProvider) => void;
  15 |   onDeleteProvider: (id: string) => void;
  16 |   onToggleProviderFilter: (providerName: string) => void;
  17 |   refreshingProviderId: string | null;
  18 | }
  19 | 
  20 | export function GitProviderGrid({
  21 |   providers,
  22 |   repositories,
  23 |   selectedProviders,
  24 |   onAddProvider,
  25 |   onEditProvider,
  26 |   onDeleteProvider,
  27 |   onToggleProviderFilter,
  28 |   refreshingProviderId,
  29 | }: GitProviderGridProps) {
  30 |   const t = useTranslations('repositories');
  31 | 
  32 |   return (
  33 |     <div className="space-y-4">
  34 |       <div className="flex justify-between items-center">
  35 |         <h2 className="text-lg font-semibold">{t('connectedProviders')}</h2>
  36 |         <Button onClick={onAddProvider} size="sm">
  37 |           <Plus className="mr-2 h-4 w-4" />
  38 |           {t('add_provider')}
  39 |         </Button>
  40 |       </div>
  41 | 
  42 |       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  43 |         {providers.map((provider) => {
  44 |           const repoCount = repositories.filter((repo) => repo.providerId === provider.id).length;
  45 |           const providerColor =
  46 |             provider.type === 'github'
  47 |               ? '#24292e'
  48 |               : provider.type === 'gitlab'
  49 |                 ? '#fc6d26'
  50 |                 : provider.type === 'gitea'
  51 |                   ? '#609926'
  52 |                   : '#4285f4';
  53 | 
  54 |           return (
  55 |             <div
  56 |               key={provider.id}
  57 |               className="border rounded-lg overflow-hidden shadow-sm"
  58 |               style={{ borderLeft: `4px solid ${providerColor}` }}
  59 |             >
  60 |               <div className="p-4">
  61 |                 <div className="flex justify-between items-start">
  62 |                   <div>
  63 |                     <h3 className="font-semibold text-lg">{provider.displayName}</h3>
  64 |                     <p className="text-sm text-muted-foreground truncate mt-1">{provider.type}</p>
  65 |                   </div>
  66 |                   <Badge variant={provider.status === 'connected' ? 'secondary' : 'outline'}>
  67 |                     {provider.status === 'connected' ? 'Active' : 'Inactive'}
  68 |                   </Badge>
  69 |                 </div>
  70 | 
  71 |                 <div className="mt-3 flex justify-between items-center">
  72 |                   <span className="text-xs bg-muted px-2 py-1 rounded">
  73 |                     {repoCount} repositories
  74 |                   </span>
  75 |                   <label className="flex items-center cursor-pointer">
  76 |                     <input
  77 |                       type="checkbox"
  78 |                       className="mr-1"
  79 |                       checked={selectedProviders.includes(provider.displayName)}
  80 |                       onChange={() => onToggleProviderFilter(provider.displayName)}
  81 |                     />
  82 |                     <span className="text-xs text-muted-foreground">Filter</span>
  83 |                   </label>
  84 |                 </div>
  85 |               </div>
  86 |             </div>
  87 |           );
  88 |         })}
  89 |       </div>
  90 |     </div>
  91 |   );
  92 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/repositories/_components/RepositoryGrid.tsx`:

```tsx
   1 | import { useState } from 'react';
   2 | import { Repository } from '@/types/repositories';
   3 | import { RepositoryCard } from './RepositoryCard';
   4 | import { Input } from '@/components/shadcn/input';
   5 | import { Search } from 'lucide-react';
   6 | 
   7 | interface RepositoryGridProps {
   8 |   repositories: Repository[];
   9 |   onSyncRepository: (id: string) => Promise<void>;
  10 |   syncingRepoId: string | null;
  11 |   isLoading?: boolean;
  12 | }
  13 | 
  14 | export function RepositoryGrid({
  15 |   repositories,
  16 |   onSyncRepository,
  17 |   syncingRepoId,
  18 |   isLoading = false,
  19 | }: RepositoryGridProps) {
  20 |   const [searchTerm, setSearchTerm] = useState('');
  21 |   const [providerFilter, setProviderFilter] = useState<string | null>(null);
  22 | 
  23 |   // Filter repositories based on search term
  24 |   const filteredRepositories = repositories.filter((repo) => {
  25 |     const matchesSearch =
  26 |       !searchTerm ||
  27 |       repo.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
  28 |       (repo.description && repo.description.toLowerCase().includes(searchTerm.toLowerCase()));
  29 | 
  30 |     const matchesProvider = !providerFilter || repo.providerId === providerFilter;
  31 | 
  32 |     return matchesSearch && matchesProvider;
  33 |   });
  34 | 
  35 |   // Get unique providers for filtering
  36 |   const providers = repositories.reduce(
  37 |     (acc, repo) => {
  38 |       if (repo.provider && !acc.some((p) => p.id === repo.providerId)) {
  39 |         acc.push({
  40 |           id: repo.providerId,
  41 |           name: repo.provider.displayName || repo.provider.name,
  42 |         });
  43 |       }
  44 |       return acc;
  45 |     },
  46 |     [] as { id: string; name: string | any }[],
  47 |   );
  48 | 
  49 |   return (
  50 |     <div className="space-y-4">
  51 |       <div className="flex items-center space-x-2">
  52 |         <div className="relative flex-1">
  53 |           <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
  54 |           <Input
  55 |             placeholder="Search repositories..."
  56 |             className="pl-9"
  57 |             value={searchTerm}
  58 |             onChange={(e) => setSearchTerm(e.target.value)}
  59 |           />
  60 |         </div>
  61 |         {providers.length > 1 && (
  62 |           <div className="flex items-center space-x-2">
  63 |             <span className="text-sm text-muted-foreground">Provider:</span>
  64 |             <select
  65 |               className="h-9 rounded-md border border-input bg-background px-3 py-1 text-sm ring-offset-background"
  66 |               value={providerFilter || ''}
  67 |               onChange={(e) => setProviderFilter(e.target.value || null)}
  68 |             >
  69 |               <option value="">All</option>
  70 |               {providers.map((provider) => (
  71 |                 <option key={provider.id} value={provider.id}>
  72 |                   {provider.name}
  73 |                 </option>
  74 |               ))}
  75 |             </select>
  76 |           </div>
  77 |         )}
  78 |       </div>
  79 | 
  80 |       {filteredRepositories.length === 0 ? (
  81 |         <div className="text-center p-8 border rounded-lg bg-muted/50">
  82 |           <p className="text-muted-foreground">
  83 |             {repositories.length === 0
  84 |               ? 'No repositories found. Add a Git provider to import repositories.'
  85 |               : 'No repositories match your search criteria.'}
  86 |           </p>
  87 |         </div>
  88 |       ) : (
  89 |         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  90 |           {filteredRepositories.map((repository) => (
  91 |             <RepositoryCard
  92 |               key={repository.id}
  93 |               repository={repository}
  94 |               onSync={onSyncRepository}
  95 |               isSyncing={syncingRepoId === repository.id}
  96 |             />
  97 |           ))}
  98 |         </div>
  99 |       )}
 100 |     </div>
 101 |   );
 102 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/repositories/_components/AddGitProviderDialog.tsx`:

```tsx
   1 | import { useState, useEffect } from 'react';
   2 | import { z } from 'zod';
   3 | import { useForm } from 'react-hook-form';
   4 | import { zodResolver } from '@hookform/resolvers/zod';
   5 | import { GitProviderType } from '@/types/repositories';
   6 | import { Button } from '@/components/shadcn/button';
   7 | import {
   8 |   Dialog,
   9 |   DialogContent,
  10 |   DialogDescription,
  11 |   DialogFooter,
  12 |   DialogHeader,
  13 |   DialogTitle,
  14 |   DialogTrigger,
  15 | } from '@/components/shadcn/dialog';
  16 | import {
  17 |   Form,
  18 |   FormControl,
  19 |   FormField,
  20 |   FormItem,
  21 |   FormLabel,
  22 |   FormMessage,
  23 | } from '@/components/shadcn/form';
  24 | import { Input } from '@/components/shadcn/input';
  25 | import {
  26 |   Select,
  27 |   SelectContent,
  28 |   SelectItem,
  29 |   SelectTrigger,
  30 |   SelectValue,
  31 | } from '@/components/shadcn/select';
  32 | import { GitHubIcon, GitLabIcon, GiteaIcon } from '@/components/icons';
  33 | import { AlertCircle, CheckCircle2, Loader2, Plus } from 'lucide-react';
  34 | import { Alert, AlertDescription } from '@/components/shadcn/alert';
  35 | import { testGitProviderConnection } from '@/app/actions/git-providers';
  36 | 
  37 | // Create a constant object for use in the form
  38 | export const GitProviderTypes = {
  39 |   GITHUB: 'github' as GitProviderType,
  40 |   GITLAB: 'gitlab' as GitProviderType,
  41 |   GITEA: 'gitea' as GitProviderType,
  42 | };
  43 | 
  44 | // Create a schema for the form
  45 | const formSchema = z.object({
  46 |   type: z.enum(['github', 'gitlab', 'gitea'] as const, {
  47 |     requirederror: 'Please select a Git provider type.',
  48 |   }),
  49 |   displayName: z
  50 |     .string()
  51 |     .min(2, {
  52 |       message: 'Display name must be at least 2 characters.',
  53 |     })
  54 |     .max(50, {
  55 |       message: 'Display name must not exceed 50 characters.',
  56 |     }),
  57 |   serverUrl: z.string().url('Invalid URL').optional(),
  58 |   token: z.string().optional(),
  59 | });
  60 | 
  61 | interface AddGitProviderDialogProps {
  62 |   onSubmit: (values: { type: GitProviderType; displayName: string }) => void;
  63 |   isSubmitting: boolean;
  64 |   open: boolean;
  65 |   onOpenChange: (open: boolean) => void;
  66 |   initialValues?: GitProvider | null;
  67 | }
  68 | 
  69 | type TestStatus = 'idle' | 'testing' | 'success' | 'error';
  70 | 
  71 | export function AddGitProviderDialog({
  72 |   onSubmit,
  73 |   isSubmitting,
  74 |   open,
  75 |   onOpenChange,
  76 |   initialValues = null,
  77 | }: AddGitProviderDialogProps) {
  78 |   const [providerType, setProviderType] = useState<GitProviderType>(
  79 |     initialValues?.type || 'github',
  80 |   );
  81 |   const [displayName, setDisplayName] = useState(initialValues?.displayName || '');
  82 |   const [testStatus, setTestStatus] = useState<TestStatus>('idle');
  83 |   const [testError, setTestError] = useState<string | null>(null);
  84 | 
  85 |   // Initialize the form
  86 |   const form = useForm<z.infer<typeof formSchema>>({
  87 |     resolver: zodResolver(formSchema),
  88 |     defaultValues: {
  89 |       type: 'gitea',
  90 |       displayName: '',
  91 |       serverUrl: '',
  92 |       token: '',
  93 |     },
  94 |   });
  95 | 
  96 |   // Test the connection
  97 |   const testConnection = async () => {
  98 |     const values = form.getValues();
  99 |     if (!values.serverUrl && !values.token && providerType === 'gitea') {
 100 |       setTestError('Please fill in all required fields');
 101 |       return;
 102 |     }
 103 | 
 104 |     setTestStatus('testing');
 105 |     setTestError(null);
 106 | 
 107 |     try {
 108 |       await testGitProviderConnection({
 109 |         type: values.type,
 110 |         serverUrl: values.serverUrl || '',
 111 |         token: values.token || '',
 112 |       });
 113 |       setTestStatus('success');
 114 |     } catch (error) {
 115 |       setTestStatus('error');
 116 |       setTestError(error instanceof Error ? error.message : 'Failed to test connection');
 117 |     }
 118 |   };
 119 | 
 120 |   // Handle form submission
 121 |   const handleSubmit = async (values: z.infer<typeof formSchema>) => {
 122 |     // Only require testing for Gitea
 123 |     if (providerType === 'gitea' && testStatus !== 'success') {
 124 |       setTestError('Please test the connection first');
 125 |       return;
 126 |     }
 127 |     await onSubmit(values);
 128 |     if (!isSubmitting) {
 129 |       form.reset({ type: 'gitea', displayName: '', serverUrl: '', token: '' });
 130 |       setProviderType('gitea');
 131 |       setTestStatus('idle');
 132 |       setTestError(null);
 133 |     }
 134 |   };
 135 | 
 136 |   // Reset the form when the dialog is closed
 137 |   const handleOpenChange = (open: boolean) => {
 138 |     if (!open) {
 139 |       form.reset({ type: 'gitea', displayName: '', serverUrl: '', token: '' });
 140 |       setProviderType('gitea');
 141 |       setTestStatus('idle');
 142 |       setTestError(null);
 143 |     }
 144 |     onOpenChange(open);
 145 |   };
 146 | 
 147 |   const isGitea = providerType === GitProviderTypes.GITEA;
 148 |   const isGithub = providerType === GitProviderTypes.GITHUB;
 149 |   const isGitlab = providerType === GitProviderTypes.GITLAB;
 150 | 
 151 |   useEffect(() => {
 152 |     if (open) {
 153 |       if (initialValues) {
 154 |         setProviderType(initialValues.type);
 155 |         setDisplayName(initialValues.displayName);
 156 |       } else {
 157 |         setProviderType('github');
 158 |         setDisplayName('');
 159 |       }
 160 |     }
 161 |   }, [open, initialValues]);
 162 | 
 163 |   return (
 164 |     <Dialog open={open} onOpenChange={handleOpenChange}>
 165 |       <DialogTrigger asChild>
 166 |         <Button>
 167 |           <Plus className="mr-2 h-4 w-4" />
 168 |           Add Git Provider
 169 |         </Button>
 170 |       </DialogTrigger>
 171 |       <DialogContent className="sm:max-w-[600px]">
 172 |         <DialogHeader>
 173 |           <DialogTitle>Add Git Provider</DialogTitle>
 174 |           <DialogDescription>
 175 |             Connect to your Git provider to import repositories.
 176 |           </DialogDescription>
 177 |         </DialogHeader>
 178 |         <Form {...form}>
 179 |           <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
 180 |             <div className="grid grid-cols-2 gap-6">
 181 |               <FormField
 182 |                 control={form.control}
 183 |                 name="type"
 184 |                 render={({ field }) => (
 185 |                   <FormItem>
 186 |                     <FormLabel>Provider Type</FormLabel>
 187 |                     <Select
 188 |                       onValueChange={(value) => {
 189 |                         field.onChange(value);
 190 |                         setProviderType(value as GitProviderType);
 191 |                         setTestStatus('idle');
 192 |                         setTestError(null);
 193 |                       }}
 194 |                       defaultValue={field.value}
 195 |                       disabled={isSubmitting}
 196 |                     >
 197 |                       <FormControl>
 198 |                         <SelectTrigger>
 199 |                           <SelectValue placeholder="Select a provider" />
 200 |                         </SelectTrigger>
 201 |                       </FormControl>
 202 |                       <SelectContent>
 203 |                         <SelectItem value={GitProviderTypes.GITEA}>
 204 |                           <div className="flex items-center gap-2">
 205 |                             <GiteaIcon className="h-4 w-4" />
 206 |                             <span>Gitea</span>
 207 |                           </div>
 208 |                         </SelectItem>
 209 |                         <SelectItem value={GitProviderTypes.GITHUB}>
 210 |                           <div className="flex items-center gap-2">
 211 |                             <GitHubIcon className="h-4 w-4" />
 212 |                             <span>GitHub</span>
 213 |                           </div>
 214 |                         </SelectItem>
 215 |                         <SelectItem value={GitProviderTypes.GITLAB}>
 216 |                           <div className="flex items-center gap-2">
 217 |                             <GitLabIcon className="h-4 w-4" />
 218 |                             <span>GitLab</span>
 219 |                           </div>
 220 |                         </SelectItem>
 221 |                       </SelectContent>
 222 |                     </Select>
 223 |                     <FormMessage />
 224 |                   </FormItem>
 225 |                 )}
 226 |               />
 227 | 
 228 |               <FormField
 229 |                 control={form.control}
 230 |                 name="displayName"
 231 |                 render={({ field }) => (
 232 |                   <FormItem>
 233 |                     <FormLabel>Display Name</FormLabel>
 234 |                     <FormControl>
 235 |                       <Input
 236 |                         placeholder={`My ${
 237 |                           providerType === 'github'
 238 |                             ? 'GitHub'
 239 |                             : providerType === 'gitlab'
 240 |                               ? 'GitLab'
 241 |                               : 'Gitea'
 242 |                         } Account`}
 243 |                         {...field}
 244 |                         disabled={isSubmitting}
 245 |                       />
 246 |                     </FormControl>
 247 |                     <FormMessage />
 248 |                   </FormItem>
 249 |                 )}
 250 |               />
 251 |             </div>
 252 | 
 253 |             {isGitea && (
 254 |               <div className="grid grid-cols-2 gap-6">
 255 |                 <FormField
 256 |                   control={form.control}
 257 |                   name="serverUrl"
 258 |                   render={({ field }) => (
 259 |                     <FormItem>
 260 |                       <FormLabel>Server URL</FormLabel>
 261 |                       <FormControl>
 262 |                         <Input
 263 |                           placeholder="https://gitea.example.com"
 264 |                           {...field}
 265 |                           disabled={isSubmitting}
 266 |                         />
 267 |                       </FormControl>
 268 |                       <FormMessage />
 269 |                     </FormItem>
 270 |                   )}
 271 |                 />
 272 |                 <FormField
 273 |                   control={form.control}
 274 |                   name="token"
 275 |                   render={({ field }) => (
 276 |                     <FormItem>
 277 |                       <FormLabel>Access Token</FormLabel>
 278 |                       <FormControl>
 279 |                         <Input
 280 |                           placeholder="Enter your Gitea access token"
 281 |                           type="password"
 282 |                           {...field}
 283 |                           disabled={isSubmitting}
 284 |                         />
 285 |                       </FormControl>
 286 |                       <FormMessage />
 287 |                     </FormItem>
 288 |                   )}
 289 |                 />
 290 |               </div>
 291 |             )}
 292 | 
 293 |             {(isGithub || isGitlab) && (
 294 |               <div className="rounded-md border p-4 bg-muted/50">
 295 |                 <div className="flex items-start gap-3">
 296 |                   <div className="bg-primary/10 p-2 rounded-full">
 297 |                     {isGithub ? (
 298 |                       <GitHubIcon className="h-5 w-5" />
 299 |                     ) : (
 300 |                       <GitLabIcon className="h-5 w-5" />
 301 |                     )}
 302 |                   </div>
 303 |                   <div>
 304 |                     <h3 className="font-medium">
 305 |                       {isGithub ? 'GitHub' : 'GitLab'} OAuth Authentication
 306 |                     </h3>
 307 |                     <p className="text-sm text-muted-foreground mt-1">
 308 |                       {isGithub
 309 |                         ? 'You will be redirected to GitHub to authorize the application.'
 310 |                         : 'You will be redirected to GitLab to authorize the application.'}
 311 |                     </p>
 312 |                   </div>
 313 |                 </div>
 314 |               </div>
 315 |             )}
 316 | 
 317 |             {testError && (
 318 |               <Alert variant="destructive">
 319 |                 <AlertCircle className="h-4 w-4" />
 320 |                 <AlertDescription>{testError}</AlertDescription>
 321 |               </Alert>
 322 |             )}
 323 | 
 324 |             {testStatus === 'success' && (
 325 |               <Alert variant="success">
 326 |                 <CheckCircle2 className="h-4 w-4" />
 327 |                 <AlertDescription>Connection test successful!</AlertDescription>
 328 |               </Alert>
 329 |             )}
 330 | 
 331 |             <DialogFooter>
 332 |               {isGitea && (
 333 |                 <Button
 334 |                   type="button"
 335 |                   variant="outline"
 336 |                   onClick={testConnection}
 337 |                   disabled={isSubmitting || testStatus === 'testing'}
 338 |                   className="mr-auto"
 339 |                 >
 340 |                   {testStatus === 'testing' && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
 341 |                   Test Connection
 342 |                 </Button>
 343 |               )}
 344 |               <Button type="submit" disabled={isSubmitting}>
 345 |                 {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
 346 |                 {isGithub || isGitlab ? 'Continue with OAuth' : 'Add Provider'}
 347 |               </Button>
 348 |             </DialogFooter>
 349 |           </form>
 350 |         </Form>
 351 |       </DialogContent>
 352 |     </Dialog>
 353 |   );
 354 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/repositories/_components/RepositoryCard.tsx`:

```tsx
   1 | import { useState } from 'react';
   2 | import Link from 'next/link';
   3 | import { Repository } from '@/types/repositories';
   4 | import { GitBranch, RefreshCw, ExternalLink } from 'lucide-react';
   5 | import { formatDistanceToNow } from 'date-fns';
   6 | import { Button } from '@/components/shadcn/button';
   7 | import {
   8 |   Card,
   9 |   CardContent,
  10 |   CardDescription,
  11 |   CardFooter,
  12 |   CardHeader,
  13 |   CardTitle,
  14 | } from '@/components/shadcn/card';
  15 | import { Badge } from '@/components/shadcn/badge';
  16 | import { GitHubIcon, GitLabIcon, GiteaIcon } from '@/components/icons';
  17 | 
  18 | interface RepositoryCardProps {
  19 |   repository: Repository;
  20 |   onSync: (id: string) => Promise<void>;
  21 |   isSyncing: boolean;
  22 | }
  23 | 
  24 | export function RepositoryCard({ repository, onSync, isSyncing }: RepositoryCardProps) {
  25 |   const [isHovered, setIsHovered] = useState(false);
  26 | 
  27 |   // Format the last synced date
  28 |   const lastSyncedText = repository.lastSyncedAt
  29 |     ? `Last synced ${formatDistanceToNow(new Date(repository.lastSyncedAt), { addSuffix: true })}`
  30 |     : 'Never synced';
  31 | 
  32 |   // Determine the badge color based on the repository status
  33 |   const getBadgeVariant = () => {
  34 |     if (repository.syncStatus === 'ERROR') return 'destructive';
  35 |     if (repository.syncStatus === 'SYNCING') return 'default';
  36 |     if (repository.syncStatus === 'SYNCED') return 'secondary';
  37 |     return 'outline';
  38 |   };
  39 | 
  40 |   // Get the badge text based on the repository status
  41 |   const getBadgeText = () => {
  42 |     switch (repository.syncStatus) {
  43 |       case 'ERROR':
  44 |         return 'Error';
  45 |       case 'SYNCING':
  46 |         return 'Syncing';
  47 |       case 'SYNCED':
  48 |         return 'Synced';
  49 |       case 'IDLE':
  50 |       default:
  51 |         return 'Idle';
  52 |     }
  53 |   };
  54 | 
  55 |   // Get provider icon based on provider type
  56 |   const getProviderIcon = () => {
  57 |     if (!repository.provider) return null;
  58 | 
  59 |     const providerType =
  60 |       typeof repository.provider.name === 'string'
  61 |         ? repository.provider.name.toLowerCase()
  62 |         : repository.provider.name;
  63 | 
  64 |     switch (providerType) {
  65 |       case 'github':
  66 |         return <GitHubIcon className="h-4 w-4" />;
  67 |       case 'gitlab':
  68 |         return <GitLabIcon className="h-4 w-4" />;
  69 |       case 'gitea':
  70 |         return <GiteaIcon className="h-4 w-4" />;
  71 |       default:
  72 |         return null;
  73 |     }
  74 |   };
  75 | 
  76 |   return (
  77 |     <Card
  78 |       className="overflow-hidden transition-all duration-200 hover:shadow-md"
  79 |       onMouseEnter={() => setIsHovered(true)}
  80 |       onMouseLeave={() => setIsHovered(false)}
  81 |     >
  82 |       <CardHeader className="pb-2">
  83 |         <div className="flex justify-between items-start">
  84 |           <div className="space-y-1">
  85 |             <div className="flex items-center space-x-2">
  86 |               {getProviderIcon()}
  87 |               <CardTitle className="text-lg font-semibold line-clamp-1">
  88 |                 {repository.name}
  89 |               </CardTitle>
  90 |             </div>
  91 |             <CardDescription className="line-clamp-1">
  92 |               {repository.description || 'No description'}
  93 |             </CardDescription>
  94 |           </div>
  95 |           <Badge variant={getBadgeVariant()}>{getBadgeText()}</Badge>
  96 |         </div>
  97 |       </CardHeader>
  98 |       <CardContent className="pb-2">
  99 |         <div className="flex items-center text-sm text-muted-foreground">
 100 |           <GitBranch className="mr-1 h-4 w-4" />
 101 |           <span>{repository.defaultBranch || 'main'}</span>
 102 |         </div>
 103 |       </CardContent>
 104 |       <CardFooter className="flex justify-between pt-2 text-xs text-muted-foreground">
 105 |         <span>{lastSyncedText}</span>
 106 |         <div className="flex gap-2">
 107 |           {repository.url && (
 108 |             <Link
 109 |               href={repository.url}
 110 |               target="_blank"
 111 |               rel="noopener noreferrer"
 112 |               className={`inline-flex items-center text-xs ${isHovered ? 'opacity-100' : 'opacity-0'} transition-opacity`}
 113 |             >
 114 |               <Button variant="ghost" size="sm" className="p-0 h-8">
 115 |                 <ExternalLink className="h-4 w-4 mr-1" />
 116 |                 Open
 117 |               </Button>
 118 |             </Link>
 119 |           )}
 120 |           <Button
 121 |             variant="ghost"
 122 |             size="sm"
 123 |             className={`p-0 h-8 ${isHovered ? 'opacity-100' : 'opacity-0'} transition-opacity`}
 124 |             onClick={() => onSync(repository.id)}
 125 |             disabled={isSyncing}
 126 |           >
 127 |             <RefreshCw className={`h-4 w-4 mr-1 ${isSyncing ? 'animate-spin' : ''}`} />
 128 |             Sync
 129 |           </Button>
 130 |         </div>
 131 |       </CardFooter>
 132 |     </Card>
 133 |   );
 134 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/repositories/_components/GitProviderCard.tsx`:

```tsx
   1 | import { useState } from 'react';
   2 | import { GitProvider } from '@/types/repositories';
   3 | import { RefreshCw, Trash2, ExternalLink } from 'lucide-react';
   4 | import { formatDistanceToNow } from 'date-fns';
   5 | import { Button } from '@/components/shadcn/button';
   6 | import {
   7 |   Card,
   8 |   CardContent,
   9 |   CardDescription,
  10 |   CardFooter,
  11 |   CardHeader,
  12 |   CardTitle,
  13 | } from '@/components/shadcn/card';
  14 | import { Badge } from '@/components/shadcn/badge';
  15 | import {
  16 |   AlertDialog,
  17 |   AlertDialogAction,
  18 |   AlertDialogCancel,
  19 |   AlertDialogContent,
  20 |   AlertDialogDescription,
  21 |   AlertDialogFooter,
  22 |   AlertDialogHeader,
  23 |   AlertDialogTitle,
  24 | } from '@/components/shadcn/alert-dialog';
  25 | import { GitHubIcon, GitLabIcon, GiteaIcon } from '@/components/icons';
  26 | 
  27 | interface GitProviderCardProps {
  28 |   provider: GitProvider;
  29 |   onDelete: (id: string) => Promise<void>;
  30 |   onRefresh: (id: string) => Promise<void>;
  31 |   isRefreshing: boolean;
  32 | }
  33 | 
  34 | export function GitProviderCard({
  35 |   provider,
  36 |   onDelete,
  37 |   onRefresh,
  38 |   isRefreshing,
  39 | }: GitProviderCardProps) {
  40 |   const [isHovered, setIsHovered] = useState(false);
  41 |   const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  42 | 
  43 |   // Format the last synced date
  44 |   const lastSyncedText = provider.lastSyncedAt
  45 |     ? `Last synced ${formatDistanceToNow(new Date(provider.lastSyncedAt), { addSuffix: true })}`
  46 |     : 'Never synced';
  47 | 
  48 |   // Get the provider icon based on the type
  49 |   const getProviderIcon = () => {
  50 |     // Handle both string and enum types for compatibility
  51 |     const providerType =
  52 |       typeof provider.name === 'string' ? provider.name.toLowerCase() : provider.name;
  53 | 
  54 |     switch (providerType) {
  55 |       case 'github':
  56 |         return <GitHubIcon className="h-5 w-5" />;
  57 |       case 'gitlab':
  58 |         return <GitLabIcon className="h-5 w-5" />;
  59 |       case 'gitea':
  60 |         return <GiteaIcon className="h-5 w-5" />;
  61 |       default:
  62 |         return null;
  63 |     }
  64 |   };
  65 | 
  66 |   // Get provider type display name
  67 |   const getProviderTypeName = () => {
  68 |     // Handle both string and enum types for compatibility
  69 |     const providerType =
  70 |       typeof provider.name === 'string' ? provider.name.toLowerCase() : provider.name;
  71 | 
  72 |     switch (providerType) {
  73 |       case 'github':
  74 |         return 'GitHub';
  75 |       case 'gitlab':
  76 |         return 'GitLab';
  77 |       case 'gitea':
  78 |         return 'Gitea';
  79 |       default:
  80 |         return String(provider.name);
  81 |     }
  82 |   };
  83 | 
  84 |   // Get provider URL for external link
  85 |   const getProviderUrl = () => {
  86 |     if (provider.name === 'gitea' && provider.serverUrl) {
  87 |       return provider.serverUrl;
  88 |     } else if (provider.name === 'github') {
  89 |       return 'https://github.com';
  90 |     } else if (provider.name === 'gitlab') {
  91 |       return 'https://gitlab.com';
  92 |     }
  93 |     return null;
  94 |   };
  95 | 
  96 |   return (
  97 |     <>
  98 |       <Card
  99 |         className="overflow-hidden transition-all duration-200 hover:shadow-md"
 100 |         onMouseEnter={() => setIsHovered(true)}
 101 |         onMouseLeave={() => setIsHovered(false)}
 102 |       >
 103 |         <CardHeader className="pb-2">
 104 |           <div className="flex justify-between items-start">
 105 |             <div className="flex items-center space-x-2">
 106 |               {getProviderIcon()}
 107 |               <div>
 108 |                 <CardTitle className="text-lg font-semibold">{provider.displayName}</CardTitle>
 109 |                 <CardDescription>{getProviderTypeName()}</CardDescription>
 110 |               </div>
 111 |             </div>
 112 |             <Badge
 113 |               variant={
 114 |                 provider.status === 'connected'
 115 |                   ? 'secondary'
 116 |                   : provider.status === 'error'
 117 |                     ? 'destructive'
 118 |                     : 'outline'
 119 |               }
 120 |             >
 121 |               {provider.status === 'connected'
 122 |                 ? 'Active'
 123 |                 : provider.status === 'error'
 124 |                   ? 'Error'
 125 |                   : 'Inactive'}
 126 |             </Badge>
 127 |           </div>
 128 |         </CardHeader>
 129 |         <CardContent className="pb-2">
 130 |           <div className="flex flex-col gap-1 text-sm text-muted-foreground">
 131 |             <div className="flex items-center justify-between">
 132 |               <span>Repositories:</span>
 133 |               <span className="font-medium">{provider.repositoryCount || 0}</span>
 134 |             </div>
 135 |             {provider.serverUrl && (
 136 |               <div className="flex items-center justify-between">
 137 |                 <span>Server:</span>
 138 |                 <span className="font-medium truncate max-w-[200px]">{provider.serverUrl}</span>
 139 |               </div>
 140 |             )}
 141 |           </div>
 142 |         </CardContent>
 143 |         <CardFooter className="flex justify-between pt-2 text-xs text-muted-foreground">
 144 |           <span>{lastSyncedText}</span>
 145 |           <div
 146 |             className={`flex space-x-2 ${isHovered ? 'opacity-100' : 'opacity-0'} transition-opacity`}
 147 |           >
 148 |             {getProviderUrl() && (
 149 |               <Button
 150 |                 variant="ghost"
 151 |                 size="sm"
 152 |                 className="p-0 h-8"
 153 |                 onClick={() => window.open(getProviderUrl(), '_blank')}
 154 |               >
 155 |                 <ExternalLink className="h-4 w-4 mr-1" />
 156 |                 Open
 157 |               </Button>
 158 |             )}
 159 |             <Button
 160 |               variant="ghost"
 161 |               size="sm"
 162 |               className="p-0 h-8"
 163 |               onClick={() => onRefresh(provider.id)}
 164 |               disabled={isRefreshing}
 165 |             >
 166 |               <RefreshCw className={`h-4 w-4 mr-1 ${isRefreshing ? 'animate-spin' : ''}`} />
 167 |               Sync
 168 |             </Button>
 169 |             <Button
 170 |               variant="ghost"
 171 |               size="sm"
 172 |               className="p-0 h-8 text-destructive hover:text-destructive"
 173 |               onClick={() => setIsDeleteDialogOpen(true)}
 174 |             >
 175 |               <Trash2 className="h-4 w-4 mr-1" />
 176 |               Delete
 177 |             </Button>
 178 |           </div>
 179 |         </CardFooter>
 180 |       </Card>
 181 | 
 182 |       <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
 183 |         <AlertDialogContent>
 184 |           <AlertDialogHeader>
 185 |             <AlertDialogTitle>Are you sure?</AlertDialogTitle>
 186 |             <AlertDialogDescription>
 187 |               This will delete the Git provider and all associated repositories. This action cannot
 188 |               be undone.
 189 |             </AlertDialogDescription>
 190 |           </AlertDialogHeader>
 191 |           <AlertDialogFooter>
 192 |             <AlertDialogCancel>Cancel</AlertDialogCancel>
 193 |             <AlertDialogAction
 194 |               onClick={async () => {
 195 |                 await onDelete(provider.id);
 196 |                 setIsDeleteDialogOpen(false);
 197 |               }}
 198 |               className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
 199 |             >
 200 |               Delete
 201 |             </AlertDialogAction>
 202 |           </AlertDialogFooter>
 203 |         </AlertDialogContent>
 204 |       </AlertDialog>
 205 |     </>
 206 |   );
 207 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/repositories/[id]/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { RepositoryDetail } from '@/components/repositories/RepositoryDetail';
   4 | import { useParams, useRouter } from 'next/navigation';
   5 | import { useTranslations } from 'next-intl';
   6 | import { PageHeader } from '@/components/layout/PageHeader';
   7 | import { Main } from '@/components/layout/Main';
   8 | 
   9 | export default function RepositoryPage() {
  10 |   const params = useParams();
  11 |   const router = useRouter();
  12 |   const t = useTranslations('Repositories');
  13 |   const repositoryId = params.id as string;
  14 |   const tenant = params.tenant as string;
  15 |   const locale = params.locale as string;
  16 | 
  17 |   const handleBack = () => {
  18 |     router.push(`/${locale}/${tenant}/repositories`);
  19 |   };
  20 | 
  21 |   return (
  22 |     <Main>
  23 |       <PageHeader 
  24 |         title={t('repositoryDetails')}
  25 |         description={t('viewAndManageRepository')}
  26 |       />
  27 |       <div className="grid gap-8 mt-6">
  28 |         <RepositoryDetail repositoryId={repositoryId} onBack={handleBack} />
  29 |       </div>
  30 |     </Main>
  31 |   );
  32 | } 

```

`/workspaces/automai/src/app/[locale]/[tenant]/layout.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | import { useParams } from 'next/navigation';
   5 | import { AppSidebar } from '@/components/layout/AppSidebar';
   6 | import { WorkspaceHeader } from '@/components/layout/WorkspaceHeader';
   7 | import { SidebarProvider } from '@/components/sidebar';
   8 | import { TooltipProvider } from '@/components/shadcn/tooltip';
   9 | import { ToasterProvider } from '@/components/shadcn/toaster';
  10 | import { RoleProvider } from '@/context/RoleContext';
  11 | 
  12 | export default function TenantLayout({
  13 |   children,
  14 |   _params,
  15 | }: {
  16 |   children: React.ReactNode;
  17 |   _params: Promise<{ tenant: string; locale: string }>;
  18 | }) {
  19 |   const params = useParams();
  20 |   const tenant = params.tenant as string;
  21 |   
  22 |   return (
  23 |     <RoleProvider>
  24 |       <SidebarProvider>
  25 |         <TooltipProvider>
  26 |           <ToasterProvider />
  27 |           <div className="relative flex min-h-screen w-full">
  28 |             <AppSidebar />
  29 |             <div 
  30 |               className="flex-1 flex flex-col min-w-0 w-full overflow-hidden transition-all duration-200"
  31 |               style={{ 
  32 |                 marginLeft: 'var(--sidebar-width-offset, 0)',
  33 |                 width: 'calc(100% - var(--sidebar-width-offset, 0))'
  34 |               }}
  35 |             >
  36 |               <WorkspaceHeader tenant={tenant} />
  37 |               <main className="flex-1 px-3 py-4 w-full max-w-full border border-gray-200 rounded-md">{children}</main>
  38 |             </div>
  39 |           </div>
  40 |         </TooltipProvider>
  41 |       </SidebarProvider>
  42 |     </RoleProvider>
  43 |   );
  44 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/page.tsx`:

```tsx
   1 | import HostList from './_components/HostList';
   2 | 
   3 | export default function HostsPage() {
   4 |   return <HostList />;
   5 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/settings/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useParams } from 'next/navigation';
   4 | import { useState } from 'react';
   5 | 
   6 | import { Button } from '@/components/shadcn/button';
   7 | import {
   8 |   Card,
   9 |   CardContent,
  10 |   CardDescription,
  11 |   CardHeader,
  12 |   CardTitle,
  13 | } from '@/components/shadcn/card';
  14 | import { Input } from '@/components/shadcn/input';
  15 | import { Label } from '@/components/shadcn/label';
  16 | import {
  17 |   Select,
  18 |   SelectContent,
  19 |   SelectItem,
  20 |   SelectTrigger,
  21 |   SelectValue,
  22 | } from '@/components/shadcn/select';
  23 | import { Switch } from '@/components/shadcn/switch';
  24 | import { useToast } from '@/components/shadcn/use-toast';
  25 | 
  26 | export default function HostsSettingsPage() {
  27 |   const _params = useParams();
  28 |   const { toast } = useToast();
  29 | 
  30 |   const [settings, setSettings] = useState({
  31 |     defaultCPU: '2',
  32 |     defaultMemory: '2048',
  33 |     defaultDisk: '20',
  34 |     autoStart: true,
  35 |     networkType: 'bridge',
  36 |     maxContainers: '10',
  37 |     backupEnabled: true,
  38 |     backupInterval: '24',
  39 |     monitoringEnabled: true,
  40 |     alertThreshold: '80',
  41 |   });
  42 | 
  43 |   const handleSave = async () => {
  44 |     try {
  45 |       console.log('Saving settings:', settings);
  46 | 
  47 |       toast({
  48 |         title: 'Settings saved',
  49 |         description: 'Your host settings have been updated successfully.',
  50 |       });
  51 |     } catch {
  52 |       toast({
  53 |         variant: 'destructive',
  54 |         title: 'Error',
  55 |         description: 'Failed to save settings',
  56 |       });
  57 |     }
  58 |   };
  59 | 
  60 |   return (
  61 |     <div className="flex-1 space-y-4 p-4">
  62 |       <div className="flex items-center justify-between">
  63 |         <h1 className="text-2xl font-semibold tracking-tight">Host Settings</h1>
  64 |         <Button onClick={handleSave}>Save Changes</Button>
  65 |       </div>
  66 | 
  67 |       <div className="grid gap-4 grid-cols-1 md:grid-cols-2">
  68 |         <Card>
  69 |           <CardHeader>
  70 |             <CardTitle>Default Host Configuration</CardTitle>
  71 |             <CardDescription>Set default values for new hosts</CardDescription>
  72 |           </CardHeader>
  73 |           <CardContent className="space-y-4">
  74 |             <div className="space-y-2">
  75 |               <Label htmlFor="defaultCPU">Default CPU Cores</Label>
  76 |               <Input
  77 |                 id="defaultCPU"
  78 |                 type="number"
  79 |                 min="1"
  80 |                 value={settings.defaultCPU}
  81 |                 onChange={(e) => setSettings({ ...settings, defaultCPU: e.target.value })}
  82 |               />
  83 |             </div>
  84 |             <div className="space-y-2">
  85 |               <Label htmlFor="defaultMemory">Default Memory (_MB)</Label>
  86 |               <Input
  87 |                 id="defaultMemory"
  88 |                 type="number"
  89 |                 min="512"
  90 |                 step="512"
  91 |                 value={settings.defaultMemory}
  92 |                 onChange={(e) => setSettings({ ...settings, defaultMemory: e.target.value })}
  93 |               />
  94 |             </div>
  95 |             <div className="space-y-2">
  96 |               <Label htmlFor="defaultDisk">Default Disk Size (_GB)</Label>
  97 |               <Input
  98 |                 id="defaultDisk"
  99 |                 type="number"
 100 |                 min="5"
 101 |                 value={settings.defaultDisk}
 102 |                 onChange={(e) => setSettings({ ...settings, defaultDisk: e.target.value })}
 103 |               />
 104 |             </div>
 105 |           </CardContent>
 106 |         </Card>
 107 | 
 108 |         <Card>
 109 |           <CardHeader>
 110 |             <CardTitle>Network Settings</CardTitle>
 111 |             <CardDescription>Configure network options for virtual hosts</CardDescription>
 112 |           </CardHeader>
 113 |           <CardContent className="space-y-4">
 114 |             <div className="space-y-2">
 115 |               <Label htmlFor="networkType">Network Type</Label>
 116 |               <Select
 117 |                 value={settings.networkType}
 118 |                 onValueChange={(value) => setSettings({ ...settings, networkType: value })}
 119 |               >
 120 |                 <SelectTrigger>
 121 |                   <SelectValue placeholder="Select network type" />
 122 |                 </SelectTrigger>
 123 |                 <SelectContent>
 124 |                   <SelectItem value="bridge">Bridge</SelectItem>
 125 |                   <SelectItem value="nat">NAT</SelectItem>
 126 |                   <SelectItem value="host">Host-only</SelectItem>
 127 |                 </SelectContent>
 128 |               </Select>
 129 |             </div>
 130 |             <div className="space-y-2">
 131 |               <Label htmlFor="maxContainers">Max Containers per Host</Label>
 132 |               <Input
 133 |                 id="maxContainers"
 134 |                 type="number"
 135 |                 min="1"
 136 |                 value={settings.maxContainers}
 137 |                 onChange={(e) => setSettings({ ...settings, maxContainers: e.target.value })}
 138 |               />
 139 |             </div>
 140 |             <div className="flex items-center justify-between">
 141 |               <Label htmlFor="autoStart">Auto-start VMs on Host Boot</Label>
 142 |               <Switch
 143 |                 id="autoStart"
 144 |                 checked={settings.autoStart}
 145 |                 onCheckedChange={(checked) => setSettings({ ...settings, autoStart: checked })}
 146 |               />
 147 |             </div>
 148 |           </CardContent>
 149 |         </Card>
 150 | 
 151 |         <Card>
 152 |           <CardHeader>
 153 |             <CardTitle>Backup Settings</CardTitle>
 154 |             <CardDescription>Configure automated backup options</CardDescription>
 155 |           </CardHeader>
 156 |           <CardContent className="space-y-4">
 157 |             <div className="flex items-center justify-between">
 158 |               <Label htmlFor="backupEnabled">Enable Automated Backups</Label>
 159 |               <Switch
 160 |                 id="backupEnabled"
 161 |                 checked={settings.backupEnabled}
 162 |                 onCheckedChange={(checked) => setSettings({ ...settings, backupEnabled: checked })}
 163 |               />
 164 |             </div>
 165 |             <div className="space-y-2">
 166 |               <Label htmlFor="backupInterval">Backup Interval (_hours)</Label>
 167 |               <Input
 168 |                 id="backupInterval"
 169 |                 type="number"
 170 |                 min="1"
 171 |                 value={settings.backupInterval}
 172 |                 onChange={(e) => setSettings({ ...settings, backupInterval: e.target.value })}
 173 |                 disabled={!settings.backupEnabled}
 174 |               />
 175 |             </div>
 176 |           </CardContent>
 177 |         </Card>
 178 | 
 179 |         <Card>
 180 |           <CardHeader>
 181 |             <CardTitle>Monitoring & Alerts</CardTitle>
 182 |             <CardDescription>Configure monitoring and alert thresholds</CardDescription>
 183 |           </CardHeader>
 184 |           <CardContent className="space-y-4">
 185 |             <div className="flex items-center justify-between">
 186 |               <Label htmlFor="monitoringEnabled">Enable Resource Monitoring</Label>
 187 |               <Switch
 188 |                 id="monitoringEnabled"
 189 |                 checked={settings.monitoringEnabled}
 190 |                 onCheckedChange={(checked) =>
 191 |                   setSettings({ ...settings, monitoringEnabled: checked })
 192 |                 }
 193 |               />
 194 |             </div>
 195 |             <div className="space-y-2">
 196 |               <Label htmlFor="alertThreshold">Resource Alert Threshold (%)</Label>
 197 |               <Input
 198 |                 id="alertThreshold"
 199 |                 type="number"
 200 |                 min="1"
 201 |                 max="100"
 202 |                 value={settings.alertThreshold}
 203 |                 onChange={(e) => setSettings({ ...settings, alertThreshold: e.target.value })}
 204 |                 disabled={!settings.monitoringEnabled}
 205 |               />
 206 |             </div>
 207 |           </CardContent>
 208 |         </Card>
 209 |       </div>
 210 |     </div>
 211 |   );
 212 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/analytics/page.tsx`:

```tsx
   1 | export default function AnalyticsPage() {
   2 |   return (
   3 |     <div className="container mx-auto p-4">
   4 |       <h1>Analytics</h1>
   5 |     </div>
   6 |   );
   7 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/HostOverview.tsx`:

```tsx
   1 | import { Grid, List } from 'lucide-react';
   2 | import { useState } from 'react';
   3 | 
   4 | import { Button } from '@/components/shadcn/button';
   5 | import { useToast } from '@/components/shadcn/use-toast';
   6 | import { cn } from '@/lib/utils';
   7 | import { Host } from '@/types/hosts';
   8 | 
   9 | import { ConnectHostDialog } from './ConnectHostDialog';
  10 | import { HostGrid } from './HostGrid';
  11 | import { HostTable } from './HostTable';
  12 | import { StatusSummary } from './StatusSummary';
  13 | 
  14 | interface HostOverviewProps {
  15 |   hosts: Host[];
  16 |   onDelete: (id: string) => void;
  17 |   onRefresh: () => void;
  18 |   onTestConnection: (host: Host) => void;
  19 |   className?: string;
  20 | }
  21 | 
  22 | export function HostOverview({
  23 |   hosts,
  24 |   onDelete,
  25 |   onRefresh,
  26 |   onTestConnection,
  27 |   className,
  28 | }: HostOverviewProps) {
  29 |   const { toast } = useToast();
  30 |   // State for view mode (grid or table)
  31 |   const [viewMode, setViewMode] = useState<'grid' | 'table'>('grid');
  32 | 
  33 |   // State for selection
  34 |   const [selectedHosts, setSelectedMachines] = useState<Set<string>>(new Set());
  35 |   const [selectMode, setSelectMode] = useState(false);
  36 | 
  37 |   // State for status filtering
  38 |   const [statusFilter, setStatusFilter] = useState<string | null>(null);
  39 | 
  40 |   // State for connecting host dialog
  41 |   const [showConnectDialog, setShowConnectDialog] = useState(false);
  42 | 
  43 |   // Filter hosts by status if filter is active
  44 |   const filteredHosts = statusFilter
  45 |     ? hosts.filter((m) => {
  46 |         if (statusFilter === 'running') return m.status === 'connected';
  47 |         if (statusFilter === 'warning') return m.status === 'pending';
  48 |         if (statusFilter === 'error') return m.status === 'failed';
  49 |         return true;
  50 |       })
  51 |     : hosts;
  52 | 
  53 |   const statusSummary = {
  54 |     connected: hosts.filter((m) => m.status === 'connected').length,
  55 |     failed: hosts.filter((m) => m.status === 'failed').length,
  56 |     pending: hosts.filter((m) => m.status === 'pending').length,
  57 |     total: hosts.length,
  58 |   };
  59 | 
  60 |   // Handle host selection
  61 |   const handleSelect = (id: string) => {
  62 |     const newSelection = new Set(selectedHosts);
  63 |     if (newSelection.has(id)) {
  64 |       newSelection.delete(id);
  65 |     } else {
  66 |       newSelection.add(id);
  67 |     }
  68 |     setSelectedMachines(newSelection);
  69 |   };
  70 | 
  71 |   // Handle select all
  72 |   const handleSelectAll = () => {
  73 |     if (selectedHosts.size === filteredHosts.length) {
  74 |       setSelectedMachines(new Set());
  75 |     } else {
  76 |       setSelectedMachines(new Set(filteredHosts.map((m) => m.id)));
  77 |     }
  78 |   };
  79 | 
  80 |   // Handle cancel selection
  81 |   const handleCancelSelection = () => {
  82 |     setSelectedMachines(new Set());
  83 |     setSelectMode(false);
  84 |   };
  85 | 
  86 |   // Handle bulk delete
  87 |   const handleBulkDelete = () => {
  88 |     if (onDelete && selectedHosts.size > 0) {
  89 |       selectedHosts.forEach((id) => onDelete(id));
  90 |       setSelectedMachines(new Set());
  91 |       setSelectMode(false);
  92 |     }
  93 |   };
  94 | 
  95 |   // Handle bulk refresh
  96 |   const _handleBulkRefresh = async () => {
  97 |     if (onTestConnection) {
  98 |       let successCount = 0;
  99 |       for (const host of filteredHosts) {
 100 |         try {
 101 |           await onTestConnection(host);
 102 |           successCount++;
 103 |         } catch (error) {
 104 |           console.error('Error refreshing connection:', error);
 105 |         }
 106 |       }
 107 | 
 108 |       if (successCount > 0) {
 109 |         toast({
 110 |           title: 'Connections refreshed',
 111 |           description: `Successfully refreshed ${successCount} host${successCount > 1 ? 's' : ''}`,
 112 |           duration: 5000,
 113 |         });
 114 |       }
 115 |     }
 116 |   };
 117 | 
 118 |   return (
 119 |     <div className={cn('flex flex-col gap-4', className)}>
 120 |       <div className="flex justify-between items-center p-2">
 121 |         <StatusSummary
 122 |           vmStatusSummary={{
 123 |             running: statusSummary.connected,
 124 |             warning: statusSummary.pending,
 125 |             error: statusSummary.failed,
 126 |             total: statusSummary.total,
 127 |           }}
 128 |           onStatusFilter={(status) => setStatusFilter(status)}
 129 |           selectedFilters={statusFilter ? new Set([statusFilter]) : new Set()}
 130 |         />
 131 | 
 132 |         <div className="flex items-center gap-2">
 133 |           {selectMode ? (
 134 |             <>
 135 |               <Button variant="outline" size="sm" onClick={handleCancelSelection}>
 136 |                 Cancel
 137 |               </Button>
 138 |               <Button
 139 |                 variant="destructive"
 140 |                 size="sm"
 141 |                 onClick={handleBulkDelete}
 142 |                 disabled={selectedHosts.size === 0}
 143 |               >
 144 |                 Delete ({selectedHosts.size})
 145 |               </Button>
 146 |             </>
 147 |           ) : (
 148 |             <>
 149 |               <Button
 150 |                 variant="outline"
 151 |                 size="sm"
 152 |                 onClick={() => setSelectMode(true)}
 153 |                 disabled={filteredHosts.length < 2}
 154 |               >
 155 |                 Select
 156 |               </Button>
 157 |               <Button
 158 |                 variant={viewMode === 'grid' ? 'default' : 'outline'}
 159 |                 size="icon"
 160 |                 onClick={() => setViewMode('grid')}
 161 |               >
 162 |                 <Grid className="h-4 w-4" />
 163 |               </Button>
 164 |               <Button
 165 |                 variant={viewMode === 'table' ? 'default' : 'outline'}
 166 |                 size="icon"
 167 |                 onClick={() => setViewMode('table')}
 168 |               >
 169 |                 <List className="h-4 w-4" />
 170 |               </Button>
 171 |             </>
 172 |           )}
 173 |         </div>
 174 |       </div>
 175 | 
 176 |       {viewMode === 'grid' ? (
 177 |         <>
 178 |           {filteredHosts.length > 0 ? (
 179 |             <HostGrid
 180 |               hosts={filteredHosts}
 181 |               selectedHosts={selectedHosts}
 182 |               selectMode={selectMode}
 183 |               onSelect={handleSelect}
 184 |               onDelete={onDelete}
 185 |               onTestConnection={onTestConnection}
 186 |             />
 187 |           ) : (
 188 |             <div className="flex flex-col items-center justify-center py-12 text-center">
 189 |               <p className="text-muted-foreground mb-4">No hosts match the current filter</p>
 190 |               <Button variant="outline" onClick={() => setStatusFilter(null)}>
 191 |                 Clear Filter
 192 |               </Button>
 193 |             </div>
 194 |           )}
 195 |         </>
 196 |       ) : (
 197 |         <>
 198 |           {filteredHosts.length > 0 ? (
 199 |             <HostTable
 200 |               hosts={filteredHosts}
 201 |               selectedHosts={selectedHosts}
 202 |               selectMode={selectMode}
 203 |               onSelect={handleSelect}
 204 |               onSelectAll={handleSelectAll}
 205 |               onDelete={onDelete}
 206 |               onTestConnection={onTestConnection}
 207 |             />
 208 |           ) : (
 209 |             <div className="flex flex-col items-center justify-center py-12 text-center">
 210 |               <p className="text-muted-foreground mb-4">No hosts match the current filter</p>
 211 |               <Button variant="outline" onClick={() => setStatusFilter(null)}>
 212 |                 Clear Filter
 213 |               </Button>
 214 |             </div>
 215 |           )}
 216 |         </>
 217 |       )}
 218 | 
 219 |       <ConnectHostDialog
 220 |         open={showConnectDialog}
 221 |         onOpenChange={setShowConnectDialog}
 222 |         onSuccess={onRefresh}
 223 |       />
 224 |     </div>
 225 |   );
 226 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/ConnectForm.tsx`:

```tsx
   1 | import { AlertCircle, Check, CheckCircle, Loader2, ShieldAlert, X } from 'lucide-react';
   2 | import { useState, useRef } from 'react';
   3 | 
   4 | import { Alert, AlertDescription, AlertTitle } from '@/components/shadcn/alert';
   5 | import { Badge } from '@/components/shadcn/badge';
   6 | import { Button } from '@/components/shadcn/button';
   7 | import { Input } from '@/components/shadcn/input';
   8 | import { Label } from '@/components/shadcn/label';
   9 | import {
  10 |   Select,
  11 |   SelectContent,
  12 |   SelectItem,
  13 |   SelectTrigger,
  14 |   SelectValue,
  15 | } from '@/components/shadcn/select';
  16 | import { Textarea } from '@/components/shadcn/textarea';
  17 | 
  18 | export interface FormData {
  19 |   name: string;
  20 |   description: string;
  21 |   type: string;
  22 |   ip: string;
  23 |   port: string;
  24 |   username: string;
  25 |   password: string;
  26 |   id?: string;
  27 | }
  28 | 
  29 | interface ConnectFormProps {
  30 |   formData: FormData;
  31 |   onChange: (formData: FormData) => void;
  32 |   onSave?: () => void;
  33 |   onTestSuccess?: () => void;
  34 | }
  35 | 
  36 | export function ConnectForm({ formData, onChange, onSave, onTestSuccess }: ConnectFormProps) {
  37 |   const [connectionType, setConnectionType] = useState<'ssh' | 'docker' | 'portainer'>(
  38 |     formData.type as 'ssh' | 'docker' | 'portainer',
  39 |   );
  40 | 
  41 |   // State variables for testing status
  42 |   const [testing, setTesting] = useState(false);
  43 |   const [testError, setTestError] = useState<string | null>(null);
  44 |   const [testSuccess, setTestSuccess] = useState(false);
  45 |   const lastRequestTime = useRef<number>(0);
  46 |   const REQUEST_THROTTLE_MS = 500; // minimum time between requests
  47 | 
  48 |   // State for fingerprint verification
  49 |   const [fingerprint, setFingerprint] = useState<string | null>(null);
  50 |   const [fingerprintVerified, setFingerprintVerified] = useState(false);
  51 |   const [requireVerification, setRequireVerification] = useState(false);
  52 | 
  53 |   const handleTypeChange = (value: string) => {
  54 |     setConnectionType(value as 'ssh' | 'docker' | 'portainer' | 'docker' | 'portainer');
  55 |     onChange({
  56 |       ...formData,
  57 |       type: value,
  58 |       port: value === 'ssh' ? '22' : value === 'docker' ? '2375' : '9000',
  59 |     });
  60 |   };
  61 | 
  62 |   const handleInputChange = (field: string, value: string) => {
  63 |     onChange({ ...formData, [field]: value });
  64 |   };
  65 | 
  66 |   // Handle keydown event to trigger test connection on Enter
  67 |   const handleKeyDown = (e: React.KeyboardEvent) => {
  68 |     if (e.key === 'Enter' && !testing) {
  69 |       e.preventDefault();
  70 |       testConnection();
  71 |     }
  72 |   };
  73 | 
  74 |   // Update the testConnection function to handle fingerprint verification
  75 |   const testConnection = async () => {
  76 |     // Throttle requests
  77 |     const now = Date.now();
  78 |     if (now - lastRequestTime.current < REQUEST_THROTTLE_MS || testing) {
  79 |       return;
  80 |     }
  81 |     lastRequestTime.current = now;
  82 | 
  83 |     setTesting(true);
  84 |     setTestError(null);
  85 |     setTestSuccess(false);
  86 |     setFingerprint(null);
  87 |     setRequireVerification(false);
  88 |     setFingerprintVerified(false);
  89 | 
  90 |     try {
  91 |       // Get the base URL from the current window location
  92 |       const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';
  93 | 
  94 |       const response = await fetch(`${baseUrl}/api/hosts/test-connection`, {
  95 |         method: 'POST',
  96 |         headers: {
  97 |           'Content-Type': 'application/json',
  98 |         },
  99 |         body: JSON.stringify({
 100 |           type: formData.type,
 101 |           ip: formData.ip,
 102 |           port: formData.port ? parseInt(formData.port) : undefined,
 103 |           username: formData.username,
 104 |           password: formData.password,
 105 |           hostId: formData.id,
 106 |         }),
 107 |       });
 108 | 
 109 |       const data = await response.json();
 110 | 
 111 |       if (response.status === 428) {
 112 |         // Fingerprint verification required
 113 |         setRequireVerification(true);
 114 |         setFingerprint(data.fingerprint);
 115 |         setTestError(data.message);
 116 |       } else if (data.success) {
 117 |         setTestSuccess(true);
 118 |         // If the response includes fingerprint information
 119 |         if (data.fingerprint) {
 120 |           setFingerprint(data.fingerprint);
 121 |           setFingerprintVerified(data.fingerprintVerified || false);
 122 |         }
 123 |         // Notify parent component of successful test
 124 |         if (onTestSuccess) {
 125 |           onTestSuccess();
 126 |         }
 127 |       } else {
 128 |         setTestError(data.message);
 129 |       }
 130 |     } catch (error) {
 131 |       setTestError('Failed to test connection');
 132 |       console.error('Error testing connection:', error);
 133 |     } finally {
 134 |       setTesting(false);
 135 |     }
 136 |   };
 137 | 
 138 |   // Add a function to verify fingerprint
 139 |   const verifyFingerprint = async () => {
 140 |     // Throttle requests
 141 |     const now = Date.now();
 142 |     if (now - lastRequestTime.current < REQUEST_THROTTLE_MS || testing) {
 143 |       return;
 144 |     }
 145 |     lastRequestTime.current = now;
 146 | 
 147 |     setTesting(true);
 148 |     setTestError(null);
 149 | 
 150 |     try {
 151 |       // Get the base URL from the current window location
 152 |       const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';
 153 | 
 154 |       const response = await fetch(`${baseUrl}/api/hosts/verify-fingerprint`, {
 155 |         method: 'POST',
 156 |         headers: {
 157 |           'Content-Type': 'application/json',
 158 |         },
 159 |         body: JSON.stringify({
 160 |           fingerprint,
 161 |           host: formData.ip,
 162 |           port: formData.port ? parseInt(formData.port) : undefined,
 163 |         }),
 164 |       });
 165 | 
 166 |       const data = await response.json();
 167 | 
 168 |       if (data.success) {
 169 |         setTestSuccess(true);
 170 |         setFingerprintVerified(true);
 171 |         setRequireVerification(false);
 172 | 
 173 |         // Notify parent component of successful test
 174 |         if (onTestSuccess) {
 175 |           onTestSuccess();
 176 |         }
 177 |       } else {
 178 |         setTestError(data.message);
 179 |       }
 180 |     } catch (error) {
 181 |       setTestError('Failed to verify fingerprint');
 182 |       console.error('Error verifying fingerprint:', error);
 183 |     } finally {
 184 |       setTesting(false);
 185 |     }
 186 |   };
 187 | 
 188 |   return (
 189 |     <div className="space-y-3 py-2">
 190 |       <form onKeyDown={handleKeyDown} onSubmit={(e) => e.preventDefault()}>
 191 |         <div className="grid grid-cols-12 items-center gap-3">
 192 |           <Label htmlFor="name" className="text-right col-span-2">
 193 |             Name
 194 |           </Label>
 195 |           <Input
 196 |             id="name"
 197 |             placeholder="Client name"
 198 |             value={formData.name}
 199 |             onChange={(e) => handleInputChange('name', e.target.value)}
 200 |             className="col-span-10"
 201 |           />
 202 |         </div>
 203 | 
 204 |         <div className="grid grid-cols-12 items-center gap-3 mt-3">
 205 |           <Label htmlFor="type" className="text-right col-span-2 whitespace-nowrap">
 206 |             Connection
 207 |           </Label>
 208 |           <div className="col-span-10">
 209 |             <Select value={formData.type} onValueChange={handleTypeChange}>
 210 |               <SelectTrigger>
 211 |                 <SelectValue placeholder="Select type" />
 212 |               </SelectTrigger>
 213 |               <SelectContent>
 214 |                 <SelectItem value="ssh">SSH</SelectItem>
 215 |                 <SelectItem value="docker">Docker</SelectItem>
 216 |                 <SelectItem value="portainer">Portainer</SelectItem>
 217 |               </SelectContent>
 218 |             </Select>
 219 |           </div>
 220 |         </div>
 221 | 
 222 |         <div className="grid grid-cols-12 items-center gap-3 mt-3">
 223 |           <Label htmlFor="ip" className="text-right col-span-2 whitespace-nowrap">
 224 |             IP Address
 225 |           </Label>
 226 |           <Input
 227 |             id="ip"
 228 |             placeholder="IP Address"
 229 |             value={formData.ip}
 230 |             onChange={(e) => handleInputChange('ip', e.target.value)}
 231 |             className="col-span-7"
 232 |           />
 233 |           <Label htmlFor="port" className="text-right whitespace-nowrap col-span-1">
 234 |             Port
 235 |           </Label>
 236 |           <Input
 237 |             id="port"
 238 |             placeholder="Port"
 239 |             value={formData.port}
 240 |             onChange={(e) => handleInputChange('port', e.target.value)}
 241 |             className="col-span-2"
 242 |           />
 243 |         </div>
 244 | 
 245 |         {connectionType === 'ssh' && (
 246 |           <div className="grid grid-cols-12 items-center gap-3 mt-3">
 247 |             <Label htmlFor="username" className="text-right col-span-2 whitespace-nowrap">
 248 |               Username
 249 |             </Label>
 250 |             <Input
 251 |               id="username"
 252 |               placeholder="Username"
 253 |               value={formData.username}
 254 |               onChange={(e) => handleInputChange('username', e.target.value)}
 255 |               className="col-span-4"
 256 |             />
 257 |             <Label htmlFor="password" className="text-right whitespace-nowrap col-span-2">
 258 |               Password
 259 |             </Label>
 260 |             <Input
 261 |               id="password"
 262 |               type="password"
 263 |               placeholder="Password"
 264 |               value={formData.password}
 265 |               onChange={(e) => handleInputChange('password', e.target.value)}
 266 |               className="col-span-4"
 267 |             />
 268 |           </div>
 269 |         )}
 270 | 
 271 |         <div className="grid grid-cols-12 items-center gap-3 mt-3">
 272 |           <Label htmlFor="description" className="text-right col-span-2">
 273 |             Description
 274 |           </Label>
 275 |           <Textarea
 276 |             id="description"
 277 |             placeholder="Description (optional)"
 278 |             value={formData.description}
 279 |             onChange={(e) => handleInputChange('description', e.target.value)}
 280 |             className="col-span-10 h-16"
 281 |           />
 282 |         </div>
 283 | 
 284 |         <div className="flex justify-end space-x-2 mt-4">
 285 |           <Button variant="outline" onClick={testConnection} disabled={testing} type="button">
 286 |             {testing ? (
 287 |               <>
 288 |                 <Loader2 className="mr-2 h-4 w-4 animate-spin" />
 289 |                 Testing...
 290 |               </>
 291 |             ) : (
 292 |               <>Test Connection</>
 293 |             )}
 294 |           </Button>
 295 | 
 296 |           {onSave && (
 297 |             <Button onClick={onSave} disabled={!testSuccess} type="button">
 298 |               Save
 299 |             </Button>
 300 |           )}
 301 |         </div>
 302 |       </form>
 303 | 
 304 |       {requireVerification && fingerprint && (
 305 |         <Alert className="mt-4">
 306 |           <AlertTitle className="flex items-center">
 307 |             <ShieldAlert className="h-4 w-4 mr-2" />
 308 |             Host Key Verification Failed
 309 |           </AlertTitle>
 310 |           <AlertDescription className="mt-2">
 311 |             <p className="text-sm text-muted-foreground">
 312 |               The authenticity of host &apos;{formData.ip}&apos; can&apos;t be established.
 313 |             </p>
 314 |             <p className="mb-2">
 315 |               Fingerprint: <code className="bg-muted p-1 rounded">{fingerprint}</code>
 316 |             </p>
 317 |             <p className="mb-4">Are you sure you want to continue connecting?</p>
 318 |             <div className="flex space-x-2">
 319 |               <Button variant="outline" size="sm" onClick={verifyFingerprint} disabled={testing}>
 320 |                 {testing ? (
 321 |                   <Loader2 className="h-4 w-4 animate-spin mr-2" />
 322 |                 ) : (
 323 |                   <Check className="h-4 w-4 mr-2" />
 324 |                 )}
 325 |                 Yes, trust this host
 326 |               </Button>
 327 |               <Button variant="ghost" size="sm" onClick={() => setRequireVerification(false)}>
 328 |                 <X className="h-4 w-4 mr-2" />
 329 |                 No, cancel
 330 |               </Button>
 331 |             </div>
 332 |           </AlertDescription>
 333 |         </Alert>
 334 |       )}
 335 | 
 336 |       {testError && !requireVerification && (
 337 |         <Alert variant="destructive" className="mt-4">
 338 |           <AlertTitle className="flex items-center">
 339 |             <AlertCircle className="h-4 w-4 mr-2" />
 340 |             Connection Failed
 341 |           </AlertTitle>
 342 |           <AlertDescription>{testError}</AlertDescription>
 343 |         </Alert>
 344 |       )}
 345 | 
 346 |       {testSuccess && (
 347 |         <Alert className="mt-4" variant="success">
 348 |           <AlertTitle className="flex items-center">
 349 |             <CheckCircle className="h-4 w-4 mr-2 text-green-500" />
 350 |             Connection Successful
 351 |           </AlertTitle>
 352 |           <AlertDescription>
 353 |             <p>Successfully connected to the remote host</p>
 354 |             {fingerprint && (
 355 |               <p className="mt-2">
 356 |                 <span className="font-medium">Host fingerprint:</span>{' '}
 357 |                 <code className="bg-muted p-1 rounded">{fingerprint}</code>{' '}
 358 |                 {fingerprintVerified && (
 359 |                   <Badge variant="outline" className="ml-2">
 360 |                     Verified
 361 |                   </Badge>
 362 |                 )}
 363 |               </p>
 364 |             )}
 365 |           </AlertDescription>
 366 |         </Alert>
 367 |       )}
 368 |     </div>
 369 |   );
 370 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/ConnectHostDialog.tsx`:

```tsx
   1 | import { Loader2 } from 'lucide-react';
   2 | import { useParams } from 'next/navigation';
   3 | /* eslint-disable @typescript-eslint/no-unused-vars, unused-imports/no-unused-vars */
   4 | import { useTranslations } from 'next-intl';
   5 | import { useState, useCallback, useRef } from 'react';
   6 | import { toast } from 'sonner';
   7 | import * as React from 'react';
   8 | 
   9 | import { Button } from '@/components/shadcn/button';
  10 | import {
  11 |   Dialog,
  12 |   DialogContent,
  13 |   DialogHeader,
  14 |   DialogTitle,
  15 |   DialogFooter,
  16 |   DialogDescription,
  17 | } from '@/components/shadcn/dialog';
  18 | import { hostsApi } from '@/lib/api/hosts';
  19 | import { Host } from '@/types/hosts';
  20 | 
  21 | import { ConnectionForm, FormData } from './ConnectionForm';
  22 | 
  23 | interface ConnectHostDialogProps {
  24 |   open: boolean;
  25 |   onOpenChange: (open: boolean) => void;
  26 |   onSuccess?: (host: Host) => void;
  27 | }
  28 | 
  29 | export function ConnectHostDialog({ open, onOpenChange, onSuccess }: ConnectHostDialogProps) {
  30 |   const t = useTranslations('Common');
  31 |   const paramsPromise = useParams();
  32 |   const params = React.use(paramsPromise);
  33 |   const locale = params.locale as string;
  34 |   const [isCreating, setIsCreating] = useState(false);
  35 |   const [isTesting, setIsTesting] = useState(false);
  36 |   const [testStatus, setTestStatus] = useState<'idle' | 'success' | 'error'>('idle');
  37 |   const [testError, setTestError] = useState<string | null>(null);
  38 |   const lastRequestTime = useRef<number>(0);
  39 |   const REQUEST_THROTTLE_MS = 500; // minimum time between requests
  40 |   const [formData, setFormData] = useState<FormData>({
  41 |     name: '',
  42 |     description: '',
  43 |     type: 'ssh',
  44 |     ip: '',
  45 |     port: '22',
  46 |     username: '',
  47 |     password: '',
  48 |   });
  49 |   const [isLoading, setIsLoading] = useState(false);
  50 |   const [error, setError] = useState<string | null>(null);
  51 | 
  52 |   const resetForm = useCallback(() => {
  53 |     setFormData({
  54 |       name: '',
  55 |       description: '',
  56 |       type: 'ssh',
  57 |       ip: '',
  58 |       port: '22',
  59 |       username: '',
  60 |       password: '',
  61 |     });
  62 |     setTestStatus('idle');
  63 |     setTestError(null);
  64 |   }, []);
  65 | 
  66 |   const validateFormData = (): boolean => {
  67 |     if (!formData.name.trim()) {
  68 |       toast.error(t('errors.nameRequired'));
  69 |       return false;
  70 |     }
  71 | 
  72 |     if (!formData.ip.trim()) {
  73 |       toast.error(t('errors.ipRequired'));
  74 |       return false;
  75 |     }
  76 | 
  77 |     const port = parseInt(formData.port);
  78 |     if (isNaN(port) || port < 1 || port > 65535) {
  79 |       toast.error(t('errors.invalidPort'));
  80 |       return false;
  81 |     }
  82 | 
  83 |     if (formData.type === 'ssh' && (!formData.username.trim() || !formData.password.trim())) {
  84 |       toast.error(t('errors.sshCredentials'));
  85 |       return false;
  86 |     }
  87 | 
  88 |     return true;
  89 |   };
  90 | 
  91 |   const handleCreate = async () => {
  92 |     if (!validateFormData()) return;
  93 | 
  94 |     // Throttle requests
  95 |     const now = Date.now();
  96 |     if (now - lastRequestTime.current < REQUEST_THROTTLE_MS) {
  97 |       return;
  98 |     }
  99 |     lastRequestTime.current = now;
 100 | 
 101 |     setIsCreating(true);
 102 |     try {
 103 |       const host = await hostsApi.createHost({
 104 |         name: formData.name,
 105 |         description: formData.description || '',
 106 |         type: 'ssh',
 107 |         ip: formData.ip,
 108 |         port: parseInt(formData.port),
 109 |         user: formData.username,
 110 |         password: formData.password,
 111 |         status: 'pending',
 112 |       });
 113 | 
 114 |       toast.success(t('success.connected', { name: formData.name }));
 115 | 
 116 |       resetForm();
 117 |       onOpenChange(false);
 118 | 
 119 |       if (onSuccess) {
 120 |         onSuccess(host);
 121 |       }
 122 |     } catch (error) {
 123 |       console.error('Error creating connection:', error);
 124 |       toast.error(error instanceof Error ? error.message : t('errors.createFailed'));
 125 |     } finally {
 126 |       setIsCreating(false);
 127 |     }
 128 |   };
 129 | 
 130 |   const getDetailedErrorMessage = (errorData: any): string => {
 131 |     if (!errorData) return t('errors.unknownError');
 132 | 
 133 |     if (errorData.message) {
 134 |       const message = errorData.message;
 135 | 
 136 |       if (message.includes('timeout')) {
 137 |         return t('errors.timeout');
 138 |       }
 139 | 
 140 |       if (message.includes('refused')) {
 141 |         return t('errors.refused');
 142 |       }
 143 | 
 144 |       if (message.includes('authentication') || message.includes('password')) {
 145 |         return t('errors.authentication');
 146 |       }
 147 | 
 148 |       return message;
 149 |     }
 150 | 
 151 |     return t('errors.hostConnection');
 152 |   };
 153 | 
 154 |   const testConnection = async (): Promise<boolean> => {
 155 |     if (!validateFormData()) return false;
 156 | 
 157 |     // Throttle requests
 158 |     const now = Date.now();
 159 |     if (now - lastRequestTime.current < REQUEST_THROTTLE_MS) {
 160 |       return false;
 161 |     }
 162 |     lastRequestTime.current = now;
 163 | 
 164 |     setIsTesting(true);
 165 |     setTestStatus('idle');
 166 |     setTestError(null);
 167 | 
 168 |     try {
 169 |       const data = await hostsApi.testConnection({
 170 |         type: 'ssh',
 171 |         ip: formData.ip,
 172 |         port: parseInt(formData.port),
 173 |         username: formData.username,
 174 |         password: formData.password,
 175 |       });
 176 | 
 177 |       if (data.success) {
 178 |         setTestStatus('success');
 179 |         return true;
 180 |       } else {
 181 |         setTestStatus('error');
 182 |         const errorMessage = getDetailedErrorMessage(data);
 183 |         setTestError(errorMessage || t('errors.testFailed'));
 184 |         return false;
 185 |       }
 186 |     } catch (error) {
 187 |       console.error('Error testing connection:', error);
 188 |       setTestStatus('error');
 189 |       setTestError(error instanceof Error ? error.message : t('errors.testFailed'));
 190 |       return false;
 191 |     } finally {
 192 |       setIsTesting(false);
 193 |     }
 194 |   };
 195 | 
 196 |   const handleFormChange = (newFormData: FormData) => {
 197 |     setFormData(newFormData);
 198 |     if (testStatus !== 'idle') {
 199 |       setTestStatus('idle');
 200 |       setTestError(null);
 201 |     }
 202 |   };
 203 | 
 204 |   const isFormValid = (): boolean => {
 205 |     if (!formData.name.trim() || !formData.ip.trim()) return false;
 206 | 
 207 |     if (formData.type === 'ssh' && (!formData.username.trim() || !formData.password.trim())) {
 208 |       return false;
 209 |     }
 210 | 
 211 |     return true;
 212 |   };
 213 | 
 214 |   return (
 215 |     <Dialog
 216 |       open={open}
 217 |       onOpenChange={(newOpen) => {
 218 |         if (!newOpen) {
 219 |           resetForm();
 220 |         }
 221 |         onOpenChange(newOpen);
 222 |       }}
 223 |     >
 224 |       <DialogContent className="max-w-2xl">
 225 |         <DialogHeader>
 226 |           <DialogTitle>Connect to Host</DialogTitle>
 227 |           <DialogDescription>Enter the connection details for your host.</DialogDescription>
 228 |         </DialogHeader>
 229 | 
 230 |         <ConnectionForm
 231 |           formData={formData}
 232 |           onChange={handleFormChange}
 233 |           onTestSuccess={() => setTestStatus('success')}
 234 |         />
 235 | 
 236 |         <DialogFooter>
 237 |           <Button variant="outline" onClick={() => onOpenChange(false)} disabled={isCreating}>
 238 |             Cancel
 239 |           </Button>
 240 |           <Button
 241 |             onClick={handleCreate}
 242 |             disabled={!isFormValid() || isCreating || testStatus !== 'success'}
 243 |           >
 244 |             {isCreating ? (
 245 |               <>
 246 |                 <Loader2 className="mr-2 h-4 w-4 animate-spin" />
 247 |                 Connecting...
 248 |               </>
 249 |             ) : (
 250 |               'Save'
 251 |             )}
 252 |           </Button>
 253 |         </DialogFooter>
 254 |       </DialogContent>
 255 |     </Dialog>
 256 |   );
 257 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/HostTable.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Terminal, RefreshCw, XCircle, ScrollText, MoreHorizontal } from 'lucide-react';
   4 | import { useRouter } from 'next/navigation';
   5 | import { useTranslations } from 'next-intl';
   6 | 
   7 | import { Button } from '@/components/shadcn/button';
   8 | import {
   9 |   DropdownMenu,
  10 |   DropdownMenuContent,
  11 |   DropdownMenuItem,
  12 |   DropdownMenuTrigger,
  13 | } from '@/components/shadcn/dropdown-menu';
  14 | import {
  15 |   Table,
  16 |   TableBody,
  17 |   TableCell,
  18 |   TableHead,
  19 |   TableHeader,
  20 |   TableRow,
  21 | } from '@/components/shadcn/table';
  22 | import { Host } from '@/types/hosts';
  23 | 
  24 | interface HostTableProps {
  25 |   hosts: Host[];
  26 |   onDelete?: (id: string) => void;
  27 |   onTestConnection?: (host: Host) => void;
  28 | }
  29 | 
  30 | export function HostTable({ hosts, onDelete, onTestConnection }: HostTableProps) {
  31 |   const router = useRouter();
  32 |   const t = useTranslations('Common');
  33 | 
  34 |   const getStatusDot = (status: string) => {
  35 |     const baseClasses = 'h-3 w-3 rounded-full';
  36 | 
  37 |     switch (status) {
  38 |       case 'connected':
  39 |         return <div className={`${baseClasses} bg-green-500`} title={t('connected')} />;
  40 |       case 'failed':
  41 |         return <div className={`${baseClasses} bg-red-500`} title={t('failed')} />;
  42 |       case 'pending':
  43 |         return <div className={`${baseClasses} bg-yellow-500`} title={t('pending')} />;
  44 |       default:
  45 |         return <div className={`${baseClasses} bg-gray-400`} title={t('unknown')} />;
  46 |     }
  47 |   };
  48 | 
  49 |   const handleTerminalClick = (host: Host) => {
  50 |     // Get the current URL path segments to extract locale and tenant
  51 |     const pathSegments = window.location.pathname.split('/');
  52 |     const locale = pathSegments[1] || 'en';
  53 |     const tenant = pathSegments[2] || 'default';
  54 | 
  55 |     // Build the correct path with locale and tenant
  56 |     const terminalPath = `/${locale}/${tenant}/terminals/${host.name.toLowerCase()}`;
  57 |     console.log(`Redirecting to terminal: ${terminalPath}`);
  58 |     router.push(terminalPath);
  59 |   };
  60 | 
  61 |   return (
  62 |     <div className="rounded-md border">
  63 |       <Table>
  64 |         <TableHeader>
  65 |           <TableRow className="h-10">
  66 |             <TableHead className="w-[40px] py-2">Status</TableHead>
  67 |             <TableHead className="py-2">Name</TableHead>
  68 |             <TableHead className="py-2">Address</TableHead>
  69 |             <TableHead className="py-2">Last Connected</TableHead>
  70 |             <TableHead className="w-[120px] py-2">Actions</TableHead>
  71 |           </TableRow>
  72 |         </TableHeader>
  73 |         <TableBody key="host-table-body">
  74 |           {hosts.map((host) => (
  75 |             <TableRow key={host.id} className="h-10">
  76 |               <TableCell className="py-2">
  77 |                 <div className="flex justify-center">{getStatusDot(host.status)}</div>
  78 |               </TableCell>
  79 |               <TableCell className="font-medium py-2">{host.name}</TableCell>
  80 |               <TableCell className="py-2">
  81 |                 {host.ip}
  82 |                 {host.port ? `:${host.port}` : ''}
  83 |               </TableCell>
  84 |               <TableCell className="py-2">
  85 |                 {host.lastConnected
  86 |                   ? new Date(host.lastConnected).toLocaleString()
  87 |                   : host.status === 'connected'
  88 |                     ? new Date().toLocaleString()
  89 |                     : t('never')}
  90 |               </TableCell>
  91 |               <TableCell className="py-2">
  92 |                 <div className="flex items-center space-x-1">
  93 |                   <Button
  94 |                     variant="outline"
  95 |                     size="sm"
  96 |                     className="h-7 w-7 p-0"
  97 |                     onClick={() => handleTerminalClick(host)}
  98 |                     disabled={host.status !== 'connected'}
  99 |                   >
 100 |                     <Terminal className="h-3.5 w-3.5" />
 101 |                   </Button>
 102 |                   <DropdownMenu>
 103 |                     <DropdownMenuTrigger asChild>
 104 |                       <Button variant="ghost" size="sm" className="h-7 w-7 p-0">
 105 |                         <MoreHorizontal className="h-3.5 w-3.5" />
 106 |                       </Button>
 107 |                     </DropdownMenuTrigger>
 108 |                     <DropdownMenuContent align="end" className="w-[140px]">
 109 |                       <DropdownMenuItem
 110 |                         key={`logs-${host.id}`}
 111 |                         onClick={() => router.push(`/logs/${host.name}`)}
 112 |                         className="py-1.5"
 113 |                       >
 114 |                         <ScrollText className="mr-2 h-3.5 w-3.5" />
 115 |                         <span className="text-sm">{t('logs')}</span>
 116 |                       </DropdownMenuItem>
 117 |                       <DropdownMenuItem
 118 |                         key={`refresh-${host.id}`}
 119 |                         onClick={() => onTestConnection?.(host)}
 120 |                         className="py-1.5"
 121 |                       >
 122 |                         <RefreshCw className="mr-2 h-3.5 w-3.5" />
 123 |                         <span className="text-sm">{t('refresh')}</span>
 124 |                       </DropdownMenuItem>
 125 |                       <DropdownMenuItem
 126 |                         key={`delete-${host.id}`}
 127 |                         onClick={() => onDelete?.(host.id)}
 128 |                         className="text-destructive py-1.5"
 129 |                       >
 130 |                         <XCircle className="mr-2 h-3.5 w-3.5" />
 131 |                         <span className="text-sm">{t('delete')}</span>
 132 |                       </DropdownMenuItem>
 133 |                     </DropdownMenuContent>
 134 |                   </DropdownMenu>
 135 |                 </div>
 136 |               </TableCell>
 137 |             </TableRow>
 138 |           ))}
 139 |         </TableBody>
 140 |       </Table>
 141 |     </div>
 142 |   );
 143 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/ConnectionForm.tsx`:

```tsx
   1 | import { AlertCircle, Check, CheckCircle, Loader2, ShieldAlert, X } from 'lucide-react';
   2 | import { useParams } from 'next/navigation';
   3 | import { useTranslations } from 'next-intl';
   4 | import * as React from 'react';
   5 | import { useState, useRef } from 'react';
   6 | 
   7 | import { Alert, AlertDescription, AlertTitle } from '@/components/shadcn/alert';
   8 | import { Badge } from '@/components/shadcn/badge';
   9 | import { Button } from '@/components/shadcn/button';
  10 | import { Input } from '@/components/shadcn/input';
  11 | import { Label } from '@/components/shadcn/label';
  12 | import {
  13 |   Select,
  14 |   SelectContent,
  15 |   SelectItem,
  16 |   SelectTrigger,
  17 |   SelectValue,
  18 | } from '@/components/shadcn/select';
  19 | import { Textarea } from '@/components/shadcn/textarea';
  20 | import { hostsApi } from '@/lib/api/hosts';
  21 | 
  22 | export interface FormData {
  23 |   name: string;
  24 |   description: string;
  25 |   type: string;
  26 |   ip: string;
  27 |   port: string;
  28 |   username: string;
  29 |   password: string;
  30 |   id?: string;
  31 | }
  32 | 
  33 | interface ConnectionFormProps {
  34 |   formData: FormData;
  35 |   onChange: (formData: FormData) => void;
  36 |   onSave?: () => void;
  37 |   onTestSuccess?: () => void;
  38 | }
  39 | 
  40 | export function ConnectionForm({ formData, onChange, onSave, onTestSuccess }: ConnectionFormProps) {
  41 |   const t = useTranslations('Common');
  42 |   const [connectionType, setConnectionType] = useState<'ssh' | 'docker' | 'portainer'>(
  43 |     formData.type as 'ssh' | 'docker' | 'portainer',
  44 |   );
  45 | 
  46 |   // State variables for testing status
  47 |   const [testing, setTesting] = useState(false);
  48 |   const [testError, setTestError] = useState<string | null>(null);
  49 |   const [testSuccess, setTestSuccess] = useState(false);
  50 |   const lastRequestTime = useRef<number>(0);
  51 |   const REQUEST_THROTTLE_MS = 500; // minimum time between requests
  52 | 
  53 |   // State for fingerprint verification
  54 |   const [fingerprint, setFingerprint] = useState<string | null>(null);
  55 |   const [fingerprintVerified, setFingerprintVerified] = useState(false);
  56 |   const [requireVerification, setRequireVerification] = useState(false);
  57 |   const [verifyingFingerprint, setVerifyingFingerprint] = useState(false);
  58 | 
  59 |   const handleTypeChange = (value: string) => {
  60 |     setConnectionType(value as 'ssh' | 'docker' | 'portainer' | 'docker' | 'portainer');
  61 |     onChange({
  62 |       ...formData,
  63 |       type: value,
  64 |       port: value === 'ssh' ? '22' : value === 'docker' ? '2375' : '9000',
  65 |     });
  66 |   };
  67 | 
  68 |   const handleInputChange = (field: string, value: string) => {
  69 |     if (field === 'name') {
  70 |       // Only allow lowercase letters, numbers, and hyphens
  71 |       value = value.toLowerCase().replace(/[^a-z0-9-]/g, '');
  72 |     }
  73 |     onChange({ ...formData, [field]: value });
  74 |   };
  75 | 
  76 |   // Handle keydown event to trigger test connection on Enter
  77 |   const handleKeyDown = (e: React.KeyboardEvent) => {
  78 |     if (e.key === 'Enter' && !testing) {
  79 |       e.preventDefault();
  80 |       testConnection();
  81 |     }
  82 |   };
  83 | 
  84 |   // Update the testConnection function to use the API service
  85 |   const testConnection = async () => {
  86 |     // Throttle requests
  87 |     const now = Date.now();
  88 |     if (now - lastRequestTime.current < REQUEST_THROTTLE_MS || testing) {
  89 |       return;
  90 |     }
  91 |     lastRequestTime.current = now;
  92 | 
  93 |     setTesting(true);
  94 |     setTestError(null);
  95 |     setTestSuccess(false);
  96 |     setFingerprint(null);
  97 |     setRequireVerification(false);
  98 |     setFingerprintVerified(false);
  99 | 
 100 |     try {
 101 |       const data = await hostsApi.testConnection({
 102 |         type: formData.type,
 103 |         ip: formData.ip,
 104 |         port: parseInt(formData.port),
 105 |         username: formData.username,
 106 |         password: formData.password,
 107 |       });
 108 | 
 109 |       if (data.requireVerification) {
 110 |         setRequireVerification(true);
 111 |         setFingerprint(data.fingerprint);
 112 |         setTestError(data.message);
 113 |       } else if (data.success) {
 114 |         setTestSuccess(true);
 115 |         if (data.fingerprint) {
 116 |           setFingerprint(data.fingerprint);
 117 |           setFingerprintVerified(data.fingerprintVerified || false);
 118 |         }
 119 |         if (onTestSuccess) {
 120 |           onTestSuccess();
 121 |         }
 122 |       } else {
 123 |         setTestError(data.message);
 124 |       }
 125 |     } catch (error) {
 126 |       setTestError(error instanceof Error ? error.message : 'Failed to test connection');
 127 |       console.error('Error testing connection:', error);
 128 |     } finally {
 129 |       setTesting(false);
 130 |     }
 131 |   };
 132 | 
 133 |   // Update verifyFingerprint to use the API service
 134 |   const verifyFingerprint = async () => {
 135 |     const now = Date.now();
 136 |     if (now - lastRequestTime.current < REQUEST_THROTTLE_MS || testing) {
 137 |       return;
 138 |     }
 139 |     lastRequestTime.current = now;
 140 | 
 141 |     setTesting(true);
 142 |     setTestError(null);
 143 |     
 144 |     try {
 145 |       if (!fingerprint) {
 146 |         setTestError('Fingerprint is required');
 147 |         return;
 148 |       }
 149 |       
 150 |       setVerifyingFingerprint(true);
 151 |       const data = await hostsApi.verifyFingerprint({
 152 |         fingerprint: fingerprint,
 153 |         host: formData.ip,
 154 |         port: parseInt(formData.port),
 155 |       });
 156 | 
 157 |       if (data.success) {
 158 |         setTestSuccess(true);
 159 |         setFingerprintVerified(true);
 160 |         setRequireVerification(false);
 161 |         if (onTestSuccess) {
 162 |           onTestSuccess();
 163 |         }
 164 |       } else {
 165 |         setTestError(data.message);
 166 |       }
 167 |     } catch (error) {
 168 |       setTestError(error instanceof Error ? error.message : 'Failed to verify fingerprint');
 169 |       console.error('Error verifying fingerprint:', error);
 170 |     } finally {
 171 |       setTesting(false);
 172 |     }
 173 |   };
 174 | 
 175 |   return (
 176 |     <div className="space-y-3 py-2">
 177 |       <form onKeyDown={handleKeyDown} onSubmit={(e) => e.preventDefault()}>
 178 |         <div className="grid grid-cols-12 items-center gap-3">
 179 |           <Label htmlFor="name" className="text-right col-span-2">
 180 |             {t('form.name')}
 181 |           </Label>
 182 |           <div className="col-span-10 space-y-1">
 183 |             <Input
 184 |               id="name"
 185 |               placeholder={t('form.namePlaceholder')}
 186 |               value={formData.name}
 187 |               onChange={(e) => handleInputChange('name', e.target.value)}
 188 |               className="w-full"
 189 |             />
 190 |             <p className="text-xs text-muted-foreground">{t('form.nameHint')}</p>
 191 |           </div>
 192 |         </div>
 193 | 
 194 |         <div className="grid grid-cols-12 items-center gap-3 mt-3">
 195 |           <Label htmlFor="type" className="text-right col-span-2 whitespace-nowrap">
 196 |             {t('form.connection')}
 197 |           </Label>
 198 |           <div className="col-span-10">
 199 |             <Select value={formData.type} onValueChange={handleTypeChange}>
 200 |               <SelectTrigger>
 201 |                 <SelectValue placeholder={t('form.selectType')} />
 202 |               </SelectTrigger>
 203 |               <SelectContent>
 204 |                 <SelectItem value="ssh">{t('ssh')}</SelectItem>
 205 |                 <SelectItem value="docker">{t('docker')}</SelectItem>
 206 |                 <SelectItem value="portainer">{t('portainer')}</SelectItem>
 207 |               </SelectContent>
 208 |             </Select>
 209 |           </div>
 210 |         </div>
 211 | 
 212 |         <div className="grid grid-cols-12 items-center gap-3 mt-3">
 213 |           <Label htmlFor="ip" className="text-right col-span-2 whitespace-nowrap">
 214 |             {t('form.ipAddress')}
 215 |           </Label>
 216 |           <Input
 217 |             id="ip"
 218 |             placeholder={t('form.ipAddress')}
 219 |             value={formData.ip}
 220 |             onChange={(e) => handleInputChange('ip', e.target.value)}
 221 |             className="col-span-7"
 222 |           />
 223 |           <Label htmlFor="port" className="text-right whitespace-nowrap col-span-1">
 224 |             {t('form.port')}
 225 |           </Label>
 226 |           <Input
 227 |             id="port"
 228 |             placeholder={t('form.port')}
 229 |             value={formData.port}
 230 |             onChange={(e) => handleInputChange('port', e.target.value)}
 231 |             className="col-span-2"
 232 |           />
 233 |         </div>
 234 | 
 235 |         {connectionType === 'ssh' && (
 236 |           <>
 237 |             <div className="grid grid-cols-12 items-center gap-3 mt-3">
 238 |               <Label htmlFor="username" className="text-right col-span-2 whitespace-nowrap">
 239 |                 {t('form.username')}
 240 |               </Label>
 241 |               <Input
 242 |                 id="username"
 243 |                 placeholder={t('form.username')}
 244 |                 value={formData.username}
 245 |                 onChange={(e) => handleInputChange('username', e.target.value)}
 246 |                 className="col-span-10"
 247 |               />
 248 |             </div>
 249 |             <div className="grid grid-cols-12 items-center gap-3 mt-3">
 250 |               <Label htmlFor="password" className="text-right col-span-2 whitespace-nowrap">
 251 |                 {t('form.password')}
 252 |               </Label>
 253 |               <Input
 254 |                 id="password"
 255 |                 type="password"
 256 |                 placeholder={t('form.password')}
 257 |                 value={formData.password}
 258 |                 onChange={(e) => handleInputChange('password', e.target.value)}
 259 |                 className="col-span-10"
 260 |               />
 261 |             </div>
 262 |           </>
 263 |         )}
 264 | 
 265 |         <div className="grid grid-cols-12 items-center gap-3 mt-3">
 266 |           <Label htmlFor="description" className="text-right col-span-2">
 267 |             Description
 268 |           </Label>
 269 |           <Textarea
 270 |             id="description"
 271 |             placeholder="Description (optional)"
 272 |             value={formData.description}
 273 |             onChange={(e) => handleInputChange('description', e.target.value)}
 274 |             className="col-span-10 h-16"
 275 |           />
 276 |         </div>
 277 | 
 278 |         <div className="flex justify-end space-x-2 mt-4">
 279 |           <Button variant="outline" onClick={testConnection} disabled={testing} type="button">
 280 |             {testing ? (
 281 |               <>
 282 |                 <Loader2 className="mr-2 h-4 w-4 animate-spin" />
 283 |                 Testing...
 284 |               </>
 285 |             ) : (
 286 |               <>Test Connection</>
 287 |             )}
 288 |           </Button>
 289 | 
 290 |           {onSave && (
 291 |             <Button onClick={onSave} disabled={!testSuccess} type="button">
 292 |               Save
 293 |             </Button>
 294 |           )}
 295 |         </div>
 296 |       </form>
 297 | 
 298 |       {requireVerification && fingerprint && (
 299 |         <Alert className="mt-4">
 300 |           <AlertTitle className="flex items-center">
 301 |             <ShieldAlert className="h-4 w-4 mr-2" />
 302 |             Host Key Verification Failed
 303 |           </AlertTitle>
 304 |           <AlertDescription className="mt-2">
 305 |             <p className="text-sm text-muted-foreground">
 306 |               The authenticity of host &apos;{formData.ip}&apos; can&apos;t be established.
 307 |             </p>
 308 |             <p className="mb-2">
 309 |               Fingerprint: <code className="bg-muted p-1 rounded">{fingerprint}</code>
 310 |             </p>
 311 |             <p className="mb-4">Are you sure you want to continue connecting?</p>
 312 |             <div className="flex space-x-2">
 313 |               <Button variant="outline" size="sm" onClick={verifyFingerprint} disabled={testing}>
 314 |                 {testing ? (
 315 |                   <Loader2 className="h-4 w-4 animate-spin mr-2" />
 316 |                 ) : (
 317 |                   <Check className="h-4 w-4 mr-2" />
 318 |                 )}
 319 |                 Yes, trust this host
 320 |               </Button>
 321 |               <Button variant="ghost" size="sm" onClick={() => setRequireVerification(false)}>
 322 |                 <X className="h-4 w-4 mr-2" />
 323 |                 No, cancel
 324 |               </Button>
 325 |             </div>
 326 |           </AlertDescription>
 327 |         </Alert>
 328 |       )}
 329 | 
 330 |       {testError && !requireVerification && (
 331 |         <Alert variant="destructive" className="mt-4">
 332 |           <AlertTitle className="flex items-center">
 333 |             <AlertCircle className="h-4 w-4 mr-2" />
 334 |             Connection Failed
 335 |           </AlertTitle>
 336 |           <AlertDescription>{testError}</AlertDescription>
 337 |         </Alert>
 338 |       )}
 339 | 
 340 |       {testSuccess && (
 341 |         <Alert className="mt-4" variant="success">
 342 |           <AlertTitle className="flex items-center">
 343 |             <CheckCircle className="h-4 w-4 mr-2 text-green-500" />
 344 |             Connection Successful
 345 |           </AlertTitle>
 346 |           <AlertDescription>
 347 |             <p>Successfully connected to the remote host</p>
 348 |             {fingerprint && (
 349 |               <p className="mt-2">
 350 |                 <span className="font-medium">Host fingerprint:</span>{' '}
 351 |                 <code className="bg-muted p-1 rounded">{fingerprint}</code>{' '}
 352 |                 {fingerprintVerified && (
 353 |                   <Badge variant="outline" className="ml-2">
 354 |                     Verified
 355 |                   </Badge>
 356 |                 )}
 357 |               </p>
 358 |             )}
 359 |           </AlertDescription>
 360 |         </Alert>
 361 |       )}
 362 |     </div>
 363 |   );
 364 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/HostGrid.tsx`:

```tsx
   1 | import { Checkbox } from '@/components/shadcn/checkbox';
   2 | import { cn } from '@/lib/utils';
   3 | import { Host } from '@/types/hosts';
   4 | 
   5 | import { HostCard } from './HostCard';
   6 | 
   7 | interface HostGridProps {
   8 |   hosts: Host[];
   9 |   selectedHosts: Set<string>;
  10 |   selectMode: boolean;
  11 |   onSelect: (id: string) => void;
  12 |   onDelete?: (id: string) => void;
  13 |   onTestConnection?: (host: Host) => void;
  14 | }
  15 | 
  16 | export function HostGrid({
  17 |   hosts,
  18 |   selectedHosts,
  19 |   selectMode,
  20 |   onSelect,
  21 |   onDelete,
  22 |   onTestConnection,
  23 | }: HostGridProps) {
  24 |   return (
  25 |     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
  26 |       {hosts.map((host) => (
  27 |         <div
  28 |           key={host.id}
  29 |           className={cn({
  30 |             'opacity-70': selectMode && !selectedHosts.has(host.id),
  31 |           })}
  32 |         >
  33 |           <div className="relative h-full">
  34 |             {selectMode && (
  35 |               <div className="absolute right-4 top-4 z-10">
  36 |                 <Checkbox
  37 |                   checked={selectedHosts.has(host.id)}
  38 |                   onCheckedChange={() => onSelect(host.id)}
  39 |                   aria-label="Select host"
  40 |                 />
  41 |               </div>
  42 |             )}
  43 |             <HostCard
  44 |               host={host}
  45 |               onDelete={onDelete}
  46 |               onTestConnection={onTestConnection}
  47 |               key={`card-${host.id}`}
  48 |             />
  49 |           </div>
  50 |         </div>
  51 |       ))}
  52 |     </div>
  53 |   );
  54 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/StatusSummary.tsx`:

```tsx
   1 | import { CheckCircle2, AlertCircle, Server } from 'lucide-react';
   2 | 
   3 | import { Badge } from '@/components/shadcn/badge';
   4 | 
   5 | interface StatusSummaryProps {
   6 |   vmStatusSummary: {
   7 |     running: number;
   8 |     warning: number;
   9 |     error: number;
  10 |     total: number;
  11 |   };
  12 |   onStatusFilter?: (_status: string | null) => void;
  13 |   selectedFilters?: Set<string>;
  14 | }
  15 | 
  16 | export function StatusSummary({
  17 |   vmStatusSummary,
  18 |   onStatusFilter = () => {},
  19 |   selectedFilters = new Set<string>(),
  20 | }: StatusSummaryProps) {
  21 |   return (
  22 |     <div className="flex items-center gap-4">
  23 |       <div className="flex items-center">
  24 |         <Badge
  25 |           variant="outline"
  26 |           className={`
  27 |             px-3 py-1 cursor-pointer transition-colors
  28 |             ${
  29 |               selectedFilters.has('running')
  30 |                 ? 'bg-green-500/20 text-green-500 border-green-500/40'
  31 |                 : 'bg-green-500/10 text-green-500 border-green-500/20 hover:bg-green-500/15'
  32 |             }
  33 |           `}
  34 |           onClick={() => {
  35 |             if (selectedFilters.has('running')) {
  36 |               const newFilters = new Set(selectedFilters);
  37 |               newFilters.delete('running');
  38 |               onStatusFilter(newFilters.size ? Array.from(newFilters)[0] : null);
  39 |             } else {
  40 |               onStatusFilter('running');
  41 |             }
  42 |           }}
  43 |         >
  44 |           <CheckCircle2 className="mr-1 h-4 w-4" />
  45 |           Running: {vmStatusSummary.running}
  46 |         </Badge>
  47 |       </div>
  48 |       <div className="flex items-center">
  49 |         <Badge
  50 |           variant="outline"
  51 |           className={`
  52 |             px-3 py-1 cursor-pointer transition-colors
  53 |             ${
  54 |               selectedFilters.has('warning')
  55 |                 ? 'bg-yellow-500/20 text-yellow-500 border-yellow-500/40'
  56 |                 : 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20 hover:bg-yellow-500/15'
  57 |             }
  58 |           `}
  59 |           onClick={() => {
  60 |             if (selectedFilters.has('warning')) {
  61 |               const newFilters = new Set(selectedFilters);
  62 |               newFilters.delete('warning');
  63 |               onStatusFilter(newFilters.size ? Array.from(newFilters)[0] : null);
  64 |             } else {
  65 |               onStatusFilter('warning');
  66 |             }
  67 |           }}
  68 |         >
  69 |           <AlertCircle className="mr-1 h-4 w-4" />
  70 |           Warning: {vmStatusSummary.warning}
  71 |         </Badge>
  72 |       </div>
  73 |       <div className="flex items-center">
  74 |         <Badge
  75 |           variant="outline"
  76 |           className={`
  77 |             px-3 py-1 cursor-pointer transition-colors
  78 |             ${
  79 |               selectedFilters.has('error')
  80 |                 ? 'bg-red-500/20 text-red-500 border-red-500/40'
  81 |                 : 'bg-red-500/10 text-red-500 border-red-500/20 hover:bg-red-500/15'
  82 |             }
  83 |           `}
  84 |           onClick={() => {
  85 |             if (selectedFilters.has('error')) {
  86 |               const newFilters = new Set(selectedFilters);
  87 |               newFilters.delete('error');
  88 |               onStatusFilter(newFilters.size ? Array.from(newFilters)[0] : null);
  89 |             } else {
  90 |               onStatusFilter('error');
  91 |             }
  92 |           }}
  93 |         >
  94 |           <AlertCircle className="mr-1 h-4 w-4" />
  95 |           Error: {vmStatusSummary.error}
  96 |         </Badge>
  97 |       </div>
  98 |       <div className="flex items-center">
  99 |         <Badge
 100 |           variant="outline"
 101 |           className={`
 102 |             px-3 py-1 cursor-pointer transition-colors
 103 |             ${
 104 |               selectedFilters.size === 0
 105 |                 ? 'bg-blue-500/20 text-blue-500 border-blue-500/40'
 106 |                 : 'bg-blue-500/10 text-blue-500 border-blue-500/20 hover:bg-blue-500/15'
 107 |             }
 108 |           `}
 109 |           onClick={() => onStatusFilter(null)}
 110 |         >
 111 |           <Server className="mr-1 h-4 w-4" />
 112 |           Total: {vmStatusSummary.total}
 113 |         </Badge>
 114 |       </div>
 115 |     </div>
 116 |   );
 117 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/HostsPageClient.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
   4 | import { RefreshCcw, Plus } from 'lucide-react';
   5 | import { useParams } from 'next/navigation';
   6 | import { useTranslations } from 'next-intl';
   7 | import * as React from 'react';
   8 | import { useState } from 'react';
   9 | import { toast } from 'sonner';
  10 | 
  11 | import {
  12 |   AlertDialog,
  13 |   AlertDialogAction,
  14 |   AlertDialogCancel,
  15 |   AlertDialogContent,
  16 |   AlertDialogDescription,
  17 |   AlertDialogFooter,
  18 |   AlertDialogHeader,
  19 |   AlertDialogTitle,
  20 | } from '@/components/shadcn/alert-dialog';
  21 | import { Button } from '@/components/shadcn/button';
  22 | import { Tooltip, TooltipContent, TooltipProvider } from '@/components/shadcn/tooltip';
  23 | import { cn } from '@/lib/utils';
  24 | import { Host } from '@/types/hosts';
  25 | 
  26 | import { ConnectHostDialog } from './ConnectHostDialog';
  27 | import { HostOverview } from './HostOverview';
  28 | import { useHosts } from '@/hooks/useHosts';
  29 | 
  30 | // Create a client with default options
  31 | const queryClient = new QueryClient({
  32 |   defaultOptions: {
  33 |     queries: {
  34 |       staleTime: 0,
  35 |       gcTime: 1000 * 60 * 5,
  36 |       refetchOnWindowFocus: true,
  37 |       retry: 1,
  38 |     },
  39 |   },
  40 | });
  41 | 
  42 | interface HostsPageClientProps {
  43 |   initialHosts: Host[];
  44 | }
  45 | 
  46 | function HostsPageContent({ initialHosts }: HostsPageClientProps) {
  47 |   const t = useTranslations('Common');
  48 |   const params = useParams();
  49 |   const locale = params.locale as string;
  50 |   const [isDialogOpen, setIsDialogOpen] = useState(false);
  51 |   const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  52 |   const [hostToDelete, setHostToDelete] = useState<string | null>(null);
  53 |   const [viewMode] = useState<'grid' | 'table'>('grid');
  54 | 
  55 |   const {
  56 |     hosts,
  57 |     isLoading,
  58 |     isRefreshing,
  59 |     isDeleting,
  60 |     isTesting,
  61 |     addHost,
  62 |     deleteHost,
  63 |     refreshConnections,
  64 |     testConnection
  65 |   } = useHosts(initialHosts);
  66 | 
  67 |   const handleDeleteHost = async () => {
  68 |     if (!hostToDelete) return;
  69 |     
  70 |     try {
  71 |       await deleteHost(hostToDelete);
  72 |       setIsDeleteDialogOpen(false);
  73 |       setHostToDelete(null);
  74 |     } catch (error) {
  75 |       console.error('Error deleting host:', error);
  76 |       toast.error('Failed to delete host');
  77 |     }
  78 |   };
  79 | 
  80 |   const handleTestConnection = async (host: Host) => {
  81 |     await testConnection(host.id);
  82 |   };
  83 | 
  84 |   return (
  85 |     <div className="container mx-auto p-6">
  86 |       <div className="flex items-center justify-between mb-6">
  87 |           <h1 className="text-2xl font-bold">{t('hosts')}</h1>
  88 |         <div className="flex items-center gap-2">
  89 |           <TooltipProvider>
  90 |             <Tooltip>
  91 |               <Button
  92 |                 variant="outline"
  93 |                 size="icon"
  94 |                 onClick={refreshConnections}
  95 |                 disabled={isRefreshing}
  96 |               >
  97 |                 <RefreshCcw
  98 |                   className={cn('h-4 w-4', {
  99 |                     'animate-spin': isRefreshing,
 100 |                   })}
 101 |                 />
 102 |               </Button>
 103 |               <TooltipContent>
 104 |                 <p>{t('refreshConnections')}</p>
 105 |               </TooltipContent>
 106 |             </Tooltip>
 107 |           </TooltipProvider>
 108 |           <Button onClick={() => setIsDialogOpen(true)}>
 109 |             <Plus className="mr-2 h-4 w-4" />
 110 |             {t('addHost')}
 111 |           </Button>
 112 |         </div>
 113 |       </div>
 114 | 
 115 |         <HostOverview
 116 |           hosts={hosts}
 117 |         onDelete={(id) => {
 118 |           setHostToDelete(id);
 119 |           setIsDeleteDialogOpen(true);
 120 |         }}
 121 |           onRefresh={refreshConnections}
 122 |         onTestConnection={handleTestConnection}
 123 |         className="mt-6"
 124 |       />
 125 | 
 126 |       <ConnectHostDialog
 127 |         open={isDialogOpen}
 128 |         onOpenChange={setIsDialogOpen}
 129 |         onSuccess={addHost}
 130 |       />
 131 | 
 132 |       <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
 133 |         <AlertDialogContent>
 134 |           <AlertDialogHeader>
 135 |             <AlertDialogTitle>{t('deleteHost')}</AlertDialogTitle>
 136 |             <AlertDialogDescription>{t('deleteHostConfirm')}</AlertDialogDescription>
 137 |           </AlertDialogHeader>
 138 |           <AlertDialogFooter>
 139 |             <AlertDialogCancel>{t('cancel')}</AlertDialogCancel>
 140 |             <AlertDialogAction
 141 |               className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
 142 |               onClick={handleDeleteHost}
 143 |               disabled={isDeleting}
 144 |             >
 145 |               {isDeleting ? t('deleting') : t('delete')}
 146 |             </AlertDialogAction>
 147 |           </AlertDialogFooter>
 148 |         </AlertDialogContent>
 149 |       </AlertDialog>
 150 |     </div>
 151 |   );
 152 | }
 153 | 
 154 | export function HostsPageClient(props: HostsPageClientProps) {
 155 |   return (
 156 |     <QueryClientProvider client={queryClient}>
 157 |       <HostsPageContent {...props} />
 158 |     </QueryClientProvider>
 159 |   );
 160 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/HostCard.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import {
   4 |   Terminal,
   5 |   AlertCircle,
   6 |   MoreHorizontal,
   7 |   RefreshCw,
   8 |   XCircle,
   9 |   ScrollText,
  10 | } from 'lucide-react';
  11 | import { useRouter } from 'next/navigation';
  12 | import { useTranslations } from 'next-intl';
  13 | import { useState } from 'react';
  14 | 
  15 | import { Button } from '@/components/shadcn/button';
  16 | import {
  17 |   Card,
  18 |   CardContent,
  19 |   CardDescription,
  20 |   CardHeader,
  21 |   CardTitle,
  22 | } from '@/components/shadcn/card';
  23 | import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/shadcn/dialog';
  24 | import {
  25 |   DropdownMenu,
  26 |   DropdownMenuContent,
  27 |   DropdownMenuItem,
  28 |   DropdownMenuTrigger,
  29 | } from '@/components/shadcn/dropdown-menu';
  30 | import {
  31 |   Tooltip,
  32 |   TooltipContent,
  33 |   TooltipProvider,
  34 |   TooltipTrigger,
  35 | } from '@/components/shadcn/tooltip';
  36 | import { Host } from '@/types/hosts';
  37 | 
  38 | interface HostCardProps {
  39 |   host: Host;
  40 |   onDelete?: (id: string) => void;
  41 |   onTestConnection?: (host: Host) => void;
  42 | }
  43 | 
  44 | export function HostCard({ host, onDelete, onTestConnection }: HostCardProps) {
  45 |   const router = useRouter();
  46 |   const [showError, setShowError] = useState(false);
  47 |   const [isRefreshing, setIsRefreshing] = useState(false);
  48 |   const t = useTranslations('Common');
  49 | 
  50 |   const getStatusDot = (status: string) => {
  51 |     const baseClasses = 'h-4 w-4 rounded-full';
  52 | 
  53 |     if (!status) {
  54 |       return (
  55 |         <TooltipProvider>
  56 |           <Tooltip>
  57 |             <TooltipTrigger>
  58 |               <div className={`${baseClasses} bg-gray-400`} />
  59 |             </TooltipTrigger>
  60 |             <TooltipContent>
  61 |               <p>{t('unknown')}</p>
  62 |             </TooltipContent>
  63 |           </Tooltip>
  64 |         </TooltipProvider>
  65 |       );
  66 |     }
  67 | 
  68 |     switch (status) {
  69 |       case 'connected':
  70 |         return (
  71 |           <TooltipProvider>
  72 |             <Tooltip>
  73 |               <TooltipTrigger>
  74 |                 <div className={`${baseClasses} bg-green-500`} />
  75 |               </TooltipTrigger>
  76 |               <TooltipContent>
  77 |                 <p>{t('connected')}</p>
  78 |               </TooltipContent>
  79 |             </Tooltip>
  80 |           </TooltipProvider>
  81 |         );
  82 |       case 'failed':
  83 |         return (
  84 |           <TooltipProvider>
  85 |             <Tooltip>
  86 |               <TooltipTrigger>
  87 |                 <div className={`${baseClasses} bg-red-500`} />
  88 |               </TooltipTrigger>
  89 |               <TooltipContent>
  90 |                 <p>{t('failed')}</p>
  91 |               </TooltipContent>
  92 |             </Tooltip>
  93 |           </TooltipProvider>
  94 |         );
  95 |       case 'pending':
  96 |         return (
  97 |           <TooltipProvider>
  98 |             <Tooltip>
  99 |               <TooltipTrigger>
 100 |                 <div className={`${baseClasses} bg-yellow-500`} />
 101 |               </TooltipTrigger>
 102 |               <TooltipContent>
 103 |                 <p>{t('pending')}</p>
 104 |               </TooltipContent>
 105 |             </Tooltip>
 106 |           </TooltipProvider>
 107 |         );
 108 |       default:
 109 |         return (
 110 |           <TooltipProvider>
 111 |             <Tooltip>
 112 |               <TooltipTrigger>
 113 |                 <div className={`${baseClasses} bg-orange-500`} />
 114 |               </TooltipTrigger>
 115 |               <TooltipContent>
 116 |                 <p>{t('unknown')}</p>
 117 |               </TooltipContent>
 118 |             </Tooltip>
 119 |           </TooltipProvider>
 120 |         );
 121 |     }
 122 |   };
 123 | 
 124 |   const handleTerminalClick = () => {
 125 |     // Get the current URL path segments to extract locale and tenant
 126 |     const pathSegments = window.location.pathname.split('/');
 127 |     const locale = pathSegments[1] || 'en';
 128 |     const tenant = pathSegments[2] || 'default';
 129 | 
 130 |     // Build the correct path with locale and tenant
 131 |     const terminalPath = `/${locale}/${tenant}/terminals/${host.name.toLowerCase()}`;
 132 |     console.log(`Redirecting to terminal: ${terminalPath}`);
 133 |     router.push(terminalPath);
 134 |   };
 135 | 
 136 |   const handleRefreshClick = async () => {
 137 |     if (isRefreshing || !onTestConnection) return;
 138 | 
 139 |     setIsRefreshing(true);
 140 |     try {
 141 |       await onTestConnection(host);
 142 |     } finally {
 143 |       setIsRefreshing(false);
 144 |     }
 145 |   };
 146 | 
 147 |   return (
 148 |     <>
 149 |       <Card className="relative w-[300px]">
 150 |         <CardHeader className="p-4 pb-2 flex flex-row items-start justify-between space-y-0">
 151 |           <div className="flex flex-col space-y-1.5">
 152 |             <div className="flex items-center">
 153 |               <div className="w-[200px] flex items-center">
 154 |                 <div className="mr-2">{getStatusDot(host.status)}</div>
 155 |                 <CardTitle className="text-base font-semibold truncate flex-1">
 156 |                   {host.name}
 157 |                 </CardTitle>
 158 |               </div>
 159 |             </div>
 160 |             <CardDescription className="text-xs">
 161 |               {host.ip}
 162 |               {host.port ? `:${host.port}` : ''}
 163 |             </CardDescription>
 164 |           </div>
 165 |           <div className="flex items-center space-x-2">
 166 |             <DropdownMenu>
 167 |               <DropdownMenuTrigger asChild>
 168 |                 <Button variant="ghost" size="icon" className="h-8 w-8">
 169 |                   <MoreHorizontal className="h-4 w-4" />
 170 |                 </Button>
 171 |               </DropdownMenuTrigger>
 172 |               <DropdownMenuContent align="end" className="w-[160px]">
 173 |                 <DropdownMenuItem onClick={() => router.push(`/logs/${host.name}`)}>
 174 |                   <ScrollText className="mr-2 h-4 w-4" />
 175 |                   <span>{t('logs')}</span>
 176 |                 </DropdownMenuItem>
 177 |                 <DropdownMenuItem onClick={handleRefreshClick} disabled={isRefreshing}>
 178 |                   <RefreshCw className={`mr-2 h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />
 179 |                   <span>{isRefreshing ? t('refreshing') : t('refresh')}</span>
 180 |                 </DropdownMenuItem>
 181 |                 <DropdownMenuItem onClick={() => onDelete?.(host.id)} className="text-destructive">
 182 |                   <XCircle className="mr-2 h-4 w-4" />
 183 |                   <span>{t('delete')}</span>
 184 |                 </DropdownMenuItem>
 185 |               </DropdownMenuContent>
 186 |             </DropdownMenu>
 187 |           </div>
 188 |         </CardHeader>
 189 |         <CardContent className="p-4 pt-2">
 190 |           <div className="flex flex-col space-y-2">
 191 |             <Button
 192 |               variant="default"
 193 |               size="sm"
 194 |               className="w-full mt-2"
 195 |               onClick={handleTerminalClick}
 196 |               disabled={host.status !== 'connected'}
 197 |             >
 198 |               <Terminal className="h-4 w-4 mr-2" />
 199 |               {t('terminal')}
 200 |             </Button>
 201 |             <p className="text-xs mt-1 text-muted-foreground">
 202 |               {host.lastConnected
 203 |                 ? `${t('lastConnected')}: ${new Date(host.lastConnected).toLocaleDateString()}`
 204 |                 : `${t('lastConnected')}: ${t('never')}`}
 205 |             </p>
 206 |           </div>
 207 |         </CardContent>
 208 |       </Card>
 209 | 
 210 |       <Dialog open={showError} onOpenChange={setShowError}>
 211 |         <DialogContent>
 212 |           <DialogHeader>
 213 |             <DialogTitle className="flex items-center text-destructive">
 214 |               <AlertCircle className="h-5 w-5 mr-2" />
 215 |               {t('connectionError')}
 216 |             </DialogTitle>
 217 |           </DialogHeader>
 218 |           <div className="space-y-4">
 219 |             <div className="text-sm">
 220 |               <p className="font-medium mb-2">{t('errorDetails')}:</p>
 221 |               <pre className="bg-muted p-4 rounded-lg whitespace-pre-wrap text-xs">
 222 |                 {host.errorMessage || t('noErrorDetails')}
 223 |               </pre>
 224 |             </div>
 225 |             <div className="text-sm text-muted-foreground">
 226 |               <p>
 227 |                 {t('lastConnected')}:{' '}
 228 |                 {host.lastConnected ? new Date(host.lastConnected).toLocaleString() : t('never')}
 229 |               </p>
 230 |             </div>
 231 |           </div>
 232 |         </DialogContent>
 233 |       </Dialog>
 234 |     </>
 235 |   );
 236 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/HostList.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Plus, RefreshCw, Grid, List } from 'lucide-react';
   4 | import { useParams, useRouter } from 'next/navigation';
   5 | import { useState, useEffect, useCallback } from 'react';
   6 | import { toast } from 'sonner';
   7 | 
   8 | import { Button } from '@/components/shadcn/button';
   9 | import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/shadcn/dialog';
  10 | import { hostsApi } from '@/lib/api/hosts';
  11 | import { Host } from '@/types/hosts';
  12 | 
  13 | import { ConnectForm, FormData } from './ConnectForm';
  14 | import { HostGrid } from './HostGrid';
  15 | import { HostTable } from './HostTable';
  16 | 
  17 | export default function HostContainer() {
  18 |   const { locale = 'en', tenant = 'default' } = useParams();
  19 |   const [hosts, setHosts] = useState<Host[]>([]);
  20 |   const [loading, setLoading] = useState(true);
  21 |   const [testingHosts, setTestingHosts] = useState<Record<string, boolean>>({});
  22 |   const [showAddHost, setShowAddHost] = useState(false);
  23 |   const [viewMode, setViewMode] = useState<'grid' | 'table'>('grid');
  24 |   const [selectedHosts, setSelectedHosts] = useState<Set<string>>(new Set());
  25 |   const [selectMode] = useState(false);
  26 |   const [formData, setFormData] = useState<FormData>({
  27 |     name: '',
  28 |     description: '',
  29 |     type: 'ssh',
  30 |     ip: '',
  31 |     port: '22',
  32 |     username: '',
  33 |     password: '',
  34 |   });
  35 |   const router = useRouter();
  36 |   const [isTestingAll, setIsTestingAll] = useState(false);
  37 | 
  38 |   const fetchHosts = useCallback(async () => {
  39 |     setLoading(true);
  40 |     try {
  41 |       console.log('Fetching hosts...');
  42 |       const fetchedHosts = await hostsApi.getHosts();
  43 |       console.log('Hosts fetched successfully:', fetchedHosts);
  44 | 
  45 |       // Process hosts for UI display
  46 |       const processedHosts = fetchedHosts.map((host: Host) => ({
  47 |         ...host,
  48 |         // Ensure status is set
  49 |         status: host.status || 'pending',
  50 |         // For UI display: use existing lastConnected or set to createdAt date
  51 |         lastConnected: host.lastConnected || host.createdAt,
  52 |       }));
  53 | 
  54 |       setHosts(processedHosts);
  55 | 
  56 |       return processedHosts;
  57 |     } catch (error) {
  58 |       console.error('Error fetching hosts:', error);
  59 |       toast.error('Failed to fetch hosts');
  60 |       return [];
  61 |     } finally {
  62 |       setLoading(false);
  63 |     }
  64 |   }, []);
  65 | 
  66 |   // Test a single host connection
  67 |   const testHostConnection = async (host: Host, silent: boolean = false) => {
  68 |     if (!silent) {
  69 |       setTestingHosts((prev) => ({ ...prev, [host.id]: true }));
  70 |     }
  71 | 
  72 |     try {
  73 |       console.log(`Testing connection for host ${host.name}...`);
  74 |       const result = await hostsApi.testConnection({
  75 |         type: host.type,
  76 |         ip: host.ip,
  77 |         port: host.port,
  78 |         username: host.user,
  79 |         password: host.password,
  80 |         hostId: host.id,
  81 |       });
  82 | 
  83 |       setHosts((prevHosts) =>
  84 |         prevHosts.map((h) =>
  85 |           h.id === host.id
  86 |             ? {
  87 |                 ...h,
  88 |                 status: result.success ? 'connected' : 'failed',
  89 |                 errorMessage: result.success ? null : result.message || 'Unknown error',
  90 |                 lastConnected: result.success ? new Date() : h.lastConnected,
  91 |               }
  92 |             : h,
  93 |         ),
  94 |       );
  95 | 
  96 |       if (!silent) {
  97 |         if (result.success) {
  98 |           toast.success(`Connection to ${host.name} successful`);
  99 |         } else {
 100 |           toast.error(`Connection to ${host.name} failed: ${result.message || 'Unknown error'}`);
 101 |         }
 102 |       }
 103 | 
 104 |       setTestingHosts((prev) => ({ ...prev, [host.id]: false }));
 105 | 
 106 |       return result;
 107 |     } catch (error) {
 108 |       console.error(`Error testing connection for host ${host.name}:`, error);
 109 | 
 110 |       setHosts((prevHosts) =>
 111 |         prevHosts.map((h) =>
 112 |           h.id === host.id
 113 |             ? {
 114 |                 ...h,
 115 |                 status: 'failed',
 116 |                 errorMessage: 'Connection test failed',
 117 |               }
 118 |             : h,
 119 |         ),
 120 |       );
 121 | 
 122 |       if (!silent) {
 123 |         toast.error(`Failed to test connection to ${host.name}`);
 124 |       }
 125 | 
 126 |       setTestingHosts((prev) => ({ ...prev, [host.id]: false }));
 127 | 
 128 |       return { success: false, message: 'Connection test failed' };
 129 |     }
 130 |   };
 131 | 
 132 |   // Test all connections one by one
 133 |   const testAllHostsSequentially = async (hostsToTest?: Host[]) => {
 134 |     setIsTestingAll(true);
 135 |     const currentHosts = hostsToTest || [...hosts];
 136 |     for (const host of currentHosts) {
 137 |       await testHostConnection(host, true);
 138 |     }
 139 |     setIsTestingAll(false);
 140 |   };
 141 | 
 142 |   useEffect(() => {
 143 |     let isMounted = true;
 144 | 
 145 |     const loadHostsAndTest = async () => {
 146 |       const fetchedHosts = await fetchHosts();
 147 | 
 148 |       // Only proceed if component is still mounted
 149 |       if (!isMounted) return;
 150 | 
 151 |       if (fetchedHosts.length > 0) {
 152 |         // Test all fetched hosts
 153 |         await testAllHostsSequentially(fetchedHosts);
 154 |       }
 155 |     };
 156 | 
 157 |     loadHostsAndTest();
 158 | 
 159 |     // Cleanup function
 160 |     return () => {
 161 |       isMounted = false;
 162 |     };
 163 |   }, []); // Only depend on locale
 164 | 
 165 |   const handleDelete = async (id: string) => {
 166 |     // Store the host being deleted in case we need to restore it
 167 |     const hostToDelete = hosts.find((host) => host.id === id);
 168 | 
 169 |     // Optimistically update UI first
 170 |     setHosts((currentHosts) => currentHosts.filter((host) => host.id !== id));
 171 | 
 172 |     // Show optimistic toast
 173 |     toast.success('Host deleted');
 174 | 
 175 |     try {
 176 |       // Then perform the actual deletion in the background
 177 |       await hostsApi.deleteHost(id);
 178 |     } catch (error) {
 179 |       // If deletion fails, restore the host and show error
 180 |       console.error('Error deleting host:', error);
 181 |       if (hostToDelete) {
 182 |         setHosts((currentHosts) => [...currentHosts, hostToDelete]);
 183 |       }
 184 |       toast.error('Failed to delete host. The host has been restored.');
 185 |     }
 186 |   };
 187 | 
 188 |   const handleTestConnection = async (host: Host) => {
 189 |     console.log('Testing connection for host:', { id: host.id, name: host.name });
 190 |     await testHostConnection(host);
 191 |   };
 192 | 
 193 |   const handleSaveHost = async () => {
 194 |     try {
 195 |       console.log('Creating new host with form data:', {
 196 |         ...formData,
 197 |         password: '***' // Mask password in logs
 198 |       });
 199 |       
 200 |       const newHost = await hostsApi.createHost({
 201 |         name: formData.name,
 202 |         description: formData.description,
 203 |         type: formData.type,
 204 |         ip: formData.ip,
 205 |         port: parseInt(formData.port),
 206 |         username: formData.username,
 207 |         password: formData.password,
 208 |         status: 'pending', // Set to pending instead of connected since we're not testing
 209 |       });
 210 | 
 211 |       setShowAddHost(false);
 212 | 
 213 |       // Add lastConnected field for UI display purposes
 214 |       const hostWithLastConnected = {
 215 |         ...newHost,
 216 |         lastConnected: null, // Set to null since we haven't tested the connection
 217 |       };
 218 | 
 219 |       setHosts((currentHosts) => [hostWithLastConnected, ...currentHosts]);
 220 | 
 221 |       setFormData({
 222 |         name: '',
 223 |         description: '',
 224 |         type: 'ssh',
 225 |         ip: '',
 226 |         port: '22',
 227 |         username: '',
 228 |         password: '',
 229 |       });
 230 | 
 231 |       toast.success('Host created successfully');
 232 |     } catch (error) {
 233 |       console.error('Error creating host:', error);
 234 |       const errorMessage = error instanceof Error 
 235 |         ? error.message 
 236 |         : 'An unknown error occurred while creating the host';
 237 |       
 238 |       toast.error(errorMessage);
 239 |     }
 240 |   };
 241 | 
 242 |   const handleSelectHost = (id: string) => {
 243 |     setSelectedHosts((prev) => {
 244 |       const newSet = new Set(prev);
 245 |       if (newSet.has(id)) {
 246 |         newSet.delete(id);
 247 |       } else {
 248 |         newSet.add(id);
 249 |       }
 250 |       return newSet;
 251 |     });
 252 |   };
 253 | 
 254 |   return (
 255 |     <div className="container mx-auto py-6">
 256 |       <div className="flex justify-between items-center mb-6">
 257 |         <h1 className="text-2xl font-bold">Hosts</h1>
 258 |         <div className="flex items-center space-x-2">
 259 |           <div className="border rounded-md p-1 mr-2">
 260 |             <Button
 261 |               variant={viewMode === 'grid' ? 'default' : 'ghost'}
 262 |               size="sm"
 263 |               className="px-2"
 264 |               onClick={() => setViewMode('grid')}
 265 |               aria-label="Grid view"
 266 |             >
 267 |               <Grid className="h-4 w-4" />
 268 |             </Button>
 269 |             <Button
 270 |               variant={viewMode === 'table' ? 'default' : 'ghost'}
 271 |               size="sm"
 272 |               className="px-2"
 273 |               onClick={() => setViewMode('table')}
 274 |               aria-label="Table view"
 275 |             >
 276 |               <List className="h-4 w-4" />
 277 |             </Button>
 278 |           </div>
 279 |           <Button onClick={() => testAllHostsSequentially(hosts)} variant="outline" size="sm">
 280 |             <RefreshCw className={`h-4 w-4 mr-2 ${isTestingAll ? 'animate-spin' : ''}`} />
 281 |             Refresh
 282 |           </Button>
 283 |           <Button onClick={() => setShowAddHost(true)}>
 284 |             <Plus className="h-4 w-4 mr-2" />
 285 |             Add Host
 286 |           </Button>
 287 |         </div>
 288 |       </div>
 289 | 
 290 |       {loading ? (
 291 |         <div className="text-center py-10">Loading hosts...</div>
 292 |       ) : hosts.length === 0 ? (
 293 |         <div className="text-center py-10">
 294 |           <p className="text-muted-foreground">No hosts found</p>
 295 |           <Button onClick={() => setShowAddHost(true)} className="mt-4">
 296 |             Add your first host
 297 |           </Button>
 298 |         </div>
 299 |       ) : viewMode === 'grid' ? (
 300 |         <HostGrid
 301 |           hosts={hosts}
 302 |           selectedHosts={selectedHosts}
 303 |           selectMode={selectMode}
 304 |           onSelect={handleSelectHost}
 305 |           onDelete={handleDelete}
 306 |           onTestConnection={handleTestConnection}
 307 |         />
 308 |       ) : (
 309 |         <HostTable hosts={hosts} onDelete={handleDelete} onTestConnection={handleTestConnection} />
 310 |       )}
 311 | 
 312 |       <Dialog open={showAddHost} onOpenChange={setShowAddHost}>
 313 |         <DialogContent>
 314 |           <DialogHeader>
 315 |             <DialogTitle>Add New Host</DialogTitle>
 316 |           </DialogHeader>
 317 |           <ConnectForm
 318 |             formData={formData}
 319 |             onChange={setFormData}
 320 |             onSave={handleSaveHost}
 321 |           />
 322 |         </DialogContent>
 323 |       </Dialog>
 324 |     </div>
 325 |   );
 326 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/_components/HostSettings.tsx`:

```tsx
   1 | import { useState } from 'react';
   2 | 
   3 | import { Button } from '@/components/shadcn/button';
   4 | import {
   5 |   Card,
   6 |   CardContent,
   7 |   CardDescription,
   8 |   CardHeader,
   9 |   CardTitle,
  10 | } from '@/components/shadcn/card';
  11 | import { Input } from '@/components/shadcn/input';
  12 | import { Label } from '@/components/shadcn/label';
  13 | import { Textarea } from '@/components/shadcn/textarea';
  14 | import { VMConfig, VMType } from '@/types/hosts';
  15 | 
  16 | interface VMSettingsProps {
  17 |   config: VMConfig;
  18 |   onSave: (config: VMConfig) => void;
  19 | }
  20 | 
  21 | export function VMSettings({ config, onSave }: VMSettingsProps) {
  22 |   const [formData, setFormData] = useState<VMConfig>(config);
  23 | 
  24 |   const handleSubmit = (e: React.FormEvent) => {
  25 |     e.preventDefault();
  26 |     onSave(formData);
  27 |   };
  28 | 
  29 |   return (
  30 |     <Card className="flex-1">
  31 |       <CardHeader>
  32 |         <CardTitle>VM Configuration</CardTitle>
  33 |         <CardDescription>Configure the virtual host settings.</CardDescription>
  34 |       </CardHeader>
  35 |       <CardContent>
  36 |         <form onSubmit={handleSubmit} className="space-y-4">
  37 |           <div className="grid grid-cols-2 gap-4">
  38 |             <div className="space-y-2">
  39 |               <Label htmlFor="name">Name</Label>
  40 |               <Input
  41 |                 id="name"
  42 |                 value={formData.name}
  43 |                 onChange={(e) => setFormData({ ...formData, name: e.target.value })}
  44 |                 placeholder="Enter VM name"
  45 |               />
  46 |             </div>
  47 |             <div className="space-y-2">
  48 |               <Label htmlFor="type">Type</Label>
  49 |               <Input
  50 |                 id="type"
  51 |                 value={formData.type}
  52 |                 onChange={(e) => setFormData({ ...formData, type: e.target.value as VMType })}
  53 |                 placeholder="VM type"
  54 |               />
  55 |             </div>
  56 |             <div className="space-y-2">
  57 |               <Label htmlFor="image">Image</Label>
  58 |               <Input
  59 |                 id="image"
  60 |                 value={formData.image}
  61 |                 onChange={(e) => setFormData({ ...formData, image: e.target.value })}
  62 |                 placeholder="Docker image"
  63 |               />
  64 |             </div>
  65 |             <div className="space-y-2">
  66 |               <Label htmlFor="cpu">CPU Cores</Label>
  67 |               <Input
  68 |                 id="cpu"
  69 |                 type="number"
  70 |                 value={formData.cpu}
  71 |                 onChange={(e) => setFormData({ ...formData, cpu: parseInt(e.target.value) })}
  72 |                 placeholder="Number of CPU cores"
  73 |               />
  74 |             </div>
  75 |             <div className="space-y-2">
  76 |               <Label htmlFor="memory">Memory (MB)</Label>
  77 |               <Input
  78 |                 id="memory"
  79 |                 type="number"
  80 |                 value={formData.memory}
  81 |                 onChange={(e) => setFormData({ ...formData, memory: parseInt(e.target.value) })}
  82 |                 placeholder="Memory in MB"
  83 |               />
  84 |             </div>
  85 |           </div>
  86 | 
  87 |           <div className="space-y-2">
  88 |             <Label htmlFor="description">Description</Label>
  89 |             <Textarea
  90 |               id="description"
  91 |               value={formData.description}
  92 |               onChange={(e) => setFormData({ ...formData, description: e.target.value })}
  93 |               placeholder="Enter VM description"
  94 |               className="min-h-[100px]"
  95 |             />
  96 |           </div>
  97 | 
  98 |           <div className="flex justify-end space-x-2">
  99 |             <Button type="submit" size="sm">
 100 |               Save Changes
 101 |             </Button>
 102 |           </div>
 103 |         </form>
 104 |       </CardContent>
 105 |     </Card>
 106 |   );
 107 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/terminals/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useRouter, useSearchParams } from 'next/navigation';
   4 | import { useEffect, useState } from 'react';
   5 | 
   6 | import { useToast } from '@/components/shadcn/use-toast';
   7 | import { logger } from '@/lib/logger';
   8 | import { useAuth } from '@/hooks/useAuth';
   9 | 
  10 | import { Terminal } from '../../terminals/_components/Terminal';
  11 | 
  12 | export default function TerminalsPage() {
  13 |   const router = useRouter();
  14 |   const searchParams = useSearchParams();
  15 |   const { toast } = useToast();
  16 |   const { user } = useAuth();
  17 |   const [connection, setConnection] = useState<any>(null);
  18 |   const [error, setError] = useState<string | null>(null);
  19 | 
  20 |   useEffect(() => {
  21 |     const hostId = searchParams.get('host');
  22 |     if (!hostId) {
  23 |       setError('No host ID provided');
  24 |       return;
  25 |     }
  26 | 
  27 |     // Fetch host details and establish SSH connection
  28 |     const initializeTerminal = async () => {
  29 |       try {
  30 |         const response = await fetch(`/api/hosts/${hostId}`);
  31 |         if (!response.ok) {
  32 |           throw new Error('Failed to fetch host details');
  33 |         }
  34 | 
  35 |         const data = await response.json();
  36 |         if (!data.success || !data.data) {
  37 |           throw new Error('Invalid host data');
  38 |         }
  39 | 
  40 |         setConnection(data.data);
  41 | 
  42 |         // Initialize SSH connection through the Next.js API
  43 |         const sshResponse = await fetch('/api/hosts/connect', {
  44 |           method: 'POST',
  45 |           headers: {
  46 |             'Content-Type': 'application/json',
  47 |           },
  48 |           body: JSON.stringify({
  49 |             hostId,
  50 |             type: data.data.type,
  51 |             ip: data.data.ip,
  52 |             port: data.data.port,
  53 |             username: data.data.user,
  54 |             password: data.data.password,
  55 |           }),
  56 |         });
  57 | 
  58 |         if (!sshResponse.ok) {
  59 |           throw new Error('Failed to establish SSH connection');
  60 |         }
  61 | 
  62 |         logger.info('SSH connection established', {
  63 |           action: 'TERMINAL_CONNECTED',
  64 |           data: { hostId, ip: data.data.ip },
  65 |         });
  66 |       } catch (error) {
  67 |         const message = error instanceof Error ? error.message : 'Failed to initialize terminal';
  68 |         setError(message);
  69 |         toast({
  70 |           variant: 'destructive',
  71 |           title: 'Connection Error',
  72 |           description: message,
  73 |         });
  74 | 
  75 |         logger.error(`Terminal initialization failed: ${message}`, {
  76 |           action: 'TERMINAL_INITerror',
  77 |           data: { hostId, error: message },
  78 |         });
  79 |       }
  80 |     };
  81 | 
  82 |     initializeTerminal();
  83 | 
  84 |     // Cleanup on unmount
  85 |     return () => {
  86 |       if (connection) {
  87 |         fetch('/api/hosts/disconnect', {
  88 |           method: 'POST',
  89 |           headers: {
  90 |             'Content-Type': 'application/json',
  91 |           },
  92 |           body: JSON.stringify({
  93 |             hostId: connection.id,
  94 |           }),
  95 |         }).catch(console.error);
  96 |       }
  97 |     };
  98 |   }, [searchParams]);
  99 | 
 100 |   useEffect(() => {
 101 |     if (!connection) {
 102 |       toast({
 103 |         title: 'Error',
 104 |         description: 'No connection available',
 105 |         variant: 'destructive',
 106 |       });
 107 |       return;
 108 |     }
 109 |     // Rest of the effect logic
 110 |   }, [connection, toast]);
 111 | 
 112 |   logger.info('User viewed terminals page', {
 113 |     userId: user?.email || undefined,
 114 |     action: 'TERMINALS_PAGE_VIEW',
 115 |   });
 116 | 
 117 |   if (error) {
 118 |     logger.error(`Error fetching connections: ${error}`, {
 119 |       userId: user?.email || undefined,
 120 |       action: 'CONNECTIONS_FETCHerror',
 121 |       data: { error },
 122 |     });
 123 |     return (
 124 |       <div className="flex items-center justify-center h-screen">
 125 |         <div className="text-center">
 126 |           <h2 className="text-2xl font-bold text-red-500 mb-4">Connection Error</h2>
 127 |           <p className="text-gray-600">{error}</p>
 128 |           <button
 129 |             className="mt-4 px-4 py-2 bg-primary text-white rounded hover:bg-primary/90"
 130 |             onClick={() => router.back()}
 131 |           >
 132 |             Go Back
 133 |           </button>
 134 |         </div>
 135 |       </div>
 136 |     );
 137 |   }
 138 | 
 139 |   if (!connection) {
 140 |     return (
 141 |       <div className="flex items-center justify-center h-screen">
 142 |         <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
 143 |       </div>
 144 |     );
 145 |   }
 146 | 
 147 |   return (
 148 |     <div className="h-screen bg-background">
 149 |       <Terminal connection={connection} />
 150 |     </div>
 151 |   );
 152 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/logs/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useEffect, useState, useCallback } from 'react';
   4 | 
   5 | import { Badge } from '@/components/shadcn/badge';
   6 | import { Button } from '@/components/shadcn/button';
   7 | import { Card } from '@/components/shadcn/card';
   8 | import { ScrollArea } from '@/components/shadcn/scroll-area';
   9 | import { useToast } from '@/components/shadcn/use-toast';
  10 | import { Host } from '@/types/hosts';
  11 | 
  12 | interface Log {
  13 |   id: string;
  14 |   deviceId: string;
  15 |   timestamp: string;
  16 |   level: 'info' | 'warning' | 'error';
  17 |   message: string;
  18 | }
  19 | 
  20 | export default function HostsLogsPage() {
  21 |   const [machines, setMachines] = useState<Host[]>([]);
  22 |   const [logs, setLogs] = useState<Log[]>([]);
  23 |   const [selectedDevice, setSelectedDevice] = useState<string | null>(null);
  24 |   const [isLoading, setIsLoading] = useState(true);
  25 |   const { toast } = useToast();
  26 | 
  27 |   const fetchMachines = useCallback(async () => {
  28 |     try {
  29 |       setIsLoading(true);
  30 |       const response = await fetch('/api/hosts');
  31 | 
  32 |       if (!response.ok) {
  33 |         toast({
  34 |           variant: 'destructive',
  35 |           title: 'Error',
  36 |           description: 'Failed to load hosts',
  37 |         });
  38 |         return;
  39 |       }
  40 | 
  41 |       const data = await response.json();
  42 |       setMachines(data.hosts || []);
  43 | 
  44 |       // Fetch logs from API
  45 |       const logsResponse = await fetch('/api/logs');
  46 |       if (logsResponse.ok) {
  47 |         const logsData = await logsResponse.json();
  48 |         setLogs(logsData.logs || []);
  49 |       }
  50 | 
  51 |       // Set first host as selected if none selected
  52 |       if (machines.length > 0 && !selectedDevice) {
  53 |         setSelectedDevice(machines[0].id);
  54 |       }
  55 |     } catch (error) {
  56 |       console.error('Error fetching machines:', error);
  57 |       toast({
  58 |         variant: 'destructive',
  59 |         title: 'Error',
  60 |         description: 'Failed to load hosts',
  61 |       });
  62 |     } finally {
  63 |       setIsLoading(false);
  64 |     }
  65 |   }, [toast, machines, selectedDevice]);
  66 | 
  67 |   useEffect(() => {
  68 |     fetchMachines();
  69 |   }, [fetchMachines]);
  70 | 
  71 |   const filteredLogs = selectedDevice
  72 |     ? logs.filter((log) => log.deviceId === selectedDevice)
  73 |     : logs;
  74 | 
  75 |   if (isLoading) {
  76 |     return <div>Loading...</div>;
  77 |   }
  78 | 
  79 |   return (
  80 |     <div className="space-y-4">
  81 |       <div className="flex justify-between items-center">
  82 |         <h1 className="text-2xl font-bold">Logs</h1>
  83 |         <Button onClick={fetchMachines}>Refresh</Button>
  84 |       </div>
  85 |       <div className="flex gap-4 h-full">
  86 |         {/* Sidebar */}
  87 |         <Card className="w-64 p-4">
  88 |           <h2 className="font-semibold mb-4">Devices</h2>
  89 |           <div className="space-y-2">
  90 |             <Button
  91 |               variant={selectedDevice === null ? 'secondary' : 'ghost'}
  92 |               className="w-full justify-start"
  93 |               onClick={() => setSelectedDevice(null)}
  94 |             >
  95 |               All Devices
  96 |             </Button>
  97 |             {machines.map((host) => (
  98 |               <Button
  99 |                 key={host.id}
 100 |                 variant={selectedDevice === host.id ? 'secondary' : 'ghost'}
 101 |                 className="w-full justify-start"
 102 |                 onClick={() => setSelectedDevice(host.id)}
 103 |               >
 104 |                 {host.name}
 105 |               </Button>
 106 |             ))}
 107 |           </div>
 108 |         </Card>
 109 | 
 110 |         {/* Main content */}
 111 |         <Card className="flex-1 p-4">
 112 |           <ScrollArea className="h-[calc(100vh-200px)]">
 113 |             <div className="space-y-4">
 114 |               {filteredLogs.map((log) => {
 115 |                 const device = machines.find((m) => m.id === log.deviceId);
 116 | 
 117 |                 return (
 118 |                   <div key={log.id} className="flex items-start gap-4 p-2 rounded border">
 119 |                     <Badge
 120 |                       variant={
 121 |                         log.level === 'error'
 122 |                           ? 'destructive'
 123 |                           : log.level === 'warning'
 124 |                             ? 'secondary'
 125 |                             : 'outline'
 126 |                       }
 127 |                     >
 128 |                       {log.level}
 129 |                     </Badge>
 130 |                     <div className="flex-1">
 131 |                       <div className="flex items-center gap-2">
 132 |                         <span className="text-sm text-muted-foreground">
 133 |                           {new Date(log.timestamp).toLocaleString()}
 134 |                         </span>
 135 |                         <span className="text-sm font-medium">
 136 |                           {device?.name || 'Unknown Device'}
 137 |                         </span>
 138 |                       </div>
 139 |                       <p className="mt-1">{log.message}</p>
 140 |                     </div>
 141 |                   </div>
 142 |                 );
 143 |               })}
 144 |             </div>
 145 |           </ScrollArea>
 146 |         </Card>
 147 |       </div>
 148 |     </div>
 149 |   );
 150 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/hosts/[id]/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { HostDetail } from '@/components/hosts/HostDetail';
   4 | import { useParams, useRouter } from 'next/navigation';
   5 | import { useTranslations } from 'next-intl';
   6 | import { PageHeader } from '@/components/layout/PageHeader';
   7 | import { Main } from '@/components/layout/Main';
   8 | 
   9 | export default function HostPage() {
  10 |   const params = useParams();
  11 |   const router = useRouter();
  12 |   const t = useTranslations('Hosts');
  13 |   const hostId = params.id as string;
  14 |   const tenant = params.tenant as string;
  15 |   const locale = params.locale as string;
  16 | 
  17 |   const handleBack = () => {
  18 |     router.push(`/${locale}/${tenant}/hosts`);
  19 |   };
  20 | 
  21 |   return (
  22 |     <Main>
  23 |       <PageHeader 
  24 |         title={t('hostDetails')}
  25 |         description={t('viewAndManageHost')}
  26 |       />
  27 |       <div className="grid gap-8 mt-6">
  28 |         <HostDetail hostId={hostId} onBack={handleBack} />
  29 |       </div>
  30 |     </Main>
  31 |   );
  32 | } 

```

`/workspaces/automai/src/app/[locale]/[tenant]/development/usecases/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useRouter, useParams } from 'next/navigation';
   4 | import * as React from 'react';
   5 | import { useEffect } from 'react';
   6 | 
   7 | import { Button } from '@/components/shadcn/button';
   8 | import { useAuth } from '@/hooks/useAuth';
   9 | 
  10 | export default function UseCasesPage() {
  11 |   const router = useRouter();
  12 |   const paramsPromise = useParams();
  13 |   const params = React.use(paramsPromise);
  14 |   const locale = params.locale as string;
  15 |   const tenant = params.tenant as string;
  16 |   const { user, isLoading: userLoading } = useAuth();
  17 | 
  18 |   // Redirect if not authenticated
  19 |   useEffect(() => {
  20 |     if (!userLoading && !user) {
  21 |       router.push(`/${locale}/login`);
  22 |     }
  23 |   }, [userLoading, user, router, locale]);
  24 | 
  25 |   return (
  26 |     <div className="container mx-auto p-6">
  27 |       <div className="flex justify-between items-center mb-6">
  28 |         <h1 className="text-2xl font-bold">Use Cases</h1>
  29 |       </div>
  30 | 
  31 |       <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-8 text-center">
  32 |         <h2 className="text-xl font-semibold mb-4">Use Cases Feature Coming Soon</h2>
  33 |         <p className="text-gray-600 dark:text-gray-400 mb-6">
  34 |           This feature is currently under development and will be available in a future update.
  35 |         </p>
  36 |         <Button
  37 |           onClick={() => router.push(`/${locale}/${tenant}/dashboard`)}
  38 |           variant="default"
  39 |         >
  40 |           Return to Dashboard
  41 |         </Button>
  42 |       </div>
  43 |     </div>
  44 |   );
  45 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/development/usecases/edit/[useCaseId]/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useRouter, useParams } from 'next/navigation';
   4 | import * as React from 'react';
   5 | import { useEffect } from 'react';
   6 | 
   7 | import { Button } from '@/components/shadcn/button';
   8 | import { useAuth } from '@/hooks/useAuth';
   9 | 
  10 | export default function UseCaseEditPage() {
  11 |   const router = useRouter();
  12 |   const paramsPromise = useParams();
  13 |   const params = React.use(paramsPromise);
  14 |   const locale = params.locale as string;
  15 |   const tenant = params.tenant as string;
  16 |   const useCaseId = params.useCaseId as string;
  17 |   const { user, isLoading: userLoading } = useAuth();
  18 | 
  19 |   // Redirect if not authenticated
  20 |   useEffect(() => {
  21 |     if (!userLoading && !user) {
  22 |       router.push(`/${locale}/login`);
  23 |     }
  24 |   }, [userLoading, user, router, locale]);
  25 | 
  26 |   return (
  27 |     <div className="container mx-auto p-6">
  28 |       <div className="flex items-center mb-6">
  29 |         <Button
  30 |           variant="ghost"
  31 |           size="sm"
  32 |           onClick={() => router.back()}
  33 |           className="hover:bg-muted/50 dark:hover:bg-muted/20 mr-4"
  34 |         >
  35 |           ←
  36 |         </Button>
  37 |         <h1 className="text-2xl font-bold">Use Case Editor</h1>
  38 |       </div>
  39 | 
  40 |       <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-8 text-center">
  41 |         <h2 className="text-xl font-semibold mb-4">Use Case Editor Coming Soon</h2>
  42 |         <p className="text-gray-600 dark:text-gray-400 mb-6">
  43 |           This feature is currently under development and will be available in a future update.
  44 |         </p>
  45 |         <Button
  46 |           onClick={() => router.push(`/${locale}/${tenant}/dashboard`)}
  47 |           variant="default"
  48 |         >
  49 |           Return to Dashboard
  50 |         </Button>
  51 |       </div>
  52 |     </div>
  53 |   );
  54 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/development/projects/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import {
   4 |   ColumnDef,
   5 |   flexRender,
   6 |   getCoreRowModel,
   7 |   useReactTable,
   8 |   getSortedRowModel,
   9 |   Row,
  10 | } from '@tanstack/react-table';
  11 | import { useRouter, useParams } from 'next/navigation';
  12 | import * as React from 'react';
  13 | import { useState, useEffect } from 'react';
  14 | 
  15 | import { Alert, AlertDescription } from '@/components/shadcn/alert';
  16 | import { Button } from '@/components/shadcn/button';
  17 | import {
  18 |   Dialog,
  19 |   DialogContent,
  20 |   DialogHeader,
  21 |   DialogTitle,
  22 |   DialogTrigger,
  23 |   DialogFooter,
  24 | } from '@/components/shadcn/dialog';
  25 | import { Input } from '@/components/shadcn/input';
  26 | import {
  27 |   Table,
  28 |   TableBody,
  29 |   TableCell,
  30 |   TableHead,
  31 |   TableHeader,
  32 |   TableRow,
  33 | } from '@/components/shadcn/table';
  34 | import { Textarea } from '@/components/shadcn/textarea';
  35 | import { useToast } from '@/components/shadcn/use-toast';
  36 | import { useAuth } from '@/hooks/useAuth';
  37 | import { PlanType, getUpgradeMessage } from '@/lib/features';
  38 | import { User } from '@/types/auth';
  39 | 
  40 | 
  41 | type Project = {
  42 |   id: string;
  43 |   name: string;
  44 |   description?: string;
  45 |   createdAt: string;
  46 |   ownerId: string;
  47 |   owner?: {
  48 |     id: string;
  49 |     name: string;
  50 |     email: string;
  51 |   };
  52 | };
  53 | 
  54 | export default function ProjectsPage() {
  55 |   const [projects, setProjects] = useState<Project[]>([]);
  56 |   const [isDialogOpen, setIsDialogOpen] = useState(false);
  57 |   const [newProject, setNewProject] = useState({ name: '', description: '' });
  58 |   const [editingProject, setEditingProject] = useState<Project | null>(null);
  59 |   const [isLoading, setIsLoading] = useState(true);
  60 |   const [isCreating, setIsCreating] = useState(false);
  61 |   const router = useRouter();
  62 |   const params = useParams();
  63 |   const locale = params.locale as string;
  64 |   const tenant = params.tenant as string;
  65 |   const { toast } = useToast();
  66 |   const { user } = useAuth();
  67 | 
  68 |   // Fetch projects on mount
  69 |   useEffect(() => {
  70 |     const fetchProjects = async () => {
  71 |       setIsLoading(true);
  72 |       try {
  73 |         const response = await fetch('/api/projects', {
  74 |           headers: {
  75 |             'Content-Type': 'application/json',
  76 |           },
  77 |           credentials: 'include', // Use cookies for authentication
  78 |         });
  79 |         if (response.ok) {
  80 |           const data = await response.json();
  81 |           setProjects(data);
  82 |         } else {
  83 |           throw new Error('Failed to fetch projects');
  84 |         }
  85 |       } catch (error) {
  86 |         console.error('Error fetching projects:', error);
  87 |         toast({
  88 |           title: 'Error',
  89 |           description: error instanceof Error ? error.message : 'Failed to fetch projects',
  90 |           variant: 'destructive',
  91 |         });
  92 |       } finally {
  93 |         setIsLoading(false);
  94 |       }
  95 |     };
  96 | 
  97 |     fetchProjects();
  98 |   }, [toast]);
  99 | 
 100 |   // Define table columns
 101 |   const columns: ColumnDef<Project>[] = [
 102 |     {
 103 |       accessorKey: 'name',
 104 |       header: 'Name',
 105 |       cell: ({ row }: { row: Row<Project> }) => row.getValue('name'),
 106 |       enableSorting: true,
 107 |     },
 108 |     {
 109 |       accessorKey: 'description',
 110 |       header: 'Description',
 111 |       cell: ({ row }: { row: Row<Project> }) => row.original.description || '-',
 112 |     },
 113 |     {
 114 |       accessorKey: 'createdAt',
 115 |       header: 'Created At',
 116 |       cell: ({ row }: { row: Row<Project> }) =>
 117 |         new Date(row.getValue('createdAt')).toLocaleDateString(),
 118 |       enableSorting: true,
 119 |     },
 120 |     {
 121 |       id: 'actions',
 122 |       cell: ({ row }: { row: Row<Project> }) => (
 123 |         <div className="flex gap-2">
 124 |           <Button variant="outline" size="sm" onClick={() => setEditingProject(row.original)}>
 125 |             Edit
 126 |           </Button>
 127 |           <Button variant="destructive" size="sm" onClick={() => handleDelete(row.original.id)}>
 128 |             Delete
 129 |           </Button>
 130 |         </div>
 131 |       ),
 132 |     },
 133 |   ];
 134 | 
 135 |   const table = useReactTable({
 136 |     data: projects,
 137 |     columns,
 138 |     getCoreRowModel: getCoreRowModel(),
 139 |     getSortedRowModel: getSortedRowModel(),
 140 |   });
 141 | 
 142 |   // Function to check if user can create more of a resource based on plan limits
 143 |   const checkCanCreateMore = (limitKey: string, currentCount: number): boolean => {
 144 |     if (!user) return false;
 145 | 
 146 |     // If user is on a paid plan, they can create unlimited resources
 147 |     if (user.plan !== 'TRIAL') return true;
 148 | 
 149 |     // For trial users, check against specific limits
 150 |     const limits: Record<string, number> = {
 151 |       maxProjects: 3,
 152 |       // Add other limits as needed
 153 |     };
 154 | 
 155 |     return currentCount < (limits[limitKey] || 0);
 156 |   };
 157 | 
 158 |   // CRUD handlers
 159 |   const handleCreate = async () => {
 160 |     if (!newProject.name.trim()) {
 161 |       toast({
 162 |         title: 'Error',
 163 |         description: 'Please enter a project name.',
 164 |         variant: 'destructive',
 165 |       });
 166 |       return;
 167 |     }
 168 | 
 169 |     setIsCreating(true);
 170 | 
 171 |     // Check for duplicate project name
 172 |     const trimmedName = newProject.name.trim();
 173 |     const isDuplicate = projects.some(
 174 |       (project) => project.name.toLowerCase() === trimmedName.toLowerCase(),
 175 |     );
 176 | 
 177 |     if (isDuplicate) {
 178 |       toast({
 179 |         title: 'Error',
 180 |         description: 'A project with this name already exists. Please choose a different name.',
 181 |         variant: 'destructive',
 182 |       });
 183 |       setIsCreating(false);
 184 |       return;
 185 |     }
 186 | 
 187 |     // Check trial limitations
 188 |     if (user && !checkCanCreateMore('maxProjects', projects.length)) {
 189 |       toast({
 190 |         title: 'Trial Limit Reached',
 191 |         description: getUpgradeMessage(user?.plan as PlanType, 'maxProjects'),
 192 |         variant: 'destructive',
 193 |       });
 194 |       setIsCreating(false);
 195 |       return;
 196 |     }
 197 | 
 198 |     try {
 199 |       const res = await fetch('/api/projects', {
 200 |         method: 'POST',
 201 |         headers: {
 202 |           'Content-Type': 'application/json',
 203 |         },
 204 |         credentials: 'include', // Use cookies for authentication
 205 |         body: JSON.stringify({
 206 |           name: newProject.name.trim(),
 207 |           description: newProject.description?.trim(),
 208 |         }),
 209 |       });
 210 | 
 211 |       if (!res.ok) {
 212 |         const errorData = await res.json();
 213 |         throw new Error(errorData.error || `HTTP error! status: ${res.status}`);
 214 |       }
 215 | 
 216 |       const createdProject = await res.json();
 217 |       setProjects([...projects, createdProject]);
 218 |       setIsDialogOpen(false);
 219 |       setNewProject({ name: '', description: '' });
 220 |       toast({
 221 |         title: 'Success',
 222 |         description: 'Project created successfully',
 223 |       });
 224 |     } catch (error) {
 225 |       console.error('Error creating project:', error);
 226 |       toast({
 227 |         title: 'Error',
 228 |         description:
 229 |           error instanceof Error ? error.message : 'Failed to create project. Please try again.',
 230 |         variant: 'destructive',
 231 |       });
 232 |     } finally {
 233 |       setIsCreating(false);
 234 |     }
 235 |   };
 236 | 
 237 |   const handleEdit = async () => {
 238 |     if (!editingProject) return;
 239 |     try {
 240 |       const res = await fetch(`/api/projects/${editingProject.id}`, {
 241 |         method: 'PATCH',
 242 |         headers: {
 243 |           'Content-Type': 'application/json',
 244 |         },
 245 |         credentials: 'include', // Use cookies for authentication
 246 |         body: JSON.stringify({
 247 |           name: editingProject.name,
 248 |           description: editingProject.description,
 249 |         }),
 250 |       });
 251 |       if (res.ok) {
 252 |         const updatedProject = await res.json();
 253 |         setProjects(projects.map((p) => (p.id === updatedProject.id ? updatedProject : p)));
 254 |         setEditingProject(null);
 255 |         toast({
 256 |           title: 'Success',
 257 |           description: 'Project updated successfully',
 258 |         });
 259 |       } else {
 260 |         const errorData = await res.json();
 261 |         throw new Error(errorData.error || 'Failed to update project');
 262 |       }
 263 |     } catch (error) {
 264 |       console.error('Error updating project:', error);
 265 |       toast({
 266 |         title: 'Error',
 267 |         description: error instanceof Error ? error.message : 'Failed to update project',
 268 |         variant: 'destructive',
 269 |       });
 270 |     }
 271 |   };
 272 | 
 273 |   const handleDelete = async (id: string) => {
 274 |     if (!confirm('Are you sure you want to delete this project?')) return;
 275 | 
 276 |     try {
 277 |       const res = await fetch(`/api/projects/${id}`, {
 278 |         method: 'DELETE',
 279 |         headers: {
 280 |           'Content-Type': 'application/json',
 281 |         },
 282 |         credentials: 'include', // Use cookies for authentication
 283 |       });
 284 |       if (res.ok) {
 285 |         setProjects(projects.filter((p) => p.id !== id));
 286 |         toast({
 287 |           title: 'Success',
 288 |           description: 'Project deleted successfully',
 289 |         });
 290 |       } else {
 291 |         const errorData = await res.json();
 292 |         throw new Error(errorData.error || 'Failed to delete project');
 293 |       }
 294 |     } catch (error) {
 295 |       console.error('Error deleting project:', error);
 296 |       toast({
 297 |         title: 'Error',
 298 |         description: error instanceof Error ? error.message : 'Failed to delete project',
 299 |         variant: 'destructive',
 300 |       });
 301 |     }
 302 |   };
 303 | 
 304 |   // Trial limitation warning and check
 305 |   const hasReachedTrialLimit =
 306 |     user?.plan === 'TRIAL' && !checkCanCreateMore('maxProjects', projects.length);
 307 |   const showTrialWarning = hasReachedTrialLimit;
 308 | 
 309 |   return (
 310 |     <div className="flex-1 space-y-4 pt-5">
 311 |       <div className="flex justify-between items-center">
 312 |         <h1 className="text-2xl font-bold">Projects</h1>
 313 |         <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
 314 |           <DialogTrigger asChild>
 315 |             <Button disabled={hasReachedTrialLimit}>New</Button>
 316 |           </DialogTrigger>
 317 |           <DialogContent>
 318 |             <DialogHeader>
 319 |               <DialogTitle>Create Project</DialogTitle>
 320 |             </DialogHeader>
 321 |             <div className="space-y-4 py-4">
 322 |               <Input
 323 |                 placeholder="Name"
 324 |                 value={newProject.name}
 325 |                 onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
 326 |                   setNewProject({ ...newProject, name: e.target.value })
 327 |                 }
 328 |               />
 329 |               <Textarea
 330 |                 placeholder="Description (optional)"
 331 |                 value={newProject.description}
 332 |                 onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
 333 |                   setNewProject({ ...newProject, description: e.target.value })
 334 |                 }
 335 |               />
 336 |             </div>
 337 |             <DialogFooter>
 338 |               <Button
 339 |                 onClick={handleCreate}
 340 |                 type="button"
 341 |                 disabled={!newProject.name.trim() || isCreating || hasReachedTrialLimit}
 342 |               >
 343 |                 {isCreating ? 'Creating...' : 'Save'}
 344 |               </Button>
 345 |             </DialogFooter>
 346 |           </DialogContent>
 347 |         </Dialog>
 348 |       </div>
 349 | 
 350 |       {showTrialWarning && (
 351 |         <Alert variant="destructive">
 352 |           <AlertDescription className="flex items-center justify-between">
 353 |             <span>You have reached the limitation - Upgrade to Pro for unlimited projects</span>
 354 |             <Button
 355 |               variant="outline"
 356 |               size="sm"
 357 |               onClick={() => router.push(`/${locale}/${tenant}/settings/billing`)}
 358 |             >
 359 |               Upgrade to Pro
 360 |             </Button>
 361 |           </AlertDescription>
 362 |         </Alert>
 363 |       )}
 364 | 
 365 |       {/* Edit Dialog */}
 366 |       {editingProject && (
 367 |         <Dialog open={!!editingProject} onOpenChange={() => setEditingProject(null)}>
 368 |           <DialogContent>
 369 |             <DialogHeader>
 370 |               <DialogTitle>Edit Project</DialogTitle>
 371 |             </DialogHeader>
 372 |             <div className="space-y-4 py-4">
 373 |               <Input
 374 |                 placeholder="Name"
 375 |                 value={editingProject.name}
 376 |                 onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
 377 |                   setEditingProject({ ...editingProject, name: e.target.value })
 378 |                 }
 379 |               />
 380 |               <Textarea
 381 |                 placeholder="Description (optional)"
 382 |                 value={editingProject.description || ''}
 383 |                 onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
 384 |                   setEditingProject({
 385 |                     ...editingProject,
 386 |                     description: e.target.value,
 387 |                   })
 388 |                 }
 389 |               />
 390 |             </div>
 391 |             <DialogFooter>
 392 |               <Button onClick={handleEdit}>Save</Button>
 393 |             </DialogFooter>
 394 |           </DialogContent>
 395 |         </Dialog>
 396 |       )}
 397 | 
 398 |       <div className="rounded-md border">
 399 |         <Table>
 400 |           <TableHeader>
 401 |             {table.getHeaderGroups().map((headerGroup) => (
 402 |               <TableRow key={headerGroup.id}>
 403 |                 {headerGroup.headers.map((header) => (
 404 |                   <TableHead
 405 |                     key={header.id}
 406 |                     onClick={header.column.getToggleSortingHandler()}
 407 |                     className={`select-none ${header.column.getCanSort() ? 'cursor-pointer' : ''}`}
 408 |                   >
 409 |                     {flexRender(header.column.columnDef.header, header.getContext())}
 410 |                     {{
 411 |                       asc: ' ↑',
 412 |                       desc: ' ↓',
 413 |                     }[header.column.getIsSorted() as string] ?? null}
 414 |                   </TableHead>
 415 |                 ))}
 416 |               </TableRow>
 417 |             ))}
 418 |           </TableHeader>
 419 |           <TableBody>
 420 |             {isLoading ? (
 421 |               <TableRow>
 422 |                 <TableCell colSpan={columns.length} className="text-center py-8">
 423 |                   Loading...
 424 |                 </TableCell>
 425 |               </TableRow>
 426 |             ) : table.getRowModel().rows.length === 0 ? (
 427 |               <TableRow>
 428 |                 <TableCell colSpan={columns.length} className="text-center py-8">
 429 |                   No projects found. Create your first project!
 430 |                 </TableCell>
 431 |               </TableRow>
 432 |             ) : (
 433 |               table.getRowModel().rows.map((row) => (
 434 |                 <TableRow key={row.id} className="select-none hover:bg-muted">
 435 |                   {row.getVisibleCells().map((cell) => (
 436 |                     <TableCell key={cell.id}>
 437 |                       {flexRender(cell.column.columnDef.cell, cell.getContext())}
 438 |                     </TableCell>
 439 |                   ))}
 440 |                 </TableRow>
 441 |               ))
 442 |             )}
 443 |           </TableBody>
 444 |         </Table>
 445 |       </div>
 446 |     </div>
 447 |   );
 448 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/usecases/_components/UseCaseList.tsx`:

```tsx
   1 | import { Button } from '@/components/shadcn/button';
   2 | import { UseCase } from '@/types/usecase';
   3 | 
   4 | type UseCaseListProps = {
   5 |   usecases: UseCase[];
   6 |   favorites: Set<string>;
   7 |   selectedUseCases: Set<string>;
   8 |   isSelectionMode: boolean;
   9 |   onToggleFavorite: (id: string) => void;
  10 |   onSelect: (id: string) => void;
  11 |   onEdit: (useCase: UseCase) => void;
  12 |   sortConfig: { key: string; direction: string };
  13 |   onSort: (key: string) => void;
  14 | };
  15 | 
  16 | export function UseCaseList({
  17 |   usecases,
  18 |   favorites,
  19 |   selectedUseCases,
  20 |   isSelectionMode,
  21 |   onToggleFavorite,
  22 |   onSelect,
  23 |   onEdit,
  24 |   sortConfig,
  25 |   onSort,
  26 | }: UseCaseListProps) {
  27 |   const getSortIcon = (key: string) => {
  28 |     if (sortConfig.key !== key) return '↕️';
  29 |     return sortConfig.direction === 'asc' ? '↑' : '↓';
  30 |   };
  31 | 
  32 |   return (
  33 |     <div className="space-y-4">
  34 |       <div className="grid grid-cols-6 gap-4 font-semibold">
  35 |         <button onClick={() => onSort('shortId')}>ID {getSortIcon('shortId')}</button>
  36 |         <button onClick={() => onSort('name')}>Name {getSortIcon('name')}</button>
  37 |         <button onClick={() => onSort('steps.platform')}>
  38 |           Platform {getSortIcon('steps.platform')}
  39 |         </button>
  40 |         <button onClick={() => onSort('createdAt')}>Created {getSortIcon('createdAt')}</button>
  41 |         <button onClick={() => onSort('lastModified')}>
  42 |           Modified {getSortIcon('lastModified')}
  43 |         </button>
  44 |         <div>Actions</div>
  45 |       </div>
  46 | 
  47 |       {usecases.map((useCase) => (
  48 |         <div
  49 |           key={useCase.id}
  50 |           className={`grid grid-cols-6 gap-4 p-2 rounded ${
  51 |             selectedUseCases.has(useCase.id) ? 'bg-secondary' : ''
  52 |           }`}
  53 |           onClick={() => isSelectionMode && onSelect(useCase.id)}
  54 |         >
  55 |           <div>{useCase.shortId}</div>
  56 |           <div>{useCase.name}</div>
  57 |           <div>{useCase.steps.platform}</div>
  58 |           <div>{new Date(useCase.createdAt).toLocaleDateString()}</div>
  59 |           <div>
  60 |             {useCase.lastModified ? new Date(useCase.lastModified).toLocaleDateString() : '-'}
  61 |           </div>
  62 |           <div className="space-x-2">
  63 |             <Button
  64 |               variant="ghost"
  65 |               size="sm"
  66 |               onClick={(e) => {
  67 |                 e.stopPropagation();
  68 |                 onToggleFavorite(useCase.id);
  69 |               }}
  70 |             >
  71 |               {favorites.has(useCase.id) ? '★' : '☆'}
  72 |             </Button>
  73 |             <Button
  74 |               variant="ghost"
  75 |               size="sm"
  76 |               onClick={(e) => {
  77 |                 e.stopPropagation();
  78 |                 onEdit(useCase);
  79 |               }}
  80 |             >
  81 |               Edit
  82 |             </Button>
  83 |           </div>
  84 |         </div>
  85 |       ))}
  86 |     </div>
  87 |   );
  88 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/usecases/_components/CreateUseCase.tsx`:

```tsx
   1 | import { PLATFORMS } from '@/app/[locale]/[tenant]/platforms/constants';
   2 | import { Button } from '@/components/shadcn/button';
   3 | import { Input } from '@/components/shadcn/input';
   4 | import {
   5 |   Select,
   6 |   SelectContent,
   7 |   SelectItem,
   8 |   SelectTrigger,
   9 |   SelectValue,
  10 | } from '@/components/shadcn/select';
  11 | import { NewUseCase, Project } from '@/types/usecase';
  12 | 
  13 | type CreateUseCaseProps = {
  14 |   projects: Project[];
  15 |   newUseCase: NewUseCase;
  16 |   onClose: () => void;
  17 |   onChange: (field: keyof NewUseCase, value: string) => void;
  18 |   onSubmit: () => void;
  19 | };
  20 | 
  21 | export function CreateUseCase({
  22 |   projects,
  23 |   newUseCase,
  24 |   onClose,
  25 |   onChange,
  26 |   onSubmit,
  27 | }: CreateUseCaseProps) {
  28 |   return (
  29 |     <div className="space-y-4 p-4">
  30 |       <h2 className="text-lg font-semibold">Create New Use Case</h2>
  31 | 
  32 |       <div className="space-y-4">
  33 |         <div>
  34 |           <label className="block text-sm font-medium mb-1">Project</label>
  35 |           <Select
  36 |             value={newUseCase.projectId}
  37 |             onValueChange={(value) => onChange('projectId', value)}
  38 |           >
  39 |             <SelectTrigger>
  40 |               <SelectValue placeholder="Select a project" />
  41 |             </SelectTrigger>
  42 |             <SelectContent>
  43 |               {projects.map((project) => (
  44 |                 <SelectItem key={project.id} value={project.id}>
  45 |                   {project.name}
  46 |                 </SelectItem>
  47 |               ))}
  48 |             </SelectContent>
  49 |           </Select>
  50 |         </div>
  51 | 
  52 |         <div>
  53 |           <label className="block text-sm font-medium mb-1">Name</label>
  54 |           <Input
  55 |             value={newUseCase.name}
  56 |             onChange={(e) => onChange('name', e.target.value)}
  57 |             placeholder="Use case name"
  58 |           />
  59 |         </div>
  60 | 
  61 |         <div>
  62 |           <label className="block text-sm font-medium mb-1">Description</label>
  63 |           <Input
  64 |             value={newUseCase.description}
  65 |             onChange={(e) => onChange('description', e.target.value)}
  66 |             placeholder="Description"
  67 |           />
  68 |         </div>
  69 | 
  70 |         <div>
  71 |           <label className="block text-sm font-medium mb-1">Platform</label>
  72 |           <Select
  73 |             value={newUseCase.platform}
  74 |             onValueChange={(value) => onChange('platform', value)}
  75 |           >
  76 |             <SelectTrigger>
  77 |               <SelectValue placeholder="Select a platform" />
  78 |             </SelectTrigger>
  79 |             <SelectContent>
  80 |               {PLATFORMS.map((platform) => (
  81 |                 <SelectItem key={platform} value={platform}>
  82 |                   {platform.charAt(0).toUpperCase() + platform.slice(1)}
  83 |                 </SelectItem>
  84 |               ))}
  85 |             </SelectContent>
  86 |           </Select>
  87 |         </div>
  88 | 
  89 |         <div className="flex justify-end space-x-2">
  90 |           <Button variant="outline" onClick={onClose}>
  91 |             Cancel
  92 |           </Button>
  93 |           <Button onClick={onSubmit} disabled={!newUseCase.projectId || !newUseCase.name}>
  94 |             Create
  95 |           </Button>
  96 |         </div>
  97 |       </div>
  98 |     </div>
  99 |   );
 100 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/admin/logs/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { InfoIcon } from 'lucide-react';
   4 | import { useState } from 'react';
   5 | 
   6 | import { Alert, AlertDescription, AlertTitle } from '@/components/shadcn/alert';
   7 | import {
   8 |   Card,
   9 |   CardContent,
  10 |   CardDescription,
  11 |   CardHeader,
  12 |   CardTitle,
  13 | } from '@/components/shadcn/card';
  14 | import { useAuth } from '@/hooks/useAuth';
  15 | 
  16 | // Define a simplified interface for logs (even though we won't use it)
  17 | interface ConnectionLog {
  18 |   id: string;
  19 |   timestamp: string;
  20 |   level: string;
  21 |   message: string;
  22 |   action: string | null;
  23 |   userId: string | null;
  24 |   tenantId: string | null;
  25 |   connectionId: string | null;
  26 |   ip: string | null;
  27 |   metadata: any;
  28 | }
  29 | 
  30 | export default function LogsPage() {
  31 |   const { user } = useAuth();
  32 |   const [logs, setLogs] = useState<ConnectionLog[]>([]);
  33 |   const [loading, setLoading] = useState(false);
  34 | 
  35 |   if (!user) {
  36 |     return <div className="flex justify-center p-8">Please sign in to access this page</div>;
  37 |   }
  38 | 
  39 |   return (
  40 |     <div className="container mx-auto py-8">
  41 |       <Card>
  42 |         <CardHeader>
  43 |           <CardTitle>Connection Logs</CardTitle>
  44 |           <CardDescription>View and filter connection activity logs</CardDescription>
  45 |         </CardHeader>
  46 |         <CardContent>
  47 |           <Alert>
  48 |             <InfoIcon className="h-4 w-4" />
  49 |             <AlertTitle>Logs Unavailable</AlertTitle>
  50 |             <AlertDescription>
  51 |               Connection logging has been disabled in this version. The ConnectionLog model has been
  52 |               removed from the database schema.
  53 |             </AlertDescription>
  54 |           </Alert>
  55 |         </CardContent>
  56 |       </Card>
  57 |     </div>
  58 |   );
  59 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/team/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useParams } from 'next/navigation';
   4 | import { useTranslations } from 'next-intl';
   5 | 
   6 | export default function TeamPage() {
   7 |   const _params = useParams();
   8 |   const t = useTranslations('Team');
   9 | 
  10 |   return (
  11 |     <div className="container mx-auto px-4 py-8">
  12 |       <h1 className="text-3xl font-bold mb-6">{t('title')}</h1>
  13 |       <div className="grid gap-6">
  14 |         {/* Team members list will go here */}
  15 |         <div className="p-6 bg-card rounded-lg shadow">
  16 |           <h2 className="text-xl font-semibold mb-4">{t('teamMembers')}</h2>
  17 |           <p className="text-muted-foreground">{t('description')}</p>
  18 |         </div>
  19 |       </div>
  20 |     </div>
  21 |   );
  22 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/dashboard/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { DashboardHeader } from './_components/DashboardHeader';
   4 | import { DashboardTabs } from './_components/DashboardTabs';
   5 | 
   6 | export default function DashboardPage() {
   7 |   return (
   8 |     <div className="flex-1 space-y-4">
   9 |       <DashboardHeader />
  10 |       <DashboardTabs />
  11 |     </div>
  12 |   );
  13 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/dashboard/actions.ts`:

```ts
   1 | 'use server';
   2 | 
   3 | // Cache for server actions to prevent unnecessary API calls
   4 | let statsCache: any = null;
   5 | let statsLastFetch = 0;
   6 | 
   7 | let activityCache: any = null;
   8 | let activityLastFetch = 0;
   9 | 
  10 | let tasksCache: any = null;
  11 | let tasksLastFetch = 0;
  12 | 
  13 | let chatCache: any = null;
  14 | let chatLastFetch = 0;
  15 | 
  16 | // Cache duration in milliseconds (5 minutes)
  17 | const CACHE_DURATION = 5 * 60 * 1000;
  18 | 
  19 | export async function getDashboardStats() {
  20 |   // Check if we have cached data that's still valid
  21 |   const now = Date.now();
  22 |   if (statsCache && now - statsLastFetch < CACHE_DURATION) {
  23 |     return statsCache;
  24 |   }
  25 |   
  26 |   // This is a placeholder for actual data fetching
  27 |   // In a real implementation, you would fetch data from your database
  28 |   const data = {
  29 |     projects: 0,
  30 |     testCases: 0,
  31 |     testsRun: 0,
  32 |     successRate: 0,
  33 |   };
  34 |   
  35 |   // Update cache
  36 |   statsCache = data;
  37 |   statsLastFetch = now;
  38 |   
  39 |   return data;
  40 | }
  41 | 
  42 | export async function getRecentActivity() {
  43 |   // Check if we have cached data that's still valid
  44 |   const now = Date.now();
  45 |   if (activityCache && now - activityLastFetch < CACHE_DURATION) {
  46 |     return activityCache;
  47 |   }
  48 |   
  49 |   // This is a placeholder for actual data fetching
  50 |   const data = [];
  51 |   
  52 |   // Update cache
  53 |   activityCache = data;
  54 |   activityLastFetch = now;
  55 |   
  56 |   return data;
  57 | }
  58 | 
  59 | export async function getTasks() {
  60 |   // Check if we have cached data that's still valid
  61 |   const now = Date.now();
  62 |   if (tasksCache && now - tasksLastFetch < CACHE_DURATION) {
  63 |     return tasksCache;
  64 |   }
  65 |   
  66 |   // This is a placeholder for actual data fetching
  67 |   const data = [
  68 |     {
  69 |       id: '1',
  70 |       title: 'Update test cases for login flow',
  71 |       dueDate: 'Due in 2 days',
  72 |     },
  73 |     {
  74 |       id: '2',
  75 |       title: 'Review automation scripts',
  76 |       dueDate: 'Due tomorrow',
  77 |     },
  78 |     {
  79 |       id: '3',
  80 |       title: 'Prepare test report',
  81 |       dueDate: 'Due next week',
  82 |     },
  83 |   ];
  84 |   
  85 |   // Update cache
  86 |   tasksCache = data;
  87 |   tasksLastFetch = now;
  88 |   
  89 |   return data;
  90 | }
  91 | 
  92 | export async function getTeamChat() {
  93 |   // Check if we have cached data that's still valid
  94 |   const now = Date.now();
  95 |   if (chatCache && now - chatLastFetch < CACHE_DURATION) {
  96 |     return chatCache;
  97 |   }
  98 |   
  99 |   // This is a placeholder for actual data fetching
 100 |   const data = [
 101 |     {
 102 |       id: '1',
 103 |       name: 'John Doe',
 104 |       avatar: '/avatars/01.svg',
 105 |       message: 'Updated the test suite configuration',
 106 |       time: '2 hours ago',
 107 |     },
 108 |     {
 109 |       id: '2',
 110 |       name: 'Jane Smith',
 111 |       avatar: '/avatars/02.svg',
 112 |       message: 'Added new test cases for payment flow',
 113 |       time: '5 hours ago',
 114 |     },
 115 |     {
 116 |       id: '3',
 117 |       name: 'Robert Johnson',
 118 |       avatar: '/avatars/03.svg',
 119 |       message: 'Fixed failing tests in CI pipeline',
 120 |       time: 'Yesterday',
 121 |     },
 122 |   ];
 123 |   
 124 |   // Update cache
 125 |   chatCache = data;
 126 |   chatLastFetch = now;
 127 |   
 128 |   return data;
 129 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/dashboard/_components/TabContentCard.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/shadcn/card';
   4 | 
   5 | interface TabContentCardProps {
   6 |   title: string;
   7 | }
   8 | 
   9 | export function TabContentCard({ title }: TabContentCardProps) {
  10 |   return (
  11 |     <Card>
  12 |       <CardHeader>
  13 |         <CardTitle>{title}</CardTitle>
  14 |       </CardHeader>
  15 |       <CardContent>
  16 |         <div className="flex items-center justify-center h-40">
  17 |           <p className="text-sm text-muted-foreground">{title} content will go here</p>
  18 |         </div>
  19 |       </CardContent>
  20 |     </Card>
  21 |   );
  22 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/dashboard/_components/DashboardTabs.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/shadcn/tabs';
   4 | 
   5 | import { MainContent } from './MainContent';
   6 | import { StatsCards } from './StatsCards';
   7 | import { TabContentCard } from './TabContentCard';
   8 | 
   9 | export function DashboardTabs() {
  10 |   return (
  11 |     <Tabs defaultValue="overview" className="space-y-4">
  12 |       <div className="flex overflow-x-auto pb-2">
  13 |         <TabsList>
  14 |           <TabsTrigger value="overview">Overview</TabsTrigger>
  15 |           <TabsTrigger value="analytics">Analytics</TabsTrigger>
  16 |           <TabsTrigger value="reports">Reports</TabsTrigger>
  17 |           <TabsTrigger value="notifications">Notifications</TabsTrigger>
  18 |         </TabsList>
  19 |       </div>
  20 | 
  21 |       <TabsContent value="overview" className="space-y-4">
  22 |         <StatsCards />
  23 |         <MainContent />
  24 |       </TabsContent>
  25 | 
  26 |       <TabsContent value="analytics">
  27 |         <TabContentCard title="Analytics" />
  28 |       </TabsContent>
  29 | 
  30 |       <TabsContent value="reports">
  31 |         <TabContentCard title="Reports" />
  32 |       </TabsContent>
  33 | 
  34 |       <TabsContent value="notifications">
  35 |         <TabContentCard title="Notifications" />
  36 |       </TabsContent>
  37 |     </Tabs>
  38 |   );
  39 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/dashboard/_components/StatsCards.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/shadcn/card';
   4 | import { useEffect, useState } from 'react';
   5 | import { getDashboardStats } from '../actions';
   6 | 
   7 | export function StatsCards() {
   8 |   const [stats, setStats] = useState({
   9 |     projects: 0,
  10 |     testCases: 0,
  11 |     testsRun: 0,
  12 |     successRate: 0,
  13 |   });
  14 | 
  15 |   useEffect(() => {
  16 |     // Add component name to reference
  17 |     const fetchData = async () => {
  18 |       try {
  19 |         console.log('[StatsCards] Fetching dashboard stats');
  20 |         const data = await getDashboardStats();
  21 |         setStats(data);
  22 |       } catch (error) {
  23 |         console.error('[StatsCards] Error fetching dashboard stats:', error);
  24 |       }
  25 |     };
  26 | 
  27 |     fetchData();
  28 |   }, []);
  29 | 
  30 |   return (
  31 |     <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
  32 |       <Card>
  33 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  34 |           <CardTitle className="text-sm font-medium">Projects</CardTitle>
  35 |         </CardHeader>
  36 |         <CardContent>
  37 |           <div className="text-2xl font-bold">{stats.projects}</div>
  38 |           <p className="text-xs text-muted-foreground">Total projects</p>
  39 |         </CardContent>
  40 |       </Card>
  41 |       <Card>
  42 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  43 |           <CardTitle className="text-sm font-medium">Test Cases</CardTitle>
  44 |         </CardHeader>
  45 |         <CardContent>
  46 |           <div className="text-2xl font-bold">{stats.testCases}</div>
  47 |           <p className="text-xs text-muted-foreground">Total test cases</p>
  48 |         </CardContent>
  49 |       </Card>
  50 |       <Card>
  51 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  52 |           <CardTitle className="text-sm font-medium">Tests Run</CardTitle>
  53 |         </CardHeader>
  54 |         <CardContent>
  55 |           <div className="text-2xl font-bold">{stats.testsRun}</div>
  56 |           <p className="text-xs text-muted-foreground">Total tests run</p>
  57 |         </CardContent>
  58 |       </Card>
  59 |       <Card>
  60 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  61 |           <CardTitle className="text-sm font-medium">Success Rate</CardTitle>
  62 |         </CardHeader>
  63 |         <CardContent>
  64 |           <div className="text-2xl font-bold">{stats.successRate}%</div>
  65 |           <p className="text-xs text-muted-foreground">Average success rate</p>
  66 |         </CardContent>
  67 |       </Card>
  68 |     </div>
  69 |   );
  70 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/dashboard/_components/DashboardHeader.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | import { useTranslations } from 'next-intl';
   5 | 
   6 | function DashboardHeaderComponent() {
   7 |   const t = useTranslations('Dashboard');
   8 |   return (
   9 |     <div className="flex items-center justify-between">
  10 |       <h1 className="text-2xl font-semibold tracking-tight">{t('title')}</h1>
  11 |     </div>
  12 |   );
  13 | }
  14 | 
  15 | // Use React.memo to prevent unnecessary re-renders
  16 | export const DashboardHeader = React.memo(DashboardHeaderComponent);

```

`/workspaces/automai/src/app/[locale]/[tenant]/dashboard/_components/MainContent.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Overview } from '@/components/dashboard/Overview';
   4 | import { RecentSales } from '@/components/dashboard/RecentSales';
   5 | import { Avatar, AvatarImage, AvatarFallback } from '@/components/shadcn/avatar';
   6 | import { Button } from '@/components/shadcn/button';
   7 | import {
   8 |   Card,
   9 |   CardContent,
  10 |   CardHeader,
  11 |   CardTitle,
  12 |   CardDescription,
  13 | } from '@/components/shadcn/card';
  14 | import { useEffect, useState } from 'react';
  15 | import { getTasks, getRecentActivity, getTeamChat } from '../actions';
  16 | 
  17 | export function MainContent() {
  18 |   const [tasks, setTasks] = useState([]);
  19 |   const [teamChat, setTeamChat] = useState([]);
  20 |   
  21 |   useEffect(() => {
  22 |     const fetchData = async () => {
  23 |       try {
  24 |         // Make API calls with component name in logs
  25 |         console.log('[MainContent] Fetching tasks');
  26 |         const tasksData = await getTasks();
  27 |         setTasks(tasksData);
  28 |         
  29 |         console.log('[MainContent] Fetching team chat');
  30 |         const chatData = await getTeamChat();
  31 |         setTeamChat(chatData);
  32 |         
  33 |         console.log('[MainContent] Fetching recent activity');
  34 |         await getRecentActivity(); // Fetching this but not using it yet
  35 |       } catch (error) {
  36 |         console.error('[MainContent] Error fetching data:', error);
  37 |       }
  38 |     };
  39 |     
  40 |     fetchData();
  41 |   }, []);
  42 | 
  43 |   return (
  44 |     <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-7">
  45 |       {/* Left Column - Chart and Tasks */}
  46 |       <div className="col-span-1 md:col-span-2 lg:col-span-4 space-y-4">
  47 |         <Card>
  48 |           <CardHeader>
  49 |             <CardTitle>Success Rate Over Time</CardTitle>
  50 |             <CardDescription>Monthly success rate for all test executions</CardDescription>
  51 |           </CardHeader>
  52 |           <CardContent className="pl-2">
  53 |             <Overview />
  54 |           </CardContent>
  55 |         </Card>
  56 | 
  57 |         <Card>
  58 |           <CardHeader>
  59 |             <CardTitle>Tasks</CardTitle>
  60 |             <CardDescription>Your upcoming tasks and assignments</CardDescription>
  61 |           </CardHeader>
  62 |           <CardContent>
  63 |             <div className="space-y-4">
  64 |               {tasks.map((task) => (
  65 |                 <div key={task.id} className="flex items-center justify-between">
  66 |                   <div>
  67 |                     <p className="text-sm font-medium">{task.title}</p>
  68 |                     <p className="text-xs text-muted-foreground">{task.dueDate}</p>
  69 |                   </div>
  70 |                   <Button variant="outline" size="sm">
  71 |                     View
  72 |                   </Button>
  73 |                 </div>
  74 |               ))}
  75 |             </div>
  76 |           </CardContent>
  77 |         </Card>
  78 |       </div>
  79 | 
  80 |       {/* Right Column - Recent Activity and Chats */}
  81 |       <div className="col-span-1 md:col-span-2 lg:col-span-3 space-y-4">
  82 |         <Card>
  83 |           <CardHeader>
  84 |             <CardTitle>Recent Activity</CardTitle>
  85 |             <CardDescription>Latest test executions by team members</CardDescription>
  86 |           </CardHeader>
  87 |           <CardContent>
  88 |             <RecentSales />
  89 |           </CardContent>
  90 |         </Card>
  91 | 
  92 |         <Card>
  93 |           <CardHeader>
  94 |             <CardTitle>Team Chat</CardTitle>
  95 |             <CardDescription>Recent conversations with team members</CardDescription>
  96 |           </CardHeader>
  97 |           <CardContent>
  98 |             <div className="space-y-4">
  99 |               {teamChat.map((chat) => (
 100 |                 <div key={chat.id} className="flex items-start gap-4">
 101 |                   <Avatar className="h-8 w-8">
 102 |                     <AvatarImage src={chat.avatar} />
 103 |                     <AvatarFallback>{chat.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
 104 |                   </Avatar>
 105 |                   <div className="space-y-1">
 106 |                     <p className="text-sm font-medium">{chat.name}</p>
 107 |                     <p className="text-sm text-muted-foreground">
 108 |                       {chat.message}
 109 |                     </p>
 110 |                     <p className="text-xs text-muted-foreground">{chat.time}</p>
 111 |                   </div>
 112 |                 </div>
 113 |               ))}
 114 |             </div>
 115 |           </CardContent>
 116 |         </Card>
 117 |       </div>
 118 |     </div>
 119 |   );
 120 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/billing/page.tsx`:

```tsx
   1 | import { useTranslations } from 'next-intl';
   2 | 
   3 | export default function BillingPage() {
   4 |   const t = useTranslations('billing');
   5 | 
   6 |   return (
   7 |     <div>
   8 |       <h1>{t('title')}</h1>
   9 |     </div>
  10 |   );
  11 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/devices/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | export default function DevicesPage() {
   4 |   return (
   5 |     <div className="container mx-auto p-4">
   6 |       <h1>Devices</h1>
   7 |       <p>This page is under construction.</p>
   8 |     </div>
   9 |   );
  10 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/terminals/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useRouter } from 'next/navigation';
   4 | import { useEffect } from 'react';
   5 | 
   6 | import { useToast } from '@/components/shadcn/use-toast';
   7 | 
   8 | export default function TerminalsPage() {
   9 |   const router = useRouter();
  10 |   const { toast } = useToast();
  11 | 
  12 |   const fetchConnections = async () => {
  13 |     try {
  14 |       // Logic here
  15 |     } catch (error) {
  16 |       // Rename unused error parameter
  17 |       // Logic here
  18 |     }
  19 |   };
  20 | 
  21 |   useEffect(() => {
  22 |     if (router && toast) {
  23 |       // Check if we have selected hosts in session storage
  24 |       const sessionData = sessionStorage.getItem('selectedMachines');
  25 | 
  26 |       if (sessionData) {
  27 |         try {
  28 |           const hostIds = JSON.parse(sessionData);
  29 | 
  30 |           // Redirect to the dashboard if no hosts are selected
  31 |           if (!Array.isArray(hostIds) || hostIds.length === 0) {
  32 |             toast({
  33 |               title: 'No hosts selected',
  34 |               description: 'Please select a host from the hosts page.',
  35 |               variant: 'destructive',
  36 |             });
  37 |             router.push('./hosts');
  38 |             return;
  39 |           }
  40 | 
  41 |           // Fetch host details for the first host
  42 |           if (hostIds.length > 0) {
  43 |             fetch(`/api/hosts/${hostIds[0]}`)
  44 |               .then((response) => response.json())
  45 |               .then((data) => {
  46 |                 if (data.success && data.data) {
  47 |                   const hostName = data.data.name;
  48 |                   const count = hostIds.length > 1 ? `?count=${hostIds.length}` : '';
  49 |                   router.push(`./terminals/${hostName}${count}`);
  50 |                 } else {
  51 |                   throw new Error('Failed to fetch host details');
  52 |                 }
  53 |               })
  54 |               .catch((error) => {
  55 |                 toast({
  56 |                   title: 'Error',
  57 |                   description: 'Failed to load terminal. Please try again.',
  58 |                   variant: 'destructive',
  59 |                 });
  60 |                 router.push('./hosts');
  61 |               });
  62 |           }
  63 |         } catch (error) {
  64 |           toast({
  65 |             title: 'Error',
  66 |             description: 'Invalid host data. Please try again.',
  67 |             variant: 'destructive',
  68 |           });
  69 |           router.push('./hosts');
  70 |         }
  71 |       } else {
  72 |         // No hosts selected, redirect to hosts page
  73 |         toast({
  74 |           title: 'No hosts selected',
  75 |           description: 'Please select a host from the hosts page.',
  76 |           variant: 'destructive',
  77 |         });
  78 |         router.push('./hosts');
  79 |       }
  80 |     }
  81 |   }, [router, toast]);
  82 | 
  83 |   return (
  84 |     <div className="flex items-center justify-center h-screen">
  85 |       <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
  86 |     </div>
  87 |   );
  88 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/terminals/_components/Terminal.tsx`:

```tsx
   1 | 'use client';
   2 | /* eslint-disable @typescript-eslint/no-unused-vars, unused-imports/no-unused-vars */
   3 | 
   4 | import { AttachAddon } from '@xterm/addon-attach';
   5 | import { FitAddon } from '@xterm/addon-fit';
   6 | import { SearchAddon } from '@xterm/addon-search';
   7 | import { WebLinksAddon } from '@xterm/addon-web-links';
   8 | import { Terminal as XTerm } from '@xterm/xterm';
   9 | import { useEffect, useRef, useState } from 'react';
  10 | import '@xterm/xterm/css/xterm.css';
  11 | import { useToast } from '@/components/shadcn/use-toast';
  12 | 
  13 | interface Connection {
  14 |   id: string;
  15 |   name: string;
  16 |   ip: string;
  17 |   type: string;
  18 |   port: number;
  19 |   username: string;
  20 |   password: string;
  21 |   host?: string;
  22 |   user?: string;
  23 |   os_type?: string;
  24 | }
  25 | 
  26 | interface TerminalProps {
  27 |   connection: Connection;
  28 | }
  29 | 
  30 | export function Terminal({ connection }: TerminalProps) {
  31 |   const terminalRef = useRef<HTMLDivElement>(null);
  32 |   const xtermRef = useRef<XTerm | null>(null);
  33 |   const connectionAttemptedRef = useRef<boolean>(false);
  34 |   const fitAddonRef = useRef<FitAddon | null>(null);
  35 |   const socketRef = useRef<WebSocket | null>(null);
  36 |   const [isConnecting, setIsConnecting] = useState<boolean>(true);
  37 |   const { toast } = useToast();
  38 |   const [error, setError] = useState<string | null>(null);
  39 |   const [windowsMode, setWindowsMode] = useState<boolean | null>(null);
  40 | 
  41 |   useEffect(() => {
  42 |     const initializeTerminal = async () => {
  43 |       if (!terminalRef.current) return;
  44 | 
  45 |       // Prevent duplicate connection attempts
  46 |       if (connectionAttemptedRef.current) {
  47 |         console.log('Preventing duplicate terminal connection attempt');
  48 |         return;
  49 |       }
  50 | 
  51 |       connectionAttemptedRef.current = true;
  52 |       setIsConnecting(true);
  53 | 
  54 |       // Initialize xterm.js
  55 |       const term = new XTerm({
  56 |         cursorBlink: true,
  57 |         fontSize: 14,
  58 |         fontFamily: 'Menlo, Monaco, "Courier New", monospace',
  59 |         theme: {
  60 |           background: '#1a1b1e',
  61 |           foreground: '#ffffff',
  62 |         },
  63 |         cols: 80,
  64 |         rows: 24,
  65 |       });
  66 | 
  67 |       // Add addons
  68 |       const fitAddon = new FitAddon();
  69 |       const searchAddon = new SearchAddon();
  70 |       const webLinksAddon = new WebLinksAddon();
  71 | 
  72 |       term.loadAddon(fitAddon);
  73 |       term.loadAddon(searchAddon);
  74 |       term.loadAddon(webLinksAddon);
  75 | 
  76 |       // Open terminal in container
  77 |       term.open(terminalRef.current);
  78 | 
  79 |       // Delay fitting to ensure DOM is ready
  80 |       setTimeout(() => {
  81 |         try {
  82 |           if (terminalRef.current && term.element) {
  83 |             fitAddon.fit();
  84 | 
  85 |             setTimeout(() => {
  86 |               const initialDimensions = { cols: term.cols, rows: term.rows };
  87 |               console.log('Initial terminal dimensions:', initialDimensions);
  88 | 
  89 |               console.log('Terminal initialized with dimensions', {
  90 |                 connectionId: connection?.id || 'unknown',
  91 |                 dimensions: initialDimensions,
  92 |               });
  93 |             }, 200);
  94 |           }
  95 |         } catch (error) {
  96 |           console.error('Error fitting terminal:', error);
  97 |         }
  98 |       }, 500);
  99 | 
 100 |       // Store terminal instance
 101 |       xtermRef.current = term;
 102 |       fitAddonRef.current = fitAddon;
 103 | 
 104 |       // Set initial terminal text
 105 |       term.write(
 106 |         `\x1B[1;3;33mInitializing terminal for ${connection?.name || 'unknown'} (${connection?.ip || 'unknown'})...\x1B[0m\r\n`,
 107 |       );
 108 | 
 109 |       // Auto-detect Windows from os_type or allow manual override
 110 |       const autoDetectedWindows = connection.os_type?.toLowerCase()?.includes('windows') || false;
 111 |       const isWindows = windowsMode !== null ? windowsMode : autoDetectedWindows;
 112 | 
 113 |       if (isWindows) {
 114 |         term.write(
 115 |           `\x1B[1;3;36mWindows system detected or selected, will use special connection mode\x1B[0m\r\n`,
 116 |         );
 117 |       }
 118 | 
 119 |       // Initialize WebSocket server first
 120 |       try {
 121 |         // For testing, allow overriding connection ID (this should be removed in production)
 122 |         const testConnectionId = 'test-connection-id'; // Hardcoded test connection ID
 123 |         const connectionId = connection.id === 'test' ? testConnectionId : connection.id;
 124 | 
 125 |         console.log('[Terminal] Initializing WebSocket server', {
 126 |           connectionId: connectionId,
 127 |           originalId: connection.id,
 128 |           usingTestId: connection.id === 'test',
 129 |           host: connection.ip,
 130 |           port: connection.port,
 131 |         });
 132 |         term.write(`\x1B[1;3;33mInitializing terminal server...\x1B[0m\r\n`);
 133 | 
 134 |         const initResponse = await fetch('/api/terminals/init', {
 135 |           method: 'POST',
 136 |           headers: {
 137 |             'Content-Type': 'application/json',
 138 |           },
 139 |           body: JSON.stringify({ connectionId: connectionId }),
 140 |         });
 141 | 
 142 |         if (!initResponse.ok) {
 143 |           const statusText = initResponse.statusText;
 144 |           const responseText = await initResponse.text();
 145 |           let errorMsg = `Server error: ${initResponse.status} ${statusText}`;
 146 |           try {
 147 |             // Try to parse error message from JSON response
 148 |             const errorJson = JSON.parse(responseText);
 149 |             if (errorJson.error) {
 150 |               errorMsg = `Server error: ${errorJson.error}`;
 151 |             }
 152 |           } catch (e) {
 153 |             // If parsing fails, use the raw response text
 154 |             if (responseText) {
 155 |               errorMsg += ` - ${responseText}`;
 156 |             }
 157 |           }
 158 | 
 159 |           console.error('[Terminal] Server returned error:', {
 160 |             status: initResponse.status,
 161 |             statusText,
 162 |             responseText,
 163 |           });
 164 | 
 165 |           term.write(`\r\n\x1B[1;3;31m${errorMsg}\x1B[0m\r\n`);
 166 |           setIsConnecting(false);
 167 |           setError(errorMsg);
 168 |           return;
 169 |         }
 170 | 
 171 |         const initResult = await initResponse.json();
 172 |         console.log('[Terminal] Init response:', initResult);
 173 | 
 174 |         if (!initResult.success) {
 175 |           console.error(
 176 |             '[Terminal] Failed to initialize WebSocket server:',
 177 |             initResult.error || initResult.message,
 178 |           );
 179 |           term.write(
 180 |             `\r\n\x1B[1;3;31mFailed to initialize terminal server: ${initResult.error || initResult.message}\x1B[0m\r\n`,
 181 |           );
 182 |           setIsConnecting(false);
 183 |           setError('Failed to initialize terminal server');
 184 |           return;
 185 |         }
 186 | 
 187 |         console.log('[Terminal] WebSocket server initialized successfully');
 188 |         term.write(`\x1B[1;3;33mTerminal server initialized, connecting...\x1B[0m\r\n`);
 189 |       } catch (error) {
 190 |         console.error('[Terminal] Error initializing WebSocket server:', error);
 191 |         term.write(
 192 |           `\r\n\x1B[1;3;31mError initializing terminal server: ${error instanceof Error ? error.message : String(error)}\x1B[0m\r\n`,
 193 |         );
 194 |         setIsConnecting(false);
 195 |         setError('Error initializing terminal server');
 196 |         return;
 197 |       }
 198 | 
 199 |       // Use the Next.js API route for WebSocket connections instead of the standalone server
 200 |       const websocket_protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
 201 |       // Use the same port that the page is being served from
 202 |       const websocket_port = window.location.port;
 203 | 
 204 |       // Redefine connectionId for this scope
 205 |       const testConnectionId = 'test-connection-id';
 206 |       const connectionId = connection.id === 'test' ? testConnectionId : connection.id;
 207 | 
 208 |       const socketUrl = `${websocket_protocol}//${window.location.hostname}:${websocket_port}/api/terminals/ws/${connectionId}`;
 209 |       console.log(`[WebSocket] Connecting to: ${socketUrl}`, {
 210 |         connectionId: connectionId,
 211 |         websocket_protocol: websocket_protocol,
 212 |         hostname: window.location.hostname,
 213 |         websocket_port: websocket_port,
 214 |         originalId: connection.id,
 215 |         usingTestId: connection.id === 'test',
 216 |         connectionType: connection.type,
 217 |         ssh_username: connection.username,
 218 |         ssh_host: connection.ip,
 219 |         ssh_port: connection.port,
 220 |       });
 221 | 
 222 |       try {
 223 |         const socket = new WebSocket(socketUrl);
 224 |         socketRef.current = socket;
 225 | 
 226 |         socket.onopen = () => {
 227 |           console.log('[WebSocket] Connection established successfully');
 228 |           setIsConnecting(false);
 229 | 
 230 |           // Log successful connection
 231 |           console.log('WebSocket connection established', {
 232 |             connectionId: connection.id,
 233 |           });
 234 | 
 235 |           term.write(`\x1B[1;3;33mWebSocket connected, authenticating...\x1B[0m\r\n`);
 236 | 
 237 |           // Detect if target is likely Windows
 238 |           const is_windows =
 239 |             windowsMode !== null
 240 |               ? windowsMode
 241 |               : connection.os_type?.toLowerCase()?.includes('windows') || false;
 242 | 
 243 |           // Additional logging for Windows detection
 244 |           if (is_windows) {
 245 |             console.log('[Terminal] Windows OS detected or selected, will use cmd.exe', {
 246 |               os_type: connection.os_type,
 247 |               ip: connection.ip,
 248 |               manuallySelected: windowsMode !== null,
 249 |             });
 250 |             term.write(
 251 |               `\x1B[1;3;33mWindows system detected, will connect using cmd.exe...\x1B[0m\r\n`,
 252 |             );
 253 |           }
 254 | 
 255 |           // Send authentication message
 256 |           const authMessage = {
 257 |             type: 'auth',
 258 |             connectionType: connection.type,
 259 |             ssh_username: connection.username || connection.user || 'root',
 260 |             ssh_password: connection.password,
 261 |             ssh_host: connection.ip,
 262 |             ssh_port: connection.port,
 263 |             is_windows: is_windows,
 264 |           };
 265 | 
 266 |           console.log('[WebSocket] Sending authentication', {
 267 |             type: 'auth',
 268 |             connectionType: connection.type,
 269 |             ssh_username: connection.username || connection.user || 'root',
 270 |             hasPassword: !!connection.password,
 271 |             ssh_host: connection.ip,
 272 |             ssh_port: connection.port,
 273 |             is_windows: is_windows,
 274 |           });
 275 | 
 276 |           // Log authentication attempt
 277 |           console.log('Sending authentication to server', {
 278 |             connectionId: connection.id,
 279 |             connectionType: connection.type,
 280 |             ssh_username: connection.username,
 281 |           });
 282 | 
 283 |           socket.send(JSON.stringify(authMessage));
 284 | 
 285 |           // Attach WebSocket to terminal - this will handle the SSH connection
 286 |           const attachAddon = new AttachAddon(socket);
 287 |           term.loadAddon(attachAddon);
 288 |         };
 289 | 
 290 |         socket.onerror = (event) => {
 291 |           console.error('[WebSocket] Connection error:', event);
 292 |           setError('Connection error');
 293 |           term.write(
 294 |             `\r\n\x1B[1;3;31mWebSocket error: Could not connect to terminal server\x1B[0m\r\n`,
 295 |           );
 296 |           term.write(
 297 |             `\r\n\x1B[1;3;31mPlease check your network connection and try again.\x1B[0m\r\n`,
 298 |           );
 299 | 
 300 |           toast({
 301 |             variant: 'destructive',
 302 |             title: 'Connection Error',
 303 |             description: 'Failed to connect to terminal server. Please try again later.',
 304 |           });
 305 |         };
 306 | 
 307 |         // Handle JSON messages from the server (like error messages)
 308 |         socket.onmessage = (event) => {
 309 |           try {
 310 |             // Check if data is empty or whitespace before parsing
 311 |             if (!event.data || typeof event.data !== 'string' || !event.data.trim()) {
 312 |               return; // Skip empty messages
 313 |             }
 314 | 
 315 |             // Try to parse as JSON first
 316 |             const data = JSON.parse(event.data);
 317 | 
 318 |             console.log('[WebSocket] Received message:', data);
 319 | 
 320 |             // Handle connection status messages
 321 |             if (data.status === 'connected') {
 322 |               console.log('[SSH] Connection established successfully', data.details);
 323 |               term.write(`\r\n\x1B[1;3;32mSSH connection established successfully.\x1B[0m\r\n`);
 324 | 
 325 |               // Add Windows-specific message if connected to Windows
 326 |               if (data.details?.is_windows) {
 327 |                 term.write(
 328 |                   `\r\n\x1B[1;3;32mConnected to Windows system. Using cmd.exe shell.\x1B[0m\r\n`,
 329 |                 );
 330 |               }
 331 |               return;
 332 |             }
 333 | 
 334 |             // Handle retry with Windows mode message
 335 |             if (data.status === 'retry') {
 336 |               console.log('[SSH] Retrying with Windows mode:', data);
 337 |               term.write(
 338 |                 `\r\n\x1B[1;3;33m${data.message || 'Trying Windows connection mode...'}\x1B[0m\r\n`,
 339 |               );
 340 |               return;
 341 |             }
 342 | 
 343 |             // Handle server banner messages
 344 |             if (data.type === 'banner') {
 345 |               console.log('[SSH] Banner received:', data.message);
 346 |               term.write(`\r\n\x1B[1;3;36mServer message: ${data.message}\x1B[0m\r\n`);
 347 |               return;
 348 |             }
 349 | 
 350 |             // Handle error messages
 351 |             if (data.error) {
 352 |               console.error('[SSH] Error:', data.error);
 353 | 
 354 |               console.error('SSH connection error from server', {
 355 |                 connectionId: connection.id,
 356 |                 error: data.error,
 357 |                 errorType: data.errorType || 'UNKNOWNerror',
 358 |               });
 359 | 
 360 |               // Customize toast based on error type
 361 |               let toastTitle = 'SSH Connection Error';
 362 |               let toastDescription = data.error || 'Failed to establish SSH connection';
 363 | 
 364 |               if (data.errorType === 'SSH_AUTHerror') {
 365 |                 toastTitle = 'Authentication Failed';
 366 |                 toastDescription = 'Invalid username or password. Please check your credentials.';
 367 |               } else if (data.errorType === 'SSH_NETWORKerror') {
 368 |                 toastTitle = 'Network Error';
 369 |                 toastDescription = `Could not connect to ${data.details?.ssh_host}:${data.details?.ssh_port}. Server may be unreachable.`;
 370 |               } else if (data.errorType === 'SSH_SHELLerror') {
 371 |                 toastTitle = 'Shell Error';
 372 |                 toastDescription = 'Failed to open shell session on the remote server.';
 373 |               } else if (data.errorType === 'SSH_HANDSHAKE_TIMEOUT') {
 374 |                 toastTitle = 'Handshake Timeout';
 375 |                 toastDescription = `SSH handshake timed out. Server at ${data.details?.ssh_host}:${data.details?.ssh_port} might be unreachable or incompatible.`;
 376 |               }
 377 | 
 378 |               // Show toast notification for SSH error
 379 |               toast({
 380 |                 variant: 'destructive',
 381 |                 title: toastTitle,
 382 |                 description: toastDescription,
 383 |               });
 384 | 
 385 |               // Display error in terminal with appropriate message
 386 |               term.write(`\r\n\x1B[1;3;31mError: ${data.error}\x1B[0m\r\n`);
 387 | 
 388 |               if (data.errorType === 'SSH_AUTHerror') {
 389 |                 term.write(
 390 |                   `\r\n\x1B[1;3;31mAuthentication failed. Please check your username and password.\x1B[0m\r\n`,
 391 |                 );
 392 |               } else if (data.errorType === 'SSH_NETWORKerror') {
 393 |                 term.write(
 394 |                   `\r\n\x1B[1;3;31mCould not connect to ${data.details?.ssh_host}:${data.details?.ssh_port}. Server may be unreachable.\x1B[0m\r\n`,
 395 |                 );
 396 |               } else if (data.errorType === 'SSH_SHELLerror') {
 397 |                 term.write(
 398 |                   `\r\n\x1B[1;3;31mFailed to open shell session on the remote server.\x1B[0m\r\n`,
 399 |                 );
 400 |               } else if (data.errorType === 'SSH_HANDSHAKE_TIMEOUT') {
 401 |                 term.write(
 402 |                   `\r\n\x1B[1;3;31mSSH handshake timed out. This could be due to:\x1B[0m\r\n`,
 403 |                 );
 404 |                 term.write(
 405 |                   `\r\n\x1B[1;3;31m- A firewall blocking the connection\x1B[0m\r\n` +
 406 |                     `\r\n\x1B[1;3;31m- The server not running SSH on port ${data.details?.ssh_port}\x1B[0m\r\n` +
 407 |                     `\r\n\x1B[1;3;31m- Network issues between the server and client\x1B[0m\r\n`,
 408 |                 );
 409 |               } else {
 410 |                 term.write(
 411 |                   `\r\n\x1B[1;3;31mPlease check your connection settings and try again.\x1B[0m\r\n`,
 412 |                 );
 413 |               }
 414 |             }
 415 |           } catch (e) {
 416 |             // Not JSON data, will be handled by the AttachAddon
 417 |             // This is normal for terminal output
 418 |           }
 419 |         };
 420 | 
 421 |         socket.onclose = (event) => {
 422 |           console.log('[WebSocket] Connection closed', {
 423 |             code: event.code,
 424 |             reason: event.reason,
 425 |             wasClean: event.wasClean,
 426 |             connectionId: connection.id,
 427 |           });
 428 | 
 429 |           console.log('Terminal WebSocket closed', {
 430 |             connectionId: connection.id,
 431 |           });
 432 | 
 433 |           // Show different messages based on close code
 434 |           if (event.code === 1006) {
 435 |             // Abnormal closure
 436 |             term.write(
 437 |               '\r\n\x1B[1;3;31mConnection closed abnormally. The server may be unavailable.\x1B[0m\r\n',
 438 |             );
 439 | 
 440 |             // Show toast for abnormal closure
 441 |             toast({
 442 |               variant: 'destructive',
 443 |               title: 'Connection Lost',
 444 |               description:
 445 |                 'The WebSocket connection was closed abnormally. The server may be unavailable.',
 446 |             });
 447 |           } else {
 448 |             term.write('\r\n\x1B[1;3;33mConnection closed.\x1B[0m\r\n');
 449 |           }
 450 |         };
 451 | 
 452 |         // Handle window resize
 453 |         const handleResize = () => {
 454 |           try {
 455 |             if (fitAddon && term && term.element) {
 456 |               fitAddon.fit();
 457 | 
 458 |               // Add small delay to ensure dimensions are updated after fit
 459 |               setTimeout(() => {
 460 |                 const dimensions = { cols: term.cols, rows: term.rows };
 461 | 
 462 |                 // Log terminal dimensions for debugging
 463 |                 console.log('[Terminal] Dimensions after resize:', dimensions);
 464 | 
 465 |                 console.log('Terminal resized', {
 466 |                   connectionId: connection.id,
 467 |                   dimensions: dimensions || { cols: 0, rows: 0 },
 468 |                 });
 469 | 
 470 |                 if (socket.readyState === WebSocket.OPEN) {
 471 |                   socket.send(
 472 |                     JSON.stringify({
 473 |                       type: 'resize',
 474 |                       cols: term.cols,
 475 |                       rows: term.rows,
 476 |                     }),
 477 |                   );
 478 |                 }
 479 |               }, 50);
 480 |             }
 481 |           } catch (error) {
 482 |             console.error('[Terminal] Error during resize:', error);
 483 |           }
 484 |         };
 485 | 
 486 |         window.addEventListener('resize', handleResize);
 487 | 
 488 |         // Cleanup
 489 |         return () => {
 490 |           window.removeEventListener('resize', handleResize);
 491 |           if (socket && socket.readyState !== WebSocket.CLOSED) {
 492 |             socket.close();
 493 |           }
 494 |           term.dispose();
 495 |         };
 496 |       } catch (error) {
 497 |         console.error('[WebSocket] Connection error:', error);
 498 |         setError('Connection error');
 499 |         term.write(
 500 |           `\r\n\x1B[1;3;31mWebSocket error: Could not connect to terminal server\x1B[0m\r\n`,
 501 |         );
 502 |         term.write(
 503 |           `\r\n\x1B[1;3;31mPlease check your network connection and try again.\x1B[0m\r\n`,
 504 |         );
 505 | 
 506 |         toast({
 507 |           variant: 'destructive',
 508 |           title: 'Connection Error',
 509 |           description: 'Failed to connect to terminal server. Please try again later.',
 510 |         });
 511 |       }
 512 |     };
 513 | 
 514 |     initializeTerminal();
 515 |   }, [connection, toast]);
 516 | 
 517 |   return (
 518 |     <div className="w-full h-full flex flex-col">
 519 |       {isConnecting && (
 520 |         <div className="absolute inset-0 flex items-center justify-center bg-background/80 z-10">
 521 |           <div className="flex flex-col items-center space-y-4">
 522 |             <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent"></div>
 523 |             <p className="text-sm text-muted-foreground">Initializing terminal connection...</p>
 524 | 
 525 |             {/* Windows mode toggle - only show during connection */}
 526 |             <div className="flex items-center mt-4 gap-2">
 527 |               <span className="text-sm text-muted-foreground">Windows Mode:</span>
 528 |               <button
 529 |                 className={`px-3 py-1 text-xs rounded ${windowsMode === true ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-800'}`}
 530 |                 onClick={() => setWindowsMode(true)}
 531 |               >
 532 |                 ON
 533 |               </button>
 534 |               <button
 535 |                 className={`px-3 py-1 text-xs rounded ${windowsMode === false ? 'bg-red-600 text-white' : 'bg-gray-200 text-gray-800'}`}
 536 |                 onClick={() => setWindowsMode(false)}
 537 |               >
 538 |                 OFF
 539 |               </button>
 540 |               <button
 541 |                 className={`px-3 py-1 text-xs rounded ${windowsMode === null ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800'}`}
 542 |                 onClick={() => setWindowsMode(null)}
 543 |               >
 544 |                 Auto
 545 |               </button>
 546 |             </div>
 547 |           </div>
 548 |         </div>
 549 |       )}
 550 |       <div
 551 |         ref={terminalRef}
 552 |         className="w-full h-[calc(100vh-4rem)] rounded-lg overflow-hidden border border-border"
 553 |       />
 554 |     </div>
 555 |   );
 556 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/terminals/[hostName]/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { AlertCircle } from 'lucide-react';
   4 | import { useRouter, useParams } from 'next/navigation';
   5 | import { useEffect, useState, useRef, useCallback } from 'react';
   6 | 
   7 | import { Alert, AlertDescription, AlertTitle } from '@/components/shadcn/alert';
   8 | import { useToast } from '@/components/shadcn/use-toast';
   9 | 
  10 | import { Terminal } from '../_components/Terminal';
  11 | 
  12 | interface MachineConnection {
  13 |   id: string;
  14 |   name: string;
  15 |   ip: string;
  16 |   type: string;
  17 |   port: number;
  18 |   username: string;
  19 |   password: string;
  20 |   host?: string;
  21 |   user?: string;
  22 |   os_type?: string;
  23 | }
  24 | 
  25 | export default function TerminalPage() {
  26 |   const router = useRouter();
  27 |   const params = useParams();
  28 |   const [connections, setConnections] = useState<MachineConnection[]>([]);
  29 |   const [error, setError] = useState<string | null>(null);
  30 |   const [loading, setLoading] = useState(true);
  31 |   const initializationAttemptedRef = useRef<boolean>(false);
  32 |   const { toast } = useToast();
  33 | 
  34 |   // Get host name from URL params
  35 |   const hostName = params.hostName as string;
  36 | 
  37 |   // Get count from URL if present (for multiple terminals)
  38 |   const count =
  39 |     typeof window !== 'undefined' ? new URLSearchParams(window.location.search).get('count') : null;
  40 | 
  41 |   const terminalCount = count ? parseInt(count, 10) : 1;
  42 | 
  43 |   // Fetch host by name
  44 |   const fetchMachineByName = async (name: string) => {
  45 |     try {
  46 |       // First check if we have the host data in session storage
  47 |       if (typeof window !== 'undefined') {
  48 |         const storedHost = sessionStorage.getItem('currentHost');
  49 |         if (storedHost) {
  50 |           const parsedHost = JSON.parse(storedHost);
  51 |           // Verify this is the correct host
  52 |           if (parsedHost.name.toLowerCase() === name.toLowerCase()) {
  53 |             console.log('Using host data from session storage');
  54 |             return parsedHost;
  55 |           }
  56 |         }
  57 |       }
  58 | 
  59 |       console.log(`Fetching host by name: ${name}`);
  60 |       // If not in session storage, fetch from API
  61 |       const response = await fetch(`/api/hosts/byName/${name}`);
  62 | 
  63 |       if (!response.ok) {
  64 |         const errorData = await response.json();
  65 |         console.error('Error response from API:', errorData);
  66 |         throw new Error(errorData.error || 'Failed to fetch host');
  67 |       }
  68 | 
  69 |       const data = await response.json();
  70 |       if (!data.success || !data.data) {
  71 |         console.error('Invalid host data returned:', data);
  72 |         throw new Error('Invalid host data');
  73 |       }
  74 | 
  75 |       console.log('Host data fetched successfully:', data.data.name);
  76 |       return data.data;
  77 |     } catch (error) {
  78 |       console.error('Error fetching host:', error);
  79 |       throw error;
  80 |     }
  81 |   };
  82 | 
  83 |   // Fetch host details
  84 |   const fetchMachineDetails = async (id: string) => {
  85 |     try {
  86 |       const response = await fetch(`/api/hosts/${id}`);
  87 |       if (!response.ok) {
  88 |         throw new Error('Failed to fetch host details');
  89 |       }
  90 |       const data = await response.json();
  91 |       if (!data.success || !data.data) {
  92 |         throw new Error('Invalid host data');
  93 |       }
  94 |       return data.data;
  95 |     } catch (error) {
  96 |       console.error('Error fetching host details:', error);
  97 |       return null;
  98 |     }
  99 |   };
 100 | 
 101 |   // Initialize terminals
 102 |   const initializeTerminals = useCallback(async () => {
 103 |     if (error) {
 104 |       initializationAttemptedRef.current = false;
 105 |     }
 106 | 
 107 |     // Prevent duplicate initialization
 108 |     if (initializationAttemptedRef.current) {
 109 |       console.log('Preventing duplicate terminal initialization');
 110 |       return;
 111 |     }
 112 | 
 113 |     initializationAttemptedRef.current = true;
 114 |     setLoading(true);
 115 |     setError(null);
 116 | 
 117 |     try {
 118 |       // For single terminal case
 119 |       if (terminalCount === 1) {
 120 |         const host = await fetchMachineByName(hostName);
 121 |         if (!host) {
 122 |           throw new Error(`Host not found: ${hostName}`);
 123 |         }
 124 |         setConnections([host]);
 125 |         return;
 126 |       }
 127 | 
 128 |       // For multiple terminals case (from session storage)
 129 |       const sessionData = sessionStorage.getItem('selectedMachines');
 130 |       if (!sessionData) {
 131 |         throw new Error('No hosts selected for multiple terminals view');
 132 |       }
 133 | 
 134 |       const hostIds = JSON.parse(sessionData);
 135 |       if (!Array.isArray(hostIds) || hostIds.length === 0) {
 136 |         throw new Error('Invalid host selection data');
 137 |       }
 138 | 
 139 |       // Limit to max 4 terminals
 140 |       const limitedIds = hostIds.slice(0, 4);
 141 | 
 142 |       // Fetch all hosts in parallel
 143 |       const hostPromises = limitedIds.map((id) => fetchMachineDetails(id));
 144 | 
 145 |       const hosts = await Promise.all(hostPromises);
 146 |       setConnections(hosts);
 147 |     } catch (error) {
 148 |       const message = error instanceof Error ? error.message : 'Failed to initialize terminals';
 149 |       setError(message);
 150 |     } finally {
 151 |       setLoading(false);
 152 |     }
 153 |   }, [hostName, terminalCount, fetchMachineByName, fetchMachineDetails, error]);
 154 | 
 155 |   useEffect(() => {
 156 |     initializeTerminals();
 157 |   }, [initializeTerminals]);
 158 | 
 159 |   if (error) {
 160 |     return (
 161 |       <div className="flex items-center justify-center h-screen bg-background">
 162 |         <div className="text-center p-8 bg-card border border-border rounded-lg shadow-lg max-w-md -mt-32">
 163 |           <Alert variant="destructive" className="mb-4">
 164 |             <AlertCircle className="h-4 w-4" />
 165 |             <AlertTitle>Connection Error</AlertTitle>
 166 |             <AlertDescription>{error}</AlertDescription>
 167 |           </Alert>
 168 |           <div className="flex justify-center space-x-4">
 169 |             <button
 170 |               className="px-4 py-2 bg-secondary text-secondary-foreground rounded hover:bg-secondary/90"
 171 |               onClick={() => router.back()}
 172 |             >
 173 |               Cancel
 174 |             </button>
 175 |             <button
 176 |               className="px-4 py-2 bg-primary text-primary-foreground rounded hover:bg-primary/90"
 177 |               onClick={() => {
 178 |                 setError(null);
 179 |                 setLoading(true);
 180 |                 initializeTerminals();
 181 |               }}
 182 |             >
 183 |               Retry
 184 |             </button>
 185 |           </div>
 186 |         </div>
 187 |       </div>
 188 |     );
 189 |   }
 190 | 
 191 |   if (loading || connections.length === 0) {
 192 |     return (
 193 |       <div className="flex items-center justify-center h-screen">
 194 |         <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
 195 |       </div>
 196 |     );
 197 |   }
 198 | 
 199 |   return (
 200 |     <div className="h-screen bg-background p-4 flex flex-col">
 201 |       <div className="flex items-center mb-4">
 202 |         <button
 203 |           onClick={() => router.back()}
 204 |           className="flex items-center text-sm font-medium text-muted-foreground hover:text-foreground mr-3"
 205 |         >
 206 |           <svg
 207 |             xmlns="http://www.w3.org/2000/svg"
 208 |             width="16"
 209 |             height="16"
 210 |             viewBox="0 0 24 24"
 211 |             fill="none"
 212 |             stroke="currentColor"
 213 |             strokeWidth="2"
 214 |             strokeLinecap="round"
 215 |             strokeLinejoin="round"
 216 |           >
 217 |             <path d="M19 12H5M12 19l-7-7 7-7" />
 218 |           </svg>
 219 |         </button>
 220 |         <h1 className="text-xl font-semibold">Terminals</h1>
 221 |       </div>
 222 |       <div
 223 |         className={`grid gap-4 flex-1 ${
 224 |           connections.length === 1
 225 |             ? 'grid-cols-1'
 226 |             : connections.length === 2
 227 |               ? 'grid-cols-2'
 228 |               : connections.length === 3
 229 |                 ? 'grid-cols-3'
 230 |                 : 'grid-cols-2 grid-rows-2'
 231 |         }`}
 232 |       >
 233 |         {connections.map((connection) => (
 234 |           <div
 235 |             key={connection.id}
 236 |             className="border border-border rounded-lg overflow-hidden flex flex-col"
 237 |           >
 238 |             <div className="bg-muted px-4 py-2 text-sm font-medium border-b border-border">
 239 |               {connection.name} ({connection.ip})
 240 |             </div>
 241 |             <div className="flex-1">
 242 |               <Terminal connection={connection} />
 243 |             </div>
 244 |           </div>
 245 |         ))}
 246 |       </div>
 247 |     </div>
 248 |   );
 249 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/tests/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useParams } from 'next/navigation';
   4 | import { useTranslations } from 'next-intl';
   5 | 
   6 | export default function TestsPage() {
   7 |   const _params = useParams();
   8 |   const t = useTranslations('Tests');
   9 | 
  10 |   return (
  11 |     <div className="container mx-auto px-4 py-8">
  12 |       <h1 className="text-3xl font-bold mb-6">{t('title')}</h1>
  13 |       <div className="grid gap-6">
  14 |         {/* Tests list will go here */}
  15 |         <div className="p-6 bg-card rounded-lg shadow">
  16 |           <h2 className="text-xl font-semibold mb-4">{t('testsList')}</h2>
  17 |           <p className="text-muted-foreground">{t('description')}</p>
  18 |         </div>
  19 |       </div>
  20 |     </div>
  21 |   );
  22 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/scripts/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useParams } from 'next/navigation';
   4 | import { useTranslations } from 'next-intl';
   5 | 
   6 | export default function ScriptsPage() {
   7 |   const _params = useParams();
   8 |   const t = useTranslations('Scripts');
   9 | 
  10 |   return (
  11 |     <div className="container mx-auto px-4 py-8">
  12 |       <h1 className="text-3xl font-bold mb-6">{t('title')}</h1>
  13 |       <div className="grid gap-6">
  14 |         {/* Scripts list will go here */}
  15 |         <div className="p-6 bg-card rounded-lg shadow">
  16 |           <h2 className="text-xl font-semibold mb-4">{t('scriptsList')}</h2>
  17 |           <p className="text-muted-foreground">{t('description')}</p>
  18 |         </div>
  19 |       </div>
  20 |     </div>
  21 |   );
  22 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/projects/page.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { redirect } from 'next/navigation';
   4 | import { useParams } from 'next/navigation';
   5 | 
   6 | export default function TenantProjectsPage() {
   7 |   const params = useParams();
   8 |   const locale = params.locale as string;
   9 |   
  10 |   // Redirect to the projects page outside the tenant layout
  11 |   redirect(`/${locale}/projects`);
  12 | } 

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/page.tsx`:

```tsx
   1 | import React from 'react';
   2 | import DeploymentView from './_components/DeploymentView';
   3 | 
   4 | const DeploymentPage = () => {
   5 |   return (
   6 |     <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
   7 |       <DeploymentView />
   8 |     </div>
   9 |   );
  10 | };
  11 | 
  12 | export default DeploymentPage;

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/DeploymentForm.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React, { useState } from 'react';
   4 | import { Calendar, Clock, FileText, Save } from 'lucide-react';
   5 | import { Project, Script, Host } from './types';
   6 | import ScriptSelector from './ScriptSelector';
   7 | import HostSelector from './HostSelector';
   8 | 
   9 | interface DeploymentFormProps {
  10 |   projects: Project[];
  11 |   allHosts: Host[];
  12 |   onSubmit: (formData: {
  13 |     name: string;
  14 |     projectId: string;
  15 |     description: string;
  16 |     scheduledTime: string | null;
  17 |     selectedScripts: string[];
  18 |     selectedHosts: string[];
  19 |   }) => void;
  20 | }
  21 | 
  22 | const DeploymentForm = ({ projects, allHosts, onSubmit }: DeploymentFormProps) => {
  23 |   const [name, setName] = useState('');
  24 |   const [projectId, setProjectId] = useState('');
  25 |   const [description, setDescription] = useState('');
  26 |   const [scheduledTime, setScheduledTime] = useState<string | null>(null);
  27 |   const [selectedScripts, setSelectedScripts] = useState<string[]>([]);
  28 |   const [selectedHosts, setSelectedHosts] = useState<string[]>([]);
  29 |   const [scheduleType, setScheduleType] = useState<'now' | 'later'>('now');
  30 | 
  31 |   // Get selected project
  32 |   const selectedProject = projects.find((p) => p.id.toString() === projectId);
  33 | 
  34 |   // Get scripts for selected project
  35 |   const availableScripts: Script[] = selectedProject?.scripts || [];
  36 | 
  37 |   // Handle form submission
  38 |   const handleSubmit = (e: React.FormEvent) => {
  39 |     e.preventDefault();
  40 | 
  41 |     onSubmit({
  42 |       name,
  43 |       projectId,
  44 |       description,
  45 |       scheduledTime: scheduleType === 'later' ? scheduledTime : null,
  46 |       selectedScripts,
  47 |       selectedHosts,
  48 |     });
  49 |   };
  50 | 
  51 |   // Handle script selection/deselection
  52 |   const handleScriptToggle = (scriptId: string) => {
  53 |     setSelectedScripts((prev) =>
  54 |       prev.includes(scriptId) ? prev.filter((id) => id !== scriptId) : [...prev, scriptId],
  55 |     );
  56 |   };
  57 | 
  58 |   // Handle host selection/deselection
  59 |   const handleHostToggle = (hostId: string) => {
  60 |     setSelectedHosts((prev) =>
  61 |       prev.includes(hostId) ? prev.filter((id) => id !== hostId) : [...prev, hostId],
  62 |     );
  63 |   };
  64 | 
  65 |   // Validation
  66 |   const isFormValid =
  67 |     name.trim() !== '' &&
  68 |     projectId !== '' &&
  69 |     selectedScripts.length > 0 &&
  70 |     selectedHosts.length > 0 &&
  71 |     (scheduleType === 'now' || (scheduledTime && new Date(scheduledTime) > new Date()));
  72 | 
  73 |   return (
  74 |     <form onSubmit={handleSubmit} className="space-y-6">
  75 |       <div>
  76 |         <label
  77 |           htmlFor="name"
  78 |           className="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300"
  79 |         >
  80 |           Deployment Name
  81 |         </label>
  82 |         <input
  83 |           type="text"
  84 |           id="name"
  85 |           className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
  86 |           value={name}
  87 |           onChange={(e) => setName(e.target.value)}
  88 |           placeholder="Enter deployment name"
  89 |           required
  90 |         />
  91 |       </div>
  92 | 
  93 |       <div>
  94 |         <label
  95 |           htmlFor="project"
  96 |           className="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300"
  97 |         >
  98 |           Project
  99 |         </label>
 100 |         <select
 101 |           id="project"
 102 |           className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
 103 |           value={projectId}
 104 |           onChange={(e) => {
 105 |             setProjectId(e.target.value);
 106 |             setSelectedScripts([]); // Reset selected scripts when project changes
 107 |           }}
 108 |           required
 109 |         >
 110 |           <option value="">Select a project</option>
 111 |           {projects.map((project) => (
 112 |             <option key={project.id} value={project.id.toString()}>
 113 |               {project.name}
 114 |             </option>
 115 |           ))}
 116 |         </select>
 117 |       </div>
 118 | 
 119 |       <div>
 120 |         <label
 121 |           htmlFor="description"
 122 |           className="block text-sm font-medium mb-1 flex items-center text-gray-700 dark:text-gray-300"
 123 |         >
 124 |           <FileText size={16} className="mr-1" />
 125 |           Description
 126 |         </label>
 127 |         <textarea
 128 |           id="description"
 129 |           className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
 130 |           value={description}
 131 |           onChange={(e) => setDescription(e.target.value)}
 132 |           placeholder="Enter deployment description"
 133 |           rows={3}
 134 |         />
 135 |       </div>
 136 | 
 137 |       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 138 |         <ScriptSelector
 139 |           availableScripts={availableScripts}
 140 |           selectedScripts={selectedScripts}
 141 |           onScriptToggle={handleScriptToggle}
 142 |           isProjectSelected={!!selectedProject}
 143 |         />
 144 | 
 145 |         <HostSelector
 146 |           availableHosts={allHosts}
 147 |           selectedHosts={selectedHosts}
 148 |           onHostToggle={handleHostToggle}
 149 |         />
 150 |       </div>
 151 | 
 152 |       <div>
 153 |         <div className="block text-sm font-medium mb-2 flex items-center text-gray-700 dark:text-gray-300">
 154 |           <Calendar size={16} className="mr-1" />
 155 |           Schedule
 156 |         </div>
 157 |         <div className="flex items-center space-x-4 mb-3">
 158 |           <label className="inline-flex items-center text-gray-700 dark:text-gray-300">
 159 |             <input
 160 |               type="radio"
 161 |               className="form-radio text-blue-600"
 162 |               checked={scheduleType === 'now'}
 163 |               onChange={() => setScheduleType('now')}
 164 |             />
 165 |             <span className="ml-2">Deploy now</span>
 166 |           </label>
 167 |           <label className="inline-flex items-center text-gray-700 dark:text-gray-300">
 168 |             <input
 169 |               type="radio"
 170 |               className="form-radio text-blue-600"
 171 |               checked={scheduleType === 'later'}
 172 |               onChange={() => setScheduleType('later')}
 173 |             />
 174 |             <span className="ml-2">Schedule for later</span>
 175 |           </label>
 176 |         </div>
 177 | 
 178 |         {scheduleType === 'later' && (
 179 |           <div className="flex items-center">
 180 |             <div className="relative flex-1">
 181 |               <Clock
 182 |                 className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500"
 183 |                 size={16}
 184 |               />
 185 |               <input
 186 |                 type="datetime-local"
 187 |                 className="w-full pl-9 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
 188 |                 value={scheduledTime || ''}
 189 |                 onChange={(e) => setScheduledTime(e.target.value)}
 190 |                 min={new Date().toISOString().slice(0, 16)}
 191 |                 required={scheduleType === 'later'}
 192 |               />
 193 |             </div>
 194 |           </div>
 195 |         )}
 196 |       </div>
 197 | 
 198 |       <div className="mt-4">
 199 |         <button
 200 |           type="submit"
 201 |           className={`flex items-center justify-center w-full py-2 px-4 rounded-md text-white ${
 202 |             isFormValid
 203 |               ? 'bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800'
 204 |               : 'bg-blue-300 dark:bg-blue-800/50 cursor-not-allowed'
 205 |           }`}
 206 |           disabled={!isFormValid}
 207 |         >
 208 |           <Save size={16} className="mr-2" />
 209 |           {scheduleType === 'now' ? 'Deploy Now' : 'Schedule Deployment'}
 210 |         </button>
 211 |       </div>
 212 |     </form>
 213 |   );
 214 | };
 215 | 
 216 | export default DeploymentForm;

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/utils.ts`:

```ts
   1 | // Helper functions for deployment components
   2 | 
   3 | /**
   4 |  * Format a date string for display
   5 |  */
   6 | export const formatDate = (dateString: string | null) => {
   7 |   if (!dateString) return 'N/A';
   8 |   const date = new Date(dateString);
   9 |   return new Intl.DateTimeFormat('en-US', {
  10 |     year: 'numeric',
  11 |     month: 'short',
  12 |     day: 'numeric',
  13 |     hour: '2-digit',
  14 |     minute: '2-digit',
  15 |   }).format(date);
  16 | };
  17 | 
  18 | /**
  19 |  * Format a date string with seconds for detailed display
  20 |  */
  21 | export const formatDetailedDate = (dateString: string | null) => {
  22 |   if (!dateString) return 'N/A';
  23 |   const date = new Date(dateString);
  24 |   return new Intl.DateTimeFormat('en-US', {
  25 |     year: 'numeric',
  26 |     month: 'short',
  27 |     day: 'numeric',
  28 |     hour: '2-digit',
  29 |     minute: '2-digit',
  30 |     second: '2-digit',
  31 |   }).format(date);
  32 | };
  33 | 
  34 | /**
  35 |  * Calculate duration between two dates
  36 |  */
  37 | export const calculateDuration = (startTime: string | null, endTime: string | null) => {
  38 |   if (!startTime || !endTime) return 'N/A';
  39 | 
  40 |   const start = new Date(startTime);
  41 |   const end = new Date(endTime);
  42 |   const durationMs = end.getTime() - start.getTime();
  43 | 
  44 |   const seconds = Math.floor(durationMs / 1000) % 60;
  45 |   const minutes = Math.floor(durationMs / 1000 / 60) % 60;
  46 |   const hours = Math.floor(durationMs / 1000 / 60 / 60);
  47 | 
  48 |   return `${hours > 0 ? `${hours}h ` : ''}${minutes}m ${seconds}s`;
  49 | };

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/data.ts`:

```ts
   1 | // Sample data for development and testing
   2 | 
   3 | import { Project, Host, Deployment } from './types';
   4 | 
   5 | // Sample projects data
   6 | export const sampleProjects: Project[] = [
   7 |   {
   8 |     id: 1,
   9 |     name: 'Daily Data Processing',
  10 |     scripts: [
  11 |       { id: 1, name: 'process_data.py', path: '/scripts/process_data.py' },
  12 |       { id: 2, name: 'generate_report.py', path: '/scripts/generate_report.py' },
  13 |       { id: 3, name: 'fetch_api_data.js', path: '/src/fetch_api_data.js' },
  14 |     ],
  15 |   },
  16 |   {
  17 |     id: 2,
  18 |     name: 'Weekly Maintenance',
  19 |     scripts: [
  20 |       { id: 4, name: 'archive_logs.sh', path: '/maintenance/archive_logs.sh' },
  21 |       { id: 5, name: 'backup_db.py', path: '/maintenance/backup_db.py' },
  22 |     ],
  23 |   },
  24 |   {
  25 |     id: 3,
  26 |     name: 'Monthly Reports',
  27 |     scripts: [
  28 |       { id: 6, name: 'generate_monthly_report.py', path: '/reports/generate_monthly_report.py' },
  29 |       { id: 7, name: 'send_alerts.py', path: '/alerting/send_alerts.py' },
  30 |     ],
  31 |   },
  32 | ];
  33 | 
  34 | // Sample hosts data
  35 | export const sampleHosts: Host[] = [
  36 |   { id: 1, name: 'Production Web Server', ip: '192.168.1.10', environment: 'Production' },
  37 |   { id: 2, name: 'Production DB Server', ip: '192.168.1.11', environment: 'Production' },
  38 |   { id: 3, name: 'Staging Server', ip: '192.168.2.10', environment: 'Staging' },
  39 |   { id: 4, name: 'Dev Environment', ip: '192.168.3.10', environment: 'Development' },
  40 |   { id: 5, name: 'Test Server', ip: '192.168.3.11', environment: 'Testing' },
  41 | ];
  42 | 
  43 | // Sample deployments data
  44 | export const sampleDeployments: Deployment[] = [
  45 |   {
  46 |     id: 1,
  47 |     name: 'Daily ETL Process - March 3',
  48 |     projectName: 'Daily Data Processing',
  49 |     projectId: 1,
  50 |     status: 'success',
  51 |     createdBy: 'admin@example.com',
  52 |     startTime: '2025-03-03T08:00:00.000Z',
  53 |     endTime: '2025-03-03T08:15:30.000Z',
  54 |     scripts: [
  55 |       {
  56 |         id: 1,
  57 |         name: 'process_data.py',
  58 |         path: '/scripts/process_data.py',
  59 |         status: 'success',
  60 |         duration: '2m 10s',
  61 |       },
  62 |       {
  63 |         id: 2,
  64 |         name: 'generate_report.py',
  65 |         path: '/scripts/generate_report.py',
  66 |         status: 'success',
  67 |         duration: '5m 45s',
  68 |       },
  69 |     ],
  70 |     hosts: [
  71 |       { id: 1, name: 'Production Web Server', ip: '192.168.1.10', environment: 'Production' },
  72 |     ],
  73 |     logs: [
  74 |       { timestamp: '2025-03-03T08:00:00.000Z', level: 'INFO', message: 'Deployment started' },
  75 |       { timestamp: '2025-03-03T08:00:05.000Z', level: 'INFO', message: 'Cloning repository' },
  76 |       { timestamp: '2025-03-03T08:00:30.000Z', level: 'INFO', message: 'Running process_data.py' },
  77 |       {
  78 |         timestamp: '2025-03-03T08:02:40.000Z',
  79 |         level: 'INFO',
  80 |         message: 'process_data.py completed successfully',
  81 |       },
  82 |       {
  83 |         timestamp: '2025-03-03T08:02:45.000Z',
  84 |         level: 'INFO',
  85 |         message: 'Running generate_report.py',
  86 |       },
  87 |       {
  88 |         timestamp: '2025-03-03T08:08:30.000Z',
  89 |         level: 'INFO',
  90 |         message: 'generate_report.py completed successfully',
  91 |       },
  92 |       {
  93 |         timestamp: '2025-03-03T08:15:30.000Z',
  94 |         level: 'INFO',
  95 |         message: 'Deployment completed successfully',
  96 |       },
  97 |     ],
  98 |   },
  99 |   {
 100 |     id: 2,
 101 |     name: 'Weekly Maintenance - March 2',
 102 |     projectName: 'Weekly Maintenance',
 103 |     projectId: 2,
 104 |     status: 'failed',
 105 |     createdBy: 'admin@example.com',
 106 |     startTime: '2025-03-02T01:00:00.000Z',
 107 |     endTime: '2025-03-02T01:25:10.000Z',
 108 |     scripts: [
 109 |       {
 110 |         id: 4,
 111 |         name: 'archive_logs.sh',
 112 |         path: '/maintenance/archive_logs.sh',
 113 |         status: 'success',
 114 |         duration: '1m 30s',
 115 |       },
 116 |       {
 117 |         id: 5,
 118 |         name: 'backup_db.py',
 119 |         path: '/maintenance/backup_db.py',
 120 |         status: 'failed',
 121 |         duration: '10m 40s',
 122 |       },
 123 |     ],
 124 |     hosts: [{ id: 2, name: 'Production DB Server', ip: '192.168.1.11', environment: 'Production' }],
 125 |     logs: [
 126 |       { timestamp: '2025-03-02T01:00:00.000Z', level: 'INFO', message: 'Deployment started' },
 127 |       { timestamp: '2025-03-02T01:00:15.000Z', level: 'INFO', message: 'Running archive_logs.sh' },
 128 |       {
 129 |         timestamp: '2025-03-02T01:01:45.000Z',
 130 |         level: 'INFO',
 131 |         message: 'archive_logs.sh completed successfully',
 132 |       },
 133 |       { timestamp: '2025-03-02T01:02:00.000Z', level: 'INFO', message: 'Running backup_db.py' },
 134 |       {
 135 |         timestamp: '2025-03-02T01:12:40.000Z',
 136 |         level: 'ERROR',
 137 |         message: 'Database connection timed out',
 138 |       },
 139 |       {
 140 |         timestamp: '2025-03-02T01:12:50.000Z',
 141 |         level: 'ERROR',
 142 |         message: 'backup_db.py failed with exit code 1',
 143 |       },
 144 |       { timestamp: '2025-03-02T01:13:00.000Z', level: 'ERROR', message: 'Deployment failed' },
 145 |     ],
 146 |   },
 147 |   {
 148 |     id: 3,
 149 |     name: 'Monthly Reports - March 1',
 150 |     projectName: 'Monthly Reports',
 151 |     projectId: 3,
 152 |     status: 'in_progress',
 153 |     createdBy: 'admin@example.com',
 154 |     startTime: '2025-03-01T23:00:00.000Z',
 155 |     endTime: null,
 156 |     scripts: [
 157 |       {
 158 |         id: 6,
 159 |         name: 'generate_monthly_report.py',
 160 |         path: '/reports/generate_monthly_report.py',
 161 |         status: 'in_progress',
 162 |         duration: '10m',
 163 |       },
 164 |       {
 165 |         id: 7,
 166 |         name: 'send_alerts.py',
 167 |         path: '/alerting/send_alerts.py',
 168 |         status: 'pending',
 169 |         duration: null,
 170 |       },
 171 |     ],
 172 |     hosts: [{ id: 3, name: 'Staging Server', ip: '192.168.2.10', environment: 'Staging' }],
 173 |     logs: [
 174 |       { timestamp: '2025-03-01T23:00:00.000Z', level: 'INFO', message: 'Deployment started' },
 175 |       {
 176 |         timestamp: '2025-03-01T23:00:15.000Z',
 177 |         level: 'INFO',
 178 |         message: 'Running generate_monthly_report.py',
 179 |       },
 180 |     ],
 181 |   },
 182 |   {
 183 |     id: 4,
 184 |     name: 'Test Deployment - Feb 29',
 185 |     projectName: 'Daily Data Processing',
 186 |     projectId: 1,
 187 |     status: 'pending',
 188 |     createdBy: 'admin@example.com',
 189 |     scheduledTime: '2025-03-04T08:00:00.000Z',
 190 |     startTime: null,
 191 |     endTime: null,
 192 |     scripts: [
 193 |       {
 194 |         id: 1,
 195 |         name: 'process_data.py',
 196 |         path: '/scripts/process_data.py',
 197 |         status: 'pending',
 198 |         duration: null,
 199 |       },
 200 |       {
 201 |         id: 3,
 202 |         name: 'fetch_api_data.js',
 203 |         path: '/src/fetch_api_data.js',
 204 |         status: 'pending',
 205 |         duration: null,
 206 |       },
 207 |     ],
 208 |     hosts: [{ id: 4, name: 'Dev Environment', ip: '192.168.3.10', environment: 'Development' }],
 209 |     logs: [],
 210 |   },
 211 | ];

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/ScriptSelector.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React from 'react';
   4 | import { Code } from 'lucide-react';
   5 | import { Script } from './types';
   6 | 
   7 | interface ScriptSelectorProps {
   8 |   availableScripts: Script[];
   9 |   selectedScripts: string[];
  10 |   onScriptToggle: (scriptId: string) => void;
  11 |   isProjectSelected: boolean;
  12 | }
  13 | 
  14 | const ScriptSelector = ({
  15 |   availableScripts,
  16 |   selectedScripts,
  17 |   onScriptToggle,
  18 |   isProjectSelected,
  19 | }: ScriptSelectorProps) => {
  20 |   return (
  21 |     <div>
  22 |       <label className="block text-sm font-medium mb-2 flex items-center text-gray-700 dark:text-gray-300">
  23 |         <Code size={16} className="mr-1" />
  24 |         Scripts to Deploy
  25 |       </label>
  26 | 
  27 |       {!isProjectSelected ? (
  28 |         <div className="border border-gray-200 dark:border-gray-700 rounded-md p-4 bg-gray-50 dark:bg-gray-800 text-center text-sm text-gray-500 dark:text-gray-400">
  29 |           Select a project to see available scripts
  30 |         </div>
  31 |       ) : availableScripts.length === 0 ? (
  32 |         <div className="border border-gray-200 dark:border-gray-700 rounded-md p-4 bg-gray-50 dark:bg-gray-800 text-center text-sm text-gray-500 dark:text-gray-400">
  33 |           No scripts available for this project
  34 |         </div>
  35 |       ) : (
  36 |         <div className="border border-gray-200 dark:border-gray-700 rounded-md overflow-hidden">
  37 |           <div className="max-h-60 overflow-y-auto">
  38 |             {availableScripts.map((script) => (
  39 |               <div
  40 |                 key={script.id}
  41 |                 className="flex items-center px-3 py-2 border-b dark:border-gray-700 last:border-b-0 hover:bg-gray-50 dark:hover:bg-gray-700 bg-white dark:bg-gray-800"
  42 |               >
  43 |                 <input
  44 |                   type="checkbox"
  45 |                   id={`script-${script.id}`}
  46 |                   checked={selectedScripts.includes(script.id.toString())}
  47 |                   onChange={() => onScriptToggle(script.id.toString())}
  48 |                   className="mr-2 text-blue-600 focus:ring-blue-500 dark:border-gray-600 rounded"
  49 |                 />
  50 |                 <label htmlFor={`script-${script.id}`} className="flex-1 cursor-pointer">
  51 |                   <div className="font-medium text-sm text-gray-900 dark:text-white">
  52 |                     {script.name}
  53 |                   </div>
  54 |                   <div className="text-xs text-gray-500 dark:text-gray-400 truncate">
  55 |                     {script.path}
  56 |                   </div>
  57 |                 </label>
  58 |               </div>
  59 |             ))}
  60 |           </div>
  61 |         </div>
  62 |       )}
  63 |     </div>
  64 |   );
  65 | };
  66 | 
  67 | export default ScriptSelector;

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/DeploymentListItem.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React from 'react';
   4 | import { ChevronRight, Clock } from 'lucide-react';
   5 | import StatusBadge from './StatusBadge';
   6 | import { Deployment } from './types';
   7 | import { formatDate, calculateDuration } from './utils';
   8 | 
   9 | interface DeploymentListItemProps {
  10 |   deployment: Deployment;
  11 |   onClick: (deployment: Deployment) => void;
  12 | }
  13 | 
  14 | const DeploymentListItem = ({ deployment, onClick }: DeploymentListItemProps) => {
  15 |   return (
  16 |     <div
  17 |       className="border border-gray-200 dark:border-gray-700 rounded-md p-4 mb-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition cursor-pointer bg-white dark:bg-gray-800"
  18 |       onClick={() => onClick(deployment)}
  19 |     >
  20 |       <div className="flex items-center justify-between">
  21 |         <div className="flex-1">
  22 |           <div className="flex items-center">
  23 |             <h3 className="font-medium text-md text-gray-900 dark:text-white">{deployment.name}</h3>
  24 |             <span className="mx-2 text-gray-300 dark:text-gray-600">•</span>
  25 |             <span className="text-sm text-gray-600 dark:text-gray-400">
  26 |               {deployment.projectName}
  27 |             </span>
  28 |           </div>
  29 | 
  30 |           <div className="mt-2 flex items-center text-sm text-gray-500 dark:text-gray-400">
  31 |             <Clock size={14} className="mr-1" />
  32 |             <span className="mr-4">
  33 |               {formatDate(deployment.startTime || deployment.scheduledTime)}
  34 |             </span>
  35 |             {deployment.startTime && deployment.endTime && (
  36 |               <span className="flex items-center">
  37 |                 <span className="mr-1">Duration:</span>
  38 |                 {calculateDuration(deployment.startTime, deployment.endTime)}
  39 |               </span>
  40 |             )}
  41 |           </div>
  42 | 
  43 |           <div className="mt-2 text-sm">
  44 |             <div className="flex gap-2 flex-wrap">
  45 |               <StatusBadge status={deployment.status} />
  46 |               <span className="bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-0.5 rounded-md">
  47 |                 {deployment.scripts.length} script{deployment.scripts.length !== 1 ? 's' : ''}
  48 |               </span>
  49 |               <span className="bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-0.5 rounded-md">
  50 |                 {deployment.hosts.length} host{deployment.hosts.length !== 1 ? 's' : ''}
  51 |               </span>
  52 |             </div>
  53 |           </div>
  54 |         </div>
  55 | 
  56 |         <div className="flex items-center">
  57 |           <span className="text-sm text-gray-500 dark:text-gray-400 mr-2">
  58 |             {deployment.createdBy}
  59 |           </span>
  60 |           <ChevronRight size={20} className="text-gray-400 dark:text-gray-500" />
  61 |         </div>
  62 |       </div>
  63 |     </div>
  64 |   );
  65 | };
  66 | 
  67 | export default DeploymentListItem;

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/DeploymentView.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React, { useState } from 'react';
   4 | import { Plus, List } from 'lucide-react';
   5 | import DeploymentList from './DeploymentList';
   6 | import DeploymentForm from './DeploymentForm';
   7 | import DeploymentDetailsModal from './DeploymentDetailsModal';
   8 | import { Deployment } from './types';
   9 | import { sampleDeployments, sampleProjects, sampleHosts } from './data';
  10 | 
  11 | const DeploymentView = () => {
  12 |   const [view, setView] = useState<'list' | 'form'>('list');
  13 |   const [deployments, setDeployments] = useState<Deployment[]>(sampleDeployments);
  14 |   const [selectedDeployment, setSelectedDeployment] = useState<Deployment | null>(null);
  15 | 
  16 |   // Handle creation of a new deployment
  17 |   const handleDeploymentSubmit = (formData: {
  18 |     name: string;
  19 |     projectId: string;
  20 |     description: string;
  21 |     scheduledTime: string | null;
  22 |     selectedScripts: string[];
  23 |     selectedHosts: string[];
  24 |   }) => {
  25 |     // Find the selected project for reference
  26 |     const selectedProject = sampleProjects.find((p) => p.id.toString() === formData.projectId);
  27 | 
  28 |     if (!selectedProject) {
  29 |       console.error('Selected project not found');
  30 |       return;
  31 |     }
  32 | 
  33 |     // Create a new deployment object
  34 |     const newDeployment: Deployment = {
  35 |       id: Date.now(),
  36 |       name: formData.name,
  37 |       projectName: selectedProject.name,
  38 |       projectId: selectedProject.id,
  39 |       status: formData.scheduledTime ? 'pending' : 'in_progress',
  40 |       createdBy: 'Current User', // In a real app, this would come from auth context
  41 |       description: formData.description,
  42 |       scheduledTime: formData.scheduledTime,
  43 |       startTime: formData.scheduledTime ? null : new Date().toISOString(),
  44 |       endTime: null,
  45 |       scripts: selectedProject.scripts.filter((script) =>
  46 |         formData.selectedScripts.includes(script.id.toString()),
  47 |       ),
  48 |       hosts: sampleHosts.filter((host) => formData.selectedHosts.includes(host.id.toString())),
  49 |       logs: [],
  50 |     };
  51 | 
  52 |     // Add the new deployment to the list
  53 |     setDeployments((prev) => [newDeployment, ...prev]);
  54 | 
  55 |     // Switch back to list view
  56 |     setView('list');
  57 |   };
  58 | 
  59 |   // Handle selecting a deployment from the list
  60 |   const handleDeploymentSelect = (deployment: Deployment) => {
  61 |     setSelectedDeployment(deployment);
  62 |   };
  63 | 
  64 |   return (
  65 |     <div className="container mx-auto px-4 py-6">
  66 |       {/* Header with view toggle */}
  67 |       <div className="flex justify-between items-center mb-6">
  68 |         <h1 className="text-2xl font-bold dark:text-white">Deployments</h1>
  69 |         <div className="flex space-x-2">
  70 |           <button
  71 |             onClick={() => setView('list')}
  72 |             className={`px-4 py-2 flex items-center rounded-md ${
  73 |               view === 'list'
  74 |                 ? 'bg-blue-600 text-white'
  75 |                 : 'bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200'
  76 |             }`}
  77 |           >
  78 |             <List size={18} className="mr-1" />
  79 |             View Deployments
  80 |           </button>
  81 |           <button
  82 |             onClick={() => setView('form')}
  83 |             className={`px-4 py-2 flex items-center rounded-md ${
  84 |               view === 'form'
  85 |                 ? 'bg-blue-600 text-white'
  86 |                 : 'bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200'
  87 |             }`}
  88 |           >
  89 |             <Plus size={18} className="mr-1" />
  90 |             New Deployment
  91 |           </button>
  92 |         </div>
  93 |       </div>
  94 | 
  95 |       {/* Main content area */}
  96 |       <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
  97 |         {view === 'list' ? (
  98 |           <DeploymentList deployments={deployments} onDeploymentSelect={handleDeploymentSelect} />
  99 |         ) : (
 100 |           <DeploymentForm
 101 |             projects={sampleProjects}
 102 |             allHosts={sampleHosts}
 103 |             onSubmit={handleDeploymentSubmit}
 104 |           />
 105 |         )}
 106 |       </div>
 107 | 
 108 |       {/* Details modal */}
 109 |       {selectedDeployment && (
 110 |         <DeploymentDetailsModal
 111 |           deployment={selectedDeployment}
 112 |           onClose={() => setSelectedDeployment(null)}
 113 |         />
 114 |       )}
 115 |     </div>
 116 |   );
 117 | };
 118 | 
 119 | export default DeploymentView;

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/DeploymentDetailsModal.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React, { useState } from 'react';
   4 | import { X, ExternalLink, Download } from 'lucide-react';
   5 | import { Deployment } from './types';
   6 | import StatusBadge from './StatusBadge';
   7 | import { formatDetailedDate, calculateDuration } from './utils';
   8 | 
   9 | interface DeploymentDetailsModalProps {
  10 |   deployment: Deployment;
  11 |   onClose: () => void;
  12 | }
  13 | 
  14 | const DeploymentDetailsModal = ({ deployment, onClose }: DeploymentDetailsModalProps) => {
  15 |   const [activeTab, setActiveTab] = useState('overview');
  16 | 
  17 |   // Render log entry with appropriate styling
  18 |   const renderLogEntry = (log: { timestamp: string; level: string; message: string }) => {
  19 |     let textColor = 'text-gray-700 dark:text-gray-300';
  20 |     if (log.level === 'ERROR') textColor = 'text-red-600 dark:text-red-400';
  21 |     else if (log.level === 'WARNING') textColor = 'text-yellow-600 dark:text-yellow-400';
  22 |     else if (log.level === 'INFO') textColor = 'text-blue-600 dark:text-blue-400';
  23 | 
  24 |     return (
  25 |       <div key={log.timestamp} className="py-1 border-b dark:border-gray-700 last:border-b-0">
  26 |         <span className="text-xs text-gray-500 dark:text-gray-400">
  27 |           {formatDetailedDate(log.timestamp)}
  28 |         </span>
  29 |         <span className={`ml-2 text-xs font-medium ${textColor}`}>[{log.level}]</span>
  30 |         <span className="ml-2 text-sm dark:text-gray-300">{log.message}</span>
  31 |       </div>
  32 |     );
  33 |   };
  34 | 
  35 |   return (
  36 |     <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  37 |       <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-hidden flex flex-col">
  38 |         {/* Modal Header */}
  39 |         <div className="px-6 py-4 border-b dark:border-gray-700 flex justify-between items-start">
  40 |           <div>
  41 |             <h2 className="text-xl font-bold text-gray-900 dark:text-white">{deployment.name}</h2>
  42 |             <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
  43 |               Project: {deployment.projectName} • Deployment ID: {deployment.id}
  44 |             </p>
  45 |           </div>
  46 |           <button
  47 |             className="text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300"
  48 |             onClick={onClose}
  49 |           >
  50 |             <X size={24} />
  51 |           </button>
  52 |         </div>
  53 | 
  54 |         {/* Tabs */}
  55 |         <div className="border-b dark:border-gray-700">
  56 |           <div className="flex">
  57 |             <button
  58 |               className={`px-6 py-2 text-sm font-medium border-b-2 ${
  59 |                 activeTab === 'overview'
  60 |                   ? 'border-blue-500 text-blue-600 dark:text-blue-400'
  61 |                   : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
  62 |               }`}
  63 |               onClick={() => setActiveTab('overview')}
  64 |             >
  65 |               Overview
  66 |             </button>
  67 |             <button
  68 |               className={`px-6 py-2 text-sm font-medium border-b-2 ${
  69 |                 activeTab === 'logs'
  70 |                   ? 'border-blue-500 text-blue-600 dark:text-blue-400'
  71 |                   : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
  72 |               }`}
  73 |               onClick={() => setActiveTab('logs')}
  74 |             >
  75 |               Logs
  76 |             </button>
  77 |             <button
  78 |               className={`px-6 py-2 text-sm font-medium border-b-2 ${
  79 |                 activeTab === 'results'
  80 |                   ? 'border-blue-500 text-blue-600 dark:text-blue-400'
  81 |                   : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
  82 |               }`}
  83 |               onClick={() => setActiveTab('results')}
  84 |             >
  85 |               Results
  86 |             </button>
  87 |           </div>
  88 |         </div>
  89 | 
  90 |         {/* Tab Content */}
  91 |         <div className="flex-1 overflow-y-auto p-6 text-gray-900 dark:text-gray-100">
  92 |           {activeTab === 'overview' && (
  93 |             <div className="space-y-6">
  94 |               {/* Deployment Info */}
  95 |               <div>
  96 |                 <h3 className="text-lg font-medium mb-3 text-gray-900 dark:text-white">
  97 |                   Deployment Information
  98 |                 </h3>
  99 |                 <div className="bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-md p-4">
 100 |                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 101 |                     <div>
 102 |                       <p className="text-sm text-gray-500 dark:text-gray-400">Status</p>
 103 |                       <div className="font-medium mt-1">
 104 |                         <StatusBadge status={deployment.status} />
 105 |                       </div>
 106 |                     </div>
 107 |                     <div>
 108 |                       <p className="text-sm text-gray-500 dark:text-gray-400">Created By</p>
 109 |                       <p className="font-medium mt-1 dark:text-gray-300">
 110 |                         {deployment.createdBy || 'N/A'}
 111 |                       </p>
 112 |                     </div>
 113 |                     <div>
 114 |                       <p className="text-sm text-gray-500 dark:text-gray-400">Started At</p>
 115 |                       <p className="font-medium mt-1 dark:text-gray-300">
 116 |                         {formatDetailedDate(deployment.startTime)}
 117 |                       </p>
 118 |                     </div>
 119 |                     <div>
 120 |                       <p className="text-sm text-gray-500 dark:text-gray-400">Completed At</p>
 121 |                       <p className="font-medium mt-1 dark:text-gray-300">
 122 |                         {formatDetailedDate(deployment.endTime)}
 123 |                       </p>
 124 |                     </div>
 125 |                     <div>
 126 |                       <p className="text-sm text-gray-500 dark:text-gray-400">Duration</p>
 127 |                       <p className="font-medium mt-1 dark:text-gray-300">
 128 |                         {calculateDuration(deployment.startTime, deployment.endTime)}
 129 |                       </p>
 130 |                     </div>
 131 |                     <div>
 132 |                       <p className="text-sm text-gray-500 dark:text-gray-400">Jenkins Job</p>
 133 |                       <p className="font-medium mt-1 flex items-center">
 134 |                         <a
 135 |                           href="#"
 136 |                           className="text-blue-600 dark:text-blue-400 hover:underline flex items-center"
 137 |                         >
 138 |                           View in Jenkins
 139 |                           <ExternalLink size={14} className="ml-1" />
 140 |                         </a>
 141 |                       </p>
 142 |                     </div>
 143 |                   </div>
 144 |                 </div>
 145 |               </div>
 146 | 
 147 |               {/* Scripts */}
 148 |               <div>
 149 |                 <h3 className="text-lg font-medium mb-3 text-gray-900 dark:text-white">Scripts</h3>
 150 |                 <div className="border border-gray-200 dark:border-gray-700 rounded-md overflow-hidden">
 151 |                   <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
 152 |                     <thead className="bg-gray-50 dark:bg-gray-800">
 153 |                       <tr>
 154 |                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">
 155 |                           Name
 156 |                         </th>
 157 |                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">
 158 |                           Path
 159 |                         </th>
 160 |                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">
 161 |                           Status
 162 |                         </th>
 163 |                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">
 164 |                           Duration
 165 |                         </th>
 166 |                       </tr>
 167 |                     </thead>
 168 |                     <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
 169 |                       {deployment.scripts.map((script) => (
 170 |                         <tr key={script.id}>
 171 |                           <td className="px-4 py-3 text-sm font-medium text-gray-900 dark:text-white">
 172 |                             {script.name}
 173 |                           </td>
 174 |                           <td className="px-4 py-3 text-sm text-gray-600 dark:text-gray-400">
 175 |                             {script.path}
 176 |                           </td>
 177 |                           <td className="px-4 py-3">
 178 |                             <StatusBadge status={script.status || 'pending'} />
 179 |                           </td>
 180 |                           <td className="px-4 py-3 text-sm text-gray-600 dark:text-gray-400">
 181 |                             {script.duration || 'N/A'}
 182 |                           </td>
 183 |                         </tr>
 184 |                       ))}
 185 |                     </tbody>
 186 |                   </table>
 187 |                 </div>
 188 |               </div>
 189 | 
 190 |               {/* Target Hosts */}
 191 |               <div>
 192 |                 <h3 className="text-lg font-medium mb-3 text-gray-900 dark:text-white">
 193 |                   Target Hosts
 194 |                 </h3>
 195 |                 <div className="border border-gray-200 dark:border-gray-700 rounded-md overflow-hidden">
 196 |                   <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
 197 |                     <thead className="bg-gray-50 dark:bg-gray-800">
 198 |                       <tr>
 199 |                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">
 200 |                           Name
 201 |                         </th>
 202 |                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">
 203 |                           IP Address
 204 |                         </th>
 205 |                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">
 206 |                           Environment
 207 |                         </th>
 208 |                       </tr>
 209 |                     </thead>
 210 |                     <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
 211 |                       {deployment.hosts.map((host) => (
 212 |                         <tr key={host.id}>
 213 |                           <td className="px-4 py-3 text-sm font-medium text-gray-900 dark:text-white">
 214 |                             {host.name}
 215 |                           </td>
 216 |                           <td className="px-4 py-3 text-sm text-gray-600 dark:text-gray-400">
 217 |                             {host.ip}
 218 |                           </td>
 219 |                           <td className="px-4 py-3 text-sm text-gray-600 dark:text-gray-400">
 220 |                             {host.environment}
 221 |                           </td>
 222 |                         </tr>
 223 |                       ))}
 224 |                     </tbody>
 225 |                   </table>
 226 |                 </div>
 227 |               </div>
 228 |             </div>
 229 |           )}
 230 | 
 231 |           {activeTab === 'logs' && (
 232 |             <div>
 233 |               <div className="flex justify-between items-center mb-3">
 234 |                 <h3 className="text-lg font-medium text-gray-900 dark:text-white">
 235 |                   Deployment Logs
 236 |                 </h3>
 237 |                 <button className="px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded text-sm flex items-center text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
 238 |                   <Download size={14} className="mr-1" />
 239 |                   Download Logs
 240 |                 </button>
 241 |               </div>
 242 | 
 243 |               <div className="bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-md p-4 font-mono text-sm overflow-auto max-h-[500px]">
 244 |                 {deployment.logs.length === 0 ? (
 245 |                   <p className="text-gray-500 dark:text-gray-400 text-center py-4">
 246 |                     No logs available
 247 |                   </p>
 248 |                 ) : (
 249 |                   <div className="space-y-1">
 250 |                     {deployment.logs.map((log) => renderLogEntry(log))}
 251 |                   </div>
 252 |                 )}
 253 |               </div>
 254 |             </div>
 255 |           )}
 256 | 
 257 |           {activeTab === 'results' && (
 258 |             <div>
 259 |               <div className="flex justify-between items-center mb-3">
 260 |                 <h3 className="text-lg font-medium text-gray-900 dark:text-white">
 261 |                   Deployment Results
 262 |                 </h3>
 263 |                 <button className="px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded text-sm flex items-center text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
 264 |                   <Download size={14} className="mr-1" />
 265 |                   Download Report
 266 |                 </button>
 267 |               </div>
 268 | 
 269 |               {deployment.status === 'pending' || deployment.status === 'in_progress' ? (
 270 |                 <div className="bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700 rounded-md p-4 text-center">
 271 |                   <p className="text-yellow-600 dark:text-yellow-400">
 272 |                     Deployment is still in progress. Results will be available once completed.
 273 |                   </p>
 274 |                 </div>
 275 |               ) : deployment.status === 'failed' ? (
 276 |                 <div>
 277 |                   <div className="bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700 rounded-md p-4 mb-4">
 278 |                     <h4 className="font-medium text-red-700 dark:text-red-400 mb-2">
 279 |                       Deployment Failed
 280 |                     </h4>
 281 |                     <p className="text-red-600 dark:text-red-400">
 282 |                       The deployment failed during execution of{' '}
 283 |                       <strong>{deployment.scripts.find((s) => s.status === 'failed')?.name}</strong>
 284 |                       . Please check the logs for more details.
 285 |                     </p>
 286 |                   </div>
 287 | 
 288 |                   <div className="bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-md p-4">
 289 |                     <h4 className="font-medium mb-2 text-gray-900 dark:text-white">Summary</h4>
 290 |                     <ul className="list-disc list-inside space-y-1 text-sm text-gray-700 dark:text-gray-300">
 291 |                       <li>Started: {formatDetailedDate(deployment.startTime)}</li>
 292 |                       <li>Failed: {formatDetailedDate(deployment.endTime)}</li>
 293 |                       <li>
 294 |                         Scripts: {deployment.scripts.filter((s) => s.status === 'success').length}{' '}
 295 |                         successful, {deployment.scripts.filter((s) => s.status === 'failed').length}{' '}
 296 |                         failed, {deployment.scripts.filter((s) => s.status === 'pending').length}{' '}
 297 |                         not executed
 298 |                       </li>
 299 |                     </ul>
 300 |                   </div>
 301 |                 </div>
 302 |               ) : (
 303 |                 <div>
 304 |                   <div className="bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-700 rounded-md p-4 mb-4">
 305 |                     <h4 className="font-medium text-green-700 dark:text-green-400 mb-2">
 306 |                       Deployment Successful
 307 |                     </h4>
 308 |                     <p className="text-green-600 dark:text-green-400">
 309 |                       All scripts were executed successfully on the target hosts.
 310 |                     </p>
 311 |                   </div>
 312 | 
 313 |                   <div className="bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-md p-4">
 314 |                     <h4 className="font-medium mb-2 text-gray-900 dark:text-white">Summary</h4>
 315 |                     <ul className="list-disc list-inside space-y-1 text-sm text-gray-700 dark:text-gray-300">
 316 |                       <li>Started: {formatDetailedDate(deployment.startTime)}</li>
 317 |                       <li>Completed: {formatDetailedDate(deployment.endTime)}</li>
 318 |                       <li>Scripts: {deployment.scripts.length} executed successfully</li>
 319 |                       <li>
 320 |                         Total Duration:{' '}
 321 |                         {calculateDuration(deployment.startTime, deployment.endTime)}
 322 |                       </li>
 323 |                     </ul>
 324 |                   </div>
 325 |                 </div>
 326 |               )}
 327 |             </div>
 328 |           )}
 329 |         </div>
 330 | 
 331 |         {/* Modal Footer */}
 332 |         <div className="px-6 py-4 border-t dark:border-gray-700 flex justify-end">
 333 |           <button
 334 |             className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600"
 335 |             onClick={onClose}
 336 |           >
 337 |             Close
 338 |           </button>
 339 |         </div>
 340 |       </div>
 341 |     </div>
 342 |   );
 343 | };
 344 | 
 345 | export default DeploymentDetailsModal;

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/HostSelector.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React from 'react';
   4 | import { Server } from 'lucide-react';
   5 | import { Host } from './types';
   6 | 
   7 | interface HostSelectorProps {
   8 |   availableHosts: Host[];
   9 |   selectedHosts: string[];
  10 |   onHostToggle: (hostId: string) => void;
  11 | }
  12 | 
  13 | const HostSelector = ({ availableHosts, selectedHosts, onHostToggle }: HostSelectorProps) => {
  14 |   // Group hosts by environment
  15 |   const hostsByEnvironment = availableHosts.reduce(
  16 |     (acc, host) => {
  17 |       const env = host.environment || 'Other';
  18 |       if (!acc[env]) {
  19 |         acc[env] = [];
  20 |       }
  21 |       acc[env].push(host);
  22 |       return acc;
  23 |     },
  24 |     {} as Record<string, Host[]>,
  25 |   );
  26 | 
  27 |   // Sort environments - put Production first, then Staging, then others alphabetically
  28 |   const sortedEnvironments = Object.keys(hostsByEnvironment).sort((a, b) => {
  29 |     if (a === 'Production') return -1;
  30 |     if (b === 'Production') return 1;
  31 |     if (a === 'Staging') return -1;
  32 |     if (b === 'Staging') return 1;
  33 |     return a.localeCompare(b);
  34 |   });
  35 | 
  36 |   return (
  37 |     <div>
  38 |       <label className="block text-sm font-medium mb-2 flex items-center text-gray-700 dark:text-gray-300">
  39 |         <Server size={16} className="mr-1" />
  40 |         Target Hosts
  41 |       </label>
  42 | 
  43 |       {availableHosts.length === 0 ? (
  44 |         <div className="border border-gray-200 dark:border-gray-700 rounded-md p-4 bg-gray-50 dark:bg-gray-800 text-center text-sm text-gray-500 dark:text-gray-400">
  45 |           No hosts available
  46 |         </div>
  47 |       ) : (
  48 |         <div className="border border-gray-200 dark:border-gray-700 rounded-md overflow-hidden">
  49 |           <div className="max-h-60 overflow-y-auto">
  50 |             {sortedEnvironments.map((env) => (
  51 |               <div key={env}>
  52 |                 <div className="bg-gray-100 dark:bg-gray-700 px-3 py-1 text-xs font-semibold text-gray-700 dark:text-gray-300">
  53 |                   {env}
  54 |                 </div>
  55 |                 {hostsByEnvironment[env].map((host) => (
  56 |                   <div
  57 |                     key={host.id}
  58 |                     className="flex items-center px-3 py-2 border-b dark:border-gray-700 last:border-b-0 hover:bg-gray-50 dark:hover:bg-gray-700 bg-white dark:bg-gray-800"
  59 |                   >
  60 |                     <input
  61 |                       type="checkbox"
  62 |                       id={`host-${host.id}`}
  63 |                       checked={selectedHosts.includes(host.id.toString())}
  64 |                       onChange={() => onHostToggle(host.id.toString())}
  65 |                       className="mr-2 text-blue-600 focus:ring-blue-500 dark:border-gray-600 rounded"
  66 |                     />
  67 |                     <label htmlFor={`host-${host.id}`} className="flex-1 cursor-pointer">
  68 |                       <div className="font-medium text-sm text-gray-900 dark:text-white">
  69 |                         {host.name}
  70 |                       </div>
  71 |                       <div className="text-xs text-gray-500 dark:text-gray-400">{host.ip}</div>
  72 |                     </label>
  73 |                   </div>
  74 |                 ))}
  75 |               </div>
  76 |             ))}
  77 |           </div>
  78 |         </div>
  79 |       )}
  80 |     </div>
  81 |   );
  82 | };
  83 | 
  84 | export default HostSelector;

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/DeploymentList.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React, { useState } from 'react';
   4 | import { Search, Filter, Clock, SortAsc, SortDesc } from 'lucide-react';
   5 | import DeploymentListItem from './DeploymentListItem';
   6 | import { Deployment } from './types';
   7 | 
   8 | interface DeploymentListProps {
   9 |   deployments: Deployment[];
  10 |   onDeploymentSelect: (deployment: Deployment) => void;
  11 | }
  12 | 
  13 | type SortField = 'name' | 'date' | 'status';
  14 | type SortOrder = 'asc' | 'desc';
  15 | 
  16 | const DeploymentList = ({ deployments, onDeploymentSelect }: DeploymentListProps) => {
  17 |   const [searchTerm, setSearchTerm] = useState('');
  18 |   const [sortField, setSortField] = useState<SortField>('date');
  19 |   const [sortOrder, setSortOrder] = useState<SortOrder>('desc');
  20 |   const [statusFilter, setStatusFilter] = useState<string | null>(null);
  21 | 
  22 |   // Filter deployments based on search term and status filter
  23 |   const filteredDeployments = deployments.filter((deployment) => {
  24 |     const matchesSearch =
  25 |       deployment.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
  26 |       deployment.projectName.toLowerCase().includes(searchTerm.toLowerCase()) ||
  27 |       deployment.createdBy.toLowerCase().includes(searchTerm.toLowerCase());
  28 | 
  29 |     const matchesStatus = statusFilter ? deployment.status === statusFilter : true;
  30 | 
  31 |     return matchesSearch && matchesStatus;
  32 |   });
  33 | 
  34 |   // Get unique statuses for filter dropdown
  35 |   const statuses = Array.from(new Set(deployments.map((d) => d.status)));
  36 | 
  37 |   // Sort deployments
  38 |   const sortedDeployments = [...filteredDeployments].sort((a, b) => {
  39 |     if (sortField === 'name') {
  40 |       return sortOrder === 'asc' ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
  41 |     } else if (sortField === 'status') {
  42 |       return sortOrder === 'asc'
  43 |         ? a.status.localeCompare(b.status)
  44 |         : b.status.localeCompare(a.status);
  45 |     } else {
  46 |       // Sort by date (using startTime or scheduledTime as fallback)
  47 |       const dateA = new Date(a.startTime || a.scheduledTime || 0).getTime();
  48 |       const dateB = new Date(b.startTime || b.scheduledTime || 0).getTime();
  49 |       return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;
  50 |     }
  51 |   });
  52 | 
  53 |   // Toggle sort order or change sort field
  54 |   const handleSort = (field: SortField) => {
  55 |     if (sortField === field) {
  56 |       setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
  57 |     } else {
  58 |       setSortField(field);
  59 |       setSortOrder('asc');
  60 |     }
  61 |   };
  62 | 
  63 |   return (
  64 |     <div>
  65 |       <div className="mb-4 flex flex-col md:flex-row gap-2">
  66 |         <div className="relative flex-1">
  67 |           <Search
  68 |             className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500"
  69 |             size={16}
  70 |           />
  71 |           <input
  72 |             type="text"
  73 |             className="w-full pl-9 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
  74 |             placeholder="Search deployments..."
  75 |             value={searchTerm}
  76 |             onChange={(e) => setSearchTerm(e.target.value)}
  77 |           />
  78 |         </div>
  79 | 
  80 |         <div className="flex gap-2">
  81 |           <div className="relative">
  82 |             <select
  83 |               className="appearance-none pl-9 pr-8 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
  84 |               value={statusFilter || ''}
  85 |               onChange={(e) => setStatusFilter(e.target.value || null)}
  86 |             >
  87 |               <option value="">All Statuses</option>
  88 |               {statuses.map((status) => (
  89 |                 <option key={status} value={status}>
  90 |                   {status}
  91 |                 </option>
  92 |               ))}
  93 |             </select>
  94 |             <Filter
  95 |               className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500"
  96 |               size={16}
  97 |             />
  98 |           </div>
  99 | 
 100 |           <button
 101 |             onClick={() => handleSort('name')}
 102 |             className={`px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600 ${
 103 |               sortField === 'name' ? 'bg-gray-100 dark:bg-gray-700' : 'bg-white dark:bg-gray-800'
 104 |             } text-gray-700 dark:text-gray-200`}
 105 |             title="Sort by name"
 106 |           >
 107 |             {sortField === 'name' ? (
 108 |               sortOrder === 'asc' ? (
 109 |                 <SortAsc size={16} />
 110 |               ) : (
 111 |                 <SortDesc size={16} />
 112 |               )
 113 |             ) : (
 114 |               'Name'
 115 |             )}
 116 |           </button>
 117 | 
 118 |           <button
 119 |             onClick={() => handleSort('date')}
 120 |             className={`px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600 ${
 121 |               sortField === 'date' ? 'bg-gray-100 dark:bg-gray-700' : 'bg-white dark:bg-gray-800'
 122 |             } text-gray-700 dark:text-gray-200`}
 123 |             title="Sort by date"
 124 |           >
 125 |             {sortField === 'date' ? (
 126 |               sortOrder === 'asc' ? (
 127 |                 <SortAsc size={16} />
 128 |               ) : (
 129 |                 <SortDesc size={16} />
 130 |               )
 131 |             ) : (
 132 |               <Clock size={16} />
 133 |             )}
 134 |           </button>
 135 |         </div>
 136 |       </div>
 137 | 
 138 |       {sortedDeployments.length === 0 ? (
 139 |         <div className="text-center py-8 border border-gray-200 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-800">
 140 |           <p className="text-gray-500 dark:text-gray-400">No deployments found</p>
 141 |         </div>
 142 |       ) : (
 143 |         <div>
 144 |           {sortedDeployments.map((deployment) => (
 145 |             <DeploymentListItem
 146 |               key={deployment.id}
 147 |               deployment={deployment}
 148 |               onClick={onDeploymentSelect}
 149 |             />
 150 |           ))}
 151 |         </div>
 152 |       )}
 153 |     </div>
 154 |   );
 155 | };
 156 | 
 157 | export default DeploymentList;

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/types.ts`:

```ts
   1 | // Common types for the Deployment View components
   2 | 
   3 | export interface Script {
   4 |   id: number;
   5 |   name: string;
   6 |   path: string;
   7 |   status?: string;
   8 |   duration?: string | null;
   9 | }
  10 | 
  11 | export interface Host {
  12 |   id: number;
  13 |   name: string;
  14 |   ip: string;
  15 |   environment: string;
  16 | }
  17 | 
  18 | export interface LogEntry {
  19 |   timestamp: string;
  20 |   level: string;
  21 |   message: string;
  22 | }
  23 | 
  24 | export interface Deployment {
  25 |   id: number;
  26 |   name: string;
  27 |   projectName: string;
  28 |   projectId: number;
  29 |   status: 'success' | 'failed' | 'in_progress' | 'pending' | 'cancelled' | 'partial';
  30 |   createdBy: string;
  31 |   description?: string;
  32 |   scheduledTime?: string | null;
  33 |   startTime: string | null;
  34 |   endTime: string | null;
  35 |   scripts: Script[];
  36 |   hosts: Host[];
  37 |   logs: LogEntry[];
  38 | }
  39 | 
  40 | export interface Project {
  41 |   id: number;
  42 |   name: string;
  43 |   scripts: Script[];
  44 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/deployment/_components/StatusBadge.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React from 'react';
   4 | import { CheckCircle, XCircle, Clock, AlertTriangle, Loader2 } from 'lucide-react';
   5 | 
   6 | interface StatusBadgeProps {
   7 |   status: string;
   8 | }
   9 | 
  10 | const StatusBadge = ({ status }: StatusBadgeProps) => {
  11 |   let bgColor = 'bg-gray-100 dark:bg-gray-700';
  12 |   let textColor = 'text-gray-700 dark:text-gray-300';
  13 |   let Icon = Clock;
  14 | 
  15 |   const normalizedStatus = status.toLowerCase();
  16 | 
  17 |   switch (normalizedStatus) {
  18 |     case 'success':
  19 |       bgColor = 'bg-green-100 dark:bg-green-900/30';
  20 |       textColor = 'text-green-700 dark:text-green-400';
  21 |       Icon = CheckCircle;
  22 |       break;
  23 |     case 'failed':
  24 |       bgColor = 'bg-red-100 dark:bg-red-900/30';
  25 |       textColor = 'text-red-700 dark:text-red-400';
  26 |       Icon = XCircle;
  27 |       break;
  28 |     case 'in_progress':
  29 |     case 'running':
  30 |       bgColor = 'bg-blue-100 dark:bg-blue-900/30';
  31 |       textColor = 'text-blue-700 dark:text-blue-400';
  32 |       Icon = Loader2;
  33 |       break;
  34 |     case 'pending':
  35 |     case 'scheduled':
  36 |       bgColor = 'bg-yellow-100 dark:bg-yellow-900/30';
  37 |       textColor = 'text-yellow-700 dark:text-yellow-400';
  38 |       Icon = Clock;
  39 |       break;
  40 |     case 'cancelled':
  41 |       bgColor = 'bg-gray-100 dark:bg-gray-700';
  42 |       textColor = 'text-gray-700 dark:text-gray-400';
  43 |       Icon = XCircle;
  44 |       break;
  45 |     case 'partial':
  46 |       bgColor = 'bg-orange-100 dark:bg-orange-900/30';
  47 |       textColor = 'text-orange-700 dark:text-orange-400';
  48 |       Icon = AlertTriangle;
  49 |       break;
  50 |   }
  51 | 
  52 |   return (
  53 |     <span
  54 |       className={`inline-flex items-center px-2.5 py-0.5 rounded-md text-sm ${bgColor} ${textColor}`}
  55 |     >
  56 |       <Icon className="w-3.5 h-3.5 mr-1" />
  57 |       {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}
  58 |     </span>
  59 |   );
  60 | };
  61 | 
  62 | export default StatusBadge;

```

`/workspaces/automai/src/app/[locale]/[tenant]/profile/page.tsx`:

```tsx
   1 | import { ProfileContent } from '@/components/profile/ProfileContent';
   2 | 
   3 | export default function ProfilePage() {
   4 |   return <ProfileContent />;
   5 | }

```

`/workspaces/automai/src/app/[locale]/[tenant]/platforms/constants.ts`:

```ts
   1 | export const PLATFORM_PREFIXES = {
   2 |   python: 'PYT',
   3 |   web: 'WEB',
   4 |   desktop: 'DSK',
   5 |   android: 'AND',
   6 |   ios: 'IOS',
   7 |   api: 'API',
   8 | } as const;
   9 | 
  10 | export const PLATFORMS = Object.keys(PLATFORM_PREFIXES) as Array<keyof typeof PLATFORM_PREFIXES>;

```

`/workspaces/automai/src/app/globals.css`:

```css
   1 | @tailwind base;
   2 | @tailwind components;
   3 | @tailwind utilities;
   4 | 
   5 | @layer base {
   6 |   :root {
   7 |     --background: 0 0% 100%;
   8 |     --foreground: 224 71.4% 4.1%;
   9 | 
  10 |     --card: 0 0% 100%;
  11 |     --card-foreground: 224 71.4% 4.1%;
  12 | 
  13 |     --popover: 0 0% 100%;
  14 |     --popover-foreground: 224 71.4% 4.1%;
  15 | 
  16 |     --primary: 220.9 39.3% 11%;
  17 |     --primary-foreground: 210 20% 98%;
  18 | 
  19 |     --secondary: 220 14.3% 95.9%;
  20 |     --secondary-foreground: 220.9 39.3% 11%;
  21 | 
  22 |     --muted: 220 14.3% 95.9%;
  23 |     --muted-foreground: 220 8.9% 46.1%;
  24 | 
  25 |     --accent: 220 14.3% 95.9%;
  26 |     --accent-foreground: 220.9 39.3% 11%;
  27 | 
  28 |     --destructive: 0 84.2% 60.2%;
  29 |     --destructive-foreground: 210 20% 98%;
  30 | 
  31 |     --border: 220 13% 91%;
  32 |     --input: 220 13% 91%;
  33 |     --ring: 224 71.4% 4.1%;
  34 | 
  35 |     --radius: 0.5rem;
  36 | 
  37 |     --chart-1: 12 76% 61%;
  38 | 
  39 |     --chart-2: 173 58% 39%;
  40 | 
  41 |     --chart-3: 197 37% 24%;
  42 | 
  43 |     --chart-4: 43 74% 66%;
  44 | 
  45 |     --chart-5: 27 87% 67%;
  46 |   }
  47 | 
  48 |   .dark {
  49 |     --background: 224 71.4% 4.1%;
  50 |     --foreground: 210 20% 98%;
  51 | 
  52 |     --card: 224 71.4% 4.1%;
  53 |     --card-foreground: 210 20% 98%;
  54 | 
  55 |     --popover: 224 71.4% 4.1%;
  56 |     --popover-foreground: 210 20% 98%;
  57 | 
  58 |     --primary: 210 20% 98%;
  59 |     --primary-foreground: 220.9 39.3% 11%;
  60 | 
  61 |     --secondary: 215 27.9% 16.9%;
  62 |     --secondary-foreground: 210 20% 98%;
  63 | 
  64 |     --muted: 215 27.9% 16.9%;
  65 |     --muted-foreground: 217.9 10.6% 64.9%;
  66 | 
  67 |     --accent: 215 27.9% 16.9%;
  68 |     --accent-foreground: 210 20% 98%;
  69 | 
  70 |     --destructive: 0 62.8% 30.6%;
  71 |     --destructive-foreground: 210 20% 98%;
  72 | 
  73 |     --border: 215 27.9% 16.9%;
  74 |     --input: 215 27.9% 16.9%;
  75 |     --ring: 216 12.2% 83.9%;
  76 |     --chart-1: 220 70% 50%;
  77 |     --chart-2: 160 60% 45%;
  78 |     --chart-3: 30 80% 55%;
  79 |     --chart-4: 280 65% 60%;
  80 |     --chart-5: 340 75% 55%;
  81 |   }
  82 | }
  83 | 
  84 | @layer base {
  85 |   * {
  86 |     @apply border-border;
  87 |   }
  88 |   body {
  89 |     @apply bg-background text-foreground;
  90 |   }
  91 | }

```

`/workspaces/automai/src/middleware.ts`:

```ts
   1 | // src/middleware.ts
   2 | import { NextRequest, NextResponse } from 'next/server';
   3 | import { updateSession } from '@/lib/supabase/middleware';
   4 | 
   5 | import { locales, defaultLocale, pathnames } from './config';
   6 | 
   7 | // Lazy load the internationalization middleware
   8 | let intlMiddleware: any = null;
   9 | 
  10 | async function getIntlMiddleware() {
  11 |   if (!intlMiddleware) {
  12 |     const { default: createIntlMiddleware } = await import('next-intl/middleware');
  13 |     intlMiddleware = createIntlMiddleware({
  14 |       locales,
  15 |       defaultLocale,
  16 |       pathnames,
  17 |       localePrefix: 'always',
  18 |     });
  19 |   }
  20 |   return intlMiddleware;
  21 | }
  22 | 
  23 | export default async function middleware(request: NextRequest) {
  24 |   // 1. First, normalize URL case (lowercase)
  25 |   const pathParts = request.nextUrl.pathname.split('/').filter(Boolean);
  26 |   const originalPath = request.nextUrl.pathname;
  27 |   const lowercasePath = originalPath.toLowerCase();
  28 | 
  29 |   // Skip case normalization for locale root paths to prevent redirect loops
  30 |   const isLocaleRootPath = pathParts.length === 1 && locales.includes(pathParts[0] as any);
  31 |   if (!isLocaleRootPath && lowercasePath !== originalPath) {
  32 |     console.log('Normalizing URL case:', originalPath, 'to', lowercasePath);
  33 |     return NextResponse.redirect(new URL(lowercasePath, request.url));
  34 |   }
  35 | 
  36 |   // 2. Skip auth for WebSockets, API routes, and RSC requests
  37 |   if (
  38 |     request.headers.get('upgrade')?.includes('websocket') ||
  39 |     request.nextUrl.pathname.startsWith('/api/') ||
  40 |     request.nextUrl.search.includes('_rsc=')
  41 |   ) {
  42 |     return NextResponse.next();
  43 |   }
  44 | 
  45 |   // 3. Define public paths that bypass auth checks
  46 |   const publicPaths = [
  47 |     '/',
  48 |     '/login',
  49 |     '/signup',
  50 |     '/register',
  51 |     '/forgot-password',
  52 |     '/reset-password',
  53 |     '/auth-redirect',
  54 |     '/test-auth',
  55 |     '/error',
  56 |     '/_next',
  57 |     '/favicon.ico',
  58 |   ];
  59 | 
  60 |   // Add locale-based paths to public paths
  61 |   locales.forEach((locale) => {
  62 |     publicPaths.push(`/${locale}`);
  63 |     publicPaths.push(`/${locale}/`);
  64 |     publicPaths.push(`/${locale}/login`);
  65 |     publicPaths.push(`/${locale}/signup`);
  66 |     publicPaths.push(`/${locale}/forgot-password`);
  67 |     publicPaths.push(`/${locale}/reset-password`);
  68 |     publicPaths.push(`/${locale}/auth-redirect`);
  69 |   });
  70 | 
  71 |   // Check if it's a public path
  72 |   const isPublicPath =
  73 |     publicPaths.some((path) => request.nextUrl.pathname === path) ||
  74 |     request.nextUrl.pathname === '/' ||
  75 |     request.nextUrl.pathname.includes('auth-redirect') ||
  76 |     (pathParts.length >= 2 &&
  77 |      locales.includes(pathParts[0] as any) &&
  78 |      ['login', 'signup', 'forgot-password', 'reset-password', 'auth-redirect'].includes(
  79 |        pathParts[1],
  80 |      ));
  81 | 
  82 |   if (isPublicPath) {
  83 |     // For public paths, just continue without auth check
  84 |     return NextResponse.next();
  85 |   }
  86 | 
  87 |   // 4. For all other paths, use Supabase's updateSession
  88 |   // This will handle session validation and token refresh
  89 |   const response = await updateSession(request);
  90 |   
  91 |   // If the response is a redirect (unauthenticated), return it directly
  92 |   if (response.headers.has('location')) {
  93 |     console.log('Redirecting to:', response.headers.get('location'));
  94 |     return response;
  95 |   }
  96 |   
  97 |   // Access user session info from cookies if needed for debugging (non-invasive)
  98 |   // We don't actually extract the data here to avoid breaking anything
  99 |   console.log('Middleware: Processing authenticated request');
 100 |   
 101 |   // 5. Apply internationalization middleware for non-redirect responses
 102 |   const intl = await getIntlMiddleware();
 103 |   return intl(response);
 104 | }
 105 | 
 106 | export const config = {
 107 |   matcher: [
 108 |     // Match all paths except static files
 109 |     '/((?!_next/static|_next/image|avatars|favicon.ico).*)',
 110 |     // Match all locale routes
 111 |     '/(fr|en)/:path*',
 112 |     // Match API routes
 113 |     '/api/:path*',
 114 |     // Match root path
 115 |     '/',
 116 |   ],
 117 | };

```

`/workspaces/automai/src/types/repositories.ts`:

```ts
   1 | import { z } from 'zod';
   2 | 
   3 | export type GitProviderType = 'github' | 'gitlab' | 'gitea';
   4 | 
   5 | export type GitProviderStatus = 'connected' | 'disconnected' | 'error';
   6 | 
   7 | export type SyncStatus = 'IDLE' | 'SYNCING' | 'ERROR' | 'SYNCED';
   8 | 
   9 | export interface GitProvider {
  10 |   id: string;
  11 |   userId: string;
  12 |   tenantId: string;
  13 |   type: GitProviderType;
  14 |   displayName: string;
  15 |   status: 'connected' | 'disconnected';
  16 |   serverUrl?: string;
  17 |   accessToken?: string;
  18 |   refreshToken?: string;
  19 |   expiresAt?: Date;
  20 |   createdAt: Date;
  21 |   updatedAt: Date;
  22 |   lastSyncedAt?: Date;
  23 | }
  24 | 
  25 | export interface Repository {
  26 |   id: string;
  27 |   providerId: string;
  28 |   name: string;
  29 |   owner: string;
  30 |   url?: string;
  31 |   branch?: string;
  32 |   defaultBranch?: string;
  33 |   isPrivate: boolean;
  34 |   description?: string;
  35 |   syncStatus: 'SYNCED' | 'PENDING' | 'ERROR';
  36 |   createdAt: Date;
  37 |   updatedAt: Date;
  38 |   lastSyncedAt?: Date;
  39 |   error?: string;
  40 | }
  41 | 
  42 | export interface RepositoryCreateInput {
  43 |   name: string;
  44 |   description?: string;
  45 |   url: string;
  46 |   defaultBranch?: string;
  47 |   providerId: string;
  48 |   projectId?: string;
  49 | }
  50 | 
  51 | export interface RepositoryUpdateInput {
  52 |   name?: string;
  53 |   description?: string;
  54 |   defaultBranch?: string;
  55 |   projectId?: string;
  56 | }
  57 | 
  58 | export interface GitProviderCreateInput {
  59 |   name: GitProviderType;
  60 |   type: GitProviderType;
  61 |   displayName: string;
  62 |   serverUrl?: string;
  63 |   accessToken?: string;
  64 |   refreshToken?: string;
  65 |   expiresAt?: Date;
  66 | }
  67 | 
  68 | export interface GitProviderUpdateInput {
  69 |   accessToken?: string;
  70 |   refreshToken?: string;
  71 |   expiresAt?: Date;
  72 | }
  73 | 
  74 | export interface OAuthState {
  75 |   provider: GitProviderType;
  76 |   redirectUrl: string;
  77 | }
  78 | 
  79 | export const GitProviderSchema = z.object({
  80 |   id: z.string(),
  81 |   userId: z.string(),
  82 |   tenantId: z.string(),
  83 |   type: z.enum(['github', 'gitlab', 'gitea']),
  84 |   displayName: z.string(),
  85 |   status: z.enum(['connected', 'disconnected']),
  86 |   serverUrl: z.string().optional(),
  87 |   accessToken: z.string().optional(),
  88 |   refreshToken: z.string().optional(),
  89 |   expiresAt: z.date().optional(),
  90 |   createdAt: z.date(),
  91 |   updatedAt: z.date(),
  92 |   lastSyncedAt: z.date().optional(),
  93 | });
  94 | 
  95 | export const RepositorySchema = z.object({
  96 |   id: z.string(),
  97 |   providerId: z.string(),
  98 |   name: z.string(),
  99 |   owner: z.string(),
 100 |   url: z.string().optional(),
 101 |   branch: z.string().optional(),
 102 |   isPrivate: z.boolean(),
 103 |   description: z.string().optional(),
 104 |   syncStatus: z.enum(['SYNCED', 'PENDING', 'ERROR']),
 105 |   createdAt: z.date(),
 106 |   updatedAt: z.date(),
 107 |   lastSyncedAt: z.date().optional(),
 108 |   error: z.string().optional(),
 109 | });

```

`/workspaces/automai/src/types/supabase.ts`:

```ts
   1 | export type Json =
   2 |   | string
   3 |   | number
   4 |   | boolean
   5 |   | null
   6 |   | { [key: string]: Json | undefined }
   7 |   | Json[]
   8 | 
   9 | export type Database = {
  10 |   public: {
  11 |     Tables: {
  12 |       accounts: {
  13 |         Row: {
  14 |           access_token: string | null
  15 |           expires_at: number | null
  16 |           id: string
  17 |           id_token: string | null
  18 |           provider: string
  19 |           providerAccountId: string
  20 |           refresh_token: string | null
  21 |           scope: string | null
  22 |           session_state: string | null
  23 |           token_type: string | null
  24 |           type: string
  25 |           userId: string
  26 |         }
  27 |         Insert: {
  28 |           access_token?: string | null
  29 |           expires_at?: number | null
  30 |           id?: string
  31 |           id_token?: string | null
  32 |           provider: string
  33 |           providerAccountId: string
  34 |           refresh_token?: string | null
  35 |           scope?: string | null
  36 |           session_state?: string | null
  37 |           token_type?: string | null
  38 |           type: string
  39 |           userId: string
  40 |         }
  41 |         Update: {
  42 |           access_token?: string | null
  43 |           expires_at?: number | null
  44 |           id?: string
  45 |           id_token?: string | null
  46 |           provider?: string
  47 |           providerAccountId?: string
  48 |           refresh_token?: string | null
  49 |           scope?: string | null
  50 |           session_state?: string | null
  51 |           token_type?: string | null
  52 |           type?: string
  53 |           userId?: string
  54 |         }
  55 |         Relationships: [
  56 |           {
  57 |             foreignKeyName: "accounts_userId_fkey"
  58 |             columns: ["userId"]
  59 |             isOneToOne: false
  60 |             referencedRelation: "users"
  61 |             referencedColumns: ["id"]
  62 |           },
  63 |         ]
  64 |       }
  65 |       git_providers: {
  66 |         Row: {
  67 |           access_token: string | null
  68 |           created_at: string
  69 |           display_name: string | null
  70 |           expires_at: string | null
  71 |           id: string
  72 |           name: string
  73 |           refresh_token: string | null
  74 |           server_url: string | null
  75 |           type: string
  76 |           updatedAt: string
  77 |           user_id: string
  78 |         }
  79 |         Insert: {
  80 |           access_token?: string | null
  81 |           created_at?: string
  82 |           display_name?: string | null
  83 |           expires_at?: string | null
  84 |           id?: string
  85 |           name: string
  86 |           refresh_token?: string | null
  87 |           server_url?: string | null
  88 |           type: string
  89 |           updatedAt?: string
  90 |           user_id: string
  91 |         }
  92 |         Update: {
  93 |           access_token?: string | null
  94 |           created_at?: string
  95 |           display_name?: string | null
  96 |           expires_at?: string | null
  97 |           id?: string
  98 |           name?: string
  99 |           refresh_token?: string | null
 100 |           server_url?: string | null
 101 |           type?: string
 102 |           updatedAt?: string
 103 |           user_id?: string
 104 |         }
 105 |         Relationships: []
 106 |       }
 107 |       hosts: {
 108 |         Row: {
 109 |           created_at: string
 110 |           description: string | null
 111 |           id: string
 112 |           ip: string
 113 |           is_windows: boolean
 114 |           name: string
 115 |           password: string | null
 116 |           port: number | null
 117 |           status: string
 118 |           type: string
 119 |           updated_at: string
 120 |           user: string | null
 121 |         }
 122 |         Insert: {
 123 |           created_at?: string
 124 |           description?: string | null
 125 |           id?: string
 126 |           ip: string
 127 |           is_windows?: boolean
 128 |           name: string
 129 |           password?: string | null
 130 |           port?: number | null
 131 |           status?: string
 132 |           type: string
 133 |           updated_at?: string
 134 |           user?: string | null
 135 |         }
 136 |         Update: {
 137 |           created_at?: string
 138 |           description?: string | null
 139 |           id?: string
 140 |           ip?: string
 141 |           is_windows?: boolean
 142 |           name?: string
 143 |           password?: string | null
 144 |           port?: number | null
 145 |           status?: string
 146 |           type?: string
 147 |           updated_at?: string
 148 |           user?: string | null
 149 |         }
 150 |         Relationships: []
 151 |       }
 152 |       repositories: {
 153 |         Row: {
 154 |           createdAt: string
 155 |           default_branch: string | null
 156 |           description: string | null
 157 |           id: string
 158 |           last_synced_at: string | null
 159 |           name: string
 160 |           provider_id: string
 161 |           sync_status: string
 162 |           updated_at: string
 163 |           url: string | null
 164 |         }
 165 |         Insert: {
 166 |           createdAt?: string
 167 |           default_branch?: string | null
 168 |           description?: string | null
 169 |           id?: string
 170 |           last_synced_at?: string | null
 171 |           name: string
 172 |           provider_id: string
 173 |           sync_status?: string
 174 |           updated_at?: string
 175 |           url?: string | null
 176 |         }
 177 |         Update: {
 178 |           createdAt?: string
 179 |           default_branch?: string | null
 180 |           description?: string | null
 181 |           id?: string
 182 |           last_synced_at?: string | null
 183 |           name?: string
 184 |           provider_id?: string
 185 |           sync_status?: string
 186 |           updated_at?: string
 187 |           url?: string | null
 188 |         }
 189 |         Relationships: [
 190 |           {
 191 |             foreignKeyName: "repositories_provider_id_fkey"
 192 |             columns: ["provider_id"]
 193 |             isOneToOne: false
 194 |             referencedRelation: "git_providers"
 195 |             referencedColumns: ["id"]
 196 |           },
 197 |         ]
 198 |       }
 199 |       tenants: {
 200 |         Row: {
 201 |           created_at: string
 202 |           domain: string | null
 203 |           id: string
 204 |           name: string
 205 |           plan: string
 206 |           updated_at: string
 207 |         }
 208 |         Insert: {
 209 |           created_at?: string
 210 |           domain?: string | null
 211 |           id?: string
 212 |           name: string
 213 |           plan?: string
 214 |           updated_at?: string
 215 |         }
 216 |         Update: {
 217 |           created_at?: string
 218 |           domain?: string | null
 219 |           id?: string
 220 |           name?: string
 221 |           plan?: string
 222 |           updated_at?: string
 223 |         }
 224 |         Relationships: []
 225 |       }
 226 |       users: {
 227 |         Row: {
 228 |           created_at: string
 229 |           email: string | null
 230 |           email_verified: string | null
 231 |           id: string
 232 |           image: string | null
 233 |           name: string | null
 234 |           password: string | null
 235 |           provider: string | null
 236 |           role: string
 237 |           tenant_id: string | null
 238 |           updated_at: string
 239 |         }
 240 |         Insert: {
 241 |           created_at?: string
 242 |           email?: string | null
 243 |           email_verified?: string | null
 244 |           id?: string
 245 |           image?: string | null
 246 |           name?: string | null
 247 |           password?: string | null
 248 |           provider?: string | null
 249 |           role?: string
 250 |           tenant_id?: string | null
 251 |           updated_at?: string
 252 |           user_role?: string
 253 |         }
 254 |         Update: {
 255 |           created_at?: string
 256 |           email?: string | null
 257 |           email_verified?: string | null
 258 |           id?: string
 259 |           image?: string | null
 260 |           name?: string | null
 261 |           password?: string | null
 262 |           provider?: string | null
 263 |           role?: string
 264 |           tenant_id?: string | null
 265 |           updated_at?: string
 266 |           user_role?: string
 267 |         }
 268 |         Relationships: [
 269 |           {
 270 |             foreignKeyName: "users_tenant_id_fkey"
 271 |             columns: ["tenant_id"]
 272 |             isOneToOne: false
 273 |             referencedRelation: "tenants"
 274 |             referencedColumns: ["id"]
 275 |           },
 276 |         ]
 277 |       }
 278 |     }
 279 |     Views: {
 280 |       [_ in never]: never
 281 |     }
 282 |     Functions: {
 283 |       gtrgm_compress: {
 284 |         Args: {
 285 |           "": unknown
 286 |         }
 287 |         Returns: unknown
 288 |       }
 289 |       gtrgm_decompress: {
 290 |         Args: {
 291 |           "": unknown
 292 |         }
 293 |         Returns: unknown
 294 |       }
 295 |       gtrgm_in: {
 296 |         Args: {
 297 |           "": unknown
 298 |         }
 299 |         Returns: unknown
 300 |       }
 301 |       gtrgm_options: {
 302 |         Args: {
 303 |           "": unknown
 304 |         }
 305 |         Returns: undefined
 306 |       }
 307 |       gtrgm_out: {
 308 |         Args: {
 309 |           "": unknown
 310 |         }
 311 |         Returns: unknown
 312 |       }
 313 |       set_limit: {
 314 |         Args: {
 315 |           "": number
 316 |         }
 317 |         Returns: number
 318 |       }
 319 |       show_limit: {
 320 |         Args: Record<PropertyKey, never>
 321 |         Returns: number
 322 |       }
 323 |       show_trgm: {
 324 |         Args: {
 325 |           "": string
 326 |         }
 327 |         Returns: string[]
 328 |       }
 329 |     }
 330 |     Enums: {
 331 |       [_ in never]: never
 332 |     }
 333 |     CompositeTypes: {
 334 |       [_ in never]: never
 335 |     }
 336 |   }
 337 | }
 338 | 
 339 | type PublicSchema = Database[Extract<keyof Database, "public">]
 340 | 
 341 | export type Tables<
 342 |   PublicTableNameOrOptions extends
 343 |     | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
 344 |     | { schema: keyof Database },
 345 |   TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
 346 |     ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
 347 |         Database[PublicTableNameOrOptions["schema"]]["Views"])
 348 |     : never = never,
 349 | > = PublicTableNameOrOptions extends { schema: keyof Database }
 350 |   ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
 351 |       Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
 352 |       Row: infer R
 353 |     }
 354 |     ? R
 355 |     : never
 356 |   : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
 357 |         PublicSchema["Views"])
 358 |     ? (PublicSchema["Tables"] &
 359 |         PublicSchema["Views"])[PublicTableNameOrOptions] extends {
 360 |         Row: infer R
 361 |       }
 362 |       ? R
 363 |       : never
 364 |     : never
 365 | 
 366 | export type TablesInsert<
 367 |   PublicTableNameOrOptions extends
 368 |     | keyof PublicSchema["Tables"]
 369 |     | { schema: keyof Database },
 370 |   TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
 371 |     ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
 372 |     : never = never,
 373 | > = PublicTableNameOrOptions extends { schema: keyof Database }
 374 |   ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
 375 |       Insert: infer I
 376 |     }
 377 |     ? I
 378 |     : never
 379 |   : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
 380 |     ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
 381 |         Insert: infer I
 382 |       }
 383 |       ? I
 384 |       : never
 385 |     : never
 386 | 
 387 | export type TablesUpdate<
 388 |   PublicTableNameOrOptions extends
 389 |     | keyof PublicSchema["Tables"]
 390 |     | { schema: keyof Database },
 391 |   TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
 392 |     ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
 393 |     : never = never,
 394 | > = PublicTableNameOrOptions extends { schema: keyof Database }
 395 |   ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
 396 |       Update: infer U
 397 |     }
 398 |     ? U
 399 |     : never
 400 |   : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
 401 |     ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
 402 |         Update: infer U
 403 |       }
 404 |       ? U
 405 |       : never
 406 |     : never
 407 | 
 408 | export type Enums<
 409 |   PublicEnumNameOrOptions extends
 410 |     | keyof PublicSchema["Enums"]
 411 |     | { schema: keyof Database },
 412 |   EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
 413 |     ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
 414 |     : never = never,
 415 | > = PublicEnumNameOrOptions extends { schema: keyof Database }
 416 |   ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
 417 |   : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
 418 |     ? PublicSchema["Enums"][PublicEnumNameOrOptions]
 419 |     : never
 420 | 
 421 | export type CompositeTypes<
 422 |   PublicCompositeTypeNameOrOptions extends
 423 |     | keyof PublicSchema["CompositeTypes"]
 424 |     | { schema: keyof Database },
 425 |   CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
 426 |     schema: keyof Database
 427 |   }
 428 |     ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
 429 |     : never = never,
 430 | > = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
 431 |   ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
 432 |   : PublicCompositeTypeNameOrOptions extends keyof PublicSchema["CompositeTypes"]
 433 |     ? PublicSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
 434 |     : never

```

`/workspaces/automai/src/types/usecase.ts`:

```ts
   1 | export type Project = {
   2 |   id: string;
   3 |   name: string;
   4 |   usecases: UseCase[];
   5 | };
   6 | 
   7 | export type UseCase = {
   8 |   id: string;
   9 |   shortId: string;
  10 |   name: string;
  11 |   projectId: string;
  12 |   project_id?: string;
  13 |   steps: { platform: string; code: string };
  14 |   createdAt: string;
  15 |   lastModified?: string;
  16 |   author?: string;
  17 |   status?: string;
  18 |   tags?: string[];
  19 | };
  20 | 
  21 | export type NewUseCase = {
  22 |   projectId: string;
  23 |   name: string;
  24 |   description: string;
  25 |   platform: string;
  26 | };

```

`/workspaces/automai/src/types/user.ts`:

```ts
   1 | // User role types
   2 | export interface UserRole {
   3 |   id: string;
   4 |   name: string;
   5 |   created_at: string;
   6 |   updated_at: string;
   7 | }
   8 | 
   9 | export interface UserRoleFilter {
  10 |   userId?: string;
  11 | }
  12 | 
  13 | // Role type used in RoleContext
  14 | export type Role = 'admin' | 'tester' | 'developer' | 'viewer';
  15 | 
  16 | // Interface for the UI representation of a role
  17 | export interface UIRole {
  18 |   id: string;
  19 |   name: string;
  20 |   icon?: string;
  21 | }
  22 | 
  23 | // Response types for user role actions
  24 | export interface UserRoleResponse {
  25 |   success: boolean;
  26 |   error?: string;
  27 |   data?: UserRole[];
  28 | }
  29 | 
  30 | export interface SingleUserRoleResponse {
  31 |   success: boolean;
  32 |   error?: string;
  33 |   data?: UserRole;
  34 | } 

```

`/workspaces/automai/src/types/auth.ts`:

```ts
   1 | import { User as SupabaseUser } from '@supabase/supabase-js';
   2 | 
   3 | export interface User {
   4 |   id: string;
   5 |   email?: string | null;
   6 |   name?: string | null;
   7 |   image?: string | null;
   8 |   role?: string;
   9 |   tenant_id?: string | null;
  10 |   tenant_name?: string | null;
  11 |   plan?: string;
  12 | }
  13 | 
  14 | export interface AuthSession {
  15 |   user: User;
  16 |   accessToken: string;
  17 | }
  18 | 
  19 | // Extend Supabase user with our custom metadata
  20 | export interface CustomSupabaseUser extends SupabaseUser {
  21 |   user_metadata: {
  22 |     name?: string;
  23 |     role?: string;
  24 |     tenant_id?: string;
  25 |     tenant_name?: string;
  26 |     plan?: string;
  27 |   };
  28 | }

```

`/workspaces/automai/src/types/hosts.ts`:

```ts
   1 | export type ConnectionType = 'portainer' | 'docker' | 'ssh' | 'unknown';
   2 | 
   3 | export interface Host {
   4 |   id: string;
   5 |   name: string;
   6 |   description?: string;
   7 | 
   8 |   // Connection details
   9 |   type: 'ssh' | 'docker' | 'portainer';
  10 |   ip: string;
  11 |   port?: number;
  12 | 
  13 |   // SSH specific fields
  14 |   user?: string;
  15 |   password?: string;
  16 | 
  17 |   // Status fields
  18 |   status: 'connected' | 'failed' | 'pending'; 
  19 | 
  20 |   created_at: Date;
  21 |   updated_at: Date;
  22 |   is_windows: Boolean;
  23 | }

```

`/workspaces/automai/src/types/sidebar.ts`:

```ts
   1 | export type SidebarContext = {
   2 |   state: 'expanded' | 'collapsed';
   3 |   open: boolean;
   4 |   setOpen: (open: boolean) => void;
   5 |   openMobile: boolean;
   6 |   setOpenMobile: (open: boolean) => void;
   7 |   isMobile: boolean;
   8 |   toggleSidebar: () => void;
   9 | };
  10 | 
  11 | export type SidebarProviderProps = React.ComponentProps<'div'> & {
  12 |   defaultOpen?: boolean;
  13 |   open?: boolean;
  14 |   onOpenChange?: (open: boolean) => void;
  15 | };
  16 | 
  17 | export type SidebarProps = React.ComponentProps<'div'> & {
  18 |   side?: 'left' | 'right';
  19 |   variant?: 'sidebar' | 'floating' | 'inset';
  20 |   collapsible?: 'offcanvas' | 'icon' | 'none';
  21 | };

```

`/workspaces/automai/src/types/scripts.ts`:

```ts
   1 | export type ScriptLanguage = 'bash' | 'python' | 'javascript' | 'typescript';
   2 | export type ScriptStatus = 'active' | 'inactive' | 'draft';
   3 | export type ScriptRunStatus = 'success' | 'failed' | 'pending' | 'running';
   4 | 
   5 | export interface Script {
   6 |   id: string;
   7 |   name: string;
   8 |   description?: string;
   9 |   content: string;
  10 |   language: ScriptLanguage;
  11 |   status: ScriptStatus;
  12 |   tenant_id: string;
  13 |   created_at: string;
  14 |   updated_at: string;
  15 |   last_run_at?: string;
  16 |   last_run_status?: ScriptRunStatus;
  17 |   last_run_output?: string;
  18 |   tags?: string[];
  19 | }
  20 | 
  21 | export interface ScriptRun {
  22 |   id: string;
  23 |   script_id: string;
  24 |   host_id?: string;
  25 |   status: ScriptRunStatus;
  26 |   output: string;
  27 |   error?: string;
  28 |   started_at: string;
  29 |   completed_at?: string;
  30 |   duration_ms?: number;
  31 | }
  32 | 
  33 | export interface ScriptFilter {
  34 |   status?: ScriptStatus;
  35 |   language?: ScriptLanguage;
  36 |   tags?: string[];
  37 | } 

```

`/workspaces/automai/src/types/environment.d.ts`:

```ts
   1 | declare global {
   2 |   namespace NodeJS {
   3 |     interface ProcessEnv {
   4 |       NODE_ENV: 'development' | 'production' | 'test' | 'codespace';
   5 |       ENV_FILE?: string;
   6 |       CODESPACE?: string;
   7 |       HOST?: string;
   8 |       PORT?: string;
   9 |       // Database connections
  10 |       DATABASE_URL?: string;
  11 |       // Supabase
  12 |       NEXT_PUBLIC_SUPABASE_URL?: string;
  13 |       NEXT_PUBLIC_SUPABASE_ANON_KEY?: string;
  14 |       SUPABASE_SERVICE_ROLE_KEY?: string;
  15 |       // Auth
  16 |       JWT_SECRET?: string;
  17 |       NEXT_PUBLIC_SITE_URL?: string;
  18 |     }
  19 |   }
  20 | }
  21 | 
  22 | export {}; 

```

`/workspaces/automai/src/hooks/useUserRoles.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | import { useCallback, useEffect, useState } from 'react';
   5 | import { 
   6 |   getUserRoles,
   7 |   createUserRole,
   8 |   updateUserRole,
   9 |   deleteUserRole,
  10 |   getCurrentUserRoles,
  11 | } from '@/app/actions/user';
  12 | import { UserRole, UIRole } from '@/types/user';
  13 | import { useToast } from '@/components/shadcn/use-toast';
  14 | import { useAuth } from '@/hooks/useAuth';
  15 | import { useRole } from '@/context/RoleContext';
  16 | 
  17 | export function useUserRoles() {
  18 |   const [roles, setRoles] = useState<UIRole[]>([]);
  19 |   const [isLoading, setIsLoading] = useState(true);
  20 |   const { user, loading: authLoading } = useAuth();
  21 |   const { role: currentRole, setRole: setCurrentRole } = useRole();
  22 |   const { toast } = useToast();
  23 | 
  24 |   const fetchRoles = useCallback(async () => {
  25 |     // Don't try to fetch roles if auth is still loading or user is null
  26 |     if (authLoading) {
  27 |       return;
  28 |     }
  29 |     
  30 |     if (!user) {
  31 |       setRoles([]);
  32 |       setIsLoading(false);
  33 |       return;
  34 |     }
  35 | 
  36 |     try {
  37 |       setIsLoading(true);
  38 |       const response = await getUserRoles(user.id);
  39 |       
  40 |       if (response.success && response.data) {
  41 |         // Map database roles to UI roles with icons
  42 |         const rolesWithIcons = response.data.map(role => ({
  43 |           id: role.id,
  44 |           name: role.name,
  45 |           icon: getRoleIcon(role.name),
  46 |         }));
  47 | 
  48 |         setRoles(rolesWithIcons);
  49 |         
  50 |         // Update the current role in context if needed
  51 |         if (response.data.length > 0 && response.data[0].name !== currentRole) {
  52 |           setCurrentRole(response.data[0].name as any);
  53 |         }
  54 |       } else {
  55 |         // Set default role if fetch fails with "User not found"
  56 |         if (response.error === 'User not found') {
  57 |           setRoles([
  58 |             { id: user.id, name: 'user', icon: getRoleIcon('user') },
  59 |           ]);
  60 |         } else {
  61 |           throw new Error(response.error || 'Failed to fetch user roles');
  62 |         }
  63 |       }
  64 |     } catch (error) {
  65 |       console.error('Error fetching user roles:', error);
  66 |       // Don't show toast for expected errors like "User not found"
  67 |       if (error instanceof Error && error.message !== 'User not found') {
  68 |         toast({
  69 |           title: 'Error',
  70 |           description: 'Failed to fetch user roles',
  71 |           variant: 'destructive',
  72 |         });
  73 |       }
  74 |       // Set default role if fetch fails
  75 |       setRoles([
  76 |         { id: user.id, name: 'user', icon: getRoleIcon('user') },
  77 |       ]);
  78 |     } finally {
  79 |       setIsLoading(false);
  80 |     }
  81 |   }, [user, authLoading, toast, currentRole, setCurrentRole]);
  82 | 
  83 |   // Helper function to get role icon
  84 |   const getRoleIcon = (roleName: string) => {
  85 |     switch (roleName.toLowerCase()) {
  86 |       case 'admin':
  87 |         return 'admin-icon';
  88 |       case 'developer':
  89 |         return 'developer-icon';
  90 |       case 'operator':
  91 |         return 'operator-icon';
  92 |       default:
  93 |         return 'user-icon';
  94 |     }
  95 |   };
  96 | 
  97 |   // Fetch roles on mount or when user changes or auth loading state changes
  98 |   useEffect(() => {
  99 |     if (!authLoading) {
 100 |       fetchRoles();
 101 |     }
 102 |   }, [fetchRoles, authLoading]);
 103 | 
 104 |   const create = async (data: Partial<UserRole>) => {
 105 |     try {
 106 |       // Ensure the user ID is set
 107 |       const roleData = { ...data, id: user?.id };
 108 |       
 109 |       const response = await createUserRole(roleData);
 110 |       if (response.success && response.data) {
 111 |         const newRole: UIRole = {
 112 |           id: response.data.id,
 113 |           name: response.data.name,
 114 |           icon: getRoleIcon(response.data.name)
 115 |         };
 116 |         setRoles([newRole]);
 117 |         
 118 |         // Update the current role in context
 119 |         setCurrentRole(response.data.name as any);
 120 |         
 121 |         return newRole;
 122 |       } else {
 123 |         throw new Error(response.error || 'Failed to create user role');
 124 |       }
 125 |     } catch (err) {
 126 |       throw err instanceof Error ? err : new Error('Failed to create user role');
 127 |     }
 128 |   };
 129 | 
 130 |   const update = async (id: string, data: Partial<UserRole>) => {
 131 |     try {
 132 |       const response = await updateUserRole(id, data);
 133 |       if (response.success && response.data) {
 134 |         const updatedRole: UIRole = {
 135 |           id: response.data.id,
 136 |           name: response.data.name,
 137 |           icon: getRoleIcon(response.data.name)
 138 |         };
 139 |         setRoles([updatedRole]);
 140 |         
 141 |         // Update the current role in context
 142 |         setCurrentRole(response.data.name as any);
 143 |         
 144 |         return updatedRole;
 145 |       } else {
 146 |         throw new Error(response.error || 'Failed to update user role');
 147 |       }
 148 |     } catch (err) {
 149 |       throw err instanceof Error ? err : new Error('Failed to update user role');
 150 |     }
 151 |   };
 152 | 
 153 |   const remove = async (id: string) => {
 154 |     try {
 155 |       await deleteUserRole(id);
 156 |       
 157 |       // Reset to default role
 158 |       const defaultRole: UIRole = { id: user?.id || 'default', name: 'user', icon: getRoleIcon('user') };
 159 |       setRoles([defaultRole]);
 160 |       
 161 |       // Update the current role in context
 162 |       setCurrentRole('user');
 163 |     } catch (err) {
 164 |       throw err instanceof Error ? err : new Error('Failed to delete user role');
 165 |     }
 166 |   };
 167 | 
 168 |   // Hook to get current user's roles
 169 |   const useCurrentUserRoles = () => {
 170 |     const [currentRoles, setCurrentRoles] = useState<UserRole[]>([]);
 171 |     const [isCurrentLoading, setIsCurrentLoading] = useState(true);
 172 |     const [currentError, setCurrentError] = useState<Error | null>(null);
 173 | 
 174 |     const fetchCurrentRoles = useCallback(async () => {
 175 |       try {
 176 |         setIsCurrentLoading(true);
 177 |         setCurrentError(null);
 178 |         const response = await getCurrentUserRoles();
 179 |         if (response.success && response.data) {
 180 |           setCurrentRoles(response.data);
 181 |         } else {
 182 |           throw new Error(response.error || 'Failed to fetch current user roles');
 183 |         }
 184 |       } catch (err) {
 185 |         setCurrentError(err instanceof Error ? err : new Error('Failed to fetch current user roles'));
 186 |       } finally {
 187 |         setIsCurrentLoading(false);
 188 |       }
 189 |     }, []);
 190 | 
 191 |     useEffect(() => {
 192 |       fetchCurrentRoles();
 193 |     }, [fetchCurrentRoles]);
 194 | 
 195 |     return {
 196 |       currentRoles,
 197 |       isCurrentLoading,
 198 |       currentError,
 199 |       refreshCurrentRoles: fetchCurrentRoles
 200 |     };
 201 |   };
 202 | 
 203 |   return {
 204 |     roles,
 205 |     isLoading,
 206 |     create,
 207 |     update,
 208 |     remove,
 209 |     useCurrentUserRoles,
 210 |     refreshRoles: fetchRoles
 211 |   };
 212 | }

```

`/workspaces/automai/src/hooks/useSidebar.ts`:

```ts
   1 | 'use client';
   2 | import { useEffect, useLayoutEffect } from 'react';
   3 | import { useSidebar as useContextSidebar } from '@/context/SidebarContext';
   4 | import { SIDEBAR_WIDTH, SIDEBAR_WIDTH_ICON } from '@/components/sidebar/constants';
   5 | 
   6 | // Create a safe version of useLayoutEffect that falls back to useEffect during SSR
   7 | const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;
   8 | 
   9 | export function useSidebar() {
  10 |   const sidebarContext = useContextSidebar();
  11 |   
  12 |   // Use useLayoutEffect to set CSS variable for sidebar width offset before browser paint
  13 |   // This helps prevent layout shifts and flickering
  14 |   useIsomorphicLayoutEffect(() => {
  15 |     if (typeof document !== 'undefined') {
  16 |       const root = document.documentElement;
  17 |       const offset = sidebarContext.open ? SIDEBAR_WIDTH : SIDEBAR_WIDTH_ICON;
  18 |       root.style.setProperty('--sidebar-width-offset', offset);
  19 |       
  20 |       // Also set a class on the body to help with responsive styling
  21 |       if (sidebarContext.open) {
  22 |         document.body.classList.add('sidebar-expanded');
  23 |         document.body.classList.remove('sidebar-collapsed');
  24 |       } else {
  25 |         document.body.classList.add('sidebar-collapsed');
  26 |         document.body.classList.remove('sidebar-expanded');
  27 |       }
  28 |     }
  29 |   }, [sidebarContext.open]);
  30 |   
  31 |   return sidebarContext;
  32 | }

```

`/workspaces/automai/src/hooks/useProjects.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import { useState, useCallback, useEffect } from 'react';
   4 | import { useToast } from '@/components/shadcn/use-toast';
   5 | import { 
   6 |   getProjects, 
   7 |   getProject, 
   8 |   createProject, 
   9 |   updateProject, 
  10 |   deleteProject,
  11 |   Project
  12 | } from '@/app/actions/projects';
  13 | 
  14 | export function useProjects() {
  15 |   const [projects, setProjects] = useState<Project[]>([]);
  16 |   const [currentProject, setCurrentProject] = useState<Project | null>(null);
  17 |   const [loading, setLoading] = useState(true);
  18 |   const [error, setError] = useState<Error | null>(null);
  19 |   const { toast } = useToast();
  20 | 
  21 |   const fetchProjects = useCallback(async () => {
  22 |     try {
  23 |       setLoading(true);
  24 |       setError(null);
  25 |       
  26 |       const result = await getProjects();
  27 |       
  28 |       if (!result.success) {
  29 |         setError(new Error(result.error || 'Failed to fetch projects'));
  30 |         return;
  31 |       }
  32 |       
  33 |       setProjects(result.data || []);
  34 |     } catch (err) {
  35 |       setError(err instanceof Error ? err : new Error('Failed to fetch projects'));
  36 |     } finally {
  37 |       setLoading(false);
  38 |     }
  39 |   }, []);
  40 | 
  41 |   const fetchProject = useCallback(async (id: string) => {
  42 |     try {
  43 |       setLoading(true);
  44 |       setError(null);
  45 |       
  46 |       const result = await getProject(id);
  47 |       
  48 |       if (!result.success) {
  49 |         setError(new Error(result.error || 'Failed to fetch project'));
  50 |         return null;
  51 |       }
  52 |       
  53 |       setCurrentProject(result.data);
  54 |       return result.data;
  55 |     } catch (err) {
  56 |       setError(err instanceof Error ? err : new Error('Failed to fetch project'));
  57 |       return null;
  58 |     } finally {
  59 |       setLoading(false);
  60 |     }
  61 |   }, []);
  62 | 
  63 |   const addProject = useCallback(async (projectData: Omit<Project, 'id' | 'created_at' | 'updated_at' | 'tenant_id'>) => {
  64 |     try {
  65 |       setLoading(true);
  66 |       setError(null);
  67 |       
  68 |       const result = await createProject(projectData);
  69 |       
  70 |       if (!result.success) {
  71 |         setError(new Error(result.error || 'Failed to create project'));
  72 |         toast({
  73 |           title: 'Error',
  74 |           description: result.error || 'Failed to create project',
  75 |           variant: 'destructive',
  76 |         });
  77 |         return null;
  78 |       }
  79 |       
  80 |       // Update local state optimistically
  81 |       setProjects(prev => [result.data, ...prev]);
  82 |       
  83 |       toast({
  84 |         title: 'Success',
  85 |         description: 'Project created successfully',
  86 |       });
  87 |       
  88 |       return result.data;
  89 |     } catch (err) {
  90 |       const errorMessage = err instanceof Error ? err.message : 'Failed to create project';
  91 |       setError(err instanceof Error ? err : new Error(errorMessage));
  92 |       toast({
  93 |         title: 'Error',
  94 |         description: errorMessage,
  95 |         variant: 'destructive',
  96 |       });
  97 |       return null;
  98 |     } finally {
  99 |       setLoading(false);
 100 |     }
 101 |   }, [toast]);
 102 | 
 103 |   const editProject = useCallback(async (id: string, projectData: Partial<Omit<Project, 'id' | 'created_at' | 'updated_at' | 'tenant_id'>>) => {
 104 |     try {
 105 |       setLoading(true);
 106 |       setError(null);
 107 |       
 108 |       const result = await updateProject(id, projectData);
 109 |       
 110 |       if (!result.success) {
 111 |         setError(new Error(result.error || 'Failed to update project'));
 112 |         toast({
 113 |           title: 'Error',
 114 |           description: result.error || 'Failed to update project',
 115 |           variant: 'destructive',
 116 |         });
 117 |         return null;
 118 |       }
 119 |       
 120 |       // Update local state optimistically
 121 |       setProjects(prev => prev.map(project => 
 122 |         project.id === id ? result.data : project
 123 |       ));
 124 |       
 125 |       if (currentProject?.id === id) {
 126 |         setCurrentProject(result.data);
 127 |       }
 128 |       
 129 |       toast({
 130 |         title: 'Success',
 131 |         description: 'Project updated successfully',
 132 |       });
 133 |       
 134 |       return result.data;
 135 |     } catch (err) {
 136 |       const errorMessage = err instanceof Error ? err.message : 'Failed to update project';
 137 |       setError(err instanceof Error ? err : new Error(errorMessage));
 138 |       toast({
 139 |         title: 'Error',
 140 |         description: errorMessage,
 141 |         variant: 'destructive',
 142 |       });
 143 |       return null;
 144 |     } finally {
 145 |       setLoading(false);
 146 |     }
 147 |   }, [currentProject, toast]);
 148 | 
 149 |   const removeProject = useCallback(async (id: string) => {
 150 |     try {
 151 |       setLoading(true);
 152 |       setError(null);
 153 |       
 154 |       const result = await deleteProject(id);
 155 |       
 156 |       if (!result.success) {
 157 |         setError(new Error(result.error || 'Failed to delete project'));
 158 |         toast({
 159 |           title: 'Error',
 160 |           description: result.error || 'Failed to delete project',
 161 |           variant: 'destructive',
 162 |         });
 163 |         return false;
 164 |       }
 165 |       
 166 |       // Update local state optimistically
 167 |       setProjects(prev => prev.filter(project => project.id !== id));
 168 |       
 169 |       if (currentProject?.id === id) {
 170 |         setCurrentProject(null);
 171 |       }
 172 |       
 173 |       toast({
 174 |         title: 'Success',
 175 |         description: 'Project deleted successfully',
 176 |       });
 177 |       
 178 |       return true;
 179 |     } catch (err) {
 180 |       const errorMessage = err instanceof Error ? err.message : 'Failed to delete project';
 181 |       setError(err instanceof Error ? err : new Error(errorMessage));
 182 |       toast({
 183 |         title: 'Error',
 184 |         description: errorMessage,
 185 |         variant: 'destructive',
 186 |       });
 187 |       return false;
 188 |     } finally {
 189 |       setLoading(false);
 190 |     }
 191 |   }, [currentProject, toast]);
 192 | 
 193 |   // Fetch projects on mount
 194 |   useEffect(() => {
 195 |     fetchProjects();
 196 |   }, [fetchProjects]);
 197 | 
 198 |   return {
 199 |     projects,
 200 |     currentProject,
 201 |     loading,
 202 |     error,
 203 |     fetchProjects,
 204 |     fetchProject,
 205 |     addProject,
 206 |     editProject,
 207 |     removeProject
 208 |   };
 209 | } 

```

`/workspaces/automai/src/hooks/useProfile.ts`:

```ts
   1 | 'use client';
   2 | import { useState, useCallback } from 'react';
   3 | import { useToast } from '@/components/shadcn/use-toast';
   4 | import { useAuth } from '@/hooks/useAuth';
   5 | import { updateUserProfile } from '@/app/actions/profile';
   6 | 
   7 | interface ProfileData {
   8 |   name?: string;
   9 |   avatar_url?: string;
  10 | }
  11 | 
  12 | export function useProfile() {
  13 |   const [isUpdating, setIsUpdating] = useState(false);
  14 |   const { user, refreshUser } = useAuth();
  15 |   const { toast } = useToast();
  16 | 
  17 |   const updateProfile = useCallback(async (data: ProfileData | FormData) => {
  18 |     if (!user) {
  19 |       toast({
  20 |         title: 'Error',
  21 |         description: 'You must be logged in to update your profile',
  22 |         variant: 'destructive',
  23 |       });
  24 |       return false;
  25 |     }
  26 | 
  27 |     try {
  28 |       setIsUpdating(true);
  29 |       console.log('🔄 PROFILE HOOK - UPDATED 2025-03-09: Updating profile with data:', 
  30 |         data instanceof FormData 
  31 |         ? Object.fromEntries(data.entries()) 
  32 |         : data);
  33 |       
  34 |       // Handle either FormData or direct object
  35 |       let profileData;
  36 |       if (data instanceof FormData) {
  37 |         profileData = {
  38 |           name: data.get('name') as string,
  39 |           avatar_url: data.get('avatar_url') as string || undefined
  40 |         };
  41 |         await updateUserProfile(profileData);
  42 |       } else {
  43 |         profileData = data;
  44 |         await updateUserProfile(data);
  45 |       }
  46 |       
  47 |       console.log('🔄 PROFILE HOOK: Profile updated with name:', profileData.name);
  48 |       console.log('🔄 PROFILE HOOK: Forcing user data refresh...');
  49 |       
  50 |       // Force refresh user data
  51 |       await refreshUser();
  52 |       
  53 |       console.log('🔄 PROFILE HOOK: User data refreshed after profile update');
  54 |       toast({
  55 |         title: 'Success',
  56 |         description: 'Profile updated successfully',
  57 |       });
  58 |       return true;
  59 |     } catch (error) {
  60 |       console.error('Error updating profile:', error);
  61 |       toast({
  62 |         title: 'Error',
  63 |         description: 'Failed to update profile',
  64 |         variant: 'destructive',
  65 |       });
  66 |       return false;
  67 |     } finally {
  68 |       setIsUpdating(false);
  69 |     }
  70 |   }, [user, refreshUser, toast]);
  71 | 
  72 |   return {
  73 |     updateProfile,
  74 |     isUpdating,
  75 |   };
  76 | } 

```

`/workspaces/automai/src/hooks/useGitProviders.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import { useState, useCallback, useEffect } from 'react';
   4 | import { useToast } from '@/components/shadcn/use-toast';
   5 | import { GitProvider } from '@/types/repositories';
   6 | import { 
   7 |   getGitProviders, 
   8 |   addGitProvider, 
   9 |   updateGitProvider, 
  10 |   refreshGitProvider 
  11 | } from '@/app/actions/git-providers';
  12 | 
  13 | export function useGitProviders() {
  14 |   const [providers, setProviders] = useState<GitProvider[]>([]);
  15 |   const [isLoading, setIsLoading] = useState(true);
  16 |   const [isRefreshing, setIsRefreshing] = useState<string | null>(null);
  17 |   const [isAddingProvider, setIsAddingProvider] = useState(false);
  18 |   const [editingProvider, setEditingProvider] = useState<GitProvider | null>(null);
  19 |   const { toast } = useToast();
  20 | 
  21 |   const fetchProviders = useCallback(async () => {
  22 |     try {
  23 |       setIsLoading(true);
  24 |       const response = await getGitProviders();
  25 |       if (response.success && response.data) {
  26 |         setProviders(response.data);
  27 |       } else {
  28 |         throw new Error(response.error || 'Failed to fetch git providers');
  29 |       }
  30 |     } catch (error) {
  31 |       console.error('Error fetching git providers:', error);
  32 |       toast({
  33 |         title: 'Error',
  34 |         description: 'Failed to fetch git providers',
  35 |         variant: 'destructive',
  36 |       });
  37 |     } finally {
  38 |       setIsLoading(false);
  39 |     }
  40 |   }, [toast]);
  41 | 
  42 |   const addProvider = useCallback(async (data: Omit<GitProvider, 'id'>) => {
  43 |     try {
  44 |       setIsAddingProvider(true);
  45 |       const newProvider = await addGitProvider(data);
  46 |       setProviders(prev => [...prev, newProvider]);
  47 |       toast({
  48 |         title: 'Success',
  49 |         description: 'Git provider added successfully',
  50 |       });
  51 |       return true;
  52 |     } catch (error) {
  53 |       console.error('Error adding git provider:', error);
  54 |       toast({
  55 |         title: 'Error',
  56 |         description: 'Failed to add git provider',
  57 |         variant: 'destructive',
  58 |       });
  59 |       return false;
  60 |     } finally {
  61 |       setIsAddingProvider(false);
  62 |     }
  63 |   }, [toast]);
  64 | 
  65 |   const editProvider = useCallback(async (id: string, data: Partial<GitProvider>) => {
  66 |     try {
  67 |       const updatedProvider = await updateGitProvider(id, data);
  68 |       setProviders(prev => 
  69 |         prev.map(provider => provider.id === id ? updatedProvider : provider)
  70 |       );
  71 |       setEditingProvider(null);
  72 |       toast({
  73 |         title: 'Success',
  74 |         description: 'Git provider updated successfully',
  75 |       });
  76 |       return true;
  77 |     } catch (error) {
  78 |       console.error('Error updating git provider:', error);
  79 |       toast({
  80 |         title: 'Error',
  81 |         description: 'Failed to update git provider',
  82 |         variant: 'destructive',
  83 |       });
  84 |       return false;
  85 |     }
  86 |   }, [toast]);
  87 | 
  88 |   const refreshProvider = useCallback(async (id: string) => {
  89 |     try {
  90 |       setIsRefreshing(id);
  91 |       const updatedProvider = await refreshGitProvider(id);
  92 |       setProviders(prev => 
  93 |         prev.map(provider => provider.id === id ? updatedProvider : provider)
  94 |       );
  95 |       toast({
  96 |         title: 'Success',
  97 |         description: 'Git provider refreshed successfully',
  98 |       });
  99 |     } catch (error) {
 100 |       console.error('Error refreshing git provider:', error);
 101 |       toast({
 102 |         title: 'Error',
 103 |         description: 'Failed to refresh git provider',
 104 |         variant: 'destructive',
 105 |       });
 106 |     } finally {
 107 |       setIsRefreshing(null);
 108 |     }
 109 |   }, [toast]);
 110 | 
 111 |   // Fetch providers on mount
 112 |   useEffect(() => {
 113 |     fetchProviders();
 114 |   }, [fetchProviders]);
 115 | 
 116 |   return {
 117 |     providers,
 118 |     isLoading,
 119 |     isRefreshing,
 120 |     refreshProvider,
 121 |     addProvider,
 122 |     isAddingProvider,
 123 |     editProvider,
 124 |     editingProvider,
 125 |     setEditingProvider,
 126 |   };
 127 | } 

```

`/workspaces/automai/src/hooks/useRepositories.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import { useState, useCallback, useEffect } from 'react';
   4 | import { useToast } from '@/components/shadcn/use-toast';
   5 | import { 
   6 |   getRepositories, 
   7 |   createRepository, 
   8 |   updateRepository, 
   9 |   deleteRepository, 
  10 |   syncRepository 
  11 | } from '@/app/actions/repositories';
  12 | import { Repository } from '@/types/repositories';
  13 | 
  14 | export function useRepositories(initialProviderId?: string) {
  15 |   const [repositories, setRepositories] = useState<Repository[]>([]);
  16 |   const [loading, setLoading] = useState(true);
  17 |   const [error, setError] = useState<Error | null>(null);
  18 |   const { toast } = useToast();
  19 | 
  20 |   const fetchRepositories = useCallback(async (providerId?: string) => {
  21 |     try {
  22 |       setLoading(true);
  23 |       setError(null);
  24 |       
  25 |       const filter = providerId ? { providerId } : undefined;
  26 |       const result = await getRepositories(filter);
  27 |       
  28 |       if (!result.success) {
  29 |         setError(new Error(result.error || 'Failed to fetch repositories'));
  30 |         toast({
  31 |           title: 'Error',
  32 |           description: result.error || 'Failed to fetch repositories',
  33 |           variant: 'destructive',
  34 |         });
  35 |         return;
  36 |       }
  37 |       
  38 |       setRepositories(result.data || []);
  39 |     } catch (err) {
  40 |       const errorMessage = err instanceof Error ? err.message : 'Failed to fetch repositories';
  41 |       setError(err instanceof Error ? err : new Error(errorMessage));
  42 |       toast({
  43 |         title: 'Error',
  44 |         description: errorMessage,
  45 |         variant: 'destructive',
  46 |       });
  47 |     } finally {
  48 |       setLoading(false);
  49 |     }
  50 |   }, [toast]);
  51 | 
  52 |   const addRepository = useCallback(async (data: Partial<Repository>) => {
  53 |     try {
  54 |       setLoading(true);
  55 |       setError(null);
  56 |       
  57 |       const result = await createRepository(data);
  58 |       
  59 |       if (!result.success) {
  60 |         setError(new Error(result.error || 'Failed to create repository'));
  61 |         toast({
  62 |           title: 'Error',
  63 |           description: result.error || 'Failed to create repository',
  64 |           variant: 'destructive',
  65 |         });
  66 |         return null;
  67 |       }
  68 |       
  69 |       // Update local state optimistically
  70 |       setRepositories(prev => [result.data!, ...prev]);
  71 |       
  72 |       toast({
  73 |         title: 'Success',
  74 |         description: 'Repository created successfully',
  75 |       });
  76 |       
  77 |       return result.data;
  78 |     } catch (err) {
  79 |       const errorMessage = err instanceof Error ? err.message : 'Failed to create repository';
  80 |       setError(err instanceof Error ? err : new Error(errorMessage));
  81 |       toast({
  82 |         title: 'Error',
  83 |         description: errorMessage,
  84 |         variant: 'destructive',
  85 |       });
  86 |       return null;
  87 |     } finally {
  88 |       setLoading(false);
  89 |     }
  90 |   }, [toast]);
  91 | 
  92 |   const updateRepo = useCallback(async (id: string, updates: Partial<Repository>) => {
  93 |     try {
  94 |       setLoading(true);
  95 |       setError(null);
  96 |       
  97 |       const result = await updateRepository(id, updates);
  98 |       
  99 |       if (!result.success) {
 100 |         setError(new Error(result.error || 'Failed to update repository'));
 101 |         toast({
 102 |           title: 'Error',
 103 |           description: result.error || 'Failed to update repository',
 104 |           variant: 'destructive',
 105 |         });
 106 |         return null;
 107 |       }
 108 |       
 109 |       // Update local state optimistically
 110 |       setRepositories(prev => 
 111 |         prev.map(repo => repo.id === id ? result.data! : repo)
 112 |       );
 113 |       
 114 |       toast({
 115 |         title: 'Success',
 116 |         description: 'Repository updated successfully',
 117 |       });
 118 |       
 119 |       return result.data;
 120 |     } catch (err) {
 121 |       const errorMessage = err instanceof Error ? err.message : 'Failed to update repository';
 122 |       setError(err instanceof Error ? err : new Error(errorMessage));
 123 |       toast({
 124 |         title: 'Error',
 125 |         description: errorMessage,
 126 |         variant: 'destructive',
 127 |       });
 128 |       return null;
 129 |     } finally {
 130 |       setLoading(false);
 131 |     }
 132 |   }, [toast]);
 133 | 
 134 |   const removeRepository = useCallback(async (id: string) => {
 135 |     try {
 136 |       setLoading(true);
 137 |       setError(null);
 138 |       
 139 |       const result = await deleteRepository(id);
 140 |       
 141 |       if (!result.success) {
 142 |         setError(new Error(result.error || 'Failed to delete repository'));
 143 |         toast({
 144 |           title: 'Error',
 145 |           description: result.error || 'Failed to delete repository',
 146 |           variant: 'destructive',
 147 |         });
 148 |         return false;
 149 |       }
 150 |       
 151 |       // Update local state optimistically
 152 |       setRepositories(prev => prev.filter(repo => repo.id !== id));
 153 |       
 154 |       toast({
 155 |         title: 'Success',
 156 |         description: 'Repository deleted successfully',
 157 |       });
 158 |       
 159 |       return true;
 160 |     } catch (err) {
 161 |       const errorMessage = err instanceof Error ? err.message : 'Failed to delete repository';
 162 |       setError(err instanceof Error ? err : new Error(errorMessage));
 163 |       toast({
 164 |         title: 'Error',
 165 |         description: errorMessage,
 166 |         variant: 'destructive',
 167 |       });
 168 |       return false;
 169 |     } finally {
 170 |       setLoading(false);
 171 |     }
 172 |   }, [toast]);
 173 | 
 174 |   const syncRepo = useCallback(async (id: string) => {
 175 |     try {
 176 |       setLoading(true);
 177 |       setError(null);
 178 |       
 179 |       const result = await syncRepository(id);
 180 |       
 181 |       if (!result.success) {
 182 |         setError(new Error(result.error || 'Failed to sync repository'));
 183 |         toast({
 184 |           title: 'Error',
 185 |           description: result.error || 'Failed to sync repository',
 186 |           variant: 'destructive',
 187 |         });
 188 |         return null;
 189 |       }
 190 |       
 191 |       // Update local state optimistically
 192 |       setRepositories(prev => 
 193 |         prev.map(repo => repo.id === id ? result.data! : repo)
 194 |       );
 195 |       
 196 |       toast({
 197 |         title: 'Success',
 198 |         description: 'Repository synced successfully',
 199 |       });
 200 |       
 201 |       return result.data;
 202 |     } catch (err) {
 203 |       const errorMessage = err instanceof Error ? err.message : 'Failed to sync repository';
 204 |       setError(err instanceof Error ? err : new Error(errorMessage));
 205 |       toast({
 206 |         title: 'Error',
 207 |         description: errorMessage,
 208 |         variant: 'destructive',
 209 |       });
 210 |       return null;
 211 |     } finally {
 212 |       setLoading(false);
 213 |     }
 214 |   }, [toast]);
 215 | 
 216 |   // Fetch repositories on mount
 217 |   useEffect(() => {
 218 |     fetchRepositories(initialProviderId);
 219 |   }, [fetchRepositories, initialProviderId]);
 220 | 
 221 |   return {
 222 |     repositories,
 223 |     loading,
 224 |     error,
 225 |     fetchRepositories,
 226 |     addRepository,
 227 |     updateRepository: updateRepo,
 228 |     deleteRepository: removeRepository,
 229 |     syncRepository: syncRepo
 230 |   };
 231 | }

```

`/workspaces/automai/src/hooks/useTenants.ts`:

```ts
   1 | import { useState, useCallback, useEffect } from 'react';
   2 | import { useToast } from '@/components/shadcn/use-toast';
   3 | import { useAuth } from '@/hooks/useAuth';
   4 | import { getTenants, switchTenant as switchTenantAction } from '@/app/actions/tenants';
   5 | 
   6 | interface Tenant {
   7 |   id: string;
   8 |   name: string;
   9 |   iconName?: string;
  10 | }
  11 | 
  12 | export function useTenants() {
  13 |   const [tenants, setTenants] = useState<Tenant[]>([]);
  14 |   const [currentTenant, setCurrentTenant] = useState<Tenant | null>(null);
  15 |   const [isLoading, setIsLoading] = useState(true);
  16 |   const { user } = useAuth();
  17 |   const { toast } = useToast();
  18 | 
  19 |   const fetchTenants = useCallback(async () => {
  20 |     if (!user) {
  21 |       setTenants([]);
  22 |       setCurrentTenant(null);
  23 |       setIsLoading(false);
  24 |       return;
  25 |     }
  26 | 
  27 |     try {
  28 |       setIsLoading(true);
  29 |       console.log('Fetching tenants for user:', user.id);
  30 |       console.log('User metadata:', user.user_metadata);
  31 |       const response = await getTenants(user.id);
  32 |       
  33 |       if (response.success && response.data && response.data.length > 0) {
  34 |         // Map database tenants to UI tenants
  35 |         const mappedTenants = response.data.map((tenant: { id: string; name: string }) => ({
  36 |           id: tenant.id,
  37 |           name: tenant.name,
  38 |           iconName: 'building',
  39 |         }));
  40 | 
  41 |         console.log('Mapped tenants:', mappedTenants);
  42 |         setTenants(mappedTenants);
  43 | 
  44 |         // Get tenant_name from user metadata
  45 |         const currentTenantName = user.user_metadata?.tenant_name || 'trial';
  46 |         console.log('Current tenant name from metadata:', currentTenantName);
  47 |         
  48 |         // Find tenant by name
  49 |         const current = mappedTenants.find((t: Tenant) => t.name === currentTenantName) || mappedTenants[0];
  50 |         console.log('Setting current tenant:', current);
  51 |         setCurrentTenant(current);
  52 |       } else {
  53 |         console.log('No tenants found, using default');
  54 |         // No tenants found or error occurred, create a default tenant
  55 |         const defaultTenant = {
  56 |           id: 'trial',
  57 |           name: 'trial',
  58 |           iconName: 'building',
  59 |         };
  60 |         setTenants([defaultTenant]);
  61 |         setCurrentTenant(defaultTenant);
  62 |       }
  63 |     } catch (error) {
  64 |       console.error('Error fetching tenants:', error);
  65 |       toast({
  66 |         title: 'Error',
  67 |         description: 'Failed to fetch tenants',
  68 |         variant: 'destructive',
  69 |       });
  70 |     } finally {
  71 |       setIsLoading(false);
  72 |     }
  73 |   }, [user, toast]);
  74 | 
  75 |   const switchTenant = useCallback(async (tenantName: string) => {
  76 |     try {
  77 |       await switchTenantAction(tenantName);
  78 |       const newTenant = tenants.find(t => t.name === tenantName);
  79 |       if (newTenant) {
  80 |         setCurrentTenant(newTenant);
  81 |         toast({
  82 |           title: 'Success',
  83 |           description: `Switched to ${newTenant.name}`,
  84 |         });
  85 |       }
  86 |     } catch (error) {
  87 |       console.error('Error switching tenant:', error);
  88 |       toast({
  89 |         title: 'Error',
  90 |         description: 'Failed to switch tenant',
  91 |         variant: 'destructive',
  92 |       });
  93 |     }
  94 |   }, [tenants, toast]);
  95 | 
  96 |   // Fetch tenants on mount or when user changes
  97 |   useEffect(() => {
  98 |     fetchTenants();
  99 |   }, [fetchTenants]);
 100 | 
 101 |   return {
 102 |     tenants,
 103 |     currentTenant,
 104 |     isLoading,
 105 |     switchTenant,
 106 |   };
 107 | } 

```

`/workspaces/automai/src/hooks/useAuth.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import { useCallback, useEffect, useState, useRef } from 'react';
   4 | import { 
   5 |   signOut as signOutAction, 
   6 |   updateProfile as updateProfileAction, 
   7 |   getCurrentUser,
   8 |   signUp as signUpAction,
   9 |   signInWithOAuth as signInWithOAuthAction,
  10 |   resetPasswordForEmail as resetPasswordAction,
  11 |   signInWithPassword as signInWithPasswordAction,
  12 |   updatePassword as updatePasswordAction,
  13 |   handleAuthCallback as handleAuthCallbackAction,
  14 |   AuthUser,
  15 | } from '@/app/actions/auth';
  16 | import { supabaseAuth } from '@/lib/supabase/auth';
  17 | 
  18 | // Increase cache time to 30 minutes to reduce API calls
  19 | const AUTH_CACHE_TIME = 30 * 60 * 1000;
  20 | 
  21 | export function useAuth() {
  22 |   const [user, setUser] = useState<AuthUser | null>(null);
  23 |   const [loading, setLoading] = useState(true);
  24 |   const [error, setError] = useState<Error | null>(null);
  25 |   
  26 |   // Add refs to track last fetch time and if we're on a login page
  27 |   const lastFetchTime = useRef<number>(0);
  28 |   const isAuthPage = useRef<boolean>(false);
  29 |   const hasInitialized = useRef<boolean>(false);
  30 |   
  31 |   // Check if we're on an auth page (login, signup, etc.)
  32 |   useEffect(() => {
  33 |     if (typeof window !== 'undefined') {
  34 |       const path = window.location.pathname;
  35 |       isAuthPage.current = path.includes('/login') || 
  36 |                            path.includes('/signup') || 
  37 |                            path.includes('/auth-redirect') ||
  38 |                            path.includes('/forgot-password');
  39 |     }
  40 |   }, []);
  41 | 
  42 |   const fetchUser = useCallback(async (force = false) => {
  43 |     // Only skip fetching on auth pages if we're not forcing it
  44 |     // This ensures we still check auth state when needed
  45 |     if (isAuthPage.current && !force) {
  46 |       console.log('🔄 AUTH HOOK: Skipping fetch on auth page');
  47 |       setLoading(false);
  48 |       return;
  49 |     }
  50 |     
  51 |     // Check if we've fetched recently and can use cached data
  52 |     const now = Date.now();
  53 |     if (!force && now - lastFetchTime.current < AUTH_CACHE_TIME && user !== undefined) {
  54 |       console.log('🔄 AUTH HOOK: Using cached user data');
  55 |       setLoading(false);
  56 |       return;
  57 |     }
  58 |     
  59 |     console.log('🔄 AUTH HOOK: Fetching user data - VERSION 2025-03-09');
  60 |     
  61 |     try {
  62 |       setLoading(true);
  63 |       setError(null);
  64 |       const data = await getCurrentUser();
  65 |       
  66 |       // Enhanced debug logging
  67 |       console.log('🔄 AUTH HOOK: User data received:', data);
  68 |       if (data) {
  69 |         console.log('🔄 AUTH HOOK: User name from data:', data.name);
  70 |         console.log('🔄 AUTH HOOK: User metadata:', data.user_metadata);
  71 |         console.log('🔄 AUTH HOOK: Name in metadata:', data.user_metadata?.name);
  72 |       }
  73 |       
  74 |       setUser(data);
  75 |       lastFetchTime.current = now;
  76 |     } catch (err) {
  77 |       console.error('Error fetching user:', err);
  78 |       setError(err instanceof Error ? err : new Error('Failed to fetch user'));
  79 |       setUser(null);
  80 |     } finally {
  81 |       setLoading(false);
  82 |     }
  83 |   }, [user]);
  84 | 
  85 |   // Fetch user on initial load and ensure it only runs once
  86 |   useEffect(() => {
  87 |     if (!hasInitialized.current) {
  88 |       hasInitialized.current = true;
  89 |       // Always fetch user data on initial load, regardless of page type
  90 |       fetchUser(true);
  91 |     }
  92 |   }, [fetchUser]);
  93 | 
  94 |   // Add an effect to refresh the user data whenever the pathname changes
  95 |   useEffect(() => {
  96 |     if (typeof window !== 'undefined') {
  97 |       // Force refresh when the URL changes (page navigation)
  98 |       const handleRouteChange = () => {
  99 |         console.log('Route changed, refreshing user data');
 100 |         fetchUser(true);
 101 |       };
 102 | 
 103 |       // Listen for pathname changes
 104 |       window.addEventListener('popstate', handleRouteChange);
 105 |       
 106 |       // Clean up
 107 |       return () => {
 108 |         window.removeEventListener('popstate', handleRouteChange);
 109 |       };
 110 |     }
 111 |   }, [fetchUser]);
 112 | 
 113 |   const handleSignOut = async (formData: FormData) => {
 114 |     try {
 115 |       await signOutAction(formData);
 116 |       // Clear user data immediately on sign out
 117 |       setUser(null);
 118 |       lastFetchTime.current = 0;
 119 |       
 120 |       // Get the locale from the form data
 121 |       const locale = formData.get('locale') as string || 'en';
 122 |       
 123 |       // Client-side redirect to login page
 124 |       if (typeof window !== 'undefined') {
 125 |         window.location.href = `/${locale}/login`;
 126 |       }
 127 |     } catch (err) {
 128 |       setError(err instanceof Error ? err : new Error('Failed to sign out'));
 129 |     }
 130 |   };
 131 | 
 132 |   const handleUpdateProfile = async (formData: FormData) => {
 133 |     try {
 134 |       await updateProfileAction(formData);
 135 |     } catch (err) {
 136 |       setError(err instanceof Error ? err : new Error('Failed to update profile'));
 137 |     }
 138 |   };
 139 | 
 140 |   const handleUpdatePassword = async (password: string) => {
 141 |     try {
 142 |       setLoading(true);
 143 |       setError(null);
 144 |       
 145 |       const result = await updatePasswordAction(password);
 146 |       
 147 |       if (!result.success) {
 148 |         setError(new Error(result.error || 'Failed to update password'));
 149 |         return false;
 150 |       }
 151 |       
 152 |       return true;
 153 |     } catch (err) {
 154 |       setError(err instanceof Error ? err : new Error('Failed to update password'));
 155 |       return false;
 156 |     } finally {
 157 |       setLoading(false);
 158 |     }
 159 |   };
 160 | 
 161 |   const handleSignUp = async (email: string, password: string, name: string, redirectUrl: string) => {
 162 |     try {
 163 |       setLoading(true);
 164 |       setError(null);
 165 |       const result = await signUpAction(email, password, name, redirectUrl);
 166 |       
 167 |       if (!result.success) {
 168 |         setError(new Error(result.error || 'Failed to sign up'));
 169 |         return null;
 170 |       }
 171 |       
 172 |       return result.data;
 173 |     } catch (err) {
 174 |       setError(err instanceof Error ? err : new Error('Failed to sign up'));
 175 |       return null;
 176 |     } finally {
 177 |       setLoading(false);
 178 |     }
 179 |   };
 180 | 
 181 |   const handleSignInWithPassword = async (email: string, password: string) => {
 182 |     try {
 183 |       setLoading(true);
 184 |       setError(null);
 185 |       const result = await signInWithPasswordAction(email, password);
 186 |       
 187 |       if (!result.success) {
 188 |         setError(new Error(result.error || 'Failed to sign in'));
 189 |         return null;
 190 |       }
 191 |       
 192 |       // Force refresh user data after sign in
 193 |       await fetchUser(true);
 194 |       return result.data;
 195 |     } catch (err) {
 196 |       setError(err instanceof Error ? err : new Error('Failed to sign in'));
 197 |       return null;
 198 |     } finally {
 199 |       setLoading(false);
 200 |     }
 201 |   };
 202 | 
 203 |   const handleSignInWithOAuth = async (provider: 'google' | 'github', redirectUrl: string) => {
 204 |     try {
 205 |       setLoading(true);
 206 |       setError(null);
 207 |       const result = await signInWithOAuthAction(provider, redirectUrl);
 208 |       
 209 |       if (!result.success) {
 210 |         setError(new Error(result.error || 'Failed to sign in'));
 211 |         return null;
 212 |       }
 213 |       
 214 |       return result.data;
 215 |     } catch (err) {
 216 |       setError(err instanceof Error ? err : new Error('Failed to sign in'));
 217 |       return null;
 218 |     } finally {
 219 |       setLoading(false);
 220 |     }
 221 |   };
 222 | 
 223 |   const handleResetPassword = async (email: string, redirectUrl: string) => {
 224 |     try {
 225 |       setLoading(true);
 226 |       setError(null);
 227 |       const result = await resetPasswordAction(email, redirectUrl);
 228 |       
 229 |       if (!result.success) {
 230 |         setError(new Error(result.error || 'Failed to reset password'));
 231 |         return false;
 232 |       }
 233 |       
 234 |       return true;
 235 |     } catch (err) {
 236 |       setError(err instanceof Error ? err : new Error('Failed to reset password'));
 237 |       return false;
 238 |     } finally {
 239 |       setLoading(false);
 240 |     }
 241 |   };
 242 | 
 243 |   // Add a refresh function that components can call to force a refresh of user data
 244 |   const refreshUser = useCallback(() => {
 245 |     return fetchUser(true);
 246 |   }, [fetchUser]);
 247 | 
 248 |   const exchangeCodeForSession = useCallback(async () => {
 249 |     try {
 250 |       setLoading(true);
 251 |       setError(null);
 252 |       
 253 |       // Use the auth action to handle the callback
 254 |       // This follows the three-layer architecture: client hook → server action → server db
 255 |       const url = typeof window !== 'undefined' ? window.location.href : '';
 256 |       const result = await handleAuthCallbackAction(url);
 257 |       
 258 |       if (!result.success) {
 259 |         setError(new Error(result.error || 'Failed to authenticate'));
 260 |         return { success: false, error: result.error };
 261 |       }
 262 |       
 263 |       // Refresh user data after successful authentication
 264 |       await fetchUser();
 265 |       
 266 |       return { 
 267 |         success: true, 
 268 |         redirectUrl: result.redirectUrl 
 269 |       };
 270 |     } catch (err) {
 271 |       console.error('Error in authentication:', err);
 272 |       setError(err instanceof Error ? err : new Error('Authentication failed'));
 273 |       return { success: false, error: 'Authentication failed' };
 274 |     } finally {
 275 |       setLoading(false);
 276 |     }
 277 |   }, [fetchUser]);
 278 | 
 279 |   // Return the authentication state and functions
 280 |   return {
 281 |     user,
 282 |     loading,
 283 |     error,
 284 |     signUp: handleSignUp,
 285 |     signInWithPassword: handleSignInWithPassword,
 286 |     signInWithOAuth: handleSignInWithOAuth,
 287 |     signOut: handleSignOut,
 288 |     resetPassword: handleResetPassword,
 289 |     updatePassword: handleUpdatePassword,
 290 |     updateProfile: handleUpdateProfile,
 291 |     refreshUser,
 292 |     exchangeCodeForSession,
 293 |   };
 294 | }

```

`/workspaces/automai/src/hooks/useHost.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import { useState, useCallback, useEffect } from 'react';
   4 | import { useToast } from '@/components/shadcn/use-toast';
   5 | import { Host } from '@/types/hosts';
   6 | import { 
   7 |   getHost, 
   8 |   updateHost, 
   9 |   deleteHost, 
  10 |   testHostConnection as testHostConnectionApi
  11 | } from '@/app/actions/hosts';
  12 | 
  13 | export function useHost(initialHostId?: string) {
  14 |   const [host, setHost] = useState<Host | null>(null);
  15 |   const [loading, setLoading] = useState(initialHostId ? true : false);
  16 |   const [error, setError] = useState<Error | null>(null);
  17 |   const [isTesting, setIsTesting] = useState(false);
  18 |   const { toast } = useToast();
  19 | 
  20 |   const fetchHost = useCallback(async (id: string) => {
  21 |     try {
  22 |       setLoading(true);
  23 |       setError(null);
  24 |       
  25 |       const result = await getHost(id);
  26 |       
  27 |       if (!result.success) {
  28 |         setError(new Error(result.error || 'Failed to fetch host'));
  29 |         toast({
  30 |           title: 'Error',
  31 |           description: result.error || 'Failed to fetch host',
  32 |           variant: 'destructive',
  33 |         });
  34 |         return null;
  35 |       }
  36 |       
  37 |       setHost(result.data || null);
  38 |       return result.data;
  39 |     } catch (err) {
  40 |       const errorMessage = err instanceof Error ? err.message : 'Failed to fetch host';
  41 |       setError(err instanceof Error ? err : new Error(errorMessage));
  42 |       toast({
  43 |         title: 'Error',
  44 |         description: errorMessage,
  45 |         variant: 'destructive',
  46 |       });
  47 |       return null;
  48 |     } finally {
  49 |       setLoading(false);
  50 |     }
  51 |   }, [toast]);
  52 | 
  53 |   const updateHostDetails = useCallback(async (
  54 |     updates: Partial<Omit<Host, 'id'>>
  55 |   ) => {
  56 |     if (!host?.id) {
  57 |       toast({
  58 |         title: 'Error',
  59 |         description: 'No host selected',
  60 |         variant: 'destructive',
  61 |       });
  62 |       return null;
  63 |     }
  64 | 
  65 |     try {
  66 |       setLoading(true);
  67 |       setError(null);
  68 |       
  69 |       const result = await updateHost(host.id, updates);
  70 |       
  71 |       if (!result.success) {
  72 |         setError(new Error(result.error || 'Failed to update host'));
  73 |         toast({
  74 |           title: 'Error',
  75 |           description: result.error || 'Failed to update host',
  76 |           variant: 'destructive',
  77 |         });
  78 |         return null;
  79 |       }
  80 |       
  81 |       setHost(result.data || null);
  82 |       
  83 |       toast({
  84 |         title: 'Success',
  85 |         description: 'Host updated successfully',
  86 |       });
  87 |       
  88 |       return result.data;
  89 |     } catch (err) {
  90 |       const errorMessage = err instanceof Error ? err.message : 'Failed to update host';
  91 |       setError(err instanceof Error ? err : new Error(errorMessage));
  92 |       toast({
  93 |         title: 'Error',
  94 |         description: errorMessage,
  95 |         variant: 'destructive',
  96 |       });
  97 |       return null;
  98 |     } finally {
  99 |       setLoading(false);
 100 |     }
 101 |   }, [host, toast]);
 102 | 
 103 |   const removeHost = useCallback(async () => {
 104 |     if (!host?.id) {
 105 |       toast({
 106 |         title: 'Error',
 107 |         description: 'No host selected',
 108 |         variant: 'destructive',
 109 |       });
 110 |       return false;
 111 |     }
 112 | 
 113 |     try {
 114 |       setLoading(true);
 115 |       setError(null);
 116 |       
 117 |       const result = await deleteHost(host.id);
 118 |       
 119 |       if (!result.success) {
 120 |         setError(new Error(result.error || 'Failed to delete host'));
 121 |         toast({
 122 |           title: 'Error',
 123 |           description: result.error || 'Failed to delete host',
 124 |           variant: 'destructive',
 125 |         });
 126 |         return false;
 127 |       }
 128 |       
 129 |       setHost(null);
 130 |       
 131 |       toast({
 132 |         title: 'Success',
 133 |         description: 'Host deleted successfully',
 134 |       });
 135 |       
 136 |       return true;
 137 |     } catch (err) {
 138 |       const errorMessage = err instanceof Error ? err.message : 'Failed to delete host';
 139 |       setError(err instanceof Error ? err : new Error(errorMessage));
 140 |       toast({
 141 |         title: 'Error',
 142 |         description: errorMessage,
 143 |         variant: 'destructive',
 144 |       });
 145 |       return false;
 146 |     } finally {
 147 |       setLoading(false);
 148 |     }
 149 |   }, [host, toast]);
 150 | 
 151 |   const testHostConnection = useCallback(async () => {
 152 |     if (!host?.id) {
 153 |       toast({
 154 |         title: 'Error',
 155 |         description: 'No host selected',
 156 |         variant: 'destructive',
 157 |       });
 158 |       return false;
 159 |     }
 160 | 
 161 |     try {
 162 |       setIsTesting(true);
 163 |       setError(null);
 164 |       
 165 |       const result = await testHostConnectionApi(host.id);
 166 |       
 167 |       if (!result.success) {
 168 |         setError(new Error(result.error || 'Failed to test connection'));
 169 |         toast({
 170 |           title: 'Error',
 171 |           description: result.error || 'Failed to test connection',
 172 |           variant: 'destructive',
 173 |         });
 174 |         
 175 |         // Update host status
 176 |         setHost(prev => {
 177 |           if (!prev) return null;
 178 |           return {
 179 |             ...prev,
 180 |             status: 'failed',
 181 |             errorMessage: result.error
 182 |           };
 183 |         });
 184 |         
 185 |         return false;
 186 |       }
 187 |       
 188 |       // Update host status
 189 |       setHost(prev => {
 190 |         if (!prev) return null;
 191 |         return {
 192 |           ...prev,
 193 |           status: 'connected',
 194 |           errorMessage: undefined
 195 |         };
 196 |       });
 197 |       
 198 |       toast({
 199 |         title: 'Success',
 200 |         description: result.message || 'Connection test successful',
 201 |       });
 202 |       
 203 |       return true;
 204 |     } catch (err: any) {
 205 |       const errorMessage = err instanceof Error ? err.message : 'Failed to test connection';
 206 |       setError(err instanceof Error ? err : new Error(errorMessage));
 207 |       toast({
 208 |         title: 'Error',
 209 |         description: errorMessage,
 210 |         variant: 'destructive',
 211 |       });
 212 |       return false;
 213 |     } finally {
 214 |       setIsTesting(false);
 215 |     }
 216 |   }, [host, toast]);
 217 | 
 218 |   // Fetch host on mount if initialHostId is provided
 219 |   useEffect(() => {
 220 |     if (initialHostId) {
 221 |       fetchHost(initialHostId);
 222 |     }
 223 |   }, [initialHostId, fetchHost]);
 224 | 
 225 |   return {
 226 |     host,
 227 |     loading,
 228 |     error,
 229 |     isTesting,
 230 |     fetchHost,
 231 |     updateHost: updateHostDetails,
 232 |     deleteHost: removeHost,
 233 |     testConnection: testHostConnection,
 234 |     isLoaded: !loading && host !== null
 235 |   };
 236 | } 

```

`/workspaces/automai/src/hooks/useDialogState.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useState } from 'react';
   4 | 
   5 | /**
   6 |  * Custom hook for confirm dialog
   7 |  * @param initialState string | null
   8 |  * @returns A stateful value, and a function to update it.
   9 |  * @example const [open, setOpen] = useDialogState<"approve" | "reject">()
  10 |  */
  11 | export function useDialogState<T extends string | boolean>(initialState: T | null = null) {
  12 |   const [open, _setOpen] = useState<T | null>(initialState);
  13 | 
  14 |   const setOpen = (str: T | null) => _setOpen((prev) => (prev === str ? null : str));
  15 | 
  16 |   return [open, setOpen] as const;
  17 | }

```

`/workspaces/automai/src/hooks/useHosts.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import { useState, useCallback, useEffect } from 'react';
   4 | import { useToast } from '@/components/shadcn/use-toast';
   5 | import { Host } from '@/types/hosts';
   6 | import { 
   7 |   getHosts, 
   8 |   addHost, 
   9 |   deleteHost as deleteHostAction, 
  10 |   testHostConnection as testConnectionAction,
  11 |   testAllHosts,
  12 |   updateHost
  13 | } from '@/app/actions/hosts';
  14 | 
  15 | export function useHosts(initialHosts: Host[] = []) {
  16 |   const [hosts, setHosts] = useState<Host[]>(initialHosts);
  17 |   const [isLoading, setIsLoading] = useState(true);
  18 |   const [isRefreshing, setIsRefreshing] = useState(false);
  19 |   const [isDeleting, setIsDeleting] = useState(false);
  20 |   const [isTesting, setIsTesting] = useState<string | null>(null);
  21 |   const { toast } = useToast();
  22 | 
  23 |   const fetchHosts = useCallback(async () => {
  24 |     try {
  25 |       setIsLoading(true);
  26 |       const result = await getHosts();
  27 |       
  28 |       if (!result.success) {
  29 |         toast({
  30 |           title: 'Error',
  31 |           description: result.error || 'Failed to fetch hosts',
  32 |           variant: 'destructive',
  33 |         });
  34 |         return;
  35 |       }
  36 |       
  37 |       setHosts(result.data || []);
  38 |     } catch (error) {
  39 |       console.error('Error fetching hosts:', error);
  40 |       toast({
  41 |         title: 'Error',
  42 |         description: 'Failed to fetch hosts',
  43 |         variant: 'destructive',
  44 |       });
  45 |     } finally {
  46 |       setIsLoading(false);
  47 |     }
  48 |   }, [toast]);
  49 | 
  50 |   const addNewHost = useCallback(async (data: Omit<Host, 'id'>) => {
  51 |     try {
  52 |       const result = await addHost(data);
  53 |       
  54 |       if (!result.success) {
  55 |         toast({
  56 |           title: 'Error',
  57 |           description: result.error || 'Failed to add host',
  58 |           variant: 'destructive',
  59 |         });
  60 |         return false;
  61 |       }
  62 |       
  63 |       setHosts(prev => [...prev, result.data!]);
  64 |       toast({
  65 |         title: 'Success',
  66 |         description: 'Host added successfully',
  67 |       });
  68 |       return true;
  69 |     } catch (error) {
  70 |       console.error('Error adding host:', error);
  71 |       toast({
  72 |         title: 'Error',
  73 |         description: 'Failed to add host',
  74 |         variant: 'destructive',
  75 |       });
  76 |       return false;
  77 |     }
  78 |   }, [toast]);
  79 | 
  80 |   const updateHostDetails = useCallback(async (id: string, updates: Partial<Omit<Host, 'id'>>) => {
  81 |     try {
  82 |       const result = await updateHost(id, updates);
  83 |       
  84 |       if (!result.success) {
  85 |         toast({
  86 |           title: 'Error',
  87 |           description: result.error || 'Failed to update host',
  88 |           variant: 'destructive',
  89 |         });
  90 |         return false;
  91 |       }
  92 |       
  93 |       setHosts(prev => prev.map(host => host.id === id ? result.data! : host));
  94 |       toast({
  95 |         title: 'Success',
  96 |         description: 'Host updated successfully',
  97 |       });
  98 |       return true;
  99 |     } catch (error) {
 100 |       console.error('Error updating host:', error);
 101 |       toast({
 102 |         title: 'Error',
 103 |         description: 'Failed to update host',
 104 |         variant: 'destructive',
 105 |       });
 106 |       return false;
 107 |     }
 108 |   }, [toast]);
 109 | 
 110 |   const deleteHost = useCallback(async (id: string) => {
 111 |     try {
 112 |       setIsDeleting(true);
 113 |       const result = await deleteHostAction(id);
 114 |       
 115 |       if (!result.success) {
 116 |         toast({
 117 |           title: 'Error',
 118 |           description: result.error || 'Failed to delete host',
 119 |           variant: 'destructive',
 120 |         });
 121 |         return false;
 122 |       }
 123 |       
 124 |       setHosts(prev => prev.filter(host => host.id !== id));
 125 |       toast({
 126 |         title: 'Success',
 127 |         description: 'Host deleted successfully',
 128 |       });
 129 |       return true;
 130 |     } catch (error) {
 131 |       console.error('Error deleting host:', error);
 132 |       toast({
 133 |         title: 'Error',
 134 |         description: 'Failed to delete host',
 135 |         variant: 'destructive',
 136 |       });
 137 |       return false;
 138 |     } finally {
 139 |       setIsDeleting(false);
 140 |     }
 141 |   }, [toast]);
 142 | 
 143 |   const testConnection = useCallback(async (id: string) => {
 144 |     try {
 145 |       setIsTesting(id);
 146 |       const result = await testConnectionAction(id);
 147 |       
 148 |       // Update host status based on test result
 149 |       setHosts(prev => prev.map(host => {
 150 |         if (host.id === id) {
 151 |           return {
 152 |             ...host,
 153 |             status: result.success ? 'connected' : 'failed',
 154 |             errorMessage: !result.success ? result.error : undefined,
 155 |             lastConnected: result.success ? new Date() : host.lastConnected,
 156 |           };
 157 |         }
 158 |         return host;
 159 |       }));
 160 | 
 161 |       if (result.success) {
 162 |         toast({
 163 |           title: 'Success',
 164 |           description: result.message || 'Connection test successful',
 165 |         });
 166 |       } else {
 167 |         toast({
 168 |           title: 'Error',
 169 |           description: result.error || 'Connection test failed',
 170 |           variant: 'destructive',
 171 |         });
 172 |       }
 173 |       return result.success;
 174 |     } catch (error) {
 175 |       console.error('Error testing connection:', error);
 176 |       toast({
 177 |         title: 'Error',
 178 |         description: 'Failed to test connection',
 179 |         variant: 'destructive',
 180 |       });
 181 |       return false;
 182 |     } finally {
 183 |       setIsTesting(null);
 184 |     }
 185 |   }, [toast]);
 186 | 
 187 |   const refreshConnections = useCallback(async () => {
 188 |     try {
 189 |       setIsRefreshing(true);
 190 |       const hostsResult = await getHosts();
 191 |       
 192 |       if (!hostsResult.success) {
 193 |         toast({
 194 |           title: 'Error',
 195 |           description: hostsResult.error || 'Failed to fetch hosts',
 196 |           variant: 'destructive',
 197 |         });
 198 |         return false;
 199 |       }
 200 |       
 201 |       setHosts(hostsResult.data || []);
 202 | 
 203 |       // Test all connections
 204 |       const testResults = await testAllHosts();
 205 |       if (testResults.success && testResults.results) {
 206 |         const now = new Date();
 207 |         setHosts(prev => prev.map(host => {
 208 |           const result = testResults.results?.find(r => r.id === host.id);
 209 |           if (result) {
 210 |             return {
 211 |               ...host,
 212 |               status: result.success ? 'connected' : 'failed',
 213 |               errorMessage: !result.success ? result.message : undefined,
 214 |               lastConnected: result.success ? now : host.lastConnected,
 215 |             };
 216 |           }
 217 |           return host;
 218 |         }));
 219 |         
 220 |         toast({
 221 |           title: 'Success',
 222 |           description: 'Hosts refreshed successfully',
 223 |         });
 224 |         return true;
 225 |       } else {
 226 |         toast({
 227 |           title: 'Error',
 228 |           description: testResults.error || 'Failed to test connections',
 229 |           variant: 'destructive',
 230 |         });
 231 |         return false;
 232 |       }
 233 |     } catch (error) {
 234 |       console.error('Error refreshing connections:', error);
 235 |       toast({
 236 |         title: 'Error',
 237 |         description: 'Failed to refresh connections',
 238 |         variant: 'destructive',
 239 |       });
 240 |       return false;
 241 |     } finally {
 242 |       setIsRefreshing(false);
 243 |     }
 244 |   }, [toast]);
 245 | 
 246 |   // Fetch hosts on mount
 247 |   useEffect(() => {
 248 |     fetchHosts();
 249 |   }, [fetchHosts]);
 250 | 
 251 |   return {
 252 |     hosts,
 253 |     isLoading,
 254 |     isRefreshing,
 255 |     isDeleting,
 256 |     isTesting,
 257 |     addHost: addNewHost,
 258 |     updateHost: updateHostDetails,
 259 |     deleteHost,
 260 |     refreshConnections,
 261 |     testConnection,
 262 |   };
 263 | }

```

`/workspaces/automai/src/hooks/useProject.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import { useState, useCallback, useEffect } from 'react';
   4 | import { useToast } from '@/components/shadcn/use-toast';
   5 | import { 
   6 |   getProject, 
   7 |   updateProject, 
   8 |   deleteProject,
   9 |   Project
  10 | } from '@/app/actions/projects';
  11 | 
  12 | export function useProject(initialProjectId?: string) {
  13 |   const [project, setProject] = useState<Project | null>(null);
  14 |   const [loading, setLoading] = useState(initialProjectId ? true : false);
  15 |   const [error, setError] = useState<Error | null>(null);
  16 |   const { toast } = useToast();
  17 | 
  18 |   const fetchProject = useCallback(async (id: string) => {
  19 |     try {
  20 |       setLoading(true);
  21 |       setError(null);
  22 |       
  23 |       const result = await getProject(id);
  24 |       
  25 |       if (!result.success) {
  26 |         setError(new Error(result.error || 'Failed to fetch project'));
  27 |         toast({
  28 |           title: 'Error',
  29 |           description: result.error || 'Failed to fetch project',
  30 |           variant: 'destructive',
  31 |         });
  32 |         return null;
  33 |       }
  34 |       
  35 |       setProject(result.data);
  36 |       return result.data;
  37 |     } catch (err) {
  38 |       const errorMessage = err instanceof Error ? err.message : 'Failed to fetch project';
  39 |       setError(err instanceof Error ? err : new Error(errorMessage));
  40 |       toast({
  41 |         title: 'Error',
  42 |         description: errorMessage,
  43 |         variant: 'destructive',
  44 |       });
  45 |       return null;
  46 |     } finally {
  47 |       setLoading(false);
  48 |     }
  49 |   }, [toast]);
  50 | 
  51 |   const updateProjectDetails = useCallback(async (
  52 |     projectData: Partial<Omit<Project, 'id' | 'created_at' | 'updated_at' | 'tenant_id'>>
  53 |   ) => {
  54 |     if (!project?.id) {
  55 |       toast({
  56 |         title: 'Error',
  57 |         description: 'No project selected',
  58 |         variant: 'destructive',
  59 |       });
  60 |       return null;
  61 |     }
  62 | 
  63 |     try {
  64 |       setLoading(true);
  65 |       setError(null);
  66 |       
  67 |       const result = await updateProject(project.id, projectData);
  68 |       
  69 |       if (!result.success) {
  70 |         setError(new Error(result.error || 'Failed to update project'));
  71 |         toast({
  72 |           title: 'Error',
  73 |           description: result.error || 'Failed to update project',
  74 |           variant: 'destructive',
  75 |         });
  76 |         return null;
  77 |       }
  78 |       
  79 |       setProject(result.data);
  80 |       
  81 |       toast({
  82 |         title: 'Success',
  83 |         description: 'Project updated successfully',
  84 |       });
  85 |       
  86 |       return result.data;
  87 |     } catch (err) {
  88 |       const errorMessage = err instanceof Error ? err.message : 'Failed to update project';
  89 |       setError(err instanceof Error ? err : new Error(errorMessage));
  90 |       toast({
  91 |         title: 'Error',
  92 |         description: errorMessage,
  93 |         variant: 'destructive',
  94 |       });
  95 |       return null;
  96 |     } finally {
  97 |       setLoading(false);
  98 |     }
  99 |   }, [project, toast]);
 100 | 
 101 |   const removeProject = useCallback(async () => {
 102 |     if (!project?.id) {
 103 |       toast({
 104 |         title: 'Error',
 105 |         description: 'No project selected',
 106 |         variant: 'destructive',
 107 |       });
 108 |       return false;
 109 |     }
 110 | 
 111 |     try {
 112 |       setLoading(true);
 113 |       setError(null);
 114 |       
 115 |       const result = await deleteProject(project.id);
 116 |       
 117 |       if (!result.success) {
 118 |         setError(new Error(result.error || 'Failed to delete project'));
 119 |         toast({
 120 |           title: 'Error',
 121 |           description: result.error || 'Failed to delete project',
 122 |           variant: 'destructive',
 123 |         });
 124 |         return false;
 125 |       }
 126 |       
 127 |       setProject(null);
 128 |       
 129 |       toast({
 130 |         title: 'Success',
 131 |         description: 'Project deleted successfully',
 132 |       });
 133 |       
 134 |       return true;
 135 |     } catch (err) {
 136 |       const errorMessage = err instanceof Error ? err.message : 'Failed to delete project';
 137 |       setError(err instanceof Error ? err : new Error(errorMessage));
 138 |       toast({
 139 |         title: 'Error',
 140 |         description: errorMessage,
 141 |         variant: 'destructive',
 142 |       });
 143 |       return false;
 144 |     } finally {
 145 |       setLoading(false);
 146 |     }
 147 |   }, [project, toast]);
 148 | 
 149 |   // Fetch project on mount if initialProjectId is provided
 150 |   useEffect(() => {
 151 |     if (initialProjectId) {
 152 |       fetchProject(initialProjectId);
 153 |     }
 154 |   }, [initialProjectId, fetchProject]);
 155 | 
 156 |   return {
 157 |     project,
 158 |     loading,
 159 |     error,
 160 |     fetchProject,
 161 |     updateProject: updateProjectDetails,
 162 |     removeProject,
 163 |     isLoaded: !loading && project !== null
 164 |   };
 165 | } 

```

`/workspaces/automai/src/hooks/useMobile.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | const MOBILE_BREAKPOINT = 768;
   6 | 
   7 | export function useIsMobile() {
   8 |   const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);
   9 | 
  10 |   React.useEffect(() => {
  11 |     const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
  12 |     const onChange = () => {
  13 |       setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
  14 |     };
  15 |     mql.addEventListener('change', onChange);
  16 |     setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
  17 |     return () => mql.removeEventListener('change', onChange);
  18 |   }, []);
  19 | 
  20 |   return !!isMobile;
  21 | }

```

`/workspaces/automai/src/hooks/useRepository.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import { useState, useCallback, useEffect } from 'react';
   4 | import { useToast } from '@/components/shadcn/use-toast';
   5 | import { 
   6 |   getRepository,
   7 |   updateRepository, 
   8 |   deleteRepository, 
   9 |   syncRepository 
  10 | } from '@/app/actions/repositories';
  11 | import { Repository } from '@/types/repositories';
  12 | 
  13 | export function useRepository(initialRepositoryId?: string) {
  14 |   const [repository, setRepository] = useState<Repository | null>(null);
  15 |   const [loading, setLoading] = useState(initialRepositoryId ? true : false);
  16 |   const [error, setError] = useState<Error | null>(null);
  17 |   const { toast } = useToast();
  18 | 
  19 |   const fetchRepository = useCallback(async (id: string) => {
  20 |     try {
  21 |       setLoading(true);
  22 |       setError(null);
  23 |       
  24 |       const result = await getRepository(id);
  25 |       
  26 |       if (!result.success) {
  27 |         setError(new Error(result.error || 'Failed to fetch repository'));
  28 |         toast({
  29 |           title: 'Error',
  30 |           description: result.error || 'Failed to fetch repository',
  31 |           variant: 'destructive',
  32 |         });
  33 |         return null;
  34 |       }
  35 |       
  36 |       setRepository(result.data || null);
  37 |       return result.data;
  38 |     } catch (err) {
  39 |       const errorMessage = err instanceof Error ? err.message : 'Failed to fetch repository';
  40 |       setError(err instanceof Error ? err : new Error(errorMessage));
  41 |       toast({
  42 |         title: 'Error',
  43 |         description: errorMessage,
  44 |         variant: 'destructive',
  45 |       });
  46 |       return null;
  47 |     } finally {
  48 |       setLoading(false);
  49 |     }
  50 |   }, [toast]);
  51 | 
  52 |   const updateRepositoryDetails = useCallback(async (
  53 |     updates: Partial<Repository>
  54 |   ) => {
  55 |     if (!repository?.id) {
  56 |       toast({
  57 |         title: 'Error',
  58 |         description: 'No repository selected',
  59 |         variant: 'destructive',
  60 |       });
  61 |       return null;
  62 |     }
  63 | 
  64 |     try {
  65 |       setLoading(true);
  66 |       setError(null);
  67 |       
  68 |       const result = await updateRepository(repository.id, updates);
  69 |       
  70 |       if (!result.success) {
  71 |         setError(new Error(result.error || 'Failed to update repository'));
  72 |         toast({
  73 |           title: 'Error',
  74 |           description: result.error || 'Failed to update repository',
  75 |           variant: 'destructive',
  76 |         });
  77 |         return null;
  78 |       }
  79 |       
  80 |       setRepository(result.data || null);
  81 |       
  82 |       toast({
  83 |         title: 'Success',
  84 |         description: 'Repository updated successfully',
  85 |       });
  86 |       
  87 |       return result.data;
  88 |     } catch (err) {
  89 |       const errorMessage = err instanceof Error ? err.message : 'Failed to update repository';
  90 |       setError(err instanceof Error ? err : new Error(errorMessage));
  91 |       toast({
  92 |         title: 'Error',
  93 |         description: errorMessage,
  94 |         variant: 'destructive',
  95 |       });
  96 |       return null;
  97 |     } finally {
  98 |       setLoading(false);
  99 |     }
 100 |   }, [repository, toast]);
 101 | 
 102 |   const removeRepository = useCallback(async () => {
 103 |     if (!repository?.id) {
 104 |       toast({
 105 |         title: 'Error',
 106 |         description: 'No repository selected',
 107 |         variant: 'destructive',
 108 |       });
 109 |       return false;
 110 |     }
 111 | 
 112 |     try {
 113 |       setLoading(true);
 114 |       setError(null);
 115 |       
 116 |       const result = await deleteRepository(repository.id);
 117 |       
 118 |       if (!result.success) {
 119 |         setError(new Error(result.error || 'Failed to delete repository'));
 120 |         toast({
 121 |           title: 'Error',
 122 |           description: result.error || 'Failed to delete repository',
 123 |           variant: 'destructive',
 124 |         });
 125 |         return false;
 126 |       }
 127 |       
 128 |       setRepository(null);
 129 |       
 130 |       toast({
 131 |         title: 'Success',
 132 |         description: 'Repository deleted successfully',
 133 |       });
 134 |       
 135 |       return true;
 136 |     } catch (err) {
 137 |       const errorMessage = err instanceof Error ? err.message : 'Failed to delete repository';
 138 |       setError(err instanceof Error ? err : new Error(errorMessage));
 139 |       toast({
 140 |         title: 'Error',
 141 |         description: errorMessage,
 142 |         variant: 'destructive',
 143 |       });
 144 |       return false;
 145 |     } finally {
 146 |       setLoading(false);
 147 |     }
 148 |   }, [repository, toast]);
 149 | 
 150 |   const syncRepositoryData = useCallback(async () => {
 151 |     if (!repository?.id) {
 152 |       toast({
 153 |         title: 'Error',
 154 |         description: 'No repository selected',
 155 |         variant: 'destructive',
 156 |       });
 157 |       return null;
 158 |     }
 159 | 
 160 |     try {
 161 |       setLoading(true);
 162 |       setError(null);
 163 |       
 164 |       const result = await syncRepository(repository.id);
 165 |       
 166 |       if (!result.success) {
 167 |         setError(new Error(result.error || 'Failed to sync repository'));
 168 |         toast({
 169 |           title: 'Error',
 170 |           description: result.error || 'Failed to sync repository',
 171 |           variant: 'destructive',
 172 |         });
 173 |         return null;
 174 |       }
 175 |       
 176 |       setRepository(result.data || null);
 177 |       
 178 |       toast({
 179 |         title: 'Success',
 180 |         description: 'Repository synced successfully',
 181 |       });
 182 |       
 183 |       return result.data;
 184 |     } catch (err) {
 185 |       const errorMessage = err instanceof Error ? err.message : 'Failed to sync repository';
 186 |       setError(err instanceof Error ? err : new Error(errorMessage));
 187 |       toast({
 188 |         title: 'Error',
 189 |         description: errorMessage,
 190 |         variant: 'destructive',
 191 |       });
 192 |       return null;
 193 |     } finally {
 194 |       setLoading(false);
 195 |     }
 196 |   }, [repository, toast]);
 197 | 
 198 |   // Fetch repository on mount if initialRepositoryId is provided
 199 |   useEffect(() => {
 200 |     if (initialRepositoryId) {
 201 |       fetchRepository(initialRepositoryId);
 202 |     }
 203 |   }, [initialRepositoryId, fetchRepository]);
 204 | 
 205 |   return {
 206 |     repository,
 207 |     loading,
 208 |     error,
 209 |     fetchRepository,
 210 |     updateRepository: updateRepositoryDetails,
 211 |     deleteRepository: removeRepository,
 212 |     syncRepository: syncRepositoryData,
 213 |     isLoaded: !loading && repository !== null
 214 |   };
 215 | } 

```

`/workspaces/automai/src/components/providers/ThemeProvider.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { ThemeProvider as NextThemesProvider } from 'next-themes';
   4 | import { FontProvider } from '@/context/FontContext';
   5 | import { RoleProvider } from '@/context/RoleContext';
   6 | import { SearchProvider } from '@/context/SearchContext';
   7 | import { SidebarProvider } from '@/context/SidebarContext';
   8 | import { ThemeProvider } from '@/context/ThemeContext';
   9 | import { TooltipProvider } from '@/components/shadcn/tooltip';
  10 | // UserProvider is no longer needed with server-side auth
  11 | 
  12 | type Theme = 'light' | 'dark' | 'system';
  13 | 
  14 | interface ThemeProvidersProps {
  15 |   children: React.ReactNode;
  16 |   defaultTheme?: Theme;
  17 | }
  18 | 
  19 | export function ThemeProviders({ children, defaultTheme = 'system' }: ThemeProvidersProps) {
  20 |   return (
  21 |     // Use both theme providers, with next-themes as the outer one
  22 |     <NextThemesProvider 
  23 |       attribute="class" 
  24 |       defaultTheme={defaultTheme} 
  25 |       enableSystem 
  26 |       disableTransitionOnChange
  27 |     >
  28 |       <ThemeProvider defaultTheme={defaultTheme}>
  29 |         <FontProvider>
  30 |           <RoleProvider>
  31 |             <SidebarProvider>
  32 |               <TooltipProvider>
  33 |                 <SearchProvider>{children}</SearchProvider>
  34 |               </TooltipProvider>
  35 |             </SidebarProvider>
  36 |           </RoleProvider>
  37 |         </FontProvider>
  38 |       </ThemeProvider>
  39 |     </NextThemesProvider>
  40 |   );
  41 | } 

```

`/workspaces/automai/src/components/providers/index.ts`:

```ts
   1 | export { ThemeProviders } from './ThemeProvider';

```

`/workspaces/automai/src/components/theme/ThemeSwitch.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { IconCheck, IconMoon, IconSun } from '@tabler/icons-react';
   4 | import { useEffect } from 'react';
   5 | 
   6 | import { Button } from '@/components/shadcn/button';
   7 | import {
   8 |   DropdownMenu,
   9 |   DropdownMenuContent,
  10 |   DropdownMenuItem,
  11 |   DropdownMenuTrigger,
  12 | } from '@/components/shadcn/dropdown-menu';
  13 | import { useTheme } from '@/context/ThemeContext';
  14 | import { cn } from '@/lib/utils';
  15 | 
  16 | export function ThemeSwitch() {
  17 |   const { theme, setTheme } = useTheme();
  18 | 
  19 |   /* Update theme-color meta tag
  20 |    * when theme is updated */
  21 |   useEffect(() => {
  22 |     const themeColor = theme === 'dark' ? '#020817' : '#fff';
  23 |     const metaThemeColor = document.querySelector("meta[name='theme-color']");
  24 |     if (metaThemeColor) metaThemeColor.setAttribute('content', themeColor);
  25 |   }, [theme]);
  26 | 
  27 |   return (
  28 |     <DropdownMenu modal={false}>
  29 |       <DropdownMenuTrigger asChild>
  30 |         <Button variant="ghost" size="icon" className="scale-95 rounded-full">
  31 |           <IconSun className="size-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
  32 |           <IconMoon className="absolute size-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
  33 |           <span className="sr-only">Toggle theme</span>
  34 |         </Button>
  35 |       </DropdownMenuTrigger>
  36 |       <DropdownMenuContent align="end">
  37 |         <DropdownMenuItem onClick={() => setTheme('light')}>
  38 |           Light <IconCheck size={14} className={cn('ml-auto', theme !== 'light' && 'hidden')} />
  39 |         </DropdownMenuItem>
  40 |         <DropdownMenuItem onClick={() => setTheme('dark')}>
  41 |           Dark
  42 |           <IconCheck size={14} className={cn('ml-auto', theme !== 'dark' && 'hidden')} />
  43 |         </DropdownMenuItem>
  44 |         <DropdownMenuItem onClick={() => setTheme('system')}>
  45 |           System
  46 |           <IconCheck size={14} className={cn('ml-auto', theme !== 'system' && 'hidden')} />
  47 |         </DropdownMenuItem>
  48 |       </DropdownMenuContent>
  49 |     </DropdownMenu>
  50 |   );
  51 | }

```

`/workspaces/automai/src/components/theme/ThemeProvider.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { ThemeProvider as NextThemesProvider } from 'next-themes';
   4 | import { type ThemeProviderProps } from 'next-themes';
   5 | import * as React from 'react';
   6 | 
   7 | export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
   8 |   return (
   9 |     <NextThemesProvider
  10 |       attribute="class"
  11 |       defaultTheme="system"
  12 |       enableSystem
  13 |       disableTransitionOnChange
  14 |       {...props}
  15 |       onValueChange={(theme) => {
  16 |         // Set theme cookie when theme changes
  17 |         document.cookie = `theme=${theme}; path=/; max-age=31536000`; // 1 year
  18 |       }}
  19 |     >
  20 |       {children}
  21 |     </NextThemesProvider>
  22 |   );
  23 | }

```

`/workspaces/automai/src/components/form/PinInput/usePinInput.ts`:

```ts
   1 | import * as React from 'react';
   2 | 
   3 | import { UsePinInputProps } from './types';
   4 | 
   5 | export const usePinInput = ({ value, defaultValue, type, length, readOnly }: UsePinInputProps) => {
   6 |   const pinInputs = React.useMemo(
   7 |     () =>
   8 |       Array.from({ length }, (_, index) =>
   9 |         defaultValue ? defaultValue.charAt(index) : value ? value.charAt(index) : '',
  10 |       ),
  11 |     [defaultValue, length, value],
  12 |   );
  13 | 
  14 |   const [pins, setPins] = React.useState<string[]>(pinInputs);
  15 |   const [focusedIndex, setFocusedIndex] = React.useState<number>(-1);
  16 |   const refMap = React.useRef<Map<number, HTMLInputElement>>(new Map());
  17 | 
  18 |   React.useEffect(() => {
  19 |     if (value === undefined) return;
  20 |     const nextPins = value.split('');
  21 |     setPins(nextPins);
  22 |   }, [value]);
  23 | 
  24 |   const pinValue = React.useMemo(() => pins.join(''), [pins]);
  25 | 
  26 |   function getMap() {
  27 |     return refMap.current;
  28 |   }
  29 | 
  30 |   function getNode(_index: number) {
  31 |     const map = getMap();
  32 |     return map.get(_index);
  33 |   }
  34 | 
  35 |   function focusInput(itemId: number) {
  36 |     const node = getNode(itemId);
  37 |     if (node) {
  38 |       node.focus();
  39 |     }
  40 |   }
  41 | 
  42 |   function handleFocus(event: React.FocusEvent<HTMLInputElement>, _index: number) {
  43 |     event.target.select();
  44 |     setFocusedIndex(_index);
  45 |   }
  46 | 
  47 |   function handleBlur(_index: number) {
  48 |     setFocusedIndex(-1);
  49 |   }
  50 | 
  51 |   function updateInputField(val: string, _index: number) {
  52 |     const nextPins = [...pins];
  53 |     nextPins[_index] = val;
  54 |     setPins(nextPins);
  55 | 
  56 |     // auto focus next pin field
  57 |     if (val !== '' && _index < length - 1) {
  58 |       focusInput(_index + 1);
  59 |     }
  60 |   }
  61 | 
  62 |   function validate(value: string) {
  63 |     if (type === 'numeric') {
  64 |       return /^\d*$/.test(value);
  65 |     }
  66 |     return true;
  67 |   }
  68 | 
  69 |   function handleChange(e: React.ChangeEvent<HTMLInputElement>, _index: number) {
  70 |     if (readOnly) return;
  71 |     const val = e.target.value;
  72 |     const nextVal = val.trim().slice(-1);
  73 | 
  74 |     if (nextVal === '' || validate(nextVal)) {
  75 |       updateInputField(nextVal, _index);
  76 |     }
  77 |   }
  78 | 
  79 |   function handlePaste(event: React.ClipboardEvent<HTMLInputElement>) {
  80 |     if (readOnly) return;
  81 |     event.preventDefault();
  82 |     const val = event.clipboardData.getData('text').trim();
  83 |     if (!validate(val)) return;
  84 | 
  85 |     const nextPins = [...pins];
  86 |     const pastedChars = val.split('');
  87 |     let currentIndex = focusedIndex;
  88 | 
  89 |     for (let i = 0; i < pastedChars.length; i++) {
  90 |       if (currentIndex >= length) break;
  91 |       nextPins[currentIndex] = pastedChars[i];
  92 |       currentIndex++;
  93 |     }
  94 | 
  95 |     setPins(nextPins);
  96 |     focusInput(Math.min(currentIndex, length - 1));
  97 |   }
  98 | 
  99 |   function handleKeyDown(event: React.KeyboardEvent<HTMLInputElement>, _index: number) {
 100 |     if (readOnly) return;
 101 |     const key = event.key;
 102 | 
 103 |     if (key === 'ArrowLeft' || key === 'ArrowUp') {
 104 |       event.preventDefault();
 105 |       focusInput(_index - 1);
 106 |     }
 107 | 
 108 |     if (key === 'ArrowRight' || key === 'ArrowDown') {
 109 |       event.preventDefault();
 110 |       focusInput(_index + 1);
 111 |     }
 112 | 
 113 |     if (key === 'Delete') {
 114 |       event.preventDefault();
 115 |       const nextPins = [...pins];
 116 |       nextPins[_index] = '';
 117 |       setPins(nextPins);
 118 |     }
 119 | 
 120 |     if (key === 'Backspace') {
 121 |       event.preventDefault();
 122 |       const nextPins = [...pins];
 123 |       nextPins[_index] = '';
 124 |       setPins(nextPins);
 125 |       if (_index > 0) {
 126 |         focusInput(_index - 1);
 127 |       }
 128 |     }
 129 | 
 130 |     if (key === 'Escape') {
 131 |       event.preventDefault();
 132 |       const node = getNode(_index);
 133 |       if (node) {
 134 |         node.blur();
 135 |       }
 136 |     }
 137 | 
 138 |     if (key === 'Tab') {
 139 |       // Allow normal tab behavior
 140 |       return;
 141 |     }
 142 | 
 143 |     if (key === ' ') {
 144 |       event.preventDefault();
 145 |       return;
 146 |     }
 147 |   }
 148 | 
 149 |   return {
 150 |     pins,
 151 |     pinValue,
 152 |     refMap: refMap.current,
 153 |     handleChange,
 154 |     handleFocus,
 155 |     handleBlur,
 156 |     handleKeyDown,
 157 |     handlePaste,
 158 |   };
 159 | };

```

`/workspaces/automai/src/components/form/PinInput/utils.ts`:

```ts
   1 | import * as React from 'react';
   2 | 
   3 | /**
   4 |  * Get valid children from React children
   5 |  */
   6 | export const _getValidChildren = (children: React.ReactNode) =>
   7 |   React.Children.toArray(children).filter((child) => {
   8 |     return React.isValidElement(child);
   9 |   });
  10 | 
  11 | /**
  12 |  * Get the count of PinInputField components
  13 |  */
  14 | export const _getInputFieldCount = (children: React.ReactNode) =>
  15 |   React.Children.toArray(children).filter((child) => {
  16 |     return (
  17 |       React.isValidElement(child) &&
  18 |       typeof child.type === 'function' &&
  19 |       (child.type as any).name === 'PinInputField'
  20 |     );
  21 |   }).length;

```

`/workspaces/automai/src/components/form/PinInput/PinInput.common.tsx`:

```tsx
   1 | import React from 'react';
   2 | 
   3 | interface PinInputFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {
   4 |   inputKey?: string;
   5 |   mask?: boolean;
   6 | }
   7 | 
   8 | export const PinInputField = React.forwardRef<HTMLInputElement, PinInputFieldProps>(
   9 |   ({ className, mask, type = 'text', ...props }, ref) => {
  10 |     return (
  11 |       <input
  12 |         ref={ref}
  13 |         type={mask ? 'password' : type}
  14 |         className={className}
  15 |         maxLength={1}
  16 |         {...props}
  17 |       />
  18 |     );
  19 |   },
  20 | );
  21 | 
  22 | PinInputField.displayName = 'PinInputField';

```

`/workspaces/automai/src/components/form/PinInput/PinInputField.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cn } from '@/lib/utils';
   4 | 
   5 | import { PinInputContext } from './context';
   6 | import { PinInputFieldProps, _PinInputFieldProps } from './types';
   7 | 
   8 | export const PinInputField = <T extends React.ElementType = 'input'>({
   9 |   className,
  10 |   component,
  11 |   ...props
  12 | }: PinInputFieldProps<T> &
  13 |   (React.ComponentType<T> extends undefined ? never : React.ComponentProps<T>)) => {
  14 |   const { mask, type, inputKey, ...rest } = props as _PinInputFieldProps & React.ComponentProps<T>;
  15 | 
  16 |   // Check if PinInputField is used within PinInput
  17 |   const isInsidePinInput = React.useContext(PinInputContext);
  18 |   if (!isInsidePinInput) {
  19 |     throw new Error(`PinInputField must be used within PinInput.`);
  20 |   }
  21 | 
  22 |   const Element = component || 'input';
  23 | 
  24 |   return (
  25 |     <Element
  26 |       key={inputKey}
  27 |       type={mask ? 'password' : type === 'numeric' ? 'tel' : 'text'}
  28 |       inputMode={type === 'numeric' ? 'numeric' : 'text'}
  29 |       className={cn('size-10 text-center', className)}
  30 |       {...rest}
  31 |     />
  32 |   );
  33 | };

```

`/workspaces/automai/src/components/form/PinInput/context.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | export const PinInputContext = React.createContext<boolean>(false);

```

`/workspaces/automai/src/components/form/PinInput/types.ts`:

```ts
   1 | import * as React from 'react';
   2 | 
   3 | export interface PinInputProps {
   4 |   children: React.ReactElement<typeof PinInputField> | React.ReactElement<typeof PinInputField>[];
   5 |   /**
   6 |    * className for the input container
   7 |    */
   8 |   className?: string;
   9 |   /**
  10 |    * `aria-label` for the input fields
  11 |    */
  12 |   ariaLabel?: string;
  13 |   /**
  14 |    * If set, the pin input receives focus on mount, `false` by default
  15 |    */
  16 |   autoFocus?: boolean;
  17 |   /**
  18 |    * Called when value changes
  19 |    */
  20 |   onChange?: (value: string) => void;
  21 |   /**
  22 |    * Called when all inputs have valid value
  23 |    */
  24 |   onComplete?: (value: string) => void;
  25 |   /**
  26 |    * Called when any input doesn't have value
  27 |    */
  28 |   onIncomplete?: (value: string) => void;
  29 |   /**
  30 |    * `name` attribute for input fields
  31 |    */
  32 |   name?: string;
  33 |   /**
  34 |    * `form` attribute for hidden input
  35 |    */
  36 |   form?: string;
  37 |   /**
  38 |    * If set, the input's value will be masked just like password input. This field is `false` by default
  39 |    */
  40 |   mask?: boolean;
  41 |   /**
  42 |    * If set, the pin input component signals to its fields that they should
  43 |    * use `autocomplete="one-time-code"`. This field is `false` by default
  44 |    */
  45 |   otp?: boolean;
  46 |   /**
  47 |    * Uncontrolled pin input default value.
  48 |    */
  49 |   defaultValue?: string;
  50 |   /**
  51 |    * Controlled pin input value.
  52 |    */
  53 |   value?: string;
  54 |   /**
  55 |    * The type of value pin input should allow, `alphanumeric` by default
  56 |    */
  57 |   type?: 'numeric' | 'alphanumeric';
  58 |   /**
  59 |    * Placeholder for input fields, `○` by default
  60 |    */
  61 |   placeholder?: string;
  62 |   /**
  63 |    * If set, the user cannot set the value, `false` by default
  64 |    */
  65 |   readOnly?: boolean;
  66 |   /**
  67 |    * If set, the input fields are disabled, `false` by default
  68 |    */
  69 |   disabled?: boolean;
  70 |   ref?: React.Ref<HTMLDivElement>;
  71 | }
  72 | 
  73 | export interface _PinInputFieldProps {
  74 |   mask: boolean;
  75 |   inputKey: string;
  76 |   type: 'numeric' | 'alphanumeric';
  77 | }
  78 | 
  79 | export interface PinInputFieldProps<T>
  80 |   extends Omit<React.ComponentPropsWithoutRef<'input'>, keyof _PinInputFieldProps> {
  81 |   component?: T;
  82 | }
  83 | 
  84 | export interface UsePinInputProps {
  85 |   value: string | undefined;
  86 |   defaultValue: string | undefined;
  87 |   placeholder: string;
  88 |   type: 'numeric' | 'alphanumeric';
  89 |   length: number;
  90 |   readOnly: boolean;
  91 | }
  92 | 
  93 | // This is a forward reference to avoid circular dependency
  94 | // The actual PinInputField component will be defined in PinInputField.tsx
  95 | export const PinInputField: any = null;

```

`/workspaces/automai/src/components/form/PinInput/index.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { PinInputField } from './PinInput.common';
   4 | import { PinInputContext } from './context';
   5 | import type { PinInputProps } from './types';
   6 | import { usePinInput } from './usePinInput';
   7 | import { _getValidChildren as getValidChildren, _getInputFieldCount as getInputFieldCount } from './utils';
   8 | 
   9 | const PinInput = ({ className, children, ref, ...props }: PinInputProps) => {
  10 |   const {
  11 |     defaultValue,
  12 |     value,
  13 |     onChange,
  14 |     onComplete,
  15 |     onIncomplete,
  16 |     placeholder = '○',
  17 |     type = 'alphanumeric',
  18 |     name,
  19 |     form,
  20 |     otp = false,
  21 |     mask = false,
  22 |     disabled = false,
  23 |     readOnly = false,
  24 |     autoFocus = false,
  25 |     ariaLabel = '',
  26 |     ...rest
  27 |   } = props;
  28 | 
  29 |   const validChildren = getValidChildren(children);
  30 |   const length = getInputFieldCount(children);
  31 |   const { pins, pinValue, refMap, ...handlers } = usePinInput({
  32 |     value,
  33 |     defaultValue,
  34 |     placeholder,
  35 |     type,
  36 |     length,
  37 |     readOnly,
  38 |   });
  39 | 
  40 |   React.useEffect(() => {
  41 |     if (!onChange) return;
  42 |     onChange(pinValue);
  43 |   }, [onChange, pinValue]);
  44 | 
  45 |   React.useEffect(() => {
  46 |     if (pinValue.length === length && onComplete) {
  47 |       onComplete(pinValue);
  48 |     }
  49 |     if (pinValue.length !== length && onIncomplete) {
  50 |       onIncomplete(pinValue);
  51 |     }
  52 |   }, [length, onComplete, onIncomplete, pinValue]);
  53 | 
  54 |   React.useEffect(() => {
  55 |     if (!autoFocus) return;
  56 |     const node = refMap?.get(0);
  57 |     if (node) {
  58 |       node.focus();
  59 |     }
  60 |   }, [autoFocus, refMap]);
  61 | 
  62 |   const clones = validChildren.map((child: React.ReactElement, index: number) => {
  63 |     if (child.type === PinInputField) {
  64 |       return React.cloneElement(child, {
  65 |         name,
  66 |         inputKey: `input-${index}`,
  67 |         value: length > index ? pins[index] : '',
  68 |         onChange: (e: React.ChangeEvent<HTMLInputElement>) => handlers.handleChange(e, index),
  69 |         onFocus: (e: React.FocusEvent<HTMLInputElement>) => handlers.handleFocus(e, index),
  70 |         onBlur: () => handlers.handleBlur(index),
  71 |         onKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => handlers.handleKeyDown(e, index),
  72 |         onPaste: (e: React.ClipboardEvent<HTMLInputElement>) => handlers.handlePaste(e),
  73 |         placeholder: placeholder,
  74 |         type: type,
  75 |         mask: mask,
  76 |         autoComplete: otp ? 'one-time-code' : 'off',
  77 |         disabled: disabled,
  78 |         readOnly: readOnly,
  79 |         'aria-label': ariaLabel ? ariaLabel : `Pin input ${index + 1} of ${length}`,
  80 |         ref: (node: HTMLInputElement | null) => {
  81 |           if (node) {
  82 |             refMap?.set(index, node);
  83 |           } else {
  84 |             refMap?.delete(index);
  85 |           }
  86 |         },
  87 |       } as React.ComponentProps<typeof PinInputField>);
  88 |     }
  89 |     return child;
  90 |   });
  91 | 
  92 |   return (
  93 |     <PinInputContext.Provider value={true}>
  94 |       <div ref={ref} aria-label="Pin Input" className={className} {...rest}>
  95 |         {clones}
  96 |         <input type="hidden" name={name} form={form} value={pinValue} />
  97 |       </div>
  98 |     </PinInputContext.Provider>
  99 |   );
 100 | };
 101 | 
 102 | PinInput.displayName = 'PinInput';
 103 | 
 104 | export { PinInput, PinInputField };
 105 | 
 106 | // Export types and utilities
 107 | export type { PinInputProps };
 108 | export { PinInputContext };
 109 | export { usePinInput };
 110 | export * from './utils';

```

`/workspaces/automai/src/components/form/SelectDropdown.tsx`:

```tsx
   1 | import { IconLoader } from '@tabler/icons-react';
   2 | 
   3 | import { FormControl } from '@/components/shadcn/form';
   4 | import {
   5 |   Select,
   6 |   SelectContent,
   7 |   SelectItem,
   8 |   SelectTrigger,
   9 |   SelectValue,
  10 | } from '@/components/shadcn/select';
  11 | import { cn } from '@/lib/utils';
  12 | 
  13 | interface SelectDropdownProps {
  14 |   onValueChange?: (value: string) => void;
  15 |   defaultValue: string | undefined;
  16 |   placeholder?: string;
  17 |   isPending?: boolean;
  18 |   items: { label: string; value: string }[] | undefined;
  19 |   disabled?: boolean;
  20 |   className?: string;
  21 |   isControlled?: boolean;
  22 | }
  23 | 
  24 | export function SelectDropdown({
  25 |   defaultValue,
  26 |   onValueChange,
  27 |   isPending,
  28 |   items,
  29 |   placeholder,
  30 |   disabled,
  31 |   className = '',
  32 |   isControlled = false,
  33 | }: SelectDropdownProps) {
  34 |   const defaultState = isControlled
  35 |     ? { value: defaultValue, onValueChange }
  36 |     : { defaultValue, onValueChange };
  37 |   return (
  38 |     <Select {...defaultState}>
  39 |       <FormControl>
  40 |         <SelectTrigger disabled={disabled} className={cn(className)}>
  41 |           <SelectValue placeholder={placeholder ?? 'Select'} />
  42 |         </SelectTrigger>
  43 |       </FormControl>
  44 |       <SelectContent>
  45 |         {isPending ? (
  46 |           <SelectItem disabled value="loading" className="h-14">
  47 |             <div className="flex items-center justify-center gap-2">
  48 |               <IconLoader className="h-5 w-5 animate-spin" />
  49 |               {'  '}
  50 |               Loading...
  51 |             </div>
  52 |           </SelectItem>
  53 |         ) : (
  54 |           items?.map(({ label, value }) => (
  55 |             <SelectItem key={value} value={value}>
  56 |               {label}
  57 |             </SelectItem>
  58 |           ))
  59 |         )}
  60 |       </SelectContent>
  61 |     </Select>
  62 |   );
  63 | }

```

`/workspaces/automai/src/components/form/PinInput.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import { cn } from '@/lib/utils';
   6 | 
   7 | // Context
   8 | export const PinInputContext = React.createContext<boolean>(false);
   9 | 
  10 | // Types
  11 | export interface PinInputProps {
  12 |   children: React.ReactElement<typeof PinInputField> | React.ReactElement<typeof PinInputField>[];
  13 |   className?: string;
  14 |   ref?: React.Ref<HTMLDivElement>;
  15 |   defaultValue?: string;
  16 |   value?: string;
  17 |   onChange?: (value: string) => void;
  18 |   onComplete?: (value: string) => void;
  19 |   onIncomplete?: (value: string) => void;
  20 |   placeholder?: string;
  21 |   type?: 'numeric' | 'alphanumeric';
  22 |   name?: string;
  23 |   form?: string;
  24 |   otp?: boolean;
  25 |   mask?: boolean;
  26 |   disabled?: boolean;
  27 |   readOnly?: boolean;
  28 |   autoFocus?: boolean;
  29 |   ariaLabel?: string;
  30 | }
  31 | 
  32 | export interface PinInputFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {
  33 |   mask?: boolean;
  34 |   inputKey?: string;
  35 |   name?: string;
  36 | }
  37 | 
  38 | export interface UsePinInputProps {
  39 |   value?: string;
  40 |   defaultValue?: string;
  41 |   placeholder?: string;
  42 |   type?: 'numeric' | 'alphanumeric';
  43 |   length: number;
  44 |   readOnly?: boolean;
  45 | }
  46 | 
  47 | // Utilities
  48 | export function getValidChildren(children: React.ReactNode) {
  49 |   return React.Children.toArray(children).filter((child) =>
  50 |     React.isValidElement(child),
  51 |   ) as React.ReactElement[];
  52 | }
  53 | 
  54 | export function getInputFieldCount(children: React.ReactNode) {
  55 |   return React.Children.toArray(children).filter((child) => {
  56 |     return (
  57 |       React.isValidElement(child) &&
  58 |       typeof child.type === 'function' &&
  59 |       'displayName' in child.type &&
  60 |       child.type.displayName === 'PinInputField'
  61 |     );
  62 |   }).length;
  63 | }
  64 | 
  65 | // Hook
  66 | export const usePinInput = ({
  67 |   value,
  68 |   defaultValue,
  69 |   placeholder,
  70 |   type,
  71 |   length,
  72 |   readOnly,
  73 | }: UsePinInputProps) => {
  74 |   const pinInputs = React.useMemo(() => Array.from({ length }, (_, i) => i), [length]);
  75 | 
  76 |   const [pins, setPins] = React.useState<string[]>(pinInputs.map(() => ''));
  77 |   const [focusedIndex, setFocusedIndex] = React.useState<number>(-1);
  78 |   const refMap = React.useRef<Map<number, HTMLInputElement>>(new Map());
  79 | 
  80 |   const pinValue = React.useMemo(() => pins.join(''), [pins]);
  81 | 
  82 |   React.useEffect(() => {
  83 |     if (value !== undefined) {
  84 |       const valueArray = value.split('');
  85 |       setPins(pinInputs.map((_, i) => valueArray[i] || ''));
  86 |     }
  87 |   }, [value, pinInputs]);
  88 | 
  89 |   React.useEffect(() => {
  90 |     if (defaultValue !== undefined && value === undefined) {
  91 |       const defaultValueArray = defaultValue.split('');
  92 |       setPins(pinInputs.map((_, i) => defaultValueArray[i] || ''));
  93 |     }
  94 |   }, [defaultValue, pinInputs, value]);
  95 | 
  96 |   const handleChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {
  97 |     if (readOnly) return;
  98 | 
  99 |     const newValue = e.target.value;
 100 |     const newPins = [...pins];
 101 | 
 102 |     if (type === 'numeric' && !/^\d*$/.test(newValue)) {
 103 |       return;
 104 |     }
 105 | 
 106 |     if (newValue.length <= 1) {
 107 |       newPins[index] = newValue;
 108 |       setPins(newPins);
 109 | 
 110 |       if (newValue.length === 1 && index < length - 1) {
 111 |         const nextInput = refMap.current.get(index + 1);
 112 |         if (nextInput) {
 113 |           nextInput.focus();
 114 |         }
 115 |       }
 116 |     } else if (newValue.length > 1) {
 117 |       // Handle paste or multiple characters
 118 |       const newChars = newValue.split('');
 119 |       for (let i = 0; i < newChars.length && index + i < length; i++) {
 120 |         newPins[index + i] = newChars[i];
 121 |       }
 122 |       setPins(newPins);
 123 | 
 124 |       const nextIndex = Math.min(index + newChars.length, length - 1);
 125 |       const nextInput = refMap.current.get(nextIndex);
 126 |       if (nextInput) {
 127 |         nextInput.focus();
 128 |       }
 129 |     }
 130 |   };
 131 | 
 132 |   const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>, index: number) => {
 133 |     if (readOnly) return;
 134 | 
 135 |     if (e.key === 'Backspace' && !pins[index] && index > 0) {
 136 |       const newPins = [...pins];
 137 |       newPins[index - 1] = '';
 138 |       setPins(newPins);
 139 | 
 140 |       const prevInput = refMap.current.get(index - 1);
 141 |       if (prevInput) {
 142 |         prevInput.focus();
 143 |       }
 144 |     } else if (e.key === 'ArrowLeft' && index > 0) {
 145 |       const prevInput = refMap.current.get(index - 1);
 146 |       if (prevInput) {
 147 |         prevInput.focus();
 148 |       }
 149 |     } else if (e.key === 'ArrowRight' && index < length - 1) {
 150 |       const nextInput = refMap.current.get(index + 1);
 151 |       if (nextInput) {
 152 |         nextInput.focus();
 153 |       }
 154 |     }
 155 |   };
 156 | 
 157 |   const handleFocus = (e: React.FocusEvent<HTMLInputElement>, index: number) => {
 158 |     e.target.select();
 159 |     setFocusedIndex(index);
 160 |   };
 161 | 
 162 |   const handleBlur = (index: number) => {
 163 |     setFocusedIndex(-1);
 164 |   };
 165 | 
 166 |   const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {
 167 |     if (readOnly) return;
 168 | 
 169 |     e.preventDefault();
 170 |     const pastedData = e.clipboardData.getData('text/plain').trim();
 171 | 
 172 |     if (type === 'numeric' && !/^\d*$/.test(pastedData)) {
 173 |       return;
 174 |     }
 175 | 
 176 |     const pastedChars = pastedData.split('');
 177 |     const newPins = [...pins];
 178 | 
 179 |     for (let i = 0; i < pastedChars.length && i < length; i++) {
 180 |       newPins[i] = pastedChars[i];
 181 |     }
 182 | 
 183 |     setPins(newPins);
 184 | 
 185 |     const lastFilledIndex = Math.min(pastedChars.length - 1, length - 1);
 186 |     const nextInput = refMap.current.get(lastFilledIndex);
 187 |     if (nextInput) {
 188 |       nextInput.focus();
 189 |     }
 190 |   };
 191 | 
 192 |   return {
 193 |     pins,
 194 |     pinValue,
 195 |     focusedIndex,
 196 |     refMap: refMap.current,
 197 |     handleChange,
 198 |     handleKeyDown,
 199 |     handleFocus,
 200 |     handleBlur,
 201 |     handlePaste,
 202 |   };
 203 | };
 204 | 
 205 | // PinInputField Component
 206 | export const PinInputField = React.forwardRef<HTMLInputElement, PinInputFieldProps>(
 207 |   ({ className, mask, type, inputKey, ...props }, ref) => {
 208 |     // Check if PinInputField is used within PinInput
 209 |     const isInsidePinInput = React.useContext(PinInputContext);
 210 | 
 211 |     if (!isInsidePinInput) {
 212 |       console.warn('PinInputField must be used within PinInput');
 213 |     }
 214 | 
 215 |     return (
 216 |       <input
 217 |         ref={ref}
 218 |         type={mask ? 'password' : 'text'}
 219 |         className={cn(
 220 |           'flex h-10 w-10 rounded-md border border-input bg-background px-3 py-2 text-center text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
 221 |           className,
 222 |         )}
 223 |         maxLength={1}
 224 |         {...props}
 225 |       />
 226 |     );
 227 |   },
 228 | );
 229 | 
 230 | PinInputField.displayName = 'PinInputField';
 231 | 
 232 | // PinInput Component
 233 | export const PinInput = React.forwardRef<HTMLDivElement, PinInputProps>(
 234 |   ({ className, children, ...props }, ref) => {
 235 |     const {
 236 |       defaultValue,
 237 |       value,
 238 |       onChange,
 239 |       onComplete,
 240 |       onIncomplete,
 241 |       placeholder = '○',
 242 |       type = 'alphanumeric',
 243 |       name,
 244 |       form,
 245 |       otp = false,
 246 |       mask = false,
 247 |       disabled = false,
 248 |       readOnly = false,
 249 |       autoFocus = false,
 250 |       ariaLabel = '',
 251 |       ...rest
 252 |     } = props;
 253 | 
 254 |     const validChildren = getValidChildren(children);
 255 |     const length = getInputFieldCount(children);
 256 |     const { pins, pinValue, refMap, ...handlers } = usePinInput({
 257 |       value,
 258 |       defaultValue,
 259 |       placeholder,
 260 |       type,
 261 |       length,
 262 |       readOnly,
 263 |     });
 264 | 
 265 |     React.useEffect(() => {
 266 |       if (!onChange) return;
 267 |       onChange(pinValue);
 268 |     }, [onChange, pinValue]);
 269 | 
 270 |     React.useEffect(() => {
 271 |       if (pinValue.length === length && onComplete) {
 272 |         onComplete(pinValue);
 273 |       }
 274 |       if (pinValue.length !== length && onIncomplete) {
 275 |         onIncomplete(pinValue);
 276 |       }
 277 |     }, [length, onComplete, onIncomplete, pinValue]);
 278 | 
 279 |     React.useEffect(() => {
 280 |       if (!autoFocus) return;
 281 |       const node = refMap?.get(0);
 282 |       if (node) {
 283 |         node.focus();
 284 |       }
 285 |     }, [autoFocus, refMap]);
 286 | 
 287 |     const clones = validChildren.map((child, index) => {
 288 |       if (React.isValidElement(child) && child.type === PinInputField) {
 289 |         return React.cloneElement(child, {
 290 |           name,
 291 |           inputKey: `input-${index}`,
 292 |           value: length > index ? pins[index] : '',
 293 |           onChange: (e: React.ChangeEvent<HTMLInputElement>) => handlers.handleChange(e, index),
 294 |           onFocus: (e: React.FocusEvent<HTMLInputElement>) => handlers.handleFocus(e, index),
 295 |           onBlur: () => handlers.handleBlur(index),
 296 |           onKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => handlers.handleKeyDown(e, index),
 297 |           onPaste: (e: React.ClipboardEvent<HTMLInputElement>) => handlers.handlePaste(e),
 298 |           placeholder: placeholder,
 299 |           type: type,
 300 |           mask: mask,
 301 |           autoComplete: otp ? 'one-time-code' : 'off',
 302 |           disabled: disabled,
 303 |           readOnly: readOnly,
 304 |           'aria-label': ariaLabel ? ariaLabel : `Pin input ${index + 1} of ${length}`,
 305 |           ref: (node: HTMLInputElement | null) => {
 306 |             if (node) {
 307 |               refMap?.set(index, node);
 308 |             } else {
 309 |               refMap?.delete(index);
 310 |             }
 311 |           },
 312 |         } as React.HTMLAttributes<HTMLInputElement> & PinInputFieldProps);
 313 |       }
 314 |       return child;
 315 |     });
 316 | 
 317 |     return (
 318 |       <PinInputContext.Provider value={true}>
 319 |         <div ref={ref} aria-label="Pin Input" className={cn('flex gap-2', className)} {...rest}>
 320 |           {clones}
 321 |           <input type="hidden" name={name} form={form} value={pinValue} />
 322 |         </div>
 323 |       </PinInputContext.Provider>
 324 |     );
 325 |   },
 326 | );
 327 | 
 328 | PinInput.displayName = 'PinInput';

```

`/workspaces/automai/src/components/form/PasswordInput.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { IconEye, IconEyeOff } from '@tabler/icons-react';
   4 | import * as React from 'react';
   5 | 
   6 | import { Button } from '@/components/shadcn/button';
   7 | import { cn } from '@/lib/utils';
   8 | 
   9 | type PasswordInputProps = Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type'>;
  10 | 
  11 | const PasswordInput = React.forwardRef<HTMLInputElement, PasswordInputProps>(
  12 |   ({ className, disabled, ...props }, ref) => {
  13 |     const [showPassword, setShowPassword] = React.useState(false);
  14 |     return (
  15 |       <div className={cn('relative rounded-md', className)}>
  16 |         <input
  17 |           type={showPassword ? 'text' : 'password'}
  18 |           className="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
  19 |           ref={ref}
  20 |           disabled={disabled}
  21 |           {...props}
  22 |         />
  23 |         <Button
  24 |           type="button"
  25 |           size="icon"
  26 |           variant="ghost"
  27 |           disabled={disabled}
  28 |           className="absolute right-1 top-1/2 h-6 w-6 -translate-y-1/2 rounded-md text-muted-foreground"
  29 |           onClick={() => setShowPassword((prev) => !prev)}
  30 |         >
  31 |           {showPassword ? <IconEye size={18} /> : <IconEyeOff size={18} />}
  32 |         </Button>
  33 |       </div>
  34 |     );
  35 |   },
  36 | );
  37 | PasswordInput.displayName = 'PasswordInput';
  38 | 
  39 | export { PasswordInput };

```

`/workspaces/automai/src/components/settings/LanguageSettings.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useRouter, useParams } from 'next/navigation';
   4 | import { useTranslations } from 'next-intl';
   5 | 
   6 | import {
   7 |   Card,
   8 |   CardContent,
   9 |   CardDescription,
  10 |   CardHeader,
  11 |   CardTitle,
  12 | } from '@/components/shadcn/card';
  13 | import {
  14 |   Select,
  15 |   SelectContent,
  16 |   SelectItem,
  17 |   SelectTrigger,
  18 |   SelectValue,
  19 | } from '@/components/shadcn/select';
  20 | 
  21 | const languages = [
  22 |   { code: 'en', name: 'English' },
  23 |   { code: 'fr', name: 'Français' },
  24 | ];
  25 | 
  26 | export function LanguageSettings() {
  27 |   const _router = useRouter();
  28 |   const params = useParams();
  29 |   const t = useTranslations('Settings');
  30 |   const currentLocale = params.locale as string;
  31 |   const tenant = params.tenant as string;
  32 | 
  33 |   const handleLanguageChange = (newLocale: string) => {
  34 |     // Replace the current locale in the URL with the new one
  35 |     const newPath = window.location.pathname.replace(`/${currentLocale}/`, `/${newLocale}/`);
  36 |     // Use window.location.href to force a full page refresh which will reapply the theme
  37 |     window.location.href = newPath;
  38 |   };
  39 | 
  40 |   return (
  41 |     <Card>
  42 |       <CardHeader>
  43 |         <CardTitle>{t('languageSettings')}</CardTitle>
  44 |         <CardDescription>{t('languageDescription')}</CardDescription>
  45 |       </CardHeader>
  46 |       <CardContent>
  47 |         <div className="space-y-4">
  48 |           <div className="space-y-2">
  49 |             <label className="text-sm font-medium">{t('currentLanguage')}</label>
  50 |             <Select value={currentLocale} onValueChange={handleLanguageChange}>
  51 |               <SelectTrigger className="w-[200px]">
  52 |                 <SelectValue placeholder={t('selectLanguage')} />
  53 |               </SelectTrigger>
  54 |               <SelectContent>
  55 |                 {languages.map((lang) => (
  56 |                   <SelectItem key={lang.code} value={lang.code}>
  57 |                     {t(lang.code === 'en' ? 'english' : 'french')}
  58 |                   </SelectItem>
  59 |                 ))}
  60 |               </SelectContent>
  61 |             </Select>
  62 |           </div>
  63 |         </div>
  64 |       </CardContent>
  65 |     </Card>
  66 |   );
  67 | }

```

`/workspaces/automai/src/components/settings/SettingsHeader.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { ArrowLeft } from 'lucide-react';
   4 | import { useRouter } from 'next/navigation';
   5 | 
   6 | import { Button } from '@/components/shadcn/button';
   7 | 
   8 | interface SettingsHeaderProps {
   9 |   title: string;
  10 |   description?: string;
  11 | }
  12 | 
  13 | export function SettingsHeader({ title, description }: SettingsHeaderProps) {
  14 |   const router = useRouter();
  15 | 
  16 |   return (
  17 |     <div className="flex flex-col space-y-2">
  18 |       <div className="flex items-center space-x-4">
  19 |         <Button variant="ghost" size="icon" onClick={() => router.back()} className="h-8 w-8">
  20 |           <ArrowLeft className="h-4 w-4" />
  21 |         </Button>
  22 |         <h2 className="text-2xl font-bold tracking-tight">{title}</h2>
  23 |       </div>
  24 |       {description && <p className="text-muted-foreground">{description}</p>}
  25 |     </div>
  26 |   );
  27 | }

```

`/workspaces/automai/src/components/repositories/RepositoryDetail.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useState, useEffect } from 'react';
   4 | import { useRepository } from '@/hooks/useRepository';
   5 | import { Button } from '@/components/shadcn/button';
   6 | import { Input } from '@/components/shadcn/input';
   7 | import { Textarea } from '@/components/shadcn/textarea';
   8 | import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/shadcn/card';
   9 | import { Skeleton } from '@/components/shadcn/skeleton';
  10 | import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/shadcn/alert-dialog';
  11 | import { useRouter } from 'next/navigation';
  12 | import { Edit, Save, Trash2, ArrowLeft, RefreshCw, GitBranch, Lock, Unlock, ExternalLink } from 'lucide-react';
  13 | import { Badge } from '@/components/shadcn/badge';
  14 | import { useTranslations } from 'next-intl';
  15 | 
  16 | interface RepositoryDetailProps {
  17 |   repositoryId: string;
  18 |   onBack?: () => void;
  19 | }
  20 | 
  21 | export function RepositoryDetail({ repositoryId, onBack }: RepositoryDetailProps) {
  22 |   const router = useRouter();
  23 |   const t = useTranslations('Repositories');
  24 |   const { repository, loading, error, updateRepository, deleteRepository, syncRepository } = useRepository(repositoryId);
  25 |   const [isEditing, setIsEditing] = useState(false);
  26 |   const [name, setName] = useState('');
  27 |   const [description, setDescription] = useState('');
  28 |   const [defaultBranch, setDefaultBranch] = useState('');
  29 |   const [isSyncing, setIsSyncing] = useState(false);
  30 | 
  31 |   // Initialize form when repository data is loaded
  32 |   useEffect(() => {
  33 |     if (repository) {
  34 |       setName(repository.name);
  35 |       setDescription(repository.description || '');
  36 |       setDefaultBranch(repository.defaultBranch || '');
  37 |     }
  38 |   }, [repository]);
  39 | 
  40 |   const handleEdit = () => {
  41 |     setName(repository?.name || '');
  42 |     setDescription(repository?.description || '');
  43 |     setDefaultBranch(repository?.defaultBranch || '');
  44 |     setIsEditing(true);
  45 |   };
  46 | 
  47 |   const handleSave = async () => {
  48 |     if (await updateRepository({ 
  49 |       name, 
  50 |       description, 
  51 |       defaultBranch 
  52 |     })) {
  53 |       setIsEditing(false);
  54 |     }
  55 |   };
  56 | 
  57 |   const handleDelete = async () => {
  58 |     if (await deleteRepository()) {
  59 |       if (onBack) {
  60 |         onBack();
  61 |       } else {
  62 |         router.push('/repositories');
  63 |       }
  64 |     }
  65 |   };
  66 | 
  67 |   const handleSync = async () => {
  68 |     setIsSyncing(true);
  69 |     await syncRepository();
  70 |     setIsSyncing(false);
  71 |   };
  72 | 
  73 |   const getSyncStatusBadge = () => {
  74 |     if (!repository) return null;
  75 |     
  76 |     switch (repository.syncStatus) {
  77 |       case 'SYNCED':
  78 |         return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">Synced</Badge>;
  79 |       case 'PENDING':
  80 |         return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200">Pending</Badge>;
  81 |       case 'ERROR':
  82 |         return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200">Error</Badge>;
  83 |       default:
  84 |         return null;
  85 |     }
  86 |   };
  87 | 
  88 |   if (loading) {
  89 |     return (
  90 |       <Card className="w-full">
  91 |         <CardHeader>
  92 |           <Skeleton className="h-8 w-3/4" />
  93 |           <Skeleton className="h-4 w-1/2" />
  94 |         </CardHeader>
  95 |         <CardContent>
  96 |           <Skeleton className="h-24 w-full" />
  97 |         </CardContent>
  98 |         <CardFooter>
  99 |           <Skeleton className="h-10 w-24 mr-2" />
 100 |           <Skeleton className="h-10 w-24" />
 101 |         </CardFooter>
 102 |       </Card>
 103 |     );
 104 |   }
 105 | 
 106 |   if (error) {
 107 |     return (
 108 |       <Card className="w-full">
 109 |         <CardHeader>
 110 |           <CardTitle>{t('error')}</CardTitle>
 111 |           <CardDescription>{t('failedToLoadRepository')}</CardDescription>
 112 |         </CardHeader>
 113 |         <CardContent>
 114 |           <p className="text-destructive">{error.message}</p>
 115 |         </CardContent>
 116 |         <CardFooter>
 117 |           <Button onClick={onBack || (() => router.push('/repositories'))}>
 118 |             <ArrowLeft className="mr-2 h-4 w-4" /> {t('back')}
 119 |           </Button>
 120 |         </CardFooter>
 121 |       </Card>
 122 |     );
 123 |   }
 124 | 
 125 |   if (!repository) {
 126 |     return (
 127 |       <Card className="w-full">
 128 |         <CardHeader>
 129 |           <CardTitle>{t('repositoryNotFound')}</CardTitle>
 130 |           <CardDescription>{t('repositoryNotFoundDescription')}</CardDescription>
 131 |         </CardHeader>
 132 |         <CardFooter>
 133 |           <Button onClick={onBack || (() => router.push('/repositories'))}>
 134 |             <ArrowLeft className="mr-2 h-4 w-4" /> {t('back')}
 135 |           </Button>
 136 |         </CardFooter>
 137 |       </Card>
 138 |     );
 139 |   }
 140 | 
 141 |   return (
 142 |     <Card className="w-full">
 143 |       <CardHeader className="flex flex-row items-start justify-between">
 144 |         <div>
 145 |           {isEditing ? (
 146 |             <>
 147 |               <CardTitle>
 148 |                 <Input 
 149 |                   value={name} 
 150 |                   onChange={(e) => setName(e.target.value)} 
 151 |                   placeholder={t('repositoryName')}
 152 |                   className="text-xl font-bold"
 153 |                 />
 154 |               </CardTitle>
 155 |               <CardDescription>{t('editRepositoryDetails')}</CardDescription>
 156 |             </>
 157 |           ) : (
 158 |             <>
 159 |               <div className="flex items-center space-x-2">
 160 |                 <CardTitle>{repository.name}</CardTitle>
 161 |                 {getSyncStatusBadge()}
 162 |                 {repository.isPrivate ? 
 163 |                   <Badge variant="outline" className="bg-slate-50"><Lock className="h-3 w-3 mr-1" /> {t('private')}</Badge> : 
 164 |                   <Badge variant="outline" className="bg-slate-50"><Unlock className="h-3 w-3 mr-1" /> {t('public')}</Badge>
 165 |                 }
 166 |               </div>
 167 |               <CardDescription>
 168 |                 {repository.owner} • {t('lastSynced', { 
 169 |                   date: repository.lastSyncedAt 
 170 |                     ? new Date(repository.lastSyncedAt).toLocaleDateString() 
 171 |                     : t('never')
 172 |                 })}
 173 |               </CardDescription>
 174 |             </>
 175 |           )}
 176 |         </div>
 177 |         {!isEditing && (
 178 |           <Button variant="outline" size="sm" onClick={handleSync} disabled={isSyncing}>
 179 |             <RefreshCw className={`mr-2 h-4 w-4 ${isSyncing ? 'animate-spin' : ''}`} />
 180 |             {t('sync')}
 181 |           </Button>
 182 |         )}
 183 |       </CardHeader>
 184 |       <CardContent className="space-y-4">
 185 |         {isEditing ? (
 186 |           <>
 187 |             <div className="space-y-2">
 188 |               <label htmlFor="description">{t('description')}</label>
 189 |               <Textarea 
 190 |                 id="description"
 191 |                 value={description} 
 192 |                 onChange={(e) => setDescription(e.target.value)} 
 193 |                 placeholder={t('repositoryDescriptionPlaceholder')}
 194 |                 className="min-h-[100px]"
 195 |               />
 196 |             </div>
 197 |             <div className="space-y-2">
 198 |               <label htmlFor="defaultBranch">{t('defaultBranch')}</label>
 199 |               <Input 
 200 |                 id="defaultBranch"
 201 |                 value={defaultBranch} 
 202 |                 onChange={(e) => setDefaultBranch(e.target.value)} 
 203 |                 placeholder={t('defaultBranchPlaceholder')}
 204 |               />
 205 |             </div>
 206 |           </>
 207 |         ) : (
 208 |           <>
 209 |             <div>
 210 |               <h3 className="text-sm font-medium">{t('description')}</h3>
 211 |               <p className="text-muted-foreground mt-1">
 212 |                 {repository.description || t('noDescription')}
 213 |               </p>
 214 |             </div>
 215 |             <div>
 216 |               <h3 className="text-sm font-medium">{t('defaultBranch')}</h3>
 217 |               <div className="flex items-center mt-1">
 218 |                 <GitBranch className="h-4 w-4 mr-2 text-muted-foreground" />
 219 |                 <span>{repository.defaultBranch || 'main'}</span>
 220 |               </div>
 221 |             </div>
 222 |             {repository.url && (
 223 |               <div>
 224 |                 <h3 className="text-sm font-medium">{t('repositoryUrl')}</h3>
 225 |                 <a 
 226 |                   href={repository.url} 
 227 |                   target="_blank" 
 228 |                   rel="noopener noreferrer"
 229 |                   className="flex items-center mt-1 text-blue-600 hover:underline"
 230 |                 >
 231 |                   {repository.url}
 232 |                   <ExternalLink className="h-3 w-3 ml-1" />
 233 |                 </a>
 234 |               </div>
 235 |             )}
 236 |           </>
 237 |         )}
 238 |       </CardContent>
 239 |       <CardFooter className="flex justify-between">
 240 |         <Button variant="outline" onClick={onBack || (() => router.push('/repositories'))}>
 241 |           <ArrowLeft className="mr-2 h-4 w-4" /> {t('back')}
 242 |         </Button>
 243 |         <div className="flex space-x-2">
 244 |           {isEditing ? (
 245 |             <Button onClick={handleSave}>
 246 |               <Save className="mr-2 h-4 w-4" /> {t('save')}
 247 |             </Button>
 248 |           ) : (
 249 |             <Button variant="outline" onClick={handleEdit}>
 250 |               <Edit className="mr-2 h-4 w-4" /> {t('edit')}
 251 |             </Button>
 252 |           )}
 253 |           <AlertDialog>
 254 |             <AlertDialogTrigger asChild>
 255 |               <Button variant="destructive">
 256 |                 <Trash2 className="mr-2 h-4 w-4" /> {t('delete')}
 257 |               </Button>
 258 |             </AlertDialogTrigger>
 259 |             <AlertDialogContent>
 260 |               <AlertDialogHeader>
 261 |                 <AlertDialogTitle>{t('areYouSure')}</AlertDialogTitle>
 262 |                 <AlertDialogDescription>
 263 |                   {t('deleteRepositoryConfirmation')}
 264 |                 </AlertDialogDescription>
 265 |               </AlertDialogHeader>
 266 |               <AlertDialogFooter>
 267 |                 <AlertDialogCancel>{t('cancel')}</AlertDialogCancel>
 268 |                 <AlertDialogAction onClick={handleDelete}>{t('delete')}</AlertDialogAction>
 269 |               </AlertDialogFooter>
 270 |             </AlertDialogContent>
 271 |           </AlertDialog>
 272 |         </div>
 273 |       </CardFooter>
 274 |     </Card>
 275 |   );
 276 | } 

```

`/workspaces/automai/src/components/hosts/HostDetail.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useState, useEffect } from 'react';
   4 | import { useHost } from '@/hooks/useHost';
   5 | import { Button } from '@/components/shadcn/button';
   6 | import { Input } from '@/components/shadcn/input';
   7 | import { Textarea } from '@/components/shadcn/textarea';
   8 | import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/shadcn/card';
   9 | import { Skeleton } from '@/components/shadcn/skeleton';
  10 | import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/shadcn/alert-dialog';
  11 | import { useRouter } from 'next/navigation';
  12 | import { Edit, Save, Trash2, ArrowLeft, RefreshCw, Server, Wifi, WifiOff } from 'lucide-react';
  13 | import { Badge } from '@/components/shadcn/badge';
  14 | import { useTranslations } from 'next-intl';
  15 | import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/shadcn/select';
  16 | 
  17 | interface HostDetailProps {
  18 |   hostId: string;
  19 |   onBack?: () => void;
  20 | }
  21 | 
  22 | export function HostDetail({ hostId, onBack }: HostDetailProps) {
  23 |   const router = useRouter();
  24 |   const t = useTranslations('Hosts');
  25 |   const { host, loading, error, isTesting, updateHost, deleteHost, testConnection } = useHost(hostId);
  26 |   const [isEditing, setIsEditing] = useState(false);
  27 |   const [name, setName] = useState('');
  28 |   const [description, setDescription] = useState('');
  29 |   const [type, setType] = useState<'ssh' | 'docker' | 'portainer'>('ssh');
  30 |   const [ip, setIp] = useState('');
  31 |   const [port, setPort] = useState<number | undefined>(undefined);
  32 |   const [user, setUser] = useState('');
  33 | 
  34 |   // Initialize form when host data is loaded
  35 |   useEffect(() => {
  36 |     if (host) {
  37 |       setName(host.name);
  38 |       setDescription(host.description || '');
  39 |       setType(host.type);
  40 |       setIp(host.ip);
  41 |       setPort(host.port);
  42 |       setUser(host.user || '');
  43 |     }
  44 |   }, [host]);
  45 | 
  46 |   const handleEdit = () => {
  47 |     setName(host?.name || '');
  48 |     setDescription(host?.description || '');
  49 |     setType(host?.type || 'ssh');
  50 |     setIp(host?.ip || '');
  51 |     setPort(host?.port);
  52 |     setUser(host?.user || '');
  53 |     setIsEditing(true);
  54 |   };
  55 | 
  56 |   const handleSave = async () => {
  57 |     if (await updateHost({ 
  58 |       name, 
  59 |       description, 
  60 |       type,
  61 |       ip,
  62 |       port,
  63 |       user: user || undefined
  64 |     })) {
  65 |       setIsEditing(false);
  66 |     }
  67 |   };
  68 | 
  69 |   const handleDelete = async () => {
  70 |     if (await deleteHost()) {
  71 |       if (onBack) {
  72 |         onBack();
  73 |       } else {
  74 |         router.push('/hosts');
  75 |       }
  76 |     }
  77 |   };
  78 | 
  79 |   const handleTestConnection = async () => {
  80 |     await testConnection();
  81 |   };
  82 | 
  83 |   const getStatusBadge = () => {
  84 |     if (!host) return null;
  85 |     
  86 |     switch (host.status) {
  87 |       case 'connected':
  88 |         return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200"><Wifi className="h-3 w-3 mr-1" /> {t('connected')}</Badge>;
  89 |       case 'pending':
  90 |         return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200">{t('pending')}</Badge>;
  91 |       case 'failed':
  92 |         return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200"><WifiOff className="h-3 w-3 mr-1" /> {t('failed')}</Badge>;
  93 |       default:
  94 |         return null;
  95 |     }
  96 |   };
  97 | 
  98 |   if (loading) {
  99 |     return (
 100 |       <Card className="w-full">
 101 |         <CardHeader>
 102 |           <Skeleton className="h-8 w-3/4" />
 103 |           <Skeleton className="h-4 w-1/2" />
 104 |         </CardHeader>
 105 |         <CardContent>
 106 |           <Skeleton className="h-24 w-full" />
 107 |         </CardContent>
 108 |         <CardFooter>
 109 |           <Skeleton className="h-10 w-24 mr-2" />
 110 |           <Skeleton className="h-10 w-24" />
 111 |         </CardFooter>
 112 |       </Card>
 113 |     );
 114 |   }
 115 | 
 116 |   if (error) {
 117 |     return (
 118 |       <Card className="w-full">
 119 |         <CardHeader>
 120 |           <CardTitle>{t('error')}</CardTitle>
 121 |           <CardDescription>{t('failedToLoadHost')}</CardDescription>
 122 |         </CardHeader>
 123 |         <CardContent>
 124 |           <p className="text-destructive">{error.message}</p>
 125 |         </CardContent>
 126 |         <CardFooter>
 127 |           <Button onClick={onBack || (() => router.push('/hosts'))}>
 128 |             <ArrowLeft className="mr-2 h-4 w-4" /> {t('back')}
 129 |           </Button>
 130 |         </CardFooter>
 131 |       </Card>
 132 |     );
 133 |   }
 134 | 
 135 |   if (!host) {
 136 |     return (
 137 |       <Card className="w-full">
 138 |         <CardHeader>
 139 |           <CardTitle>{t('hostNotFound')}</CardTitle>
 140 |           <CardDescription>{t('hostNotFoundDescription')}</CardDescription>
 141 |         </CardHeader>
 142 |         <CardFooter>
 143 |           <Button onClick={onBack || (() => router.push('/hosts'))}>
 144 |             <ArrowLeft className="mr-2 h-4 w-4" /> {t('back')}
 145 |           </Button>
 146 |         </CardFooter>
 147 |       </Card>
 148 |     );
 149 |   }
 150 | 
 151 |   return (
 152 |     <Card className="w-full">
 153 |       <CardHeader className="flex flex-row items-start justify-between">
 154 |         <div>
 155 |           {isEditing ? (
 156 |             <>
 157 |               <CardTitle>
 158 |                 <Input 
 159 |                   value={name} 
 160 |                   onChange={(e) => setName(e.target.value)} 
 161 |                   placeholder={t('hostName')}
 162 |                   className="text-xl font-bold"
 163 |                 />
 164 |               </CardTitle>
 165 |               <CardDescription>{t('editHostDetails')}</CardDescription>
 166 |             </>
 167 |           ) : (
 168 |             <>
 169 |               <div className="flex items-center space-x-2">
 170 |                 <CardTitle>{host.name}</CardTitle>
 171 |                 {getStatusBadge()}
 172 |               </div>
 173 |               <CardDescription>
 174 |                 {host.ip}:{host.port || '22'} • {t('lastConnected', { 
 175 |                   date: host.lastConnected 
 176 |                     ? new Date(host.lastConnected).toLocaleDateString() 
 177 |                     : t('never')
 178 |                 })}
 179 |               </CardDescription>
 180 |             </>
 181 |           )}
 182 |         </div>
 183 |         {!isEditing && (
 184 |           <Button variant="outline" size="sm" onClick={handleTestConnection} disabled={isTesting}>
 185 |             <RefreshCw className={`mr-2 h-4 w-4 ${isTesting ? 'animate-spin' : ''}`} />
 186 |             {t('testConnection')}
 187 |           </Button>
 188 |         )}
 189 |       </CardHeader>
 190 |       <CardContent className="space-y-4">
 191 |         {isEditing ? (
 192 |           <>
 193 |             <div className="space-y-2">
 194 |               <label htmlFor="description">{t('description')}</label>
 195 |               <Textarea 
 196 |                 id="description"
 197 |                 value={description} 
 198 |                 onChange={(e) => setDescription(e.target.value)} 
 199 |                 placeholder={t('hostDescriptionPlaceholder')}
 200 |                 className="min-h-[100px]"
 201 |               />
 202 |             </div>
 203 |             <div className="space-y-2">
 204 |               <label htmlFor="type">{t('connectionType')}</label>
 205 |               <Select value={type} onValueChange={(value) => setType(value as 'ssh' | 'docker' | 'portainer')}>
 206 |                 <SelectTrigger>
 207 |                   <SelectValue placeholder={t('selectConnectionType')} />
 208 |                 </SelectTrigger>
 209 |                 <SelectContent>
 210 |                   <SelectItem value="ssh">SSH</SelectItem>
 211 |                   <SelectItem value="docker">Docker</SelectItem>
 212 |                   <SelectItem value="portainer">Portainer</SelectItem>
 213 |                 </SelectContent>
 214 |               </Select>
 215 |             </div>
 216 |             <div className="space-y-2">
 217 |               <label htmlFor="ip">{t('ipAddress')}</label>
 218 |               <Input 
 219 |                 id="ip"
 220 |                 value={ip} 
 221 |                 onChange={(e) => setIp(e.target.value)} 
 222 |                 placeholder={t('ipAddressPlaceholder')}
 223 |               />
 224 |             </div>
 225 |             <div className="space-y-2">
 226 |               <label htmlFor="port">{t('port')}</label>
 227 |               <Input 
 228 |                 id="port"
 229 |                 type="number"
 230 |                 value={port?.toString() || ''} 
 231 |                 onChange={(e) => setPort(e.target.value ? parseInt(e.target.value) : undefined)} 
 232 |                 placeholder={t('portPlaceholder')}
 233 |               />
 234 |             </div>
 235 |             {type === 'ssh' && (
 236 |               <div className="space-y-2">
 237 |                 <label htmlFor="user">{t('username')}</label>
 238 |                 <Input 
 239 |                   id="user"
 240 |                   value={user} 
 241 |                   onChange={(e) => setUser(e.target.value)} 
 242 |                   placeholder={t('usernamePlaceholder')}
 243 |                 />
 244 |               </div>
 245 |             )}
 246 |           </>
 247 |         ) : (
 248 |           <>
 249 |             <div>
 250 |               <h3 className="text-sm font-medium">{t('description')}</h3>
 251 |               <p className="text-muted-foreground mt-1">
 252 |                 {host.description || t('noDescription')}
 253 |               </p>
 254 |             </div>
 255 |             <div>
 256 |               <h3 className="text-sm font-medium">{t('connectionType')}</h3>
 257 |               <div className="flex items-center mt-1">
 258 |                 <Server className="h-4 w-4 mr-2 text-muted-foreground" />
 259 |                 <span>{host.type.toUpperCase()}</span>
 260 |               </div>
 261 |             </div>
 262 |             <div>
 263 |               <h3 className="text-sm font-medium">{t('connectionDetails')}</h3>
 264 |               <div className="mt-1 space-y-1">
 265 |                 <p className="text-sm">
 266 |                   <span className="font-medium">{t('ipAddress')}:</span> {host.ip}
 267 |                 </p>
 268 |                 <p className="text-sm">
 269 |                   <span className="font-medium">{t('port')}:</span> {host.port || '22'}
 270 |                 </p>
 271 |                 {host.user && (
 272 |                   <p className="text-sm">
 273 |                     <span className="font-medium">{t('username')}:</span> {host.user}
 274 |                   </p>
 275 |                 )}
 276 |               </div>
 277 |             </div>
 278 |             {host.errorMessage && (
 279 |               <div>
 280 |                 <h3 className="text-sm font-medium text-red-600">{t('lastError')}</h3>
 281 |                 <p className="text-sm text-red-600 mt-1">
 282 |                   {host.errorMessage}
 283 |                 </p>
 284 |               </div>
 285 |             )}
 286 |           </>
 287 |         )}
 288 |       </CardContent>
 289 |       <CardFooter className="flex justify-between">
 290 |         <Button variant="outline" onClick={onBack || (() => router.push('/hosts'))}>
 291 |           <ArrowLeft className="mr-2 h-4 w-4" /> {t('back')}
 292 |         </Button>
 293 |         <div className="flex space-x-2">
 294 |           {isEditing ? (
 295 |             <Button onClick={handleSave}>
 296 |               <Save className="mr-2 h-4 w-4" /> {t('save')}
 297 |             </Button>
 298 |           ) : (
 299 |             <Button variant="outline" onClick={handleEdit}>
 300 |               <Edit className="mr-2 h-4 w-4" /> {t('edit')}
 301 |             </Button>
 302 |           )}
 303 |           <AlertDialog>
 304 |             <AlertDialogTrigger asChild>
 305 |               <Button variant="destructive">
 306 |                 <Trash2 className="mr-2 h-4 w-4" /> {t('delete')}
 307 |               </Button>
 308 |             </AlertDialogTrigger>
 309 |             <AlertDialogContent>
 310 |               <AlertDialogHeader>
 311 |                 <AlertDialogTitle>{t('areYouSure')}</AlertDialogTitle>
 312 |                 <AlertDialogDescription>
 313 |                   {t('deleteHostConfirmation')}
 314 |                 </AlertDialogDescription>
 315 |               </AlertDialogHeader>
 316 |               <AlertDialogFooter>
 317 |                 <AlertDialogCancel>{t('cancel')}</AlertDialogCancel>
 318 |                 <AlertDialogAction onClick={handleDelete}>{t('delete')}</AlertDialogAction>
 319 |               </AlertDialogFooter>
 320 |             </AlertDialogContent>
 321 |           </AlertDialog>
 322 |         </div>
 323 |       </CardFooter>
 324 |     </Card>
 325 |   );
 326 | } 

```

`/workspaces/automai/src/components/sidebar/SidebarMenuSubButton.tsx`:

```tsx
   1 | import { Slot } from '@radix-ui/react-slot';
   2 | import { cva } from 'class-variance-authority';
   3 | import type { VariantProps } from 'class-variance-authority';
   4 | import * as React from 'react';
   5 | 
   6 | import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/shadcn/tooltip';
   7 | import { useSidebar } from '@/hooks/useSidebar';
   8 | import { cn } from '@/lib/utils';
   9 | 
  10 | const sidebarMenuSubButtonVariants = cva(
  11 |   'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
  12 |   {
  13 |     variants: {
  14 |       variant: {
  15 |         default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
  16 |         outline:
  17 |           'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',
  18 |       },
  19 |       size: {
  20 |         default: 'h-8 text-sm',
  21 |         sm: 'h-7 text-xs',
  22 |         lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0',
  23 |       },
  24 |     },
  25 |     defaultVariants: {
  26 |       variant: 'default',
  27 |       size: 'default',
  28 |     },
  29 |   },
  30 | );
  31 | 
  32 | export const SidebarMenuSubButton = React.forwardRef<
  33 |   HTMLButtonElement,
  34 |   React.ComponentProps<'button'> & {
  35 |     asChild?: boolean;
  36 |     isActive?: boolean;
  37 |     tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  38 |   } & VariantProps<typeof sidebarMenuSubButtonVariants>
  39 | >(
  40 |   (
  41 |     {
  42 |       asChild = false,
  43 |       isActive = false,
  44 |       variant = 'default',
  45 |       size = 'default',
  46 |       tooltip,
  47 |       className,
  48 |       ...props
  49 |     },
  50 |     ref,
  51 |   ) => {
  52 |     const Comp = asChild ? Slot : 'button';
  53 |     const { isMobile, state } = useSidebar();
  54 | 
  55 |     const button = (
  56 |       <Comp
  57 |         ref={ref}
  58 |         data-sidebar="menu-sub-button"
  59 |         data-size={size}
  60 |         data-active={isActive}
  61 |         className={cn(sidebarMenuSubButtonVariants({ variant, size }), className)}
  62 |         {...props}
  63 |       />
  64 |     );
  65 | 
  66 |     if (!tooltip) {
  67 |       return button;
  68 |     }
  69 | 
  70 |     if (typeof tooltip === 'string') {
  71 |       tooltip = {
  72 |         children: tooltip,
  73 |       };
  74 |     }
  75 | 
  76 |     return (
  77 |       <Tooltip>
  78 |         <TooltipTrigger asChild>{button}</TooltipTrigger>
  79 |         <TooltipContent
  80 |           side="right"
  81 |           align="center"
  82 |           hidden={state !== 'collapsed' || isMobile}
  83 |           {...tooltip}
  84 |         />
  85 |       </Tooltip>
  86 |     );
  87 |   },
  88 | );
  89 | 
  90 | SidebarMenuSubButton.displayName = 'SidebarMenuSubButton';

```

`/workspaces/automai/src/components/sidebar/constants.ts`:

```ts
   1 | /**
   2 |  * Sidebar constants
   3 |  * Contains all constants related to the sidebar component
   4 |  */
   5 | 
   6 | export const SIDEBAR_COOKIE_NAME = 'automai_sidebar_state';
   7 | export const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7; // 7 days
   8 | export const SIDEBAR_WIDTH = '14rem';
   9 | export const SIDEBAR_WIDTH_MOBILE = '18rem';
  10 | export const SIDEBAR_WIDTH_ICON = '3rem';
  11 | export const SIDEBAR_KEYBOARD_SHORTCUT = 'b';

```

`/workspaces/automai/src/components/sidebar/SidebarFooter.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | import { forwardRef } from 'react';
   3 | 
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarFooter = forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
   7 |   ({ className, ...props }, ref) => {
   8 |     return (
   9 |       <div
  10 |         ref={ref}
  11 |         data-sidebar="footer"
  12 |         className={cn('flex flex-col gap-2 p-2', className)}
  13 |         {...props}
  14 |       />
  15 |     );
  16 |   },
  17 | );
  18 | 
  19 | SidebarFooter.displayName = 'SidebarFooter';

```

`/workspaces/automai/src/components/sidebar/SidebarSeparator.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { Separator } from '@/components/shadcn/separator';
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarSeparator = React.forwardRef<
   7 |   React.ElementRef<typeof Separator>,
   8 |   React.ComponentProps<typeof Separator>
   9 | >(({ className, ...props }, ref) => {
  10 |   return (
  11 |     <Separator
  12 |       ref={ref}
  13 |       data-sidebar="separator"
  14 |       className={cn('mx-2 w-auto bg-sidebar-border', className)}
  15 |       {...props}
  16 |     />
  17 |   );
  18 | });

```

`/workspaces/automai/src/components/sidebar/SidebarGroupContent.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | import { forwardRef } from 'react';
   3 | 
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarGroupContent = forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
   7 |   ({ className, ...props }, ref) => (
   8 |     <div
   9 |       ref={ref}
  10 |       data-sidebar="group-content"
  11 |       className={cn('w-full text-sm', className)}
  12 |       {...props}
  13 |     />
  14 |   ),
  15 | );
  16 | 
  17 | SidebarGroupContent.displayName = 'SidebarGroupContent';

```

`/workspaces/automai/src/components/sidebar/SidebarGroupLabel.tsx`:

```tsx
   1 | import { Slot } from '@radix-ui/react-slot';
   2 | import * as React from 'react';
   3 | 
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarGroupLabel = React.forwardRef<
   7 |   HTMLDivElement,
   8 |   React.ComponentProps<'div'> & { asChild?: boolean }
   9 | >(({ className, asChild = false, ...props }, ref) => {
  10 |   const Comp = asChild ? Slot : 'div';
  11 | 
  12 |   return (
  13 |     <Comp
  14 |       ref={ref}
  15 |       data-sidebar="group-label"
  16 |       className={cn(
  17 |         'flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
  18 |         'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
  19 |         className,
  20 |       )}
  21 |       {...props}
  22 |     />
  23 |   );
  24 | });
  25 | 
  26 | SidebarGroupLabel.displayName = 'SidebarGroupLabel';

```

`/workspaces/automai/src/components/sidebar/SidebarGroup.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cn } from '@/lib/utils';
   4 | 
   5 | export const SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
   6 |   ({ className, ...props }, ref) => {
   7 |     return (
   8 |       <div
   9 |         ref={ref}
  10 |         data-sidebar="group"
  11 |         className={cn('relative flex w-full min-w-0 flex-col p-1', className)}
  12 |         {...props}
  13 |       />
  14 |     );
  15 |   },
  16 | );
  17 | 
  18 | SidebarGroup.displayName = 'SidebarGroup';

```

`/workspaces/automai/src/components/sidebar/SidebarGroupAction.tsx`:

```tsx
   1 | import { Slot } from '@radix-ui/react-slot';
   2 | import * as React from 'react';
   3 | 
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarGroupAction = React.forwardRef<
   7 |   HTMLButtonElement,
   8 |   React.ComponentProps<'button'> & { asChild?: boolean }
   9 | >(({ className, asChild = false, ...props }, ref) => {
  10 |   const Comp = asChild ? Slot : 'button';
  11 | 
  12 |   return (
  13 |     <Comp
  14 |       ref={ref}
  15 |       data-sidebar="group-action"
  16 |       className={cn(
  17 |         'absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
  18 |         'after:absolute after:-inset-2 after:md:hidden',
  19 |         'group-data-[collapsible=icon]:hidden',
  20 |         className,
  21 |       )}
  22 |       {...props}
  23 |     />
  24 |   );
  25 | });
  26 | 
  27 | SidebarGroupAction.displayName = 'SidebarGroupAction';

```

`/workspaces/automai/src/components/sidebar/SidebarInput.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { Input } from '@/components/shadcn/input';
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarInput = React.forwardRef<
   7 |   React.ElementRef<typeof Input>,
   8 |   React.ComponentProps<typeof Input>
   9 | >(({ className, ...props }, ref) => {
  10 |   return (
  11 |     <Input
  12 |       ref={ref}
  13 |       data-sidebar="input"
  14 |       className={cn(
  15 |         'h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring',
  16 |         className,
  17 |       )}
  18 |       {...props}
  19 |     />
  20 |   );
  21 | });
  22 | 
  23 | SidebarInput.displayName = 'SidebarInput';

```

`/workspaces/automai/src/components/sidebar/SidebarMenu.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cn } from '@/lib/utils';
   4 | 
   5 | export const SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(
   6 |   ({ className, ...props }, ref) => (
   7 |     <ul
   8 |       ref={ref}
   9 |       data-sidebar="menu"
  10 |       className={cn('flex w-full min-w-0 flex-col gap-1', className)}
  11 |       {...props}
  12 |     />
  13 |   ),
  14 | );
  15 | 
  16 | SidebarMenu.displayName = 'SidebarMenu';

```

`/workspaces/automai/src/components/sidebar/sidebarData.ts`:

```ts
   1 | export const _sidebarData = {
   2 |   // Add your sidebar data here
   3 |   items: [],
   4 | };

```

`/workspaces/automai/src/components/sidebar/SidebarMenuButton.tsx`:

```tsx
   1 | import { Slot } from '@radix-ui/react-slot';
   2 | import { cva } from 'class-variance-authority';
   3 | import type { VariantProps } from 'class-variance-authority';
   4 | import * as React from 'react';
   5 | 
   6 | import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/shadcn/tooltip';
   7 | import { useSidebar } from '@/hooks/useSidebar';
   8 | import { useIsMobile } from '@/hooks/useMobile';
   9 | import { cn } from '@/lib/utils';
  10 | 
  11 | const sidebarMenuButtonVariants = cva(
  12 |   'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
  13 |   {
  14 |     variants: {
  15 |       variant: {
  16 |         default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
  17 |         outline:
  18 |           'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',
  19 |       },
  20 |       size: {
  21 |         default: 'h-8 text-sm',
  22 |         sm: 'h-7 text-xs',
  23 |         lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0',
  24 |       },
  25 |     },
  26 |     defaultVariants: {
  27 |       variant: 'default',
  28 |       size: 'default',
  29 |     },
  30 |   },
  31 | );
  32 | 
  33 | export const SidebarMenuButton = React.forwardRef<
  34 |   HTMLButtonElement,
  35 |   React.ComponentProps<'button'> & {
  36 |     asChild?: boolean;
  37 |     isActive?: boolean;
  38 |     tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  39 |   } & VariantProps<typeof sidebarMenuButtonVariants>
  40 | >(
  41 |   (
  42 |     {
  43 |       asChild = false,
  44 |       isActive = false,
  45 |       variant = 'default',
  46 |       size = 'default',
  47 |       tooltip,
  48 |       className,
  49 |       ...props
  50 |     },
  51 |     ref,
  52 |   ) => {
  53 |     const Comp = asChild ? Slot : 'button';
  54 |     const { isOpen } = useSidebar();
  55 |     const isMobile = useIsMobile();
  56 | 
  57 |     const button = (
  58 |       <Comp
  59 |         ref={ref}
  60 |         data-sidebar="menu-button"
  61 |         data-size={size}
  62 |         data-active={isActive}
  63 |         className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
  64 |         {...props}
  65 |       />
  66 |     );
  67 | 
  68 |     if (!tooltip) {
  69 |       return button;
  70 |     }
  71 | 
  72 |     if (typeof tooltip === 'string') {
  73 |       tooltip = {
  74 |         children: tooltip,
  75 |       };
  76 |     }
  77 | 
  78 |     return (
  79 |       <Tooltip>
  80 |         <TooltipTrigger asChild>{button}</TooltipTrigger>
  81 |         <TooltipContent
  82 |           side="right"
  83 |           align="center"
  84 |           hidden={isOpen || isMobile}
  85 |           {...tooltip}
  86 |         />
  87 |       </Tooltip>
  88 |     );
  89 |   },
  90 | );
  91 | 
  92 | SidebarMenuButton.displayName = 'SidebarMenuButton';

```

`/workspaces/automai/src/components/sidebar/SidebarRail.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { useSidebar } from '@/hooks/useSidebar';
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<'button'>>(
   7 |   ({ className, ...props }, ref) => {
   8 |     const { toggleSidebar } = useSidebar();
   9 | 
  10 |     return (
  11 |       <button
  12 |         ref={ref}
  13 |         data-sidebar="rail"
  14 |         aria-label="Toggle Sidebar"
  15 |         tabIndex={-1}
  16 |         onClick={toggleSidebar}
  17 |         title="Toggle Sidebar"
  18 |         className={cn(
  19 |           'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear',
  20 |           'bg-accent/10 hover:bg-accent/20',
  21 |           'after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] after:bg-accent/20 hover:after:bg-accent/40',
  22 |           'group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',
  23 |           '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',
  24 |           '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
  25 |           'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',
  26 |           '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
  27 |           '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
  28 |           className,
  29 |         )}
  30 |         {...props}
  31 |       />
  32 |     );
  33 |   },
  34 | );
  35 | 
  36 | SidebarRail.displayName = 'SidebarRail';

```

`/workspaces/automai/src/components/sidebar/SidebarMenuSub.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | import { forwardRef } from 'react';
   3 | 
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarMenuSub = forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
   7 |   ({ className, ...props }, ref) => (
   8 |     <div
   9 |       ref={ref}
  10 |       data-sidebar="menu-sub"
  11 |       className={cn('flex w-full min-w-0 flex-col gap-1 pl-6', className)}
  12 |       {...props}
  13 |     />
  14 |   ),
  15 | );
  16 | 
  17 | SidebarMenuSub.displayName = 'SidebarMenuSub';

```

`/workspaces/automai/src/components/sidebar/SidebarHeader.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | import { forwardRef } from 'react';
   3 | 
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarHeader = forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
   7 |   ({ className, ...props }, ref) => {
   8 |     return (
   9 |       <div
  10 |         ref={ref}
  11 |         data-sidebar="header"
  12 |         className={cn('flex flex-col gap-2 p-2', className)}
  13 |         {...props}
  14 |       />
  15 |     );
  16 |   },
  17 | );
  18 | 
  19 | SidebarHeader.displayName = 'SidebarHeader';

```

`/workspaces/automai/src/components/sidebar/SidebarMenuItem.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | import { forwardRef } from 'react';
   3 | 
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | export const SidebarMenuItem = forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(
   7 |   ({ className, ...props }, ref) => (
   8 |     <li
   9 |       ref={ref}
  10 |       data-sidebar="menu-item"
  11 |       className={cn('group/menu-item relative', className)}
  12 |       {...props}
  13 |     />
  14 |   ),
  15 | );
  16 | 
  17 | SidebarMenuItem.displayName = 'SidebarMenuItem';

```

`/workspaces/automai/src/components/sidebar/SidebarTrigger.tsx`:

```tsx
   1 | import { PanelLeft } from 'lucide-react';
   2 | import * as React from 'react';
   3 | 
   4 | import { Button } from '@/components/shadcn/button';
   5 | import { useSidebar } from '@/hooks/useSidebar';
   6 | import { cn } from '@/lib/utils';
   7 | 
   8 | export const SidebarTrigger = React.forwardRef<
   9 |   React.ElementRef<typeof Button>,
  10 |   React.ComponentProps<typeof Button>
  11 | >(({ className, onClick, ...props }, ref) => {
  12 |   const { toggleSidebar } = useSidebar();
  13 | 
  14 |   return (
  15 |     <Button
  16 |       ref={ref}
  17 |       data-sidebar="trigger"
  18 |       variant="ghost"
  19 |       size="icon"
  20 |       className={cn('h-7 w-7', className)}
  21 |       onClick={(event) => {
  22 |         onClick?.(event);
  23 |         toggleSidebar();
  24 |       }}
  25 |       {...props}
  26 |     >
  27 |       <PanelLeft />
  28 |       <span className="sr-only">Toggle Sidebar</span>
  29 |     </Button>
  30 |   );
  31 | });
  32 | 
  33 | SidebarTrigger.displayName = 'SidebarTrigger';

```

`/workspaces/automai/src/components/sidebar/Sidebar.tsx`:

```tsx
   1 | import { VisuallyHidden } from '@radix-ui/react-visually-hidden';
   2 | import * as React from 'react';
   3 | 
   4 | import { Sheet, SheetContent, SheetDescription, SheetTitle } from '@/components/shadcn/sheet';
   5 | import { useSidebar } from '@/hooks/useSidebar';
   6 | import { cn } from '@/lib/utils';
   7 | import { SidebarProps } from '@/types/sidebar';
   8 | const SIDEBAR_WIDTH_MOBILE = '18rem';
   9 | const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
  10 |   (
  11 |     {
  12 |       side = 'left',
  13 |       variant = 'sidebar',
  14 |       collapsible = 'offcanvas',
  15 |       className,
  16 |       children,
  17 |       ...props
  18 |     },
  19 |     ref,
  20 |   ) => {
  21 |     const { isMobile, state, openMobile, setOpenMobile } = useSidebar();
  22 | 
  23 |     if (collapsible === 'none') {
  24 |       return (
  25 |         <div
  26 |           className={cn(
  27 |             'flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground',
  28 |             className,
  29 |           )}
  30 |           ref={ref}
  31 |           {...props}
  32 |         >
  33 |           {children}
  34 |         </div>
  35 |       );
  36 |     }
  37 | 
  38 |     if (isMobile) {
  39 |       return (
  40 |         <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
  41 |           <VisuallyHidden asChild>
  42 |             <SheetTitle />
  43 |           </VisuallyHidden>
  44 |           <SheetContent
  45 |             data-sidebar="sidebar"
  46 |             data-mobile="true"
  47 |             className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
  48 |             style={
  49 |               {
  50 |                 '--sidebar-width': SIDEBAR_WIDTH_MOBILE,
  51 |               } as React.CSSProperties
  52 |             }
  53 |             side={side}
  54 |           >
  55 |             <VisuallyHidden asChild>
  56 |               <SheetDescription />
  57 |             </VisuallyHidden>
  58 |             <div className="flex h-full w-full flex-col">{children}</div>
  59 |           </SheetContent>
  60 |         </Sheet>
  61 |       );
  62 |     }
  63 | 
  64 |     return (
  65 |       <div
  66 |         ref={ref}
  67 |         className="group peer hidden text-sidebar-foreground md:block"
  68 |         data-state={state}
  69 |         data-collapsible={state === 'collapsed' ? collapsible : ''}
  70 |         data-variant={variant}
  71 |         data-side={side}
  72 |       >
  73 |         {/* Sidebar gap on desktop */}
  74 |         <div
  75 |           className={cn(
  76 |             'relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear',
  77 |             'group-data-[collapsible=offcanvas]:w-0',
  78 |             'group-data-[side=right]:rotate-180',
  79 |             variant === 'floating' || variant === 'inset'
  80 |               ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(_spacing.2))]'
  81 |               : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon]',
  82 |           )}
  83 |         />
  84 |         <div
  85 |           className={cn(
  86 |             'fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex',
  87 |             side === 'left'
  88 |               ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
  89 |               : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
  90 |             variant === 'floating' || variant === 'inset'
  91 |               ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(_spacing.4)_+2px)]'
  92 |               : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',
  93 |             className,
  94 |           )}
  95 |           {...props}
  96 |         >
  97 |           <div
  98 |             data-sidebar="sidebar"
  99 |             className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
 100 |           >
 101 |             {children}
 102 |           </div>
 103 |         </div>
 104 |       </div>
 105 |     );
 106 |   },
 107 | );
 108 | 
 109 | Sidebar.displayName = 'Sidebar';
 110 | 
 111 | export default Sidebar;

```

`/workspaces/automai/src/components/sidebar/SidebarInset.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cn } from '@/lib/utils';
   4 | 
   5 | export const SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<'main'>>(
   6 |   ({ className, ...props }, ref) => {
   7 |     return (
   8 |       <main
   9 |         ref={ref}
  10 |         className={cn(
  11 |           'relative flex min-h-svh flex-1 flex-col bg-background',
  12 |           'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',
  13 |           className,
  14 |         )}
  15 |         {...props}
  16 |       />
  17 |     );
  18 |   },
  19 | );
  20 | 
  21 | SidebarInset.displayName = 'SidebarInset';

```

`/workspaces/automai/src/components/sidebar/index.tsx`:

```tsx
   1 | export { default as Sidebar } from './Sidebar';
   2 | export { SidebarProvider } from '@/context/SidebarContext';
   3 | export { SidebarTrigger } from './SidebarTrigger';
   4 | export { SidebarRail } from './SidebarRail';
   5 | export { SidebarInset } from './SidebarInset';
   6 | export { SidebarInput } from './SidebarInput';
   7 | export { SidebarHeader } from './SidebarHeader';
   8 | export { SidebarFooter } from './SidebarFooter';
   9 | export { SidebarSeparator } from './SidebarSeparator';
  10 | export { SidebarContent } from './SidebarContent';
  11 | export { SidebarGroup } from './SidebarGroup';
  12 | export { SidebarGroupLabel } from './SidebarGroupLabel';
  13 | export { SidebarGroupAction } from './SidebarGroupAction';
  14 | export { SidebarGroupContent } from './SidebarGroupContent';
  15 | export { SidebarMenu } from './SidebarMenu';
  16 | export { SidebarMenuItem } from './SidebarMenuItem';
  17 | export { SidebarMenuButton } from './SidebarMenuButton';
  18 | export { SidebarMenuSub } from './SidebarMenuSub';
  19 | export { SidebarMenuSubButton } from './SidebarMenuSubButton';
  20 | export { useSidebar } from '@/hooks/useSidebar';

```

`/workspaces/automai/src/components/sidebar/SidebarContent.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cn } from '@/lib/utils';
   4 | 
   5 | export const SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
   6 |   ({ className, ...props }, ref) => {
   7 |     return (
   8 |       <div
   9 |         ref={ref}
  10 |         data-sidebar="content"
  11 |         className={cn(
  12 |           'flex min-h-0 flex-1 flex-col gap-1 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
  13 |           className,
  14 |         )}
  15 |         {...props}
  16 |       />
  17 |     );
  18 |   },
  19 | );
  20 | 
  21 | SidebarContent.displayName = 'SidebarContent';

```

`/workspaces/automai/src/components/dashboard/Overview.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import dynamic from 'next/dynamic';
   4 | import { useEffect, useState, useMemo } from 'react';
   5 | 
   6 | // Import chart config
   7 | import '@/lib/chart';
   8 | 
   9 | // Use dynamic import with ssr: false to prevent hydration issues
  10 | const LineChart = dynamic(() => import('react-chartjs-2').then((mod) => mod.Line), { 
  11 |   ssr: false,
  12 |   loading: () => <div className="h-[350px] bg-muted/5 animate-pulse rounded-lg" />
  13 | });
  14 | 
  15 | // Define chart options outside component to prevent recreation on each render
  16 | const options = {
  17 |   responsive: true,
  18 |   maintainAspectRatio: false,
  19 |   plugins: {
  20 |     legend: {
  21 |       display: false,
  22 |     },
  23 |   },
  24 |   scales: {
  25 |     x: {
  26 |       grid: {
  27 |         display: false,
  28 |       },
  29 |     },
  30 |     y: {
  31 |       type: 'linear' as const,
  32 |       beginAtZero: true,
  33 |       max: 100,
  34 |       ticks: {
  35 |         callback: function (value: number | string) {
  36 |           return `${value}%`;
  37 |         },
  38 |       },
  39 |     },
  40 |   },
  41 | };
  42 | 
  43 | // Define initial data outside component to prevent recreation on each render
  44 | const initialData = {
  45 |   labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
  46 |   datasets: [
  47 |     {
  48 |       data: [85, 88, 92, 87, 94, 96],
  49 |       borderColor: 'rgb(99, 102, 241)',
  50 |       backgroundColor: 'rgba(99, 102, 241, 0.5)',
  51 |       tension: 0.3,
  52 |       fill: false,
  53 |       pointRadius: 5,
  54 |       pointHoverRadius: 7
  55 |     },
  56 |   ],
  57 | };
  58 | 
  59 | export function Overview() {
  60 |   // Use a single state variable for client-side rendering check
  61 |   const [mounted, setMounted] = useState(false);
  62 |   
  63 |   // Use useMemo to create chart data only once
  64 |   const chartData = useMemo(() => initialData, []);
  65 | 
  66 |   // Run effect only once on mount
  67 |   useEffect(() => {
  68 |     setMounted(true);
  69 |     // No cleanup needed, so return nothing
  70 |   }, []);
  71 | 
  72 |   // If not mounted yet, show loading state
  73 |   if (!mounted) {
  74 |     return <div className="h-[350px] bg-muted/5 animate-pulse rounded-lg" />;
  75 |   }
  76 | 
  77 |   return (
  78 |     <div className="h-[350px]">
  79 |       <LineChart options={options} data={chartData} />
  80 |     </div>
  81 |   );
  82 | }

```

`/workspaces/automai/src/components/dashboard/RecentSales.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Avatar, AvatarFallback, AvatarImage } from '@/components/shadcn/avatar';
   4 | 
   5 | export function RecentSales() {
   6 |   return (
   7 |     <div className="space-y-8">
   8 |       <div className="flex items-center gap-4">
   9 |         <Avatar className="h-9 w-9">
  10 |           <AvatarImage src="/avatars/01.svg" alt="Avatar" />
  11 |           <AvatarFallback>JD</AvatarFallback>
  12 |         </Avatar>
  13 |         <div className="flex flex-1 flex-wrap items-center justify-between">
  14 |           <div className="space-y-1">
  15 |             <p className="text-sm font-medium leading-none">John Doe</p>
  16 |             <p className="text-sm text-muted-foreground">john.doe@example.com</p>
  17 |           </div>
  18 |           <div className="font-medium">98% Success</div>
  19 |         </div>
  20 |       </div>
  21 |       <div className="flex items-center gap-4">
  22 |         <Avatar className="h-9 w-9">
  23 |           <AvatarImage src="/avatars/02.svg" alt="Avatar" />
  24 |           <AvatarFallback>JS</AvatarFallback>
  25 |         </Avatar>
  26 |         <div className="flex flex-1 flex-wrap items-center justify-between">
  27 |           <div className="space-y-1">
  28 |             <p className="text-sm font-medium leading-none">Jane Smith</p>
  29 |             <p className="text-sm text-muted-foreground">jane.smith@example.com</p>
  30 |           </div>
  31 |           <div className="font-medium">95% Success</div>
  32 |         </div>
  33 |       </div>
  34 |       <div className="flex items-center gap-4">
  35 |         <Avatar className="h-9 w-9">
  36 |           <AvatarImage src="/avatars/03.svg" alt="Avatar" />
  37 |           <AvatarFallback>RJ</AvatarFallback>
  38 |         </Avatar>
  39 |         <div className="flex flex-1 flex-wrap items-center justify-between">
  40 |           <div className="space-y-1">
  41 |             <p className="text-sm font-medium leading-none">Robert Johnson</p>
  42 |             <p className="text-sm text-muted-foreground">robert.j@example.com</p>
  43 |           </div>
  44 |           <div className="font-medium">92% Success</div>
  45 |         </div>
  46 |       </div>
  47 |       <div className="flex items-center gap-4">
  48 |         <Avatar className="h-9 w-9">
  49 |           <AvatarImage src="/avatars/04.svg" alt="Avatar" />
  50 |           <AvatarFallback>MD</AvatarFallback>
  51 |         </Avatar>
  52 |         <div className="flex flex-1 flex-wrap items-center justify-between">
  53 |           <div className="space-y-1">
  54 |             <p className="text-sm font-medium leading-none">Maria Davis</p>
  55 |             <p className="text-sm text-muted-foreground">maria.d@example.com</p>
  56 |           </div>
  57 |           <div className="font-medium">89% Success</div>
  58 |         </div>
  59 |       </div>
  60 |       <div className="flex items-center gap-4">
  61 |         <Avatar className="h-9 w-9">
  62 |           <AvatarImage src="/avatars/05.svg" alt="Avatar" />
  63 |           <AvatarFallback>AW</AvatarFallback>
  64 |         </Avatar>
  65 |         <div className="flex flex-1 flex-wrap items-center justify-between">
  66 |           <div className="space-y-1">
  67 |             <p className="text-sm font-medium leading-none">Alex Wilson</p>
  68 |             <p className="text-sm text-muted-foreground">alex.w@example.com</p>
  69 |           </div>
  70 |           <div className="font-medium">85% Success</div>
  71 |         </div>
  72 |       </div>
  73 |     </div>
  74 |   );
  75 | }

```

`/workspaces/automai/src/components/dialog/ConfirmDialog.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import {
   4 |   AlertDialog,
   5 |   AlertDialogCancel,
   6 |   AlertDialogContent,
   7 |   AlertDialogDescription,
   8 |   AlertDialogFooter,
   9 |   AlertDialogHeader,
  10 |   AlertDialogTitle,
  11 | } from '@/components/shadcn/alert-dialog';
  12 | import { Button } from '@/components/shadcn/button';
  13 | 
  14 | interface ConfirmDialogProps {
  15 |   open: boolean;
  16 |   onOpenChange: (open: boolean) => void;
  17 |   title: React.ReactNode;
  18 |   disabled?: boolean;
  19 |   desc: React.JSX.Element | string;
  20 |   cancelBtnText?: string;
  21 |   confirmText?: React.ReactNode;
  22 |   destructive?: boolean;
  23 |   handleConfirm: () => void;
  24 |   isLoading?: boolean;
  25 |   className?: string;
  26 |   children?: React.ReactNode;
  27 | }
  28 | 
  29 | export function ConfirmDialog(props: ConfirmDialogProps) {
  30 |   const {
  31 |     title,
  32 |     desc,
  33 |     children,
  34 |     className,
  35 |     confirmText,
  36 |     cancelBtnText,
  37 |     destructive,
  38 |     isLoading,
  39 |     disabled = false,
  40 |     handleConfirm,
  41 |     ...actions
  42 |   } = props;
  43 |   return (
  44 |     <AlertDialog {...actions}>
  45 |       <AlertDialogContent className={className}>
  46 |         <AlertDialogHeader className="text-left">
  47 |           <AlertDialogTitle>{title}</AlertDialogTitle>
  48 |           <AlertDialogDescription asChild>
  49 |             <div>{desc}</div>
  50 |           </AlertDialogDescription>
  51 |         </AlertDialogHeader>
  52 |         {children}
  53 |         <AlertDialogFooter>
  54 |           <AlertDialogCancel disabled={isLoading}>{cancelBtnText ?? 'Cancel'}</AlertDialogCancel>
  55 |           <Button
  56 |             variant={destructive ? 'destructive' : 'default'}
  57 |             onClick={handleConfirm}
  58 |             disabled={disabled || isLoading}
  59 |           >
  60 |             {confirmText ?? 'Continue'}
  61 |           </Button>
  62 |         </AlertDialogFooter>
  63 |       </AlertDialogContent>
  64 |     </AlertDialog>
  65 |   );
  66 | }

```

`/workspaces/automai/src/components/dialog/CommandMenu.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { IconArrowRightDashed, IconDeviceLaptop, IconMoon, IconSun } from '@tabler/icons-react';
   4 | import { useNavigate } from '@tanstack/react-router';
   5 | import React from 'react';
   6 | 
   7 | import {
   8 |   CommandDialog,
   9 |   CommandEmpty,
  10 |   CommandGroup,
  11 |   CommandInput,
  12 |   CommandItem,
  13 |   CommandList,
  14 |   CommandSeparator,
  15 | } from '@/components/shadcn/command';
  16 | import { ScrollArea } from '@/components/shadcn/scroll-area';
  17 | import { useSearch } from '@/context/SearchContext';
  18 | import { useTheme } from '@/context/ThemeContext';
  19 | import { sidebarData } from '@/components/layout/data/sidebarData';
  20 | 
  21 | interface NavItem {
  22 |   title: string;
  23 |   href: string;
  24 |   icon: any;
  25 |   roles?: string[];
  26 |   items?: NavItem[];
  27 | }
  28 | 
  29 | interface NavGroup {
  30 |   title: string;
  31 |   items: NavItem[];
  32 | }
  33 | 
  34 | export function CommandMenu() {
  35 |   const navigate = useNavigate();
  36 |   const { setTheme } = useTheme();
  37 |   const { open, setOpen } = useSearch();
  38 | 
  39 |   const runCommand = React.useCallback(
  40 |     (command: () => unknown) => {
  41 |       setOpen(false);
  42 |       command();
  43 |     },
  44 |     [setOpen],
  45 |   );
  46 | 
  47 |   return (
  48 |     <CommandDialog modal open={open} onOpenChange={setOpen}>
  49 |       <CommandInput placeholder="Type a command or search..." />
  50 |       <CommandList>
  51 |         <ScrollArea type="hover" className="h-72 pr-1">
  52 |           <CommandEmpty>No results found.</CommandEmpty>
  53 |           {sidebarData.navGroups
  54 |             .flatMap((group) => group.items)
  55 |             .map((navItem: NavItem, i: number) => {
  56 |               if (navItem.href)
  57 |                 return (
  58 |                   <CommandItem
  59 |                     key={`${navItem.href}-${i}`}
  60 |                     value={navItem.title}
  61 |                     onSelect={() => {
  62 |                       runCommand(() => navigate({ to: navItem.href }));
  63 |                     }}
  64 |                   >
  65 |                     <div className="mr-2 flex h-4 w-4 items-center justify-center">
  66 |                       <IconArrowRightDashed className="size-2 text-muted-foreground/80" />
  67 |                     </div>
  68 |                     {navItem.title}
  69 |                   </CommandItem>
  70 |                 );
  71 | 
  72 |               return navItem.items?.map((subItem: NavItem, i: number) => (
  73 |                 <CommandItem
  74 |                   key={`${subItem.href}-${i}`}
  75 |                   value={subItem.title}
  76 |                   onSelect={() => {
  77 |                     runCommand(() => navigate({ to: subItem.href }));
  78 |                   }}
  79 |                 >
  80 |                   <div className="mr-2 flex h-4 w-4 items-center justify-center">
  81 |                     <IconArrowRightDashed className="size-2 text-muted-foreground/80" />
  82 |                   </div>
  83 |                   {subItem.title}
  84 |                 </CommandItem>
  85 |               ));
  86 |             })}
  87 |           <CommandSeparator />
  88 |           <CommandGroup heading="Theme">
  89 |             <CommandItem onSelect={() => runCommand(() => setTheme('light'))}>
  90 |               <IconSun /> <span>Light</span>
  91 |             </CommandItem>
  92 |             <CommandItem onSelect={() => runCommand(() => setTheme('dark'))}>
  93 |               <IconMoon className="scale-90" />
  94 |               <span>Dark</span>
  95 |             </CommandItem>
  96 |             <CommandItem onSelect={() => runCommand(() => setTheme('system'))}>
  97 |               <IconDeviceLaptop />
  98 |               <span>System</span>
  99 |             </CommandItem>
 100 |           </CommandGroup>
 101 |         </ScrollArea>
 102 |       </CommandList>
 103 |     </CommandDialog>
 104 |   );
 105 | }

```

`/workspaces/automai/src/components/projects/ProjectDetail.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useState, useEffect } from 'react';
   4 | import { useProject } from '@/hooks/useProject';
   5 | import { Button } from '@/components/shadcn/button';
   6 | import { Input } from '@/components/shadcn/input';
   7 | import { Textarea } from '@/components/shadcn/textarea';
   8 | import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/shadcn/card';
   9 | import { Skeleton } from '@/components/shadcn/skeleton';
  10 | import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/shadcn/alert-dialog';
  11 | import { useRouter } from 'next/navigation';
  12 | import { Edit, Save, Trash2, ArrowLeft } from 'lucide-react';
  13 | 
  14 | interface ProjectDetailProps {
  15 |   projectId: string;
  16 |   onBack?: () => void;
  17 | }
  18 | 
  19 | export function ProjectDetail({ projectId, onBack }: ProjectDetailProps) {
  20 |   const router = useRouter();
  21 |   const { project, loading, error, updateProject, removeProject } = useProject(projectId);
  22 |   const [isEditing, setIsEditing] = useState(false);
  23 |   const [name, setName] = useState('');
  24 |   const [description, setDescription] = useState('');
  25 | 
  26 |   // Initialize form when project data is loaded
  27 |   useEffect(() => {
  28 |     if (project) {
  29 |       setName(project.name);
  30 |       setDescription(project.description || '');
  31 |     }
  32 |   }, [project]);
  33 | 
  34 |   const handleEdit = () => {
  35 |     setName(project?.name || '');
  36 |     setDescription(project?.description || '');
  37 |     setIsEditing(true);
  38 |   };
  39 | 
  40 |   const handleSave = async () => {
  41 |     if (await updateProject({ name, description })) {
  42 |       setIsEditing(false);
  43 |     }
  44 |   };
  45 | 
  46 |   const handleDelete = async () => {
  47 |     if (await removeProject()) {
  48 |       if (onBack) {
  49 |         onBack();
  50 |       } else {
  51 |         router.push('/projects');
  52 |       }
  53 |     }
  54 |   };
  55 | 
  56 |   if (loading) {
  57 |     return (
  58 |       <Card className="w-full">
  59 |         <CardHeader>
  60 |           <Skeleton className="h-8 w-3/4" />
  61 |           <Skeleton className="h-4 w-1/2" />
  62 |         </CardHeader>
  63 |         <CardContent>
  64 |           <Skeleton className="h-24 w-full" />
  65 |         </CardContent>
  66 |         <CardFooter>
  67 |           <Skeleton className="h-10 w-24 mr-2" />
  68 |           <Skeleton className="h-10 w-24" />
  69 |         </CardFooter>
  70 |       </Card>
  71 |     );
  72 |   }
  73 | 
  74 |   if (error) {
  75 |     return (
  76 |       <Card className="w-full">
  77 |         <CardHeader>
  78 |           <CardTitle>Error</CardTitle>
  79 |           <CardDescription>Failed to load project</CardDescription>
  80 |         </CardHeader>
  81 |         <CardContent>
  82 |           <p className="text-destructive">{error.message}</p>
  83 |         </CardContent>
  84 |         <CardFooter>
  85 |           <Button onClick={onBack || (() => router.push('/projects'))}>
  86 |             <ArrowLeft className="mr-2 h-4 w-4" /> Back
  87 |           </Button>
  88 |         </CardFooter>
  89 |       </Card>
  90 |     );
  91 |   }
  92 | 
  93 |   if (!project) {
  94 |     return (
  95 |       <Card className="w-full">
  96 |         <CardHeader>
  97 |           <CardTitle>Project Not Found</CardTitle>
  98 |           <CardDescription>The requested project could not be found</CardDescription>
  99 |         </CardHeader>
 100 |         <CardFooter>
 101 |           <Button onClick={onBack || (() => router.push('/projects'))}>
 102 |             <ArrowLeft className="mr-2 h-4 w-4" /> Back
 103 |           </Button>
 104 |         </CardFooter>
 105 |       </Card>
 106 |     );
 107 |   }
 108 | 
 109 |   return (
 110 |     <Card className="w-full">
 111 |       <CardHeader>
 112 |         {isEditing ? (
 113 |           <>
 114 |             <CardTitle>
 115 |               <Input 
 116 |                 value={name} 
 117 |                 onChange={(e) => setName(e.target.value)} 
 118 |                 placeholder="Project Name"
 119 |                 className="text-xl font-bold"
 120 |               />
 121 |             </CardTitle>
 122 |             <CardDescription>Edit project details</CardDescription>
 123 |           </>
 124 |         ) : (
 125 |           <>
 126 |             <CardTitle>{project.name}</CardTitle>
 127 |             <CardDescription>
 128 |               Created on {new Date(project.created_at).toLocaleDateString()}
 129 |             </CardDescription>
 130 |           </>
 131 |         )}
 132 |       </CardHeader>
 133 |       <CardContent>
 134 |         {isEditing ? (
 135 |           <Textarea 
 136 |             value={description} 
 137 |             onChange={(e) => setDescription(e.target.value)} 
 138 |             placeholder="Project Description"
 139 |             className="min-h-[100px]"
 140 |           />
 141 |         ) : (
 142 |           <p className="text-muted-foreground">
 143 |             {project.description || 'No description provided'}
 144 |           </p>
 145 |         )}
 146 |       </CardContent>
 147 |       <CardFooter className="flex justify-between">
 148 |         <Button variant="outline" onClick={onBack || (() => router.push('/projects'))}>
 149 |           <ArrowLeft className="mr-2 h-4 w-4" /> Back
 150 |         </Button>
 151 |         <div className="flex space-x-2">
 152 |           {isEditing ? (
 153 |             <Button onClick={handleSave}>
 154 |               <Save className="mr-2 h-4 w-4" /> Save
 155 |             </Button>
 156 |           ) : (
 157 |             <Button variant="outline" onClick={handleEdit}>
 158 |               <Edit className="mr-2 h-4 w-4" /> Edit
 159 |             </Button>
 160 |           )}
 161 |           <AlertDialog>
 162 |             <AlertDialogTrigger asChild>
 163 |               <Button variant="destructive">
 164 |                 <Trash2 className="mr-2 h-4 w-4" /> Delete
 165 |               </Button>
 166 |             </AlertDialogTrigger>
 167 |             <AlertDialogContent>
 168 |               <AlertDialogHeader>
 169 |                 <AlertDialogTitle>Are you sure?</AlertDialogTitle>
 170 |                 <AlertDialogDescription>
 171 |                   This action cannot be undone. This will permanently delete the project
 172 |                   and all associated data.
 173 |                 </AlertDialogDescription>
 174 |               </AlertDialogHeader>
 175 |               <AlertDialogFooter>
 176 |                 <AlertDialogCancel>Cancel</AlertDialogCancel>
 177 |                 <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>
 178 |               </AlertDialogFooter>
 179 |             </AlertDialogContent>
 180 |           </AlertDialog>
 181 |         </div>
 182 |       </CardFooter>
 183 |     </Card>
 184 |   );
 185 | } 

```

`/workspaces/automai/src/components/shadcn/collapsible.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';
   4 | 
   5 | const Collapsible = CollapsiblePrimitive.Root;
   6 | 
   7 | const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;
   8 | 
   9 | const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;
  10 | 
  11 | export { Collapsible, CollapsibleTrigger, CollapsibleContent };

```

`/workspaces/automai/src/components/shadcn/tooltip.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as TooltipPrimitive from '@radix-ui/react-tooltip';
   6 | 
   7 | import { cn } from '@/lib/utils';
   8 | 
   9 | const TooltipProvider = TooltipPrimitive.Provider;
  10 | 
  11 | const Tooltip = TooltipPrimitive.Root;
  12 | 
  13 | const TooltipTrigger = TooltipPrimitive.Trigger;
  14 | 
  15 | const TooltipContent = React.forwardRef<
  16 |   React.ElementRef<typeof TooltipPrimitive.Content>,
  17 |   React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
  18 | >(({ className, sideOffset = 4, ...props }, ref) => (
  19 |   <TooltipPrimitive.Content
  20 |     ref={ref}
  21 |     sideOffset={sideOffset}
  22 |     className={cn(
  23 |       'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-50 data-[side=bottom]:slide-in-from-top-1 data-[side=left]:slide-in-from-right-1 data-[side=right]:slide-in-from-left-1 data-[side=top]:slide-in-from-bottom-1',
  24 |       className,
  25 |     )}
  26 |     {...props}
  27 |   />
  28 | ));
  29 | TooltipContent.displayName = TooltipPrimitive.Content.displayName;
  30 | 
  31 | export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };

```

`/workspaces/automai/src/components/shadcn/tabs.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as TabsPrimitive from '@radix-ui/react-tabs';
   6 | 
   7 | import { cn } from '@/lib/utils';
   8 | 
   9 | const Tabs = TabsPrimitive.Root;
  10 | 
  11 | const TabsList = React.forwardRef<
  12 |   React.ElementRef<typeof TabsPrimitive.List>,
  13 |   React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
  14 | >(({ className, ...props }, ref) => (
  15 |   <TabsPrimitive.List
  16 |     ref={ref}
  17 |     className={cn(
  18 |       'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',
  19 |       className,
  20 |     )}
  21 |     {...props}
  22 |   />
  23 | ));
  24 | TabsList.displayName = TabsPrimitive.List.displayName;
  25 | 
  26 | const TabsTrigger = React.forwardRef<
  27 |   React.ElementRef<typeof TabsPrimitive.Trigger>,
  28 |   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
  29 | >(({ className, ...props }, ref) => (
  30 |   <TabsPrimitive.Trigger
  31 |     ref={ref}
  32 |     className={cn(
  33 |       'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm',
  34 |       className,
  35 |     )}
  36 |     {...props}
  37 |   />
  38 | ));
  39 | TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;
  40 | 
  41 | const TabsContent = React.forwardRef<
  42 |   React.ElementRef<typeof TabsPrimitive.Content>,
  43 |   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
  44 | >(({ className, ...props }, ref) => (
  45 |   <TabsPrimitive.Content
  46 |     ref={ref}
  47 |     className={cn(
  48 |       'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
  49 |       className,
  50 |     )}
  51 |     {...props}
  52 |   />
  53 | ));
  54 | TabsContent.displayName = TabsPrimitive.Content.displayName;
  55 | 
  56 | export { Tabs, TabsList, TabsTrigger, TabsContent };

```

`/workspaces/automai/src/components/shadcn/dialog.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as DialogPrimitive from '@radix-ui/react-dialog';
   6 | import { X } from 'lucide-react';
   7 | 
   8 | import { cn } from '@/lib/utils';
   9 | 
  10 | const Dialog = DialogPrimitive.Root;
  11 | 
  12 | const DialogTrigger = DialogPrimitive.Trigger;
  13 | 
  14 | const DialogPortal = ({ className, children, ...props }: DialogPrimitive.DialogPortalProps) => (
  15 |   <DialogPrimitive.Portal className={cn(className)} {...props}>
  16 |     <div className="fixed inset-0 z-50 flex items-start justify-center sm:items-center">
  17 |       {children}
  18 |     </div>
  19 |   </DialogPrimitive.Portal>
  20 | );
  21 | DialogPortal.displayName = DialogPrimitive.Portal.displayName;
  22 | 
  23 | const DialogOverlay = React.forwardRef<
  24 |   React.ElementRef<typeof DialogPrimitive.Overlay>,
  25 |   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
  26 | >(({ className, ...props }, ref) => (
  27 |   <DialogPrimitive.Overlay
  28 |     ref={ref}
  29 |     className={cn(
  30 |       'fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-all duration-100 data-[state=closed]:animate-out data-[state=closed]:fade-out data-[state=open]:fade-in',
  31 |       className,
  32 |     )}
  33 |     {...props}
  34 |   />
  35 | ));
  36 | DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;
  37 | 
  38 | const DialogContent = React.forwardRef<
  39 |   React.ElementRef<typeof DialogPrimitive.Content>,
  40 |   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
  41 | >(({ className, children, ...props }, ref) => (
  42 |   <DialogPortal>
  43 |     <DialogOverlay />
  44 |     <DialogPrimitive.Content
  45 |       ref={ref}
  46 |       className={cn(
  47 |         'fixed z-50 grid w-full gap-4 rounded-b-lg border bg-background p-6 shadow-lg animate-in data-[state=open]:fade-in-90 data-[state=open]:slide-in-from-bottom-10 sm:max-w-lg sm:rounded-lg sm:zoom-in-90 data-[state=open]:sm:slide-in-from-bottom-0',
  48 |         className,
  49 |       )}
  50 |       {...props}
  51 |     >
  52 |       {children}
  53 |       <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
  54 |         <X className="h-4 w-4" />
  55 |         <span className="sr-only">Close</span>
  56 |       </DialogPrimitive.Close>
  57 |     </DialogPrimitive.Content>
  58 |   </DialogPortal>
  59 | ));
  60 | DialogContent.displayName = DialogPrimitive.Content.displayName;
  61 | 
  62 | const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  63 |   <div className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)} {...props} />
  64 | );
  65 | DialogHeader.displayName = 'DialogHeader';
  66 | 
  67 | const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  68 |   <div
  69 |     className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}
  70 |     {...props}
  71 |   />
  72 | );
  73 | DialogFooter.displayName = 'DialogFooter';
  74 | 
  75 | const DialogTitle = React.forwardRef<
  76 |   React.ElementRef<typeof DialogPrimitive.Title>,
  77 |   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
  78 | >(({ className, ...props }, ref) => (
  79 |   <DialogPrimitive.Title
  80 |     ref={ref}
  81 |     className={cn('text-lg font-semibold leading-none tracking-tight', className)}
  82 |     {...props}
  83 |   />
  84 | ));
  85 | DialogTitle.displayName = DialogPrimitive.Title.displayName;
  86 | 
  87 | const DialogDescription = React.forwardRef<
  88 |   React.ElementRef<typeof DialogPrimitive.Description>,
  89 |   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
  90 | >(({ className, ...props }, ref) => (
  91 |   <DialogPrimitive.Description
  92 |     ref={ref}
  93 |     className={cn('text-sm text-muted-foreground', className)}
  94 |     {...props}
  95 |   />
  96 | ));
  97 | DialogDescription.displayName = DialogPrimitive.Description.displayName;
  98 | 
  99 | export {
 100 |   Dialog,
 101 |   DialogTrigger,
 102 |   DialogContent,
 103 |   DialogHeader,
 104 |   DialogFooter,
 105 |   DialogTitle,
 106 |   DialogDescription,
 107 | };

```

`/workspaces/automai/src/components/shadcn/button.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { Slot } from '@radix-ui/react-slot';
   4 | import { cva, type VariantProps } from 'class-variance-authority';
   5 | 
   6 | import { cn } from '@/lib/utils';
   7 | 
   8 | const buttonVariants = cva(
   9 |   'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background',
  10 |   {
  11 |     variants: {
  12 |       variant: {
  13 |         default: 'bg-primary text-primary-foreground hover:bg-primary/90',
  14 |         destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
  15 |         outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
  16 |         secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
  17 |         ghost: 'hover:bg-accent hover:text-accent-foreground',
  18 |         link: 'underline-offset-4 hover:underline text-primary',
  19 |       },
  20 |       size: {
  21 |         default: 'h-10 py-2 px-4',
  22 |         sm: 'h-9 px-3 rounded-md',
  23 |         lg: 'h-11 px-8 rounded-md',
  24 |         icon: 'h-10 w-10',
  25 |       },
  26 |     },
  27 |     defaultVariants: {
  28 |       variant: 'default',
  29 |       size: 'default',
  30 |     },
  31 |   },
  32 | );
  33 | 
  34 | export interface ButtonProps
  35 |   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
  36 |     VariantProps<typeof buttonVariants> {
  37 |   asChild?: boolean;
  38 | }
  39 | 
  40 | const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  41 |   ({ className, variant, size, asChild = false, ...props }, ref) => {
  42 |     const Comp = asChild ? Slot : 'button';
  43 |     return (
  44 |       <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
  45 |     );
  46 |   },
  47 | );
  48 | Button.displayName = 'Button';
  49 | 
  50 | export { Button, buttonVariants };

```

`/workspaces/automai/src/components/shadcn/scroll-area.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';
   4 | 
   5 | import { cn } from '@/lib/utils';
   6 | 
   7 | interface ScrollAreaProps extends React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root> {
   8 |   orientation?: 'horizontal' | 'vertical';
   9 | }
  10 | 
  11 | const ScrollArea = React.forwardRef<
  12 |   React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  13 |   ScrollAreaProps
  14 | >(({ className, children, orientation = 'vertical', ...props }, ref) => (
  15 |   <ScrollAreaPrimitive.Root
  16 |     ref={ref}
  17 |     className={cn('relative overflow-hidden', className)}
  18 |     {...props}
  19 |   >
  20 |     <ScrollAreaPrimitive.Viewport
  21 |       className={cn(
  22 |         'h-full w-full rounded-[inherit]',
  23 |         orientation === 'horizontal' && '!overflow-x-auto',
  24 |       )}
  25 |     >
  26 |       {children}
  27 |     </ScrollAreaPrimitive.Viewport>
  28 |     <ScrollBar orientation={orientation} />
  29 |     <ScrollAreaPrimitive.Corner />
  30 |   </ScrollAreaPrimitive.Root>
  31 | ));
  32 | ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;
  33 | 
  34 | const ScrollBar = React.forwardRef<
  35 |   React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  36 |   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
  37 | >(({ className, orientation = 'vertical', ...props }, ref) => (
  38 |   <ScrollAreaPrimitive.ScrollAreaScrollbar
  39 |     ref={ref}
  40 |     orientation={orientation}
  41 |     className={cn(
  42 |       'flex touch-none select-none transition-colors',
  43 |       orientation === 'vertical' && 'h-full w-2.5 border-l border-l-transparent p-[1px]',
  44 |       orientation === 'horizontal' && 'h-2.5 flex-col border-t border-t-transparent p-[1px]',
  45 |       className,
  46 |     )}
  47 |     {...props}
  48 |   >
  49 |     <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  50 |   </ScrollAreaPrimitive.ScrollAreaScrollbar>
  51 | ));
  52 | ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;
  53 | 
  54 | export { ScrollArea, ScrollBar };

```

`/workspaces/automai/src/components/shadcn/use-toast.ts`:

```ts
   1 | 'use client';
   2 | 
   3 | import { toast as sonnerToast } from 'sonner';
   4 | 
   5 | type ToastProps = {
   6 |   title?: string;
   7 |   description?: string;
   8 |   variant?: 'default' | 'destructive';
   9 | };
  10 | 
  11 | export const toast = (props: ToastProps) => {
  12 |   const { title, description, variant } = props;
  13 | 
  14 |   if (variant === 'destructive') {
  15 |     return sonnerToast.error(title, {
  16 |       description,
  17 |     });
  18 |   }
  19 | 
  20 |   return sonnerToast.success(title, {
  21 |     description,
  22 |   });
  23 | };
  24 | 
  25 | export const useToast = () => {
  26 |   return {
  27 |     toast,
  28 |   };
  29 | };

```

`/workspaces/automai/src/components/shadcn/sheet.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as SheetPrimitive from '@radix-ui/react-dialog';
   6 | import { cva, type VariantProps } from 'class-variance-authority';
   7 | import { X } from 'lucide-react';
   8 | 
   9 | import { cn } from '@/lib/utils';
  10 | 
  11 | const Sheet = SheetPrimitive.Root;
  12 | 
  13 | const SheetTrigger = SheetPrimitive.Trigger;
  14 | 
  15 | const SheetClose = SheetPrimitive.Close;
  16 | 
  17 | const SheetPortal = SheetPrimitive.Portal;
  18 | 
  19 | const SheetOverlay = React.forwardRef<
  20 |   React.ElementRef<typeof SheetPrimitive.Overlay>,
  21 |   React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
  22 | >(({ className, ...props }, ref) => (
  23 |   <SheetPrimitive.Overlay
  24 |     className={cn(
  25 |       'fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
  26 |       className,
  27 |     )}
  28 |     {...props}
  29 |     ref={ref}
  30 |   />
  31 | ));
  32 | SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;
  33 | 
  34 | const sheetVariants = cva(
  35 |   'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out',
  36 |   {
  37 |     variants: {
  38 |       side: {
  39 |         top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
  40 |         bottom:
  41 |           'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
  42 |         left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
  43 |         right:
  44 |           'inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
  45 |       },
  46 |     },
  47 |     defaultVariants: {
  48 |       side: 'right',
  49 |     },
  50 |   },
  51 | );
  52 | 
  53 | interface SheetContentProps
  54 |   extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  55 |     VariantProps<typeof sheetVariants> {}
  56 | 
  57 | const SheetContent = React.forwardRef<
  58 |   React.ElementRef<typeof SheetPrimitive.Content>,
  59 |   SheetContentProps
  60 | >(({ side = 'right', className, children, ...props }, ref) => (
  61 |   <SheetPortal>
  62 |     <SheetOverlay />
  63 |     <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
  64 |       <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
  65 |         <X className="h-4 w-4" />
  66 |         <span className="sr-only">Close</span>
  67 |       </SheetPrimitive.Close>
  68 |       {children}
  69 |     </SheetPrimitive.Content>
  70 |   </SheetPortal>
  71 | ));
  72 | SheetContent.displayName = SheetPrimitive.Content.displayName;
  73 | 
  74 | const SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  75 |   <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />
  76 | );
  77 | SheetHeader.displayName = 'SheetHeader';
  78 | 
  79 | const SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  80 |   <div
  81 |     className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}
  82 |     {...props}
  83 |   />
  84 | );
  85 | SheetFooter.displayName = 'SheetFooter';
  86 | 
  87 | const SheetTitle = React.forwardRef<
  88 |   React.ElementRef<typeof SheetPrimitive.Title>,
  89 |   React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
  90 | >(({ className, ...props }, ref) => (
  91 |   <SheetPrimitive.Title
  92 |     ref={ref}
  93 |     className={cn('text-lg font-semibold text-foreground', className)}
  94 |     {...props}
  95 |   />
  96 | ));
  97 | SheetTitle.displayName = SheetPrimitive.Title.displayName;
  98 | 
  99 | const SheetDescription = React.forwardRef<
 100 |   React.ElementRef<typeof SheetPrimitive.Description>,
 101 |   React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
 102 | >(({ className, ...props }, ref) => (
 103 |   <SheetPrimitive.Description
 104 |     ref={ref}
 105 |     className={cn('text-sm text-muted-foreground', className)}
 106 |     {...props}
 107 |   />
 108 | ));
 109 | SheetDescription.displayName = SheetPrimitive.Description.displayName;
 110 | 
 111 | export {
 112 |   Sheet,
 113 |   SheetPortal,
 114 |   SheetOverlay,
 115 |   SheetTrigger,
 116 |   SheetClose,
 117 |   SheetContent,
 118 |   SheetHeader,
 119 |   SheetFooter,
 120 |   SheetTitle,
 121 |   SheetDescription,
 122 | };

```

`/workspaces/automai/src/components/shadcn/alert-dialog.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';
   4 | 
   5 | import { buttonVariants } from '@/components/shadcn/button';
   6 | import { cn } from '@/lib/utils';
   7 | 
   8 | const AlertDialog = AlertDialogPrimitive.Root;
   9 | 
  10 | const AlertDialogTrigger = AlertDialogPrimitive.Trigger;
  11 | 
  12 | const AlertDialogPortal = AlertDialogPrimitive.Portal;
  13 | 
  14 | const AlertDialogOverlay = React.forwardRef<
  15 |   React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  16 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
  17 | >(({ className, ...props }, ref) => (
  18 |   <AlertDialogPrimitive.Overlay
  19 |     className={cn(
  20 |       'fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
  21 |       className,
  22 |     )}
  23 |     {...props}
  24 |     ref={ref}
  25 |   />
  26 | ));
  27 | AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;
  28 | 
  29 | const AlertDialogContent = React.forwardRef<
  30 |   React.ElementRef<typeof AlertDialogPrimitive.Content>,
  31 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
  32 | >(({ className, ...props }, ref) => (
  33 |   <AlertDialogPortal>
  34 |     <AlertDialogOverlay />
  35 |     <AlertDialogPrimitive.Content
  36 |       ref={ref}
  37 |       className={cn(
  38 |         'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
  39 |         className,
  40 |       )}
  41 |       {...props}
  42 |     />
  43 |   </AlertDialogPortal>
  44 | ));
  45 | AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;
  46 | 
  47 | const AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  48 |   <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />
  49 | );
  50 | AlertDialogHeader.displayName = 'AlertDialogHeader';
  51 | 
  52 | const AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  53 |   <div
  54 |     className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}
  55 |     {...props}
  56 |   />
  57 | );
  58 | AlertDialogFooter.displayName = 'AlertDialogFooter';
  59 | 
  60 | const AlertDialogTitle = React.forwardRef<
  61 |   React.ElementRef<typeof AlertDialogPrimitive.Title>,
  62 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
  63 | >(({ className, ...props }, ref) => (
  64 |   <AlertDialogPrimitive.Title
  65 |     ref={ref}
  66 |     className={cn('text-lg font-semibold', className)}
  67 |     {...props}
  68 |   />
  69 | ));
  70 | AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;
  71 | 
  72 | const AlertDialogDescription = React.forwardRef<
  73 |   React.ElementRef<typeof AlertDialogPrimitive.Description>,
  74 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
  75 | >(({ className, ...props }, ref) => (
  76 |   <AlertDialogPrimitive.Description
  77 |     ref={ref}
  78 |     className={cn('text-sm text-muted-foreground', className)}
  79 |     {...props}
  80 |   />
  81 | ));
  82 | AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;
  83 | 
  84 | const AlertDialogAction = React.forwardRef<
  85 |   React.ElementRef<typeof AlertDialogPrimitive.Action>,
  86 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
  87 | >(({ className, ...props }, ref) => (
  88 |   <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
  89 | ));
  90 | AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;
  91 | 
  92 | const AlertDialogCancel = React.forwardRef<
  93 |   React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  94 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
  95 | >(({ className, ...props }, ref) => (
  96 |   <AlertDialogPrimitive.Cancel
  97 |     ref={ref}
  98 |     className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}
  99 |     {...props}
 100 |   />
 101 | ));
 102 | AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;
 103 | 
 104 | export {
 105 |   AlertDialog,
 106 |   AlertDialogPortal,
 107 |   AlertDialogOverlay,
 108 |   AlertDialogTrigger,
 109 |   AlertDialogContent,
 110 |   AlertDialogHeader,
 111 |   AlertDialogFooter,
 112 |   AlertDialogTitle,
 113 |   AlertDialogDescription,
 114 |   AlertDialogAction,
 115 |   AlertDialogCancel,
 116 | };

```

`/workspaces/automai/src/components/shadcn/search.tsx`:

```tsx
   1 | import { Search as SearchIcon } from 'lucide-react';
   2 | 
   3 | import { useSearch } from '@/context/SearchContext';
   4 | import { cn } from '@/lib/utils';
   5 | 
   6 | import { Button } from './button';
   7 | 
   8 | interface Props {
   9 |   className?: string;
  10 |   placeholder?: string;
  11 | }
  12 | 
  13 | export function Search({ className = '', placeholder = 'Search...' }: Props) {
  14 |   const { setOpen } = useSearch();
  15 | 
  16 |   return (
  17 |     <Button
  18 |       variant="outline"
  19 |       className={cn(
  20 |         'relative h-9 w-full justify-start rounded-md bg-muted/50 text-sm font-normal text-muted-foreground shadow-none hover:bg-muted sm:pr-12 md:w-40 lg:w-64',
  21 |         className,
  22 |       )}
  23 |       onClick={() => setOpen(_true)}
  24 |     >
  25 |       <SearchIcon className="mr-2 h-4 w-4" />
  26 |       <span>{placeholder}</span>
  27 |       <kbd className="pointer-events-none absolute right-1.5 top-2 hidden h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100 sm:flex">
  28 |         <span className="text-xs">⌘</span>K
  29 |       </kbd>
  30 |     </Button>
  31 |   );
  32 | }

```

`/workspaces/automai/src/components/shadcn/toaster.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Toaster } from 'sonner';
   4 | 
   5 | export function ToasterProvider() {
   6 |   return <Toaster position="top-right" richColors expand={false} />;
   7 | }

```

`/workspaces/automai/src/components/shadcn/label.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import * as LabelPrimitive from '@radix-ui/react-label';
   4 | import { cva, type VariantProps } from 'class-variance-authority';
   5 | 
   6 | import { cn } from '@/lib/utils';
   7 | 
   8 | const labelVariants = cva(
   9 |   'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
  10 | );
  11 | 
  12 | const Label = React.forwardRef<
  13 |   React.ElementRef<typeof LabelPrimitive.Root>,
  14 |   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
  15 | >(({ className, ...props }, ref) => (
  16 |   <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
  17 | ));
  18 | Label.displayName = LabelPrimitive.Root.displayName;
  19 | 
  20 | export { Label };

```

`/workspaces/automai/src/components/shadcn/radio-group.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
   4 | import { Circle } from 'lucide-react';
   5 | 
   6 | import { cn } from '@/lib/utils';
   7 | 
   8 | const RadioGroup = React.forwardRef<
   9 |   React.ElementRef<typeof RadioGroupPrimitive.Root>,
  10 |   React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
  11 | >(({ className, ...props }, ref) => {
  12 |   return <RadioGroupPrimitive.Root className={cn('grid gap-2', className)} {...props} ref={ref} />;
  13 | });
  14 | RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;
  15 | 
  16 | const RadioGroupItem = React.forwardRef<
  17 |   React.ElementRef<typeof RadioGroupPrimitive.Item>,
  18 |   React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
  19 | >(({ className, ...props }, ref) => {
  20 |   return (
  21 |     <RadioGroupPrimitive.Item
  22 |       ref={ref}
  23 |       className={cn(
  24 |         'aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',
  25 |         className,
  26 |       )}
  27 |       {...props}
  28 |     >
  29 |       <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
  30 |         <Circle className="h-3.5 w-3.5 fill-primary" />
  31 |       </RadioGroupPrimitive.Indicator>
  32 |     </RadioGroupPrimitive.Item>
  33 |   );
  34 | });
  35 | RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;
  36 | 
  37 | export { RadioGroup, RadioGroupItem };

```

`/workspaces/automai/src/components/shadcn/sidebar.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | import { useContext } from 'react';
   5 | 
   6 | import { Slot } from '@radix-ui/react-slot';
   7 | import { VisuallyHidden } from '@radix-ui/react-visually-hidden';
   8 | import { cva } from 'class-variance-authority';
   9 | import { PanelLeft } from 'lucide-react';
  10 | 
  11 | import { Button } from '@/components/shadcn/button';
  12 | import { Input } from '@/components/shadcn/input';
  13 | import { Separator } from '@/components/shadcn/separator';
  14 | import { Sheet, SheetContent, SheetDescription, SheetTitle } from '@/components/shadcn/sheet';
  15 | import { Skeleton } from '@/components/shadcn/skeleton';
  16 | import {
  17 |   Tooltip,
  18 |   TooltipContent,
  19 |   TooltipProvider,
  20 |   TooltipTrigger,
  21 | } from '@/components/shadcn/tooltip';
  22 | import { useIsMobile } from '@/hooks/useMobile';
  23 | import { cn } from '@/lib/utils';
  24 | import {
  25 |   SIDEBAR_COOKIE_NAME,
  26 |   SIDEBAR_COOKIE_MAX_AGE,
  27 |   SIDEBAR_WIDTH,
  28 |   SIDEBAR_WIDTH_MOBILE,
  29 |   SIDEBAR_WIDTH_ICON,
  30 |   SIDEBAR_KEYBOARD_SHORTCUT,
  31 | } from '@/components/sidebar/constants';
  32 | 
  33 | import type { VariantProps } from 'class-variance-authority';
  34 | 
  35 | type SidebarContext = {
  36 |   state: 'expanded' | 'collapsed';
  37 |   open: boolean;
  38 |   setOpen: (open: boolean) => void;
  39 |   openMobile: boolean;
  40 |   setOpenMobile: (open: boolean) => void;
  41 |   isMobile: boolean;
  42 |   toggleSidebar: () => void;
  43 | };
  44 | 
  45 | const SidebarContext = React.createContext<SidebarContext | null>(null);
  46 | 
  47 | function useSidebar() {
  48 |   const context = useContext(SidebarContext);
  49 |   if (!context) {
  50 |     throw new Error('useSidebar must be used within a SidebarProvider.');
  51 |   }
  52 |   return context;
  53 | }
  54 | 
  55 | const SidebarProvider = React.forwardRef<
  56 |   HTMLDivElement,
  57 |   React.ComponentProps<'div'> & {
  58 |     defaultOpen?: boolean;
  59 |     open?: boolean;
  60 |     onOpenChange?: (open: boolean) => void;
  61 |   }
  62 | >(
  63 |   (
  64 |     {
  65 |       defaultOpen = true,
  66 |       open: openProp,
  67 |       onOpenChange: setOpenProp,
  68 |       className,
  69 |       style,
  70 |       children,
  71 |       ...props
  72 |     },
  73 |     ref,
  74 |   ) => {
  75 |     const isMobile = useIsMobile();
  76 |     const [openMobile, setOpenMobile] = React.useState(false);
  77 | 
  78 |     // This is the internal state of the sidebar.
  79 |     // We use openProp and setOpenProp for control from outside the component.
  80 |     const [_open, _setOpen] = React.useState(defaultOpen);
  81 |     const open = openProp ?? _open;
  82 |     const setOpen = React.useCallback(
  83 |       (value: boolean | ((value: boolean) => boolean)) => {
  84 |         const openState = typeof value === 'function' ? value(open) : value;
  85 |         if (setOpenProp) {
  86 |           setOpenProp(openState);
  87 |         } else {
  88 |           _setOpen(openState);
  89 |         }
  90 | 
  91 |         // This sets the cookie to keep the sidebar state.
  92 |         document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
  93 |       },
  94 |       [setOpenProp, open],
  95 |     );
  96 | 
  97 |     // Helper to toggle the sidebar.
  98 |     const toggleSidebar = React.useCallback(() => {
  99 |       return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
 100 |     }, [isMobile, setOpen, setOpenMobile]);
 101 | 
 102 |     // Adds a keyboard shortcut to toggle the sidebar.
 103 |     React.useEffect(() => {
 104 |       const handleKeyDown = (event: KeyboardEvent) => {
 105 |         if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
 106 |           event.preventDefault();
 107 |           toggleSidebar();
 108 |         }
 109 |       };
 110 | 
 111 |       window.addEventListener('keydown', handleKeyDown);
 112 |       return () => window.removeEventListener('keydown', handleKeyDown);
 113 |     }, [toggleSidebar]);
 114 | 
 115 |     // We add a state so that we can do data-state="expanded" or "collapsed".
 116 |     // This makes it easier to style the sidebar with Tailwind classes.
 117 |     const state = open ? 'expanded' : 'collapsed';
 118 | 
 119 |     const contextValue = React.useMemo<SidebarContext>(
 120 |       () => ({
 121 |         state,
 122 |         open,
 123 |         setOpen,
 124 |         isMobile,
 125 |         openMobile,
 126 |         setOpenMobile,
 127 |         toggleSidebar,
 128 |       }),
 129 |       [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],
 130 |     );
 131 | 
 132 |     return (
 133 |       <SidebarContext.Provider value={contextValue}>
 134 |         <TooltipProvider delayDuration={0}>
 135 |           <div
 136 |             style={
 137 |               {
 138 |                 '--sidebar-width': SIDEBAR_WIDTH,
 139 |                 '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,
 140 |                 ...style,
 141 |               } as React.CSSProperties
 142 |             }
 143 |             className={cn(
 144 |               'group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar',
 145 |               className,
 146 |             )}
 147 |             ref={ref}
 148 |             {...props}
 149 |           >
 150 |             {children}
 151 |           </div>
 152 |         </TooltipProvider>
 153 |       </SidebarContext.Provider>
 154 |     );
 155 |   },
 156 | );
 157 | SidebarProvider.displayName = 'SidebarProvider';
 158 | 
 159 | const Sidebar = React.forwardRef<
 160 |   HTMLDivElement,
 161 |   React.ComponentProps<'div'> & {
 162 |     side?: 'left' | 'right';
 163 |     variant?: 'sidebar' | 'floating' | 'inset';
 164 |     collapsible?: 'offcanvas' | 'icon' | 'none';
 165 |   }
 166 | >(
 167 |   (
 168 |     {
 169 |       side = 'left',
 170 |       variant = 'sidebar',
 171 |       collapsible = 'offcanvas',
 172 |       className,
 173 |       children,
 174 |       ...props
 175 |     },
 176 |     ref,
 177 |   ) => {
 178 |     const { isMobile, state, openMobile, setOpenMobile } = useSidebar();
 179 | 
 180 |     if (collapsible === 'none') {
 181 |       return (
 182 |         <div
 183 |           className={cn(
 184 |             'flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground',
 185 |             className,
 186 |           )}
 187 |           ref={ref}
 188 |           {...props}
 189 |         >
 190 |           {children}
 191 |         </div>
 192 |       );
 193 |     }
 194 | 
 195 |     if (isMobile) {
 196 |       return (
 197 |         <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
 198 |           <VisuallyHidden asChild>
 199 |             <SheetTitle />
 200 |           </VisuallyHidden>
 201 |           <SheetContent
 202 |             data-sidebar="sidebar"
 203 |             data-mobile="true"
 204 |             className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
 205 |             style={
 206 |               {
 207 |                 '--sidebar-width': SIDEBAR_WIDTH_MOBILE,
 208 |               } as React.CSSProperties
 209 |             }
 210 |             side={side}
 211 |           >
 212 |             <VisuallyHidden asChild>
 213 |               <SheetDescription />
 214 |             </VisuallyHidden>
 215 |             <div className="flex h-full w-full flex-col">{children}</div>
 216 |           </SheetContent>
 217 |         </Sheet>
 218 |       );
 219 |     }
 220 | 
 221 |     return (
 222 |       <div
 223 |         ref={ref}
 224 |         className="group peer hidden text-sidebar-foreground md:block"
 225 |         data-state={state}
 226 |         data-collapsible={state === 'collapsed' ? collapsible : ''}
 227 |         data-variant={variant}
 228 |         data-side={side}
 229 |       >
 230 |         {/* This is what handles the sidebar gap on desktop */}
 231 |         <div
 232 |           className={cn(
 233 |             'relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear',
 234 |             'group-data-[collapsible=offcanvas]:w-0',
 235 |             'group-data-[side=right]:rotate-180',
 236 |             variant === 'floating' || variant === 'inset'
 237 |               ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.2))]'
 238 |               : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon]',
 239 |           )}
 240 |         />
 241 |         <div
 242 |           className={cn(
 243 |             'fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex',
 244 |             side === 'left'
 245 |               ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
 246 |               : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
 247 |             // Adjust the padding for floating and inset variants.
 248 |             variant === 'floating' || variant === 'inset'
 249 |               ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'
 250 |               : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',
 251 |             className,
 252 |           )}
 253 |           {...props}
 254 |         >
 255 |           <div
 256 |             data-sidebar="sidebar"
 257 |             className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
 258 |           >
 259 |             {children}
 260 |           </div>
 261 |         </div>
 262 |       </div>
 263 |     );
 264 |   },
 265 | );
 266 | Sidebar.displayName = 'Sidebar';
 267 | 
 268 | const SidebarTrigger = React.forwardRef<
 269 |   React.ElementRef<typeof Button>,
 270 |   React.ComponentProps<typeof Button>
 271 | >(({ className, onClick, ...props }, ref) => {
 272 |   const { toggleSidebar } = useSidebar();
 273 | 
 274 |   return (
 275 |     <Button
 276 |       ref={ref}
 277 |       data-sidebar="trigger"
 278 |       variant="ghost"
 279 |       size="icon"
 280 |       className={cn('h-7 w-7', className)}
 281 |       onClick={(event) => {
 282 |         onClick?.(event);
 283 |         toggleSidebar();
 284 |       }}
 285 |       {...props}
 286 |     >
 287 |       <PanelLeft />
 288 |       <span className="sr-only">Toggle Sidebar</span>
 289 |     </Button>
 290 |   );
 291 | });
 292 | SidebarTrigger.displayName = 'SidebarTrigger';
 293 | 
 294 | const SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<'button'>>(
 295 |   ({ className, ...props }, ref) => {
 296 |     const { toggleSidebar } = useSidebar();
 297 | 
 298 |     return (
 299 |       <button
 300 |         ref={ref}
 301 |         data-sidebar="rail"
 302 |         aria-label="Toggle Sidebar"
 303 |         tabIndex={-1}
 304 |         onClick={toggleSidebar}
 305 |         title="Toggle Sidebar"
 306 |         className={cn(
 307 |           'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear',
 308 |           'bg-accent/10 hover:bg-accent/20',
 309 |           'after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] after:bg-accent/20 hover:after:bg-accent/40',
 310 |           'group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',
 311 |           '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',
 312 |           '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
 313 |           'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',
 314 |           '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
 315 |           '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
 316 |           className,
 317 |         )}
 318 |         {...props}
 319 |       />
 320 |     );
 321 |   },
 322 | );
 323 | SidebarRail.displayName = 'SidebarRail';
 324 | 
 325 | const SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<'main'>>(
 326 |   ({ className, ...props }, ref) => {
 327 |     return (
 328 |       <main
 329 |         ref={ref}
 330 |         className={cn(
 331 |           'relative flex min-h-svh flex-1 flex-col bg-background',
 332 |           'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',
 333 |           className,
 334 |         )}
 335 |         {...props}
 336 |       />
 337 |     );
 338 |   },
 339 | );
 340 | SidebarInset.displayName = 'SidebarInset';
 341 | 
 342 | const SidebarInput = React.forwardRef<
 343 |   React.ElementRef<typeof Input>,
 344 |   React.ComponentProps<typeof Input>
 345 | >(({ className, ...props }, ref) => {
 346 |   return (
 347 |     <Input
 348 |       ref={ref}
 349 |       data-sidebar="input"
 350 |       className={cn(
 351 |         'h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring',
 352 |         className,
 353 |       )}
 354 |       {...props}
 355 |     />
 356 |   );
 357 | });
 358 | SidebarInput.displayName = 'SidebarInput';
 359 | 
 360 | const SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
 361 |   ({ className, ...props }, ref) => {
 362 |     return (
 363 |       <div
 364 |         ref={ref}
 365 |         data-sidebar="header"
 366 |         className={cn('flex flex-col gap-2 p-2', className)}
 367 |         {...props}
 368 |       />
 369 |     );
 370 |   },
 371 | );
 372 | SidebarHeader.displayName = 'SidebarHeader';
 373 | 
 374 | const SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
 375 |   ({ className, ...props }, ref) => {
 376 |     return (
 377 |       <div
 378 |         ref={ref}
 379 |         data-sidebar="footer"
 380 |         className={cn('flex flex-col gap-2 p-2', className)}
 381 |         {...props}
 382 |       />
 383 |     );
 384 |   },
 385 | );
 386 | SidebarFooter.displayName = 'SidebarFooter';
 387 | 
 388 | const SidebarSeparator = React.forwardRef<
 389 |   React.ElementRef<typeof Separator>,
 390 |   React.ComponentProps<typeof Separator>
 391 | >(({ className, ...props }, ref) => {
 392 |   return (
 393 |     <Separator
 394 |       ref={ref}
 395 |       data-sidebar="separator"
 396 |       className={cn('mx-2 w-auto bg-sidebar-border', className)}
 397 |       {...props}
 398 |     />
 399 |   );
 400 | });
 401 | SidebarSeparator.displayName = 'SidebarSeparator';
 402 | 
 403 | const SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
 404 |   ({ className, ...props }, ref) => {
 405 |     return (
 406 |       <div
 407 |         ref={ref}
 408 |         data-sidebar="content"
 409 |         className={cn(
 410 |           'flex min-h-0 flex-1 flex-col gap-1 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
 411 |           className,
 412 |         )}
 413 |         {...props}
 414 |       />
 415 |     );
 416 |   },
 417 | );
 418 | SidebarContent.displayName = 'SidebarContent';
 419 | 
 420 | const SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
 421 |   ({ className, ...props }, ref) => {
 422 |     return (
 423 |       <div
 424 |         ref={ref}
 425 |         data-sidebar="group"
 426 |         className={cn('relative flex w-full min-w-0 flex-col p-1', className)}
 427 |         {...props}
 428 |       />
 429 |     );
 430 |   },
 431 | );
 432 | SidebarGroup.displayName = 'SidebarGroup';
 433 | 
 434 | const SidebarGroupLabel = React.forwardRef<
 435 |   HTMLDivElement,
 436 |   React.ComponentProps<'div'> & { asChild?: boolean }
 437 | >(({ className, asChild = false, ...props }, ref) => {
 438 |   const Comp = asChild ? Slot : 'div';
 439 | 
 440 |   return (
 441 |     <Comp
 442 |       ref={ref}
 443 |       data-sidebar="group-label"
 444 |       className={cn(
 445 |         'flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
 446 |         'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
 447 |         className,
 448 |       )}
 449 |       {...props}
 450 |     />
 451 |   );
 452 | });
 453 | SidebarGroupLabel.displayName = 'SidebarGroupLabel';
 454 | 
 455 | const SidebarGroupAction = React.forwardRef<
 456 |   HTMLButtonElement,
 457 |   React.ComponentProps<'button'> & { asChild?: boolean }
 458 | >(({ className, asChild = false, ...props }, ref) => {
 459 |   const Comp = asChild ? Slot : 'button';
 460 | 
 461 |   return (
 462 |     <Comp
 463 |       ref={ref}
 464 |       data-sidebar="group-action"
 465 |       className={cn(
 466 |         'absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
 467 |         // Increases the hit area of the button on mobile.
 468 |         'after:absolute after:-inset-2 after:md:hidden',
 469 |         'group-data-[collapsible=icon]:hidden',
 470 |         className,
 471 |       )}
 472 |       {...props}
 473 |     />
 474 |   );
 475 | });
 476 | SidebarGroupAction.displayName = 'SidebarGroupAction';
 477 | 
 478 | const SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
 479 |   ({ className, ...props }, ref) => (
 480 |     <div
 481 |       ref={ref}
 482 |       data-sidebar="group-content"
 483 |       className={cn('w-full text-sm', className)}
 484 |       {...props}
 485 |     />
 486 |   ),
 487 | );
 488 | SidebarGroupContent.displayName = 'SidebarGroupContent';
 489 | 
 490 | const SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(
 491 |   ({ className, ...props }, ref) => (
 492 |     <ul
 493 |       ref={ref}
 494 |       data-sidebar="menu"
 495 |       className={cn('flex w-full min-w-0 flex-col gap-1', className)}
 496 |       {...props}
 497 |     />
 498 |   ),
 499 | );
 500 | SidebarMenu.displayName = 'SidebarMenu';
 501 | 
 502 | const SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(
 503 |   ({ className, ...props }, ref) => (
 504 |     <li
 505 |       ref={ref}
 506 |       data-sidebar="menu-item"
 507 |       className={cn('group/menu-item relative', className)}
 508 |       {...props}
 509 |     />
 510 |   ),
 511 | );
 512 | SidebarMenuItem.displayName = 'SidebarMenuItem';
 513 | 
 514 | const sidebarMenuButtonVariants = cva(
 515 |   'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
 516 |   {
 517 |     variants: {
 518 |       variant: {
 519 |         default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
 520 |         outline:
 521 |           'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',
 522 |       },
 523 |       size: {
 524 |         default: 'h-8 text-sm',
 525 |         sm: 'h-7 text-xs',
 526 |         lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0',
 527 |       },
 528 |     },
 529 |     defaultVariants: {
 530 |       variant: 'default',
 531 |       size: 'default',
 532 |     },
 533 |   },
 534 | );
 535 | 
 536 | const SidebarMenuButton = React.forwardRef<
 537 |   HTMLButtonElement,
 538 |   React.ComponentProps<'button'> & {
 539 |     asChild?: boolean;
 540 |     isActive?: boolean;
 541 |     tooltip?: string | React.ComponentProps<typeof TooltipContent>;
 542 |   } & VariantProps<typeof sidebarMenuButtonVariants>
 543 | >(
 544 |   (
 545 |     {
 546 |       asChild = false,
 547 |       isActive = false,
 548 |       variant = 'default',
 549 |       size = 'default',
 550 |       tooltip,
 551 |       className,
 552 |       ...props
 553 |     },
 554 |     ref,
 555 |   ) => {
 556 |     const Comp = asChild ? Slot : 'button';
 557 |     const { isMobile, state } = useSidebar();
 558 | 
 559 |     const button = (
 560 |       <Comp
 561 |         ref={ref}
 562 |         data-sidebar="menu-button"
 563 |         data-size={size}
 564 |         data-active={isActive}
 565 |         className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
 566 |         {...props}
 567 |       />
 568 |     );
 569 | 
 570 |     if (!tooltip) {
 571 |       return button;
 572 |     }
 573 | 
 574 |     if (typeof tooltip === 'string') {
 575 |       tooltip = {
 576 |         children: tooltip,
 577 |       };
 578 |     }
 579 | 
 580 |     return (
 581 |       <Tooltip>
 582 |         <TooltipTrigger asChild>{button}</TooltipTrigger>
 583 |         <TooltipContent
 584 |           side="right"
 585 |           align="center"
 586 |           hidden={state !== 'collapsed' || isMobile}
 587 |           {...tooltip}
 588 |         />
 589 |       </Tooltip>
 590 |     );
 591 |   },
 592 | );
 593 | SidebarMenuButton.displayName = 'SidebarMenuButton';
 594 | 
 595 | const SidebarMenuAction = React.forwardRef<
 596 |   HTMLButtonElement,
 597 |   React.ComponentProps<'button'> & {
 598 |     asChild?: boolean;
 599 |     showOnHover?: boolean;
 600 |   }
 601 | >(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
 602 |   const Comp = asChild ? Slot : 'button';
 603 | 
 604 |   return (
 605 |     <Comp
 606 |       ref={ref}
 607 |       data-sidebar="menu-action"
 608 |       className={cn(
 609 |         'absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0',
 610 |         // Increases the hit area of the button on mobile.
 611 |         'after:absolute after:-inset-2 after:md:hidden',
 612 |         'peer-data-[size=sm]/menu-button:top-1',
 613 |         'peer-data-[size=default]/menu-button:top-1.5',
 614 |         'peer-data-[size=lg]/menu-button:top-2.5',
 615 |         'group-data-[collapsible=icon]:hidden',
 616 |         showOnHover &&
 617 |           'group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0',
 618 |         className,
 619 |       )}
 620 |       {...props}
 621 |     />
 622 |   );
 623 | });
 624 | SidebarMenuAction.displayName = 'SidebarMenuAction';
 625 | 
 626 | const SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
 627 |   ({ className, ...props }, ref) => (
 628 |     <div
 629 |       ref={ref}
 630 |       data-sidebar="menu-badge"
 631 |       className={cn(
 632 |         'pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground',
 633 |         'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',
 634 |         'peer-data-[size=sm]/menu-button:top-1',
 635 |         'peer-data-[size=default]/menu-button:top-1.5',
 636 |         'peer-data-[size=lg]/menu-button:top-2.5',
 637 |         'group-data-[collapsible=icon]:hidden',
 638 |         className,
 639 |       )}
 640 |       {...props}
 641 |     />
 642 |   ),
 643 | );
 644 | SidebarMenuBadge.displayName = 'SidebarMenuBadge';
 645 | 
 646 | const SidebarMenuSkeleton = React.forwardRef<
 647 |   HTMLDivElement,
 648 |   React.ComponentProps<'div'> & {
 649 |     showIcon?: boolean;
 650 |   }
 651 | >(({ className, showIcon = false, ...props }, ref) => {
 652 |   // Random width between 50 to 90%.
 653 |   const width = React.useMemo(() => {
 654 |     return `${Math.floor(Math.random() * 40) + 50}%`;
 655 |   }, []);
 656 | 
 657 |   return (
 658 |     <div
 659 |       ref={ref}
 660 |       data-sidebar="menu-skeleton"
 661 |       className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}
 662 |       {...props}
 663 |     >
 664 |       {showIcon && <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />}
 665 |       <Skeleton
 666 |         className="h-4 max-w-[--skeleton-width] flex-1"
 667 |         data-sidebar="menu-skeleton-text"
 668 |         style={
 669 |           {
 670 |             '--skeleton-width': width,
 671 |           } as React.CSSProperties
 672 |         }
 673 |       />
 674 |     </div>
 675 |   );
 676 | });
 677 | SidebarMenuSkeleton.displayName = 'SidebarMenuSkeleton';
 678 | 
 679 | const SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(
 680 |   ({ className, ...props }, ref) => (
 681 |     <ul
 682 |       ref={ref}
 683 |       data-sidebar="menu-sub"
 684 |       className={cn(
 685 |         'mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5',
 686 |         'group-data-[collapsible=icon]:hidden',
 687 |         className,
 688 |       )}
 689 |       {...props}
 690 |     />
 691 |   ),
 692 | );
 693 | SidebarMenuSub.displayName = 'SidebarMenuSub';
 694 | 
 695 | const SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(
 696 |   ({ ...props }, ref) => <li ref={ref} {...props} />,
 697 | );
 698 | SidebarMenuSubItem.displayName = 'SidebarMenuSubItem';
 699 | 
 700 | const SidebarMenuSubButton = React.forwardRef<
 701 |   HTMLAnchorElement,
 702 |   React.ComponentProps<'a'> & {
 703 |     asChild?: boolean;
 704 |     size?: 'sm' | 'md';
 705 |     isActive?: boolean;
 706 |   }
 707 | >(({ asChild = false, size = 'md', isActive, className, ...props }, ref) => {
 708 |   const Comp = asChild ? Slot : 'a';
 709 | 
 710 |   return (
 711 |     <Comp
 712 |       ref={ref}
 713 |       data-sidebar="menu-sub-button"
 714 |       data-size={size}
 715 |       data-active={isActive}
 716 |       className={cn(
 717 |         'flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground',
 718 |         'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
 719 |         size === 'sm' && 'text-xs',
 720 |         size === 'md' && 'text-sm',
 721 |         'group-data-[collapsible=icon]:hidden',
 722 |         className,
 723 |       )}
 724 |       {...props}
 725 |     />
 726 |   );
 727 | });
 728 | SidebarMenuSubButton.displayName = 'SidebarMenuSubButton';
 729 | 
 730 | export {
 731 |   Sidebar,
 732 |   SidebarContent,
 733 |   SidebarFooter,
 734 |   SidebarGroup,
 735 |   SidebarGroupAction,
 736 |   SidebarGroupContent,
 737 |   SidebarGroupLabel,
 738 |   SidebarHeader,
 739 |   SidebarInput,
 740 |   SidebarInset,
 741 |   SidebarMenu,
 742 |   SidebarMenuAction,
 743 |   SidebarMenuBadge,
 744 |   SidebarMenuButton,
 745 |   SidebarMenuItem,
 746 |   SidebarMenuSkeleton,
 747 |   SidebarMenuSub,
 748 |   SidebarMenuSubButton,
 749 |   SidebarMenuSubItem,
 750 |   SidebarProvider,
 751 |   SidebarRail,
 752 |   SidebarSeparator,
 753 |   SidebarTrigger,
 754 |   useSidebar,
 755 | };

```

`/workspaces/automai/src/components/shadcn/card.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cn } from '@/lib/utils';
   4 | 
   5 | const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
   6 |   ({ className, ...props }, ref) => (
   7 |     <div
   8 |       ref={ref}
   9 |       className={cn('rounded-lg border bg-card text-card-foreground shadow-sm', className)}
  10 |       {...props}
  11 |     />
  12 |   ),
  13 | );
  14 | Card.displayName = 'Card';
  15 | 
  16 | const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  17 |   ({ className, ...props }, ref) => (
  18 |     <div ref={ref} className={cn('flex flex-col space-y-1.5 p-6', className)} {...props} />
  19 |   ),
  20 | );
  21 | CardHeader.displayName = 'CardHeader';
  22 | 
  23 | const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  24 |   ({ className, ...props }, ref) => (
  25 |     <h3
  26 |       ref={ref}
  27 |       className={cn('text-lg font-semibold leading-none tracking-tight', className)}
  28 |       {...props}
  29 |     />
  30 |   ),
  31 | );
  32 | CardTitle.displayName = 'CardTitle';
  33 | 
  34 | const CardDescription = React.forwardRef<
  35 |   HTMLParagraphElement,
  36 |   React.HTMLAttributes<HTMLParagraphElement>
  37 | >(({ className, ...props }, ref) => (
  38 |   <p ref={ref} className={cn('text-sm text-muted-foreground', className)} {...props} />
  39 | ));
  40 | CardDescription.displayName = 'CardDescription';
  41 | 
  42 | const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  43 |   ({ className, ...props }, ref) => (
  44 |     <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
  45 |   ),
  46 | );
  47 | CardContent.displayName = 'CardContent';
  48 | 
  49 | const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  50 |   ({ className, ...props }, ref) => (
  51 |     <div ref={ref} className={cn(' flex items-center p-6 pt-0', className)} {...props} />
  52 |   ),
  53 | );
  54 | CardFooter.displayName = 'CardFooter';
  55 | 
  56 | export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };

```

`/workspaces/automai/src/components/shadcn/skeleton.tsx`:

```tsx
   1 | import { cn } from '@/lib/utils';
   2 | 
   3 | function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
   4 |   return <div className={cn('animate-pulse rounded-md bg-primary/10', className)} {...props} />;
   5 | }
   6 | 
   7 | export { Skeleton };

```

`/workspaces/automai/src/components/shadcn/input.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cn } from '@/lib/utils';
   4 | 
   5 | /* eslint-disable @typescript-eslint/no-empty-object-type */
   6 | /** @deprecated This interface is intentionally empty for future extensibility */
   7 | export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}
   8 | /* eslint-enable @typescript-eslint/no-empty-object-type */
   9 | 
  10 | const Input = React.forwardRef<HTMLInputElement, InputProps>(
  11 |   ({ className, type, ...props }, ref) => {
  12 |     return (
  13 |       <input
  14 |         type={type}
  15 |         className={cn(
  16 |           'flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
  17 |           className,
  18 |         )}
  19 |         ref={ref}
  20 |         {...props}
  21 |       />
  22 |     );
  23 |   },
  24 | );
  25 | Input.displayName = 'Input';
  26 | 
  27 | export { Input };

```

`/workspaces/automai/src/components/shadcn/badge.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cva, type VariantProps } from 'class-variance-authority';
   4 | 
   5 | import { cn } from '@/lib/utils';
   6 | 
   7 | const badgeVariants = cva(
   8 |   'inline-flex items-center border rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
   9 |   {
  10 |     variants: {
  11 |       variant: {
  12 |         default: 'bg-primary hover:bg-primary/80 border-transparent text-primary-foreground',
  13 |         secondary:
  14 |           'bg-secondary hover:bg-secondary/80 border-transparent text-secondary-foreground',
  15 |         destructive:
  16 |           'bg-destructive hover:bg-destructive/80 border-transparent text-destructive-foreground',
  17 |         outline: 'text-foreground',
  18 |       },
  19 |     },
  20 |     defaultVariants: {
  21 |       variant: 'default',
  22 |     },
  23 |   },
  24 | );
  25 | 
  26 | export interface BadgeProps
  27 |   extends React.HTMLAttributes<HTMLDivElement>,
  28 |     VariantProps<typeof badgeVariants> {}
  29 | 
  30 | function Badge({ className, variant, ...props }: BadgeProps) {
  31 |   return <div className={cn(badgeVariants({ variant }), className)} {...props} />;
  32 | }
  33 | 
  34 | export { Badge, badgeVariants };

```

`/workspaces/automai/src/components/shadcn/dropdown-menu.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
   6 | import { Check, ChevronRight, Circle } from 'lucide-react';
   7 | 
   8 | import { cn } from '@/lib/utils';
   9 | 
  10 | const DropdownMenu = DropdownMenuPrimitive.Root;
  11 | 
  12 | const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;
  13 | 
  14 | const DropdownMenuGroup = DropdownMenuPrimitive.Group;
  15 | 
  16 | const DropdownMenuPortal = DropdownMenuPrimitive.Portal;
  17 | 
  18 | const DropdownMenuSub = DropdownMenuPrimitive.Sub;
  19 | 
  20 | const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;
  21 | 
  22 | const DropdownMenuSubTrigger = React.forwardRef<
  23 |   React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  24 |   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
  25 |     inset?: boolean;
  26 |   }
  27 | >(({ className, inset, children, ...props }, ref) => (
  28 |   <DropdownMenuPrimitive.SubTrigger
  29 |     ref={ref}
  30 |     className={cn(
  31 |       'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
  32 |       inset && 'pl-8',
  33 |       className,
  34 |     )}
  35 |     {...props}
  36 |   >
  37 |     {children}
  38 |     <ChevronRight className="ml-auto h-4 w-4" />
  39 |   </DropdownMenuPrimitive.SubTrigger>
  40 | ));
  41 | DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;
  42 | 
  43 | const DropdownMenuSubContent = React.forwardRef<
  44 |   React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  45 |   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
  46 | >(({ className, ...props }, ref) => (
  47 |   <DropdownMenuPrimitive.SubContent
  48 |     ref={ref}
  49 |     className={cn(
  50 |       'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
  51 |       className,
  52 |     )}
  53 |     {...props}
  54 |   />
  55 | ));
  56 | DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;
  57 | 
  58 | const DropdownMenuContent = React.forwardRef<
  59 |   React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  60 |   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
  61 | >(({ className, sideOffset = 4, ...props }, ref) => (
  62 |   <DropdownMenuPrimitive.Portal>
  63 |     <DropdownMenuPrimitive.Content
  64 |       ref={ref}
  65 |       sideOffset={sideOffset}
  66 |       className={cn(
  67 |         'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
  68 |         className,
  69 |       )}
  70 |       {...props}
  71 |     />
  72 |   </DropdownMenuPrimitive.Portal>
  73 | ));
  74 | DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;
  75 | 
  76 | const DropdownMenuItem = React.forwardRef<
  77 |   React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  78 |   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
  79 |     inset?: boolean;
  80 |   }
  81 | >(({ className, inset, ...props }, ref) => (
  82 |   <DropdownMenuPrimitive.Item
  83 |     ref={ref}
  84 |     className={cn(
  85 |       'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
  86 |       inset && 'pl-8',
  87 |       className,
  88 |     )}
  89 |     {...props}
  90 |   />
  91 | ));
  92 | DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;
  93 | 
  94 | const DropdownMenuCheckboxItem = React.forwardRef<
  95 |   React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  96 |   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
  97 | >(({ className, children, checked, ...props }, ref) => (
  98 |   <DropdownMenuPrimitive.CheckboxItem
  99 |     ref={ref}
 100 |     className={cn(
 101 |       'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
 102 |       className,
 103 |     )}
 104 |     checked={checked}
 105 |     {...props}
 106 |   >
 107 |     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
 108 |       <DropdownMenuPrimitive.ItemIndicator>
 109 |         <Check className="h-4 w-4" />
 110 |       </DropdownMenuPrimitive.ItemIndicator>
 111 |     </span>
 112 |     {children}
 113 |   </DropdownMenuPrimitive.CheckboxItem>
 114 | ));
 115 | DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;
 116 | 
 117 | const DropdownMenuRadioItem = React.forwardRef<
 118 |   React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
 119 |   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
 120 | >(({ className, children, ...props }, ref) => (
 121 |   <DropdownMenuPrimitive.RadioItem
 122 |     ref={ref}
 123 |     className={cn(
 124 |       'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
 125 |       className,
 126 |     )}
 127 |     {...props}
 128 |   >
 129 |     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
 130 |       <DropdownMenuPrimitive.ItemIndicator>
 131 |         <Circle className="h-2 w-2 fill-current" />
 132 |       </DropdownMenuPrimitive.ItemIndicator>
 133 |     </span>
 134 |     {children}
 135 |   </DropdownMenuPrimitive.RadioItem>
 136 | ));
 137 | DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;
 138 | 
 139 | const DropdownMenuLabel = React.forwardRef<
 140 |   React.ElementRef<typeof DropdownMenuPrimitive.Label>,
 141 |   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
 142 |     inset?: boolean;
 143 |   }
 144 | >(({ className, inset, ...props }, ref) => (
 145 |   <DropdownMenuPrimitive.Label
 146 |     ref={ref}
 147 |     className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
 148 |     {...props}
 149 |   />
 150 | ));
 151 | DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;
 152 | 
 153 | const DropdownMenuSeparator = React.forwardRef<
 154 |   React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
 155 |   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
 156 | >(({ className, ...props }, ref) => (
 157 |   <DropdownMenuPrimitive.Separator
 158 |     ref={ref}
 159 |     className={cn('-mx-1 my-1 h-px bg-muted', className)}
 160 |     {...props}
 161 |   />
 162 | ));
 163 | DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;
 164 | 
 165 | const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
 166 |   return (
 167 |     <span className={cn('ml-auto text-xs tracking-widest opacity-60', className)} {...props} />
 168 |   );
 169 | };
 170 | DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';
 171 | 
 172 | export {
 173 |   DropdownMenu,
 174 |   DropdownMenuTrigger,
 175 |   DropdownMenuContent,
 176 |   DropdownMenuItem,
 177 |   DropdownMenuCheckboxItem,
 178 |   DropdownMenuRadioItem,
 179 |   DropdownMenuLabel,
 180 |   DropdownMenuSeparator,
 181 |   DropdownMenuShortcut,
 182 |   DropdownMenuGroup,
 183 |   DropdownMenuPortal,
 184 |   DropdownMenuSub,
 185 |   DropdownMenuSubContent,
 186 |   DropdownMenuSubTrigger,
 187 |   DropdownMenuRadioGroup,
 188 | };

```

`/workspaces/automai/src/components/shadcn/form.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import * as LabelPrimitive from '@radix-ui/react-label';
   4 | import { Slot } from '@radix-ui/react-slot';
   5 | import {
   6 |   Controller,
   7 |   ControllerProps,
   8 |   FieldPath,
   9 |   FieldValues,
  10 |   FormProvider,
  11 |   useFormContext,
  12 | } from 'react-hook-form';
  13 | 
  14 | import { Label } from '@/components/shadcn/label';
  15 | import { cn } from '@/lib/utils';
  16 | 
  17 | const Form = FormProvider;
  18 | 
  19 | type FormFieldContextValue<
  20 |   TFieldValues extends FieldValues = FieldValues,
  21 |   TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
  22 | > = {
  23 |   name: TName;
  24 | };
  25 | 
  26 | const FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);
  27 | 
  28 | const FormField = <
  29 |   TFieldValues extends FieldValues = FieldValues,
  30 |   TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
  31 | >({
  32 |   ...props
  33 | }: ControllerProps<TFieldValues, TName>) => {
  34 |   return (
  35 |     <FormFieldContext.Provider value={{ name: props.name }}>
  36 |       <Controller {...props} />
  37 |     </FormFieldContext.Provider>
  38 |   );
  39 | };
  40 | 
  41 | const useFormField = () => {
  42 |   const fieldContext = React.useContext(FormFieldContext);
  43 |   const itemContext = React.useContext(FormItemContext);
  44 |   const { getFieldState, formState } = useFormContext();
  45 | 
  46 |   const fieldState = getFieldState(fieldContext.name, formState);
  47 | 
  48 |   if (!fieldContext) {
  49 |     throw new Error('useFormField should be used within <FormField>');
  50 |   }
  51 | 
  52 |   const { id } = itemContext;
  53 | 
  54 |   return {
  55 |     id,
  56 |     name: fieldContext.name,
  57 |     formItemId: `${id}-form-item`,
  58 |     formDescriptionId: `${id}-form-item-description`,
  59 |     formMessageId: `${id}-form-item-message`,
  60 |     ...fieldState,
  61 |   };
  62 | };
  63 | 
  64 | type FormItemContextValue = {
  65 |   id: string;
  66 | };
  67 | 
  68 | const FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);
  69 | 
  70 | const FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  71 |   ({ className, ...props }, ref) => {
  72 |     const id = React.useId();
  73 | 
  74 |     return (
  75 |       <FormItemContext.Provider value={{ id }}>
  76 |         <div ref={ref} className={cn('space-y-2', className)} {...props} />
  77 |       </FormItemContext.Provider>
  78 |     );
  79 |   },
  80 | );
  81 | FormItem.displayName = 'FormItem';
  82 | 
  83 | const FormLabel = React.forwardRef<
  84 |   React.ElementRef<typeof LabelPrimitive.Root>,
  85 |   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
  86 | >(({ className, ...props }, ref) => {
  87 |   const { error, formItemId } = useFormField();
  88 | 
  89 |   return (
  90 |     <Label
  91 |       ref={ref}
  92 |       className={cn(error && 'text-destructive', className)}
  93 |       htmlFor={formItemId}
  94 |       {...props}
  95 |     />
  96 |   );
  97 | });
  98 | FormLabel.displayName = 'FormLabel';
  99 | 
 100 | const FormControl = React.forwardRef<
 101 |   React.ElementRef<typeof Slot>,
 102 |   React.ComponentPropsWithoutRef<typeof Slot>
 103 | >(({ ...props }, ref) => {
 104 |   const { error, formItemId, formDescriptionId, formMessageId } = useFormField();
 105 | 
 106 |   return (
 107 |     <Slot
 108 |       ref={ref}
 109 |       id={formItemId}
 110 |       aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}
 111 |       aria-invalid={!!error}
 112 |       {...props}
 113 |     />
 114 |   );
 115 | });
 116 | FormControl.displayName = 'FormControl';
 117 | 
 118 | const FormDescription = React.forwardRef<
 119 |   HTMLParagraphElement,
 120 |   React.HTMLAttributes<HTMLParagraphElement>
 121 | >(({ className, ...props }, ref) => {
 122 |   const { formDescriptionId } = useFormField();
 123 | 
 124 |   return (
 125 |     <p
 126 |       ref={ref}
 127 |       id={formDescriptionId}
 128 |       className={cn('text-[0.8rem] text-muted-foreground', className)}
 129 |       {...props}
 130 |     />
 131 |   );
 132 | });
 133 | FormDescription.displayName = 'FormDescription';
 134 | 
 135 | const FormMessage = React.forwardRef<
 136 |   HTMLParagraphElement,
 137 |   React.HTMLAttributes<HTMLParagraphElement>
 138 | >(({ className, children, ...props }, ref) => {
 139 |   const { error, formMessageId } = useFormField();
 140 |   const body = error ? String(error?.message) : children;
 141 | 
 142 |   if (!body) {
 143 |     return null;
 144 |   }
 145 | 
 146 |   return (
 147 |     <p
 148 |       ref={ref}
 149 |       id={formMessageId}
 150 |       className={cn('text-[0.8rem] font-medium text-destructive', className)}
 151 |       {...props}
 152 |     >
 153 |       {body}
 154 |     </p>
 155 |   );
 156 | });
 157 | FormMessage.displayName = 'FormMessage';
 158 | 
 159 | export {
 160 |   useFormField,
 161 |   Form,
 162 |   FormItem,
 163 |   FormLabel,
 164 |   FormControl,
 165 |   FormDescription,
 166 |   FormMessage,
 167 |   FormField,
 168 | };

```

`/workspaces/automai/src/components/shadcn/separator.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import * as SeparatorPrimitive from '@radix-ui/react-separator';
   4 | 
   5 | import { cn } from '@/lib/utils';
   6 | 
   7 | const Separator = React.forwardRef<
   8 |   React.ElementRef<typeof SeparatorPrimitive.Root>,
   9 |   React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
  10 | >(({ className, orientation = 'horizontal', decorative = true, ...props }, ref) => (
  11 |   <SeparatorPrimitive.Root
  12 |     ref={ref}
  13 |     decorative={decorative}
  14 |     orientation={orientation}
  15 |     className={cn(
  16 |       'shrink-0 bg-border',
  17 |       orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
  18 |       className,
  19 |     )}
  20 |     {...props}
  21 |   />
  22 | ));
  23 | Separator.displayName = SeparatorPrimitive.Root.displayName;
  24 | 
  25 | export { Separator };

```

`/workspaces/automai/src/components/shadcn/select.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as SelectPrimitive from '@radix-ui/react-select';
   6 | import { Check, ChevronDown } from 'lucide-react';
   7 | 
   8 | import { cn } from '@/lib/utils';
   9 | 
  10 | const Select = SelectPrimitive.Root;
  11 | 
  12 | const SelectGroup = SelectPrimitive.Group;
  13 | 
  14 | const SelectValue = SelectPrimitive.Value;
  15 | 
  16 | const SelectTrigger = React.forwardRef<
  17 |   React.ElementRef<typeof SelectPrimitive.Trigger>,
  18 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
  19 | >(({ className, children, ...props }, ref) => (
  20 |   <SelectPrimitive.Trigger
  21 |     ref={ref}
  22 |     className={cn(
  23 |       'flex h-10 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
  24 |       className,
  25 |     )}
  26 |     {...props}
  27 |   >
  28 |     {children}
  29 |     <SelectPrimitive.Icon asChild>
  30 |       <ChevronDown className="h-4 w-4 opacity-50" />
  31 |     </SelectPrimitive.Icon>
  32 |   </SelectPrimitive.Trigger>
  33 | ));
  34 | SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;
  35 | 
  36 | const SelectContent = React.forwardRef<
  37 |   React.ElementRef<typeof SelectPrimitive.Content>,
  38 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
  39 | >(({ className, children, position = 'popper', ...props }, ref) => (
  40 |   <SelectPrimitive.Portal>
  41 |     <SelectPrimitive.Content
  42 |       ref={ref}
  43 |       className={cn(
  44 |         'relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80',
  45 |         position === 'popper' && 'translate-y-1',
  46 |         className,
  47 |       )}
  48 |       position={position}
  49 |       {...props}
  50 |     >
  51 |       <SelectPrimitive.Viewport
  52 |         className={cn(
  53 |           'p-1',
  54 |           position === 'popper' &&
  55 |             'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',
  56 |         )}
  57 |       >
  58 |         {children}
  59 |       </SelectPrimitive.Viewport>
  60 |     </SelectPrimitive.Content>
  61 |   </SelectPrimitive.Portal>
  62 | ));
  63 | SelectContent.displayName = SelectPrimitive.Content.displayName;
  64 | 
  65 | const SelectLabel = React.forwardRef<
  66 |   React.ElementRef<typeof SelectPrimitive.Label>,
  67 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
  68 | >(({ className, ...props }, ref) => (
  69 |   <SelectPrimitive.Label
  70 |     ref={ref}
  71 |     className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
  72 |     {...props}
  73 |   />
  74 | ));
  75 | SelectLabel.displayName = SelectPrimitive.Label.displayName;
  76 | 
  77 | const SelectItem = React.forwardRef<
  78 |   React.ElementRef<typeof SelectPrimitive.Item>,
  79 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
  80 | >(({ className, children, ...props }, ref) => (
  81 |   <SelectPrimitive.Item
  82 |     ref={ref}
  83 |     className={cn(
  84 |       'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
  85 |       className,
  86 |     )}
  87 |     {...props}
  88 |   >
  89 |     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
  90 |       <SelectPrimitive.ItemIndicator>
  91 |         <Check className="h-4 w-4" />
  92 |       </SelectPrimitive.ItemIndicator>
  93 |     </span>
  94 | 
  95 |     <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  96 |   </SelectPrimitive.Item>
  97 | ));
  98 | SelectItem.displayName = SelectPrimitive.Item.displayName;
  99 | 
 100 | const SelectSeparator = React.forwardRef<
 101 |   React.ElementRef<typeof SelectPrimitive.Separator>,
 102 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
 103 | >(({ className, ...props }, ref) => (
 104 |   <SelectPrimitive.Separator
 105 |     ref={ref}
 106 |     className={cn('-mx-1 my-1 h-px bg-muted', className)}
 107 |     {...props}
 108 |   />
 109 | ));
 110 | SelectSeparator.displayName = SelectPrimitive.Separator.displayName;
 111 | 
 112 | export {
 113 |   Select,
 114 |   SelectGroup,
 115 |   SelectValue,
 116 |   SelectTrigger,
 117 |   SelectContent,
 118 |   SelectLabel,
 119 |   SelectItem,
 120 |   SelectSeparator,
 121 | };

```

`/workspaces/automai/src/components/shadcn/table.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import { cn } from '@/lib/utils';
   6 | 
   7 | const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(
   8 |   ({ className, ...props }, ref) => (
   9 |     <div className="relative w-full overflow-auto">
  10 |       <table ref={ref} className={cn('w-full caption-bottom text-sm', className)} {...props} />
  11 |     </div>
  12 |   ),
  13 | );
  14 | Table.displayName = 'Table';
  15 | 
  16 | const TableHeader = React.forwardRef<
  17 |   HTMLTableSectionElement,
  18 |   React.HTMLAttributes<HTMLTableSectionElement>
  19 | >(({ className, ...props }, ref) => (
  20 |   <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
  21 | ));
  22 | TableHeader.displayName = 'TableHeader';
  23 | 
  24 | const TableBody = React.forwardRef<
  25 |   HTMLTableSectionElement,
  26 |   React.HTMLAttributes<HTMLTableSectionElement>
  27 | >(({ className, ...props }, ref) => (
  28 |   <tbody ref={ref} className={cn('[&_tr:last-child]:border-0', className)} {...props} />
  29 | ));
  30 | TableBody.displayName = 'TableBody';
  31 | 
  32 | const TableFooter = React.forwardRef<
  33 |   HTMLTableSectionElement,
  34 |   React.HTMLAttributes<HTMLTableSectionElement>
  35 | >(({ className, ...props }, ref) => (
  36 |   <tfoot
  37 |     ref={ref}
  38 |     className={cn('bg-primary font-medium text-primary-foreground', className)}
  39 |     {...props}
  40 |   />
  41 | ));
  42 | TableFooter.displayName = 'TableFooter';
  43 | 
  44 | const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(
  45 |   ({ className, ...props }, ref) => (
  46 |     <tr
  47 |       ref={ref}
  48 |       className={cn(
  49 |         'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
  50 |         className,
  51 |       )}
  52 |       {...props}
  53 |     />
  54 |   ),
  55 | );
  56 | TableRow.displayName = 'TableRow';
  57 | 
  58 | const TableHead = React.forwardRef<
  59 |   HTMLTableCellElement,
  60 |   React.ThHTMLAttributes<HTMLTableCellElement>
  61 | >(({ className, ...props }, ref) => (
  62 |   <th
  63 |     ref={ref}
  64 |     className={cn(
  65 |       'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',
  66 |       className,
  67 |     )}
  68 |     {...props}
  69 |   />
  70 | ));
  71 | TableHead.displayName = 'TableHead';
  72 | 
  73 | const TableCell = React.forwardRef<
  74 |   HTMLTableCellElement,
  75 |   React.TdHTMLAttributes<HTMLTableCellElement>
  76 | >(({ className, ...props }, ref) => (
  77 |   <td
  78 |     ref={ref}
  79 |     className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}
  80 |     {...props}
  81 |   />
  82 | ));
  83 | TableCell.displayName = 'TableCell';
  84 | 
  85 | const TableCaption = React.forwardRef<
  86 |   HTMLTableCaptionElement,
  87 |   React.HTMLAttributes<HTMLTableCaptionElement>
  88 | >(({ className, ...props }, ref) => (
  89 |   <caption ref={ref} className={cn('mt-4 text-sm text-muted-foreground', className)} {...props} />
  90 | ));
  91 | TableCaption.displayName = 'TableCaption';
  92 | 
  93 | export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };

```

`/workspaces/automai/src/components/shadcn/switch.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import * as SwitchPrimitives from '@radix-ui/react-switch';
   4 | 
   5 | import { cn } from '@/lib/utils';
   6 | 
   7 | const Switch = React.forwardRef<
   8 |   React.ElementRef<typeof SwitchPrimitives.Root>,
   9 |   React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
  10 | >(({ className, ...props }, ref) => (
  11 |   <SwitchPrimitives.Root
  12 |     className={cn(
  13 |       'peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
  14 |       className,
  15 |     )}
  16 |     {...props}
  17 |     ref={ref}
  18 |   >
  19 |     <SwitchPrimitives.Thumb
  20 |       className={cn(
  21 |         'pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0',
  22 |       )}
  23 |     />
  24 |   </SwitchPrimitives.Root>
  25 | ));
  26 | Switch.displayName = SwitchPrimitives.Root.displayName;
  27 | 
  28 | export { Switch };

```

`/workspaces/automai/src/components/shadcn/popover.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as PopoverPrimitive from '@radix-ui/react-popover';
   6 | 
   7 | import { cn } from '@/lib/utils';
   8 | 
   9 | const Popover = PopoverPrimitive.Root;
  10 | 
  11 | const PopoverTrigger = PopoverPrimitive.Trigger;
  12 | 
  13 | const PopoverContent = React.forwardRef<
  14 |   React.ElementRef<typeof PopoverPrimitive.Content>,
  15 |   React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
  16 | >(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  17 |   <PopoverPrimitive.Portal>
  18 |     <PopoverPrimitive.Content
  19 |       ref={ref}
  20 |       align={align}
  21 |       sideOffset={sideOffset}
  22 |       className={cn(
  23 |         'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none animate-in data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
  24 |         className,
  25 |       )}
  26 |       {...props}
  27 |     />
  28 |   </PopoverPrimitive.Portal>
  29 | ));
  30 | PopoverContent.displayName = PopoverPrimitive.Content.displayName;
  31 | 
  32 | export { Popover, PopoverTrigger, PopoverContent };

```

`/workspaces/automai/src/components/shadcn/theme-toggle.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | import { useEffect, useState } from 'react';
   5 | import { Moon, Sun, Laptop } from 'lucide-react';
   6 | import { useTheme as useNextThemes } from 'next-themes';
   7 | import { useTheme as useCustomTheme } from '@/context/ThemeContext';
   8 | 
   9 | import { Button } from '@/components/shadcn/button';
  10 | import {
  11 |   DropdownMenu,
  12 |   DropdownMenuContent,
  13 |   DropdownMenuItem,
  14 |   DropdownMenuTrigger,
  15 | } from '@/components/shadcn/dropdown-menu';
  16 | 
  17 | export function ThemeToggle() {
  18 |   // Use both theme hooks for compatibility
  19 |   const nextThemes = useNextThemes();
  20 |   const customTheme = useCustomTheme();
  21 |   const [mounted, setMounted] = useState(false);
  22 | 
  23 |   // Determine which theme API to use (prefer next-themes)
  24 |   const theme = nextThemes.theme || customTheme.theme;
  25 | 
  26 |   // Synchronize themes on mount
  27 |   useEffect(() => {
  28 |     if (typeof window !== 'undefined') {
  29 |       // Get theme from localStorage
  30 |       const savedTheme = localStorage.getItem('theme');
  31 |       
  32 |       // If there's a saved theme, make sure both providers are using it
  33 |       if (savedTheme && savedTheme !== theme) {
  34 |         // Update next-themes if available
  35 |         if (nextThemes.setTheme) {
  36 |           nextThemes.setTheme(savedTheme);
  37 |         }
  38 |         
  39 |         // Update custom theme provider if available
  40 |         if (customTheme.setTheme) {
  41 |           customTheme.setTheme(savedTheme as any);
  42 |         }
  43 |       }
  44 |     }
  45 |   }, [mounted, nextThemes, customTheme, theme]);
  46 | 
  47 |   // Function to set theme in both providers for maximum compatibility
  48 |   const setTheme = (newTheme: string) => {
  49 |     // Set theme in next-themes provider
  50 |     if (nextThemes.setTheme) {
  51 |       nextThemes.setTheme(newTheme);
  52 |     }
  53 | 
  54 |     // Also set theme in custom provider if available
  55 |     if (customTheme.setTheme) {
  56 |       customTheme.setTheme(newTheme as any);
  57 |     }
  58 | 
  59 |     // Optionally, manually set the theme class on html element as a fallback
  60 |     if (typeof window !== 'undefined') {
  61 |       const root = window.document.documentElement;
  62 |       const isDark =
  63 |         newTheme === 'dark' ||
  64 |         (newTheme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
  65 | 
  66 |       if (isDark) {
  67 |         root.classList.add('dark');
  68 |       } else {
  69 |         root.classList.remove('dark');
  70 |       }
  71 | 
  72 |       // Save theme in localStorage for persistence
  73 |       localStorage.setItem('theme', newTheme);
  74 |     }
  75 |   };
  76 | 
  77 |   // Wait for client-side hydration to prevent SSR issues
  78 |   useEffect(() => {
  79 |     setMounted(true);
  80 |   }, []);
  81 | 
  82 |   // Don't render anything until mounted to prevent hydration mismatch
  83 |   if (!mounted) {
  84 |     return <div className="h-8 w-8" />;
  85 |   }
  86 | 
  87 |   return (
  88 |     <DropdownMenu>
  89 |       <DropdownMenuTrigger asChild>
  90 |         <Button variant="ghost" size="icon" className="h-8 w-8">
  91 |           <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
  92 |           <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
  93 |           <span className="sr-only">Toggle theme</span>
  94 |         </Button>
  95 |       </DropdownMenuTrigger>
  96 |       <DropdownMenuContent align="end">
  97 |         <DropdownMenuItem onClick={() => setTheme('light')} className="flex items-center gap-2">
  98 |           <Sun className="h-4 w-4" />
  99 |           <span>Light</span>
 100 |         </DropdownMenuItem>
 101 |         <DropdownMenuItem onClick={() => setTheme('dark')} className="flex items-center gap-2">
 102 |           <Moon className="h-4 w-4" />
 103 |           <span>Dark</span>
 104 |         </DropdownMenuItem>
 105 |         <DropdownMenuItem onClick={() => setTheme('system')} className="flex items-center gap-2">
 106 |           <Laptop className="h-4 w-4" />
 107 |           <span>System</span>
 108 |         </DropdownMenuItem>
 109 |       </DropdownMenuContent>
 110 |     </DropdownMenu>
 111 |   );
 112 | }

```

`/workspaces/automai/src/components/shadcn/textarea.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cn } from '@/lib/utils';
   4 | 
   5 | /* eslint-disable @typescript-eslint/no-empty-object-type */
   6 | /** @deprecated This interface is intentionally empty for future extensibility */
   7 | export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}
   8 | /* eslint-enable @typescript-eslint/no-empty-object-type */
   9 | 
  10 | const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  11 |   ({ className, ...props }, ref) => {
  12 |     return (
  13 |       <textarea
  14 |         className={cn(
  15 |           'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
  16 |           className,
  17 |         )}
  18 |         ref={ref}
  19 |         {...props}
  20 |       />
  21 |     );
  22 |   },
  23 | );
  24 | Textarea.displayName = 'Textarea';
  25 | 
  26 | export { Textarea };

```

`/workspaces/automai/src/components/shadcn/pagination.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import Link from 'next/link';
   4 | 
   5 | import { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react';
   6 | 
   7 | import { ButtonProps, buttonVariants } from '@/components/shadcn/button';
   8 | import { cn } from '@/lib/utils';
   9 | 
  10 | const Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (
  11 |   <nav
  12 |     role="navigation"
  13 |     aria-label="pagination"
  14 |     className={cn('mx-auto flex w-full justify-center', className)}
  15 |     {...props}
  16 |   />
  17 | );
  18 | Pagination.displayName = 'Pagination';
  19 | 
  20 | const PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(
  21 |   ({ className, ...props }, ref) => (
  22 |     <ul ref={ref} className={cn('flex flex-row items-center gap-1', className)} {...props} />
  23 |   ),
  24 | );
  25 | PaginationContent.displayName = 'PaginationContent';
  26 | 
  27 | const PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(
  28 |   ({ className, ...props }, ref) => <li ref={ref} className={cn('', className)} {...props} />,
  29 | );
  30 | PaginationItem.displayName = 'PaginationItem';
  31 | 
  32 | type PaginationLinkProps = {
  33 |   isActive?: boolean;
  34 | } & Pick<ButtonProps, 'size'> &
  35 |   React.ComponentProps<typeof Link>;
  36 | 
  37 | const PaginationLink = ({ className, isActive, size = 'icon', ...props }: PaginationLinkProps) => (
  38 |   <Link
  39 |     aria-current={isActive ? 'page' : undefined}
  40 |     className={cn(
  41 |       buttonVariants({
  42 |         variant: isActive ? 'outline' : 'ghost',
  43 |         size,
  44 |       }),
  45 |       className,
  46 |     )}
  47 |     {...props}
  48 |   />
  49 | );
  50 | PaginationLink.displayName = 'PaginationLink';
  51 | 
  52 | const PaginationPrevious = ({
  53 |   className,
  54 |   ...props
  55 | }: React.ComponentProps<typeof PaginationLink>) => (
  56 |   <PaginationLink
  57 |     aria-label="Go to previous page"
  58 |     size="default"
  59 |     className={cn('gap-1 pl-2.5', className)}
  60 |     {...props}
  61 |   >
  62 |     <ChevronLeft className="h-4 w-4" />
  63 |     <span>Previous</span>
  64 |   </PaginationLink>
  65 | );
  66 | PaginationPrevious.displayName = 'PaginationPrevious';
  67 | 
  68 | const PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (
  69 |   <PaginationLink
  70 |     aria-label="Go to next page"
  71 |     size="default"
  72 |     className={cn('gap-1 pr-2.5', className)}
  73 |     {...props}
  74 |   >
  75 |     <span>Next</span>
  76 |     <ChevronRight className="h-4 w-4" />
  77 |   </PaginationLink>
  78 | );
  79 | PaginationNext.displayName = 'PaginationNext';
  80 | 
  81 | const PaginationEllipsis = ({ className, ...props }: React.ComponentProps<'span'>) => (
  82 |   <span
  83 |     aria-hidden
  84 |     className={cn('flex h-9 w-9 items-center justify-center', className)}
  85 |     {...props}
  86 |   >
  87 |     <MoreHorizontal className="h-4 w-4" />
  88 |     <span className="sr-only">More pages</span>
  89 |   </span>
  90 | );
  91 | PaginationEllipsis.displayName = 'PaginationEllipsis';
  92 | 
  93 | export {
  94 |   Pagination,
  95 |   PaginationContent,
  96 |   PaginationEllipsis,
  97 |   PaginationItem,
  98 |   PaginationLink,
  99 |   PaginationNext,
 100 |   PaginationPrevious,
 101 | };

```

`/workspaces/automai/src/components/shadcn/command.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import { DialogProps } from '@radix-ui/react-dialog';
   6 | import { VisuallyHidden } from '@radix-ui/react-visually-hidden';
   7 | import { Command as CommandPrimitive } from 'cmdk';
   8 | import { Search } from 'lucide-react';
   9 | 
  10 | import { Dialog, DialogContent, DialogTitle } from '@/components/shadcn/dialog';
  11 | import { cn } from '@/lib/utils';
  12 | 
  13 | const Command = React.forwardRef<
  14 |   React.ElementRef<typeof CommandPrimitive>,
  15 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive>
  16 | >(({ className, ...props }, ref) => (
  17 |   <CommandPrimitive
  18 |     ref={ref}
  19 |     className={cn(
  20 |       'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
  21 |       className,
  22 |     )}
  23 |     {...props}
  24 |   />
  25 | ));
  26 | Command.displayName = CommandPrimitive.displayName;
  27 | 
  28 | /* eslint-disable @typescript-eslint/no-empty-object-type */
  29 | /** @deprecated This interface is intentionally empty for future extensibility */
  30 | export interface CommandDialogProps extends DialogProps {}
  31 | /* eslint-enable @typescript-eslint/no-empty-object-type */
  32 | 
  33 | const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  34 |   return (
  35 |     <Dialog {...props}>
  36 |       <DialogContent className="overflow-hidden p-0 shadow-2xl">
  37 |         <VisuallyHidden>
  38 |           <DialogTitle>Command Menu</DialogTitle>
  39 |         </VisuallyHidden>
  40 |         <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
  41 |           {children}
  42 |         </Command>
  43 |       </DialogContent>
  44 |     </Dialog>
  45 |   );
  46 | };
  47 | 
  48 | const CommandInput = React.forwardRef<
  49 |   React.ElementRef<typeof CommandPrimitive.Input>,
  50 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
  51 | >(({ className, ...props }, ref) => (
  52 |   <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
  53 |     <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
  54 |     <CommandPrimitive.Input
  55 |       ref={ref}
  56 |       className={cn(
  57 |         'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',
  58 |         className,
  59 |       )}
  60 |       {...props}
  61 |     />
  62 |   </div>
  63 | ));
  64 | 
  65 | CommandInput.displayName = CommandPrimitive.Input.displayName;
  66 | 
  67 | const CommandList = React.forwardRef<
  68 |   React.ElementRef<typeof CommandPrimitive.List>,
  69 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
  70 | >(({ className, ...props }, ref) => (
  71 |   <CommandPrimitive.List
  72 |     ref={ref}
  73 |     className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
  74 |     {...props}
  75 |   />
  76 | ));
  77 | 
  78 | CommandList.displayName = CommandPrimitive.List.displayName;
  79 | 
  80 | const CommandEmpty = React.forwardRef<
  81 |   React.ElementRef<typeof CommandPrimitive.Empty>,
  82 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
  83 | >((props, ref) => (
  84 |   <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
  85 | ));
  86 | 
  87 | CommandEmpty.displayName = CommandPrimitive.Empty.displayName;
  88 | 
  89 | const CommandGroup = React.forwardRef<
  90 |   React.ElementRef<typeof CommandPrimitive.Group>,
  91 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
  92 | >(({ className, ...props }, ref) => (
  93 |   <CommandPrimitive.Group
  94 |     ref={ref}
  95 |     className={cn(
  96 |       'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
  97 |       className,
  98 |     )}
  99 |     {...props}
 100 |   />
 101 | ));
 102 | 
 103 | CommandGroup.displayName = CommandPrimitive.Group.displayName;
 104 | 
 105 | const CommandSeparator = React.forwardRef<
 106 |   React.ElementRef<typeof CommandPrimitive.Separator>,
 107 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
 108 | >(({ className, ...props }, ref) => (
 109 |   <CommandPrimitive.Separator
 110 |     ref={ref}
 111 |     className={cn('-mx-1 h-px bg-border', className)}
 112 |     {...props}
 113 |   />
 114 | ));
 115 | CommandSeparator.displayName = CommandPrimitive.Separator.displayName;
 116 | 
 117 | const CommandItem = React.forwardRef<
 118 |   React.ElementRef<typeof CommandPrimitive.Item>,
 119 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
 120 | >(({ className, ...props }, ref) => (
 121 |   <CommandPrimitive.Item
 122 |     ref={ref}
 123 |     className={cn(
 124 |       'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
 125 |       className,
 126 |     )}
 127 |     {...props}
 128 |   />
 129 | ));
 130 | 
 131 | CommandItem.displayName = CommandPrimitive.Item.displayName;
 132 | 
 133 | const CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
 134 |   return (
 135 |     <span
 136 |       className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}
 137 |       {...props}
 138 |     />
 139 |   );
 140 | };
 141 | CommandShortcut.displayName = 'CommandShortcut';
 142 | 
 143 | export {
 144 |   Command,
 145 |   CommandDialog,
 146 |   CommandInput,
 147 |   CommandList,
 148 |   CommandEmpty,
 149 |   CommandGroup,
 150 |   CommandItem,
 151 |   CommandShortcut,
 152 |   CommandSeparator,
 153 | };

```

`/workspaces/automai/src/components/shadcn/avatar.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as AvatarPrimitive from '@radix-ui/react-avatar';
   6 | 
   7 | import { cn } from '@/lib/utils';
   8 | 
   9 | const Avatar = React.forwardRef<
  10 |   React.ElementRef<typeof AvatarPrimitive.Root>,
  11 |   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
  12 | >(({ className, ...props }, ref) => (
  13 |   <AvatarPrimitive.Root
  14 |     ref={ref}
  15 |     className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', className)}
  16 |     {...props}
  17 |   />
  18 | ));
  19 | Avatar.displayName = AvatarPrimitive.Root.displayName;
  20 | 
  21 | const AvatarImage = React.forwardRef<
  22 |   React.ElementRef<typeof AvatarPrimitive.Image>,
  23 |   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
  24 | >(({ className, ...props }, ref) => (
  25 |   <AvatarPrimitive.Image
  26 |     ref={ref}
  27 |     className={cn('aspect-square h-full w-full', className)}
  28 |     {...props}
  29 |   />
  30 | ));
  31 | AvatarImage.displayName = AvatarPrimitive.Image.displayName;
  32 | 
  33 | const AvatarFallback = React.forwardRef<
  34 |   React.ElementRef<typeof AvatarPrimitive.Fallback>,
  35 |   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
  36 | >(({ className, ...props }, ref) => (
  37 |   <AvatarPrimitive.Fallback
  38 |     ref={ref}
  39 |     className={cn(
  40 |       'flex h-full w-full items-center justify-center rounded-full bg-muted text-foreground',
  41 |       className,
  42 |     )}
  43 |     {...props}
  44 |   />
  45 | ));
  46 | AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;
  47 | 
  48 | export { Avatar, AvatarImage, AvatarFallback };

```

`/workspaces/automai/src/components/shadcn/checkbox.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
   6 | import { Check } from 'lucide-react';
   7 | 
   8 | import { cn } from '@/lib/utils';
   9 | 
  10 | const Checkbox = React.forwardRef<
  11 |   React.ElementRef<typeof CheckboxPrimitive.Root>,
  12 |   React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
  13 | >(({ className, ...props }, ref) => (
  14 |   <CheckboxPrimitive.Root
  15 |     ref={ref}
  16 |     className={cn(
  17 |       'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
  18 |       className,
  19 |     )}
  20 |     {...props}
  21 |   >
  22 |     <CheckboxPrimitive.Indicator className={cn('flex items-center justify-center text-current')}>
  23 |       <Check className="h-4 w-4" />
  24 |     </CheckboxPrimitive.Indicator>
  25 |   </CheckboxPrimitive.Root>
  26 | ));
  27 | Checkbox.displayName = CheckboxPrimitive.Root.displayName;
  28 | 
  29 | export { Checkbox };

```

`/workspaces/automai/src/components/shadcn/accordion.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import * as AccordionPrimitive from '@radix-ui/react-accordion';
   6 | import { ChevronDown } from 'lucide-react';
   7 | 
   8 | import { cn } from '@/lib/utils';
   9 | 
  10 | const Accordion = AccordionPrimitive.Root;
  11 | 
  12 | const AccordionItem = React.forwardRef<
  13 |   React.ElementRef<typeof AccordionPrimitive.Item>,
  14 |   React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
  15 | >(({ className, ...props }, ref) => (
  16 |   <AccordionPrimitive.Item ref={ref} className={cn('border-b', className)} {...props} />
  17 | ));
  18 | AccordionItem.displayName = 'AccordionItem';
  19 | 
  20 | const AccordionTrigger = React.forwardRef<
  21 |   React.ElementRef<typeof AccordionPrimitive.Trigger>,
  22 |   React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
  23 | >(({ className, children, ...props }, ref) => (
  24 |   <AccordionPrimitive.Header className="flex">
  25 |     <AccordionPrimitive.Trigger
  26 |       ref={ref}
  27 |       className={cn(
  28 |         'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',
  29 |         className,
  30 |       )}
  31 |       {...props}
  32 |     >
  33 |       {children}
  34 |       <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
  35 |     </AccordionPrimitive.Trigger>
  36 |   </AccordionPrimitive.Header>
  37 | ));
  38 | AccordionTrigger.displayName = 'AccordionTrigger';
  39 | 
  40 | const AccordionContent = React.forwardRef<
  41 |   React.ElementRef<typeof AccordionPrimitive.Content>,
  42 |   React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
  43 | >(({ className, children, ...props }, ref) => (
  44 |   <AccordionPrimitive.Content
  45 |     ref={ref}
  46 |     className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
  47 |     {...props}
  48 |   >
  49 |     <div className={cn('pb-4 pt-0', className)}>{children}</div>
  50 |   </AccordionPrimitive.Content>
  51 | ));
  52 | AccordionContent.displayName = 'AccordionContent';
  53 | 
  54 | export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };

```

`/workspaces/automai/src/components/shadcn/alert.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | 
   3 | import { cva, type VariantProps } from 'class-variance-authority';
   4 | 
   5 | import { cn } from '@/lib/utils';
   6 | 
   7 | const alertVariants = cva(
   8 |   'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',
   9 |   {
  10 |     variants: {
  11 |       variant: {
  12 |         default: 'bg-background text-foreground',
  13 |         destructive:
  14 |           'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',
  15 |         success:
  16 |           'border-green-500/50 text-green-700 dark:border-green-500 dark:text-green-400 [&>svg]:text-green-500',
  17 |       },
  18 |     },
  19 |     defaultVariants: {
  20 |       variant: 'default',
  21 |     },
  22 |   },
  23 | );
  24 | 
  25 | const Alert = React.forwardRef<
  26 |   HTMLDivElement,
  27 |   React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
  28 | >(({ className, variant, ...props }, ref) => (
  29 |   <div ref={ref} role="alert" className={cn(alertVariants({ variant }), className)} {...props} />
  30 | ));
  31 | Alert.displayName = 'Alert';
  32 | 
  33 | const AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  34 |   ({ className, ...props }, ref) => (
  35 |     <h5
  36 |       ref={ref}
  37 |       className={cn('mb-1 font-medium leading-none tracking-tight', className)}
  38 |       {...props}
  39 |     />
  40 |   ),
  41 | );
  42 | AlertTitle.displayName = 'AlertTitle';
  43 | 
  44 | const AlertDescription = React.forwardRef<
  45 |   HTMLParagraphElement,
  46 |   React.HTMLAttributes<HTMLParagraphElement>
  47 | >(({ className, ...props }, ref) => (
  48 |   <div ref={ref} className={cn('text-sm [&_p]:leading-relaxed', className)} {...props} />
  49 | ));
  50 | AlertDescription.displayName = 'AlertDescription';
  51 | 
  52 | export { Alert, AlertTitle, AlertDescription };

```

`/workspaces/automai/src/components/shadcn/language-switcher.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import { usePathname, useRouter } from 'next/navigation';
   6 | 
   7 | import { Globe } from 'lucide-react';
   8 | 
   9 | import { Button } from '@/components/shadcn/button';
  10 | import {
  11 |   DropdownMenu,
  12 |   DropdownMenuContent,
  13 |   DropdownMenuItem,
  14 |   DropdownMenuTrigger,
  15 | } from '@/components/shadcn/dropdown-menu';
  16 | 
  17 | interface LanguageSwitcherProps {
  18 |   className?: string;
  19 | }
  20 | 
  21 | const languages = [
  22 |   { code: 'en', name: 'English' },
  23 |   { code: 'fr', name: 'Français' },
  24 | ];
  25 | 
  26 | export function LanguageSwitcher({ className }: LanguageSwitcherProps) {
  27 |   const pathname = usePathname();
  28 |   const router = useRouter();
  29 | 
  30 |   const currentLanguage = languages.find((lang) => pathname.startsWith(`/${lang.code}`));
  31 | 
  32 |   const switchLanguage = (langCode: string) => {
  33 |     const newPath = pathname.replace(/^\/[^\/]+/, `/${langCode}`);
  34 |     router.push(newPath);
  35 |   };
  36 | 
  37 |   return (
  38 |     <DropdownMenu>
  39 |       <DropdownMenuTrigger asChild>
  40 |         <Button variant="ghost" size="icon" className={className}>
  41 |           <Globe className="h-[1.2rem] w-[1.2rem]" />
  42 |           <span className="sr-only">Switch language</span>
  43 |         </Button>
  44 |       </DropdownMenuTrigger>
  45 |       <DropdownMenuContent align="end">
  46 |         {languages.map((lang) => (
  47 |           <DropdownMenuItem key={lang.code} onClick={() => switchLanguage(lang.code)}>
  48 |             {lang.name}
  49 |           </DropdownMenuItem>
  50 |         ))}
  51 |       </DropdownMenuContent>
  52 |     </DropdownMenu>
  53 |   );
  54 | }

```

`/workspaces/automai/src/components/icons/ActivityLogIcon.tsx`:

```tsx
   1 | import { SVGProps } from 'react';
   2 | 
   3 | export function ActivityLogIcon(props: SVGProps<SVGSVGElement>) {
   4 |   return (
   5 |     <svg
   6 |       xmlns="http://www.w3.org/2000/svg"
   7 |       width="24"
   8 |       height="24"
   9 |       viewBox="0 0 24 24"
  10 |       fill="none"
  11 |       stroke="currentColor"
  12 |       strokeWidth="2"
  13 |       strokeLinecap="round"
  14 |       strokeLinejoin="round"
  15 |       {...props}
  16 |     >
  17 |       <path d="M22 12h-4l-3 9L9 3l-3 9H2" />
  18 |     </svg>
  19 |   );
  20 | }

```

`/workspaces/automai/src/components/icons/index.tsx`:

```tsx
   1 | import React from 'react';
   2 | 
   3 | interface IconProps extends React.SVGProps<SVGSVGElement> {
   4 |   className?: string;
   5 | }
   6 | 
   7 | export function GitHubIcon({ className, ...props }: IconProps) {
   8 |   return (
   9 |     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className={className} {...props}>
  10 |       <path
  11 |         fill="currentColor"
  12 |         d="M12 2C6.477 2 2 6.477 2 12c0 4.42 2.865 8.167 6.839 9.49.5.09.682-.217.682-.48 0-.237-.008-.866-.013-1.7-2.782.603-3.369-1.34-3.369-1.34-.454-1.156-1.11-1.464-1.11-1.464-.908-.62.069-.608.069-.608 1.003.07 1.531 1.03 1.531 1.03.892 1.529 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.268 2.75 1.026A9.578 9.578 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.026 2.747-1.026.546 1.377.202 2.394.1 2.647.64.699 1.028 1.592 1.028 2.683 0 3.842-2.339 4.687-4.566 4.935.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.577.688.48C19.138 20.163 22 16.418 22 12c0-5.523-4.477-10-10-10z"
  13 |       />
  14 |     </svg>
  15 |   );
  16 | }
  17 | 
  18 | export function GitLabIcon({ className, ...props }: IconProps) {
  19 |   return (
  20 |     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className={className} {...props}>
  21 |       <path
  22 |         fill="currentColor"
  23 |         d="M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 01-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 015.4 1.94a.43.43 0 01.58.18l2.44 7.49h7.16l2.44-7.51A.42.42 0 0118.6 1.94a.43.43 0 01.58.18l2.44 7.51L23 13.45a.84.84 0 01-.35.94z"
  24 |       />
  25 |     </svg>
  26 |   );
  27 | }
  28 | 
  29 | export function GiteaIcon({ className, ...props }: IconProps) {
  30 |   return (
  31 |     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className={className} {...props}>
  32 |       <path
  33 |         fill="currentColor"
  34 |         d="M12 2C6.48 2 2 6.48 2 12c0 5.52 4.48 10 10 10s10-4.48 10-10c0-5.52-4.48-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-2-9.24V7h4v3.76c0 1.23-1.79 1.76-2 1.76s-2-.53-2-1.76z"
  35 |       />
  36 |     </svg>
  37 |   );
  38 | }

```

`/workspaces/automai/src/components/layout/BaseHeader.tsx`:

```tsx
   1 | import React from 'react';
   2 | 
   3 | import { Separator } from '@/components/shadcn/separator';
   4 | import { SidebarTrigger } from '@/components/sidebar/SidebarTrigger';
   5 | import { cn } from '@/lib/utils';
   6 | 
   7 | interface BaseHeaderProps extends React.HTMLAttributes<HTMLElement> {
   8 |   fixed?: boolean;
   9 |   ref?: React.Ref<HTMLElement>;
  10 | }
  11 | 
  12 | export const BaseHeader = ({ className, fixed, children, ...props }: BaseHeaderProps) => {
  13 |   const [offset, setOffset] = React.useState(0);
  14 | 
  15 |   React.useEffect(() => {
  16 |     const onScroll = () => {
  17 |       setOffset(document.body.scrollTop || document.documentElement.scrollTop);
  18 |     };
  19 | 
  20 |     // Add scroll listener to the body
  21 |     document.addEventListener('scroll', onScroll, { passive: true });
  22 | 
  23 |     // Clean up the event listener on unmount
  24 |     return () => document.removeEventListener('scroll', onScroll);
  25 |   }, []);
  26 | 
  27 |   return (
  28 |     <header
  29 |       className={cn(
  30 |         'flex h-16 items-center gap-3 bg-background p-4 sm:gap-4',
  31 |         fixed && 'header-fixed peer/header fixed z-50 w-[inherit] rounded-md',
  32 |         offset > 10 && fixed ? 'shadow' : 'shadow-none',
  33 |         className,
  34 |       )}
  35 |       {...props}
  36 |     >
  37 |       <SidebarTrigger variant="outline" className="scale-125 sm:scale-100" />
  38 |       <Separator orientation="vertical" className="h-6" />
  39 |       {children}
  40 |     </header>
  41 |   );
  42 | };
  43 | 
  44 | BaseHeader.displayName = 'BaseHeader';

```

`/workspaces/automai/src/components/layout/RoleSwitcher.tsx`:

```tsx
   1 | import * as React from 'react';
   2 | import { useCallback, useEffect, useState } from 'react';
   3 | import {
   4 |   Select,
   5 |   SelectContent,
   6 |   SelectItem,
   7 |   SelectTrigger,
   8 |   SelectValue,
   9 | } from '@/components/shadcn/select';
  10 | import { cn } from '@/lib/utils';
  11 | import { Role } from '@/types/user';
  12 | import { useRole } from '@/context/RoleContext';
  13 | import { Loader2 } from 'lucide-react';
  14 | 
  15 | // Define roles based on the Role type definition
  16 | const roles: { value: Role; label: string }[] = [
  17 |   { value: 'admin', label: 'Admin' },
  18 |   { value: 'developer', label: 'Developer' },
  19 |   { value: 'tester', label: 'Tester' },
  20 |   { value: 'viewer', label: 'Viewer' },
  21 | ];
  22 | 
  23 | interface RoleSwitcherProps {
  24 |   className?: string;
  25 | }
  26 | 
  27 | function RoleSwitcherComponent({ className }: RoleSwitcherProps) {
  28 |   const { role: currentRole, setRole } = useRole();
  29 |   const [isLoading, setIsLoading] = useState(true);
  30 | 
  31 |   // Log the current role for debugging
  32 |   React.useEffect(() => {
  33 |     console.log('RoleSwitcher: Current role from RoleContext:', currentRole);
  34 |     console.log('RoleSwitcher: Available roles:', roles);
  35 |     
  36 |     // If we have a role, we're no longer loading
  37 |     if (currentRole) {
  38 |       setIsLoading(false);
  39 |     }
  40 |   }, [currentRole]);
  41 | 
  42 |   // Use useCallback to memoize the handler function
  43 |   const handleValueChange = useCallback((value: Role) => {
  44 |     // Only update if the role actually changed
  45 |     if (value !== currentRole) {
  46 |       console.log('Changing role from', currentRole, 'to', value);
  47 |       // Dispatch a custom event when the role changes
  48 |       const event = new CustomEvent('roleChange', { detail: value });
  49 |       window.dispatchEvent(event);
  50 |       setRole(value);
  51 |     }
  52 |   }, [currentRole, setRole]);
  53 | 
  54 |   // Ensure the current role is valid according to the Role type
  55 |   useEffect(() => {
  56 |     const isValidRole = roles.some(role => role.value === currentRole);
  57 |     console.log('RoleSwitcher: Is current role valid?', isValidRole, currentRole);
  58 |     if (!isValidRole && roles.length > 0) {
  59 |       // If current role is not valid, set it to the first valid role
  60 |       console.log('RoleSwitcher: Setting to default role:', roles[0].value);
  61 |       setRole(roles[0].value);
  62 |     }
  63 |   }, [currentRole, setRole]);
  64 | 
  65 |   // Set a timeout to stop loading after a reasonable time
  66 |   useEffect(() => {
  67 |     const timer = setTimeout(() => {
  68 |       setIsLoading(false);
  69 |     }, 2000); // 2 seconds timeout
  70 |     
  71 |     return () => clearTimeout(timer);
  72 |   }, []);
  73 | 
  74 |   if (isLoading) {
  75 |     return (
  76 |       <div className={cn("w-[180px] h-10 flex items-center justify-center", className)}>
  77 |         <Loader2 className="h-4 w-4 animate-spin" />
  78 |       </div>
  79 |     );
  80 |   }
  81 | 
  82 |   return (
  83 |     <Select
  84 |       value={currentRole}
  85 |       onValueChange={handleValueChange}
  86 |     >
  87 |       <SelectTrigger className={cn("w-[180px]", className)}>
  88 |         <SelectValue placeholder="Select a role">
  89 |           {roles.find(r => r.value === currentRole)?.label || 'Select a role'}
  90 |         </SelectValue>
  91 |       </SelectTrigger>
  92 |       <SelectContent>
  93 |         {roles.map((role) => (
  94 |           <SelectItem key={role.value} value={role.value}>
  95 |             {role.label}
  96 |           </SelectItem>
  97 |         ))}
  98 |       </SelectContent>
  99 |     </Select>
 100 |   );
 101 | }
 102 | 
 103 | // Use React.memo to prevent unnecessary re-renders
 104 | export const RoleSwitcher = React.memo(RoleSwitcherComponent);

```

`/workspaces/automai/src/components/layout/SiteHeader.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import Link from 'next/link';
   4 | import { usePathname } from 'next/navigation';
   5 | import { useLocale } from 'next-intl';
   6 | 
   7 | import { Button } from '@/components/shadcn/button';
   8 | import { LanguageSwitcher } from '@/components/shadcn/language-switcher';
   9 | import { ThemeToggle } from '@/components/shadcn/theme-toggle';
  10 | 
  11 | interface HeaderProps {
  12 |   showAuth?: boolean;
  13 | }
  14 | 
  15 | export function SiteHeader({ showAuth = true }: HeaderProps) {
  16 |   const _pathname = usePathname();
  17 |   const locale = useLocale();
  18 | 
  19 |   return (
  20 |     <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
  21 |       <div className="container flex h-14 items-center">
  22 |         <div className="mr-4 flex">
  23 |           <Link href={`/${locale}`} className="mr-6 flex items-center space-x-2">
  24 |             <span className="font-bold">Automai</span>
  25 |           </Link>
  26 |           <nav className="flex items-center space-x-6 text-sm font-medium">
  27 |             <Link
  28 |               href={`/${locale}/features`}
  29 |               className="transition-colors hover:text-foreground/80"
  30 |             >
  31 |               Features
  32 |             </Link>
  33 |             <Link
  34 |               href={`/${locale}/pricing`}
  35 |               className="transition-colors hover:text-foreground/80"
  36 |             >
  37 |               Pricing
  38 |             </Link>
  39 |             <Link href={`/${locale}/docs`} className="transition-colors hover:text-foreground/80">
  40 |               Documentation
  41 |             </Link>
  42 |           </nav>
  43 |         </div>
  44 |         <div className="flex flex-1 items-center justify-end space-x-2">
  45 |           <nav className="flex items-center space-x-2">
  46 |             <LanguageSwitcher />
  47 |             <ThemeToggle />
  48 |             {showAuth && (
  49 |               <>
  50 |                 <Button variant="ghost" asChild>
  51 |                   <Link href={`/${locale}/login`}>Sign in</Link>
  52 |                 </Button>
  53 |                 <Button asChild>
  54 |                   <Link href={`/${locale}/signup`}>Get Started</Link>
  55 |                 </Button>
  56 |               </>
  57 |             )}
  58 |           </nav>
  59 |         </div>
  60 |       </div>
  61 |     </header>
  62 |   );
  63 | }

```

`/workspaces/automai/src/components/layout/WorkspaceHeader.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import Cookies from 'js-cookie';
   4 | import { ChevronUp } from 'lucide-react';
   5 | import { useParams } from 'next/navigation';
   6 | import * as React from 'react';
   7 | 
   8 | import { SidebarTrigger } from '@/components/sidebar';
   9 | import { UserProfile } from '@/components/profile/UserProfile';
  10 | import { Button } from '@/components/shadcn/button';
  11 | import { RoleSwitcher } from '@/components/layout/RoleSwitcher';
  12 | import { Search } from '@/components/shadcn/search';
  13 | import { Separator } from '@/components/shadcn/separator';
  14 | import { ThemeToggle } from '@/components/shadcn/theme-toggle';
  15 | import { useRole } from '@/context/RoleContext';
  16 | import { useSidebar } from '@/hooks/useSidebar';
  17 | 
  18 | interface WorkspaceHeaderProps {
  19 |   className?: string;
  20 |   fixed?: boolean;
  21 |   tenant?: string;
  22 | }
  23 | 
  24 | const HEADER_COOKIE_NAME = 'header:state';
  25 | const HEADER_COOKIE_MAX_AGE = 60 * 60 * 24 * 7; // 7 days
  26 | 
  27 | export function WorkspaceHeader({ className = '', fixed = false, tenant }: WorkspaceHeaderProps) {
  28 |   const { role, setRole } = useRole();
  29 |   const { open } = useSidebar();
  30 |   const isCollapsed = !open;
  31 |   const params = useParams();
  32 |   const locale = params.locale as string;
  33 |   const [headerVisible, setHeaderVisible] = React.useState(
  34 |     Cookies.get(HEADER_COOKIE_NAME) !== 'hidden',
  35 |   );
  36 | 
  37 |   const toggleHeader = React.useCallback(() => {
  38 |     const newState = !headerVisible;
  39 |     setHeaderVisible(newState);
  40 |     Cookies.set(HEADER_COOKIE_NAME, newState ? 'visible' : 'hidden', {
  41 |       path: '/',
  42 |       expires: HEADER_COOKIE_MAX_AGE / (60 * 60 * 24), // Convert seconds to days
  43 |     });
  44 |   }, [headerVisible]);
  45 | 
  46 |   return (
  47 |     <>
  48 |       {headerVisible ? (
  49 |         <header 
  50 |           className={`sticky top-0 z-40 w-full bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b ${className}`}
  51 |           style={isCollapsed ? { 
  52 |             marginLeft: 'var(--sidebar-width-offset, 0)',
  53 |             width: 'calc(100% - var(--sidebar-width-offset, 0))'
  54 |           } : undefined}
  55 |         >
  56 |           <div className="flex h-14 items-center">
  57 |             {/* Left section */}
  58 |             <div className="flex items-center px-4 h-full">
  59 |               <SidebarTrigger />
  60 |             </div>
  61 | 
  62 |             {/* Center section - can be used for tabs or other content */}
  63 |             <div className="flex-1" />
  64 | 
  65 |             {/* Right section */}
  66 |             <div className="flex items-center gap-2 px-4 h-full">
  67 |               <RoleSwitcher />
  68 |               <Search className="w-[240px]" />
  69 |               <Separator orientation="vertical" className="h-6 opacity-10" />
  70 |               <ThemeToggle />
  71 |               <Separator orientation="vertical" className="h-6 opacity-10" />
  72 |               <UserProfile tenant={tenant} />
  73 |               <Separator orientation="vertical" className="h-6 opacity-10" />
  74 |               <Button
  75 |                 variant="outline"
  76 |                 size="icon"
  77 |                 className="h-8 w-8"
  78 |                 onClick={toggleHeader}
  79 |                 title="Hide Header"
  80 |               >
  81 |                 <ChevronUp className="h-4 w-4" />
  82 |                 <span className="sr-only">Hide Header</span>
  83 |               </Button>
  84 |             </div>
  85 |           </div>
  86 |         </header>
  87 |       ) : (
  88 |         <div 
  89 |           className="sticky top-0 z-50 flex justify-end px-4 py-1 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b"
  90 |           style={isCollapsed ? { 
  91 |             marginLeft: 'var(--sidebar-width-offset, 0)',
  92 |             width: 'calc(100% - var(--sidebar-width-offset, 0))'
  93 |           } : undefined}
  94 |         >
  95 |           <Button
  96 |             variant="outline"
  97 |             size="icon"
  98 |             className="h-8 w-8"
  99 |             onClick={toggleHeader}
 100 |             title="Show Header"
 101 |           >
 102 |             <ChevronUp className="h-4 w-4 rotate-180" />
 103 |             <span className="sr-only">Show Header</span>
 104 |           </Button>
 105 |         </div>
 106 |       )}
 107 |     </>
 108 |   );
 109 | }

```

`/workspaces/automai/src/components/layout/Footer.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { Github, Twitter } from 'lucide-react';
   4 | import Link from 'next/link';
   5 | 
   6 | export function Footer() {
   7 |   return (
   8 |     <footer className="border-t">
   9 |       <div className="container py-8 md:py-12">
  10 |         <div className="grid grid-cols-2 gap-8 md:grid-cols-4">
  11 |           <div className="flex flex-col space-y-4">
  12 |             <h3 className="text-lg font-semibold">Product</h3>
  13 |             <Link href="/features" className="text-sm text-muted-foreground hover:text-foreground">
  14 |               Features
  15 |             </Link>
  16 |             <Link href="/pricing" className="text-sm text-muted-foreground hover:text-foreground">
  17 |               Pricing
  18 |             </Link>
  19 |             <Link href="/docs" className="text-sm text-muted-foreground hover:text-foreground">
  20 |               Documentation
  21 |             </Link>
  22 |           </div>
  23 |           <div className="flex flex-col space-y-4">
  24 |             <h3 className="text-lg font-semibold">Company</h3>
  25 |             <Link href="/about" className="text-sm text-muted-foreground hover:text-foreground">
  26 |               About
  27 |             </Link>
  28 |             <Link href="/blog" className="text-sm text-muted-foreground hover:text-foreground">
  29 |               Blog
  30 |             </Link>
  31 |             <Link href="/careers" className="text-sm text-muted-foreground hover:text-foreground">
  32 |               Careers
  33 |             </Link>
  34 |           </div>
  35 |           <div className="flex flex-col space-y-4">
  36 |             <h3 className="text-lg font-semibold">Legal</h3>
  37 |             <Link href="/privacy" className="text-sm text-muted-foreground hover:text-foreground">
  38 |               Privacy
  39 |             </Link>
  40 |             <Link href="/terms" className="text-sm text-muted-foreground hover:text-foreground">
  41 |               Terms
  42 |             </Link>
  43 |           </div>
  44 |           <div className="flex flex-col space-y-4">
  45 |             <h3 className="text-lg font-semibold">Connect</h3>
  46 |             <div className="flex space-x-4">
  47 |               <Link
  48 |                 href="https://twitter.com"
  49 |                 className="text-muted-foreground hover:text-foreground"
  50 |               >
  51 |                 <Twitter className="h-5 w-5" />
  52 |               </Link>
  53 |               <Link
  54 |                 href="https://github.com"
  55 |                 className="text-muted-foreground hover:text-foreground"
  56 |               >
  57 |                 <Github className="h-5 w-5" />
  58 |               </Link>
  59 |             </div>
  60 |           </div>
  61 |         </div>
  62 |         <div className="mt-8 border-t pt-8">
  63 |           <div className="flex flex-col items-center justify-between gap-4 md:flex-row">
  64 |             <div className="flex items-center space-x-2">
  65 |               <span className="font-bold">Automai</span>
  66 |               <span className="text-sm text-muted-foreground">Automate your testing workflow</span>
  67 |             </div>
  68 |             <p className="text-sm text-muted-foreground">
  69 |               © {new Date().getFullYear()} Automai. All rights reserved.
  70 |             </p>
  71 |           </div>
  72 |         </div>
  73 |       </div>
  74 |     </footer>
  75 |   );
  76 | }

```

`/workspaces/automai/src/components/layout/TopNav.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import * as React from 'react';
   4 | 
   5 | import { TeamSwitcher } from '@/components/layout/TeamSwitcher';
   6 | import { sidebarData } from '@/components/layout/data/sidebarData';
   7 | 
   8 | export function TopNav() {
   9 |   return (
  10 |     <div className="fixed top-0 left-0 right-0 z-50 flex h-16 items-center border-b bg-background/95 px-4 backdrop-blur supports-[backdrop-filter]:bg-background/60">
  11 |       <TeamSwitcher teams={sidebarData.teams} />
  12 |       <div className="flex flex-1" />
  13 |     </div>
  14 |   );
  15 | }

```

`/workspaces/automai/src/components/layout/NavUser.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { User } from 'lucide-react';
   4 | import Image from 'next/image';
   5 | import { useParams, useRouter } from 'next/navigation';
   6 | 
   7 | import { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from '@/components/sidebar';
   8 | import {
   9 |   DropdownMenu,
  10 |   DropdownMenuContent,
  11 |   DropdownMenuItem,
  12 |   DropdownMenuLabel,
  13 |   DropdownMenuSeparator,
  14 |   DropdownMenuTrigger,
  15 | } from '@/components/shadcn/dropdown-menu';
  16 | import { useAuth } from '@/hooks/useAuth';
  17 | import { cn } from '@/lib/utils';
  18 | 
  19 | interface NavUserProps {
  20 |   user: {
  21 |     name: string;
  22 |     email: string;
  23 |     avatar?: string;
  24 |   };
  25 | }
  26 | 
  27 | export function NavUser({ user }: NavUserProps) {
  28 |   const router = useRouter();
  29 |   const params = useParams();
  30 |   const locale = params.locale as string;
  31 |   const tenant = params.tenant as string;
  32 |   const { signOut } = useAuth();
  33 |   const { open } = useSidebar();
  34 |   const isCollapsed = !open;
  35 | 
  36 |   const handleSignOut = async () => {
  37 |     const formData = new FormData();
  38 |     formData.append('locale', locale);
  39 |     signOut(formData);
  40 |   };
  41 | 
  42 |   return (
  43 |     <SidebarMenu className="w-full max-w-[180px] mx-auto">
  44 |       <SidebarMenuItem className="w-full">
  45 |         <DropdownMenu>
  46 |           <DropdownMenuTrigger asChild>
  47 |             <SidebarMenuButton
  48 |               size={isCollapsed ? "sm" : "default"}
  49 |               className={cn(
  50 |                 "data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground",
  51 |                 isCollapsed ? "justify-center py-1" : "py-1.5 px-2 w-full max-w-[180px]"
  52 |               )}
  53 |             >
  54 |               <div className="flex h-6 w-6 shrink-0 items-center justify-center rounded-full border bg-background">
  55 |                 {user.avatar ? (
  56 |                   <Image
  57 |                     src={user.avatar}
  58 |                     alt={user.name}
  59 |                     width={24}
  60 |                     height={24}
  61 |                     className="h-6 w-6 rounded-full"
  62 |                   />
  63 |                 ) : (
  64 |                   <User className="h-3 w-3 text-foreground" />
  65 |                 )}
  66 |               </div>
  67 |               {!isCollapsed && (
  68 |                 <div className="grid flex-1 text-left text-xs leading-tight ml-2 max-w-[120px]">
  69 |                   <span className="font-semibold truncate">{user.name}</span>
  70 |                 </div>
  71 |               )}
  72 |             </SidebarMenuButton>
  73 |           </DropdownMenuTrigger>
  74 |           <DropdownMenuContent align="start" className="w-48">
  75 |             <DropdownMenuLabel className="text-xs">My Account</DropdownMenuLabel>
  76 |             <DropdownMenuSeparator />
  77 |             <DropdownMenuItem onClick={() => router.push(`/${locale}/${tenant}/profile`)} className="text-xs">
  78 |               Profile
  79 |             </DropdownMenuItem>
  80 |             <DropdownMenuItem onClick={() => router.push(`/${locale}/${tenant}/settings`)} className="text-xs">
  81 |               Settings
  82 |             </DropdownMenuItem>
  83 |             <DropdownMenuSeparator />
  84 |             <DropdownMenuItem onClick={handleSignOut} className="text-xs">
  85 |               Sign out
  86 |             </DropdownMenuItem>
  87 |           </DropdownMenuContent>
  88 |         </DropdownMenu>
  89 |       </SidebarMenuItem>
  90 |     </SidebarMenu>
  91 |   );
  92 | }

```

`/workspaces/automai/src/components/layout/NavGroup.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { ChevronDown } from 'lucide-react';
   4 | import Link from 'next/link';
   5 | import { usePathname, useParams } from 'next/navigation';
   6 | import * as React from 'react';
   7 | 
   8 | import {
   9 |   SidebarGroup,
  10 |   SidebarGroupContent,
  11 |   SidebarGroupLabel,
  12 |   SidebarMenu,
  13 |   SidebarMenuItem,
  14 |   SidebarMenuButton,
  15 |   SidebarMenuSub,
  16 |   SidebarMenuSubButton,
  17 |   useSidebar,
  18 | } from '@/components/sidebar';
  19 | import { ScrollArea } from '@/components/shadcn/scroll-area';
  20 | import { useRole } from '@/context/RoleContext';
  21 | import { cn } from '@/lib/utils';
  22 | 
  23 | interface NavGroupProps {
  24 |   title: string;
  25 |   items: {
  26 |     title: string;
  27 |     href: string;
  28 |     icon: any;
  29 |     roles?: string[];
  30 |     items?: {
  31 |       title: string;
  32 |       href: string;
  33 |       icon: any;
  34 |       roles?: string[];
  35 |     }[];
  36 |   }[];
  37 | }
  38 | 
  39 | // Wrap the component with React.memo to prevent unnecessary re-renders
  40 | const NavGroup = React.memo(function NavGroup({ title, items }: NavGroupProps) {
  41 |   const pathname = usePathname();
  42 |   const params = useParams();
  43 |   const { role } = useRole();
  44 |   const { open } = useSidebar();
  45 |   const isCollapsed = !open;
  46 |   
  47 |   // Use useRef for expandedItems to avoid unnecessary re-renders
  48 |   const expandedItemsRef = React.useRef<Record<string, boolean>>({});
  49 |   
  50 |   const isActive = React.useCallback((href: string) => {
  51 |     return pathname === `/${params.locale as string}/${params.tenant as string}${href}`;
  52 |   }, [pathname, params.locale, params.tenant]);
  53 | 
  54 |   const toggleSubmenu = React.useCallback((href: string) => {
  55 |     expandedItemsRef.current = {
  56 |       ...expandedItemsRef.current,
  57 |       [href]: !expandedItemsRef.current[href],
  58 |     };
  59 |     // Force update to reflect changes
  60 |     setForceUpdate(prev => !prev);
  61 |   }, []);
  62 |   
  63 |   // Use a state to force update when expandedItems changes
  64 |   const [forceUpdate, setForceUpdate] = React.useState(false);
  65 | 
  66 |   // Filter items based on role - memoize this calculation
  67 |   const filteredItems = React.useMemo(() => items.filter((item) => {
  68 |     if (!item.roles) return true;
  69 |     return item.roles.includes(role);
  70 |   }), [items, role]);
  71 | 
  72 |   return (
  73 |     <SidebarGroup>
  74 |       {!isCollapsed && (
  75 |         <SidebarGroupLabel className="text-gray-500 font-medium px-2 py-0.5 text-xs">
  76 |           {title}
  77 |         </SidebarGroupLabel>
  78 |       )}
  79 |       <SidebarGroupContent className={cn("py-0.5", isCollapsed && "mt-1.5")}>
  80 |         <ScrollArea className="h-full">
  81 |           <SidebarMenu>
  82 |             {filteredItems.map((item) => {
  83 |               const Icon = item.icon;
  84 |               const active = isActive(item.href);
  85 |               const hasSubmenu = item.items && item.items.length > 0;
  86 |               const isExpanded = expandedItemsRef.current[item.href];
  87 | 
  88 |               // Filter submenu items based on role
  89 |               const filteredSubItems = item.items?.filter((subItem) => {
  90 |                 if (!subItem.roles) return true;
  91 |                 return subItem.roles.includes(role);
  92 |               });
  93 | 
  94 |               // Skip rendering if no accessible submenu items
  95 |               if (hasSubmenu && (!filteredSubItems || filteredSubItems.length === 0)) {
  96 |                 return null;
  97 |               }
  98 | 
  99 |               return (
 100 |                 <SidebarMenuItem key={item.href}>
 101 |                   {hasSubmenu ? (
 102 |                     <SidebarMenuButton
 103 |                       isActive={active}
 104 |                       tooltip={item.title}
 105 |                       onClick={() => toggleSubmenu(item.href)}
 106 |                       className="hover:bg-accent/50 data-[active=true]:bg-accent/50"
 107 |                     >
 108 |                       <Icon className="h-4 w-4" />
 109 |                       <span>{item.title}</span>
 110 |                       <ChevronDown
 111 |                         className={cn(
 112 |                           'ml-auto h-4 w-4 transition-transform duration-200',
 113 |                           isExpanded && 'transform rotate-180',
 114 |                         )}
 115 |                       />
 116 |                     </SidebarMenuButton>
 117 |                   ) : (
 118 |                     <SidebarMenuButton
 119 |                       asChild
 120 |                       isActive={active}
 121 |                       tooltip={item.title}
 122 |                       className="hover:bg-accent/50 data-[active=true]:bg-accent/50"
 123 |                     >
 124 |                       <Link
 125 |                         href={`/${params.locale as string}/${params.tenant as string}${item.href}`}
 126 |                       >
 127 |                         <Icon className="h-4 w-4" />
 128 |                         <span>{item.title}</span>
 129 |                       </Link>
 130 |                     </SidebarMenuButton>
 131 |                   )}
 132 | 
 133 |                   {hasSubmenu && filteredSubItems && (
 134 |                     <SidebarMenuSub
 135 |                       className={cn(
 136 |                         'transition-all duration-200 ease-in-out',
 137 |                         !isExpanded && 'hidden',
 138 |                       )}
 139 |                     >
 140 |                       {filteredSubItems.map((subItem) => {
 141 |                         const SubIcon = subItem.icon;
 142 |                         const isSubActive = isActive(subItem.href);
 143 | 
 144 |                         return (
 145 |                           <SidebarMenuSubButton
 146 |                             key={subItem.href}
 147 |                             asChild
 148 |                             isActive={isSubActive}
 149 |                             className="hover:bg-accent/50 data-[active=true]:bg-accent/50"
 150 |                           >
 151 |                             <Link
 152 |                               href={`/${params.locale as string}/${params.tenant as string}${subItem.href}`}
 153 |                             >
 154 |                               <SubIcon className="h-4 w-4" />
 155 |                               <span>{subItem.title}</span>
 156 |                             </Link>
 157 |                           </SidebarMenuSubButton>
 158 |                         );
 159 |                       })}
 160 |                     </SidebarMenuSub>
 161 |                   )}
 162 |                 </SidebarMenuItem>
 163 |               );
 164 |             })}
 165 |           </SidebarMenu>
 166 |         </ScrollArea>
 167 |       </SidebarGroupContent>
 168 |     </SidebarGroup>
 169 |   );
 170 | });
 171 | 
 172 | // Export the memoized component
 173 | export { NavGroup };

```

`/workspaces/automai/src/components/layout/UpgradePrompt.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useRouter } from 'next/navigation';
   4 | import { Button } from '@/components/shadcn/button';
   5 | import { useAuth } from '@/hooks/useAuth';
   6 | 
   7 | interface UpgradePromptProps {
   8 |   feature: string;
   9 |   className?: string;
  10 | }
  11 | 
  12 | export function UpgradePrompt({ feature, className = '' }: UpgradePromptProps) {
  13 |   const { user } = useAuth();
  14 |   const router = useRouter();
  15 | 
  16 |   if (!user) return null;
  17 | 
  18 |   // Get the user's plan from metadata
  19 |   const userPlan = (user.user_metadata as any)?.plan || 'free';
  20 |   
  21 |   // Simple message based on feature
  22 |   const message = {
  23 |     title: `Upgrade to access ${feature}`,
  24 |     description: `This feature is only available on higher plans. Upgrade now to unlock ${feature} and more premium features.`
  25 |   };
  26 | 
  27 |   return (
  28 |     <div className={`p-4 bg-muted/50 rounded-lg ${className}`}>
  29 |       <h3 className="text-lg font-semibold mb-2">{message.title}</h3>
  30 |       <p className="text-sm text-muted-foreground mb-4">{message.description}</p>
  31 |       <Button onClick={() => router.push('/billing')}>Upgrade Now</Button>
  32 |     </div>
  33 |   );
  34 | }

```

`/workspaces/automai/src/components/layout/Main.tsx`:

```tsx
   1 | import React from 'react';
   2 | 
   3 | import { cn } from '@/lib/utils';
   4 | 
   5 | interface MainProps extends React.HTMLAttributes<HTMLElement> {
   6 |   fixed?: boolean;
   7 |   ref?: React.Ref<HTMLElement>;
   8 | }
   9 | 
  10 | export const Main = ({ fixed, ...props }: MainProps) => {
  11 |   return (
  12 |     <main
  13 |       className={cn(
  14 |         'peer-[.header-fixed]/header:mt-16',
  15 |         'px-4 py-6',
  16 |         fixed && 'fixed-main flex flex-grow flex-col overflow-hidden',
  17 |       )}
  18 |       {...props}
  19 |     />
  20 |   );
  21 | };
  22 | 
  23 | Main.displayName = 'Main';

```

`/workspaces/automai/src/components/layout/TeamSwitcher.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { ChevronDown, Code2, Building2, Factory } from 'lucide-react';
   4 | import * as React from 'react';
   5 | 
   6 | import { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from '@/components/sidebar';
   7 | import {
   8 |   DropdownMenu,
   9 |   DropdownMenuContent,
  10 |   DropdownMenuItem,
  11 |   DropdownMenuLabel,
  12 |   DropdownMenuSeparator,
  13 |   DropdownMenuTrigger,
  14 | } from '@/components/shadcn/dropdown-menu';
  15 | import { useRole } from '@/context/RoleContext';
  16 | import { cn } from '@/lib/utils';
  17 | 
  18 | // Define team type for consistency
  19 | type Team = {
  20 |   name: string;
  21 |   logo: React.ElementType;
  22 |   plan: string;
  23 | };
  24 | 
  25 | interface TeamSwitcherProps {
  26 |   teams?: Team[];
  27 | }
  28 | 
  29 | // Default teams if none provided
  30 | const defaultTeams: Team[] = [
  31 |   {
  32 |     name: 'Acme Inc',
  33 |     logo: Building2,
  34 |     plan: 'free',
  35 |   },
  36 |   {
  37 |     name: 'Monsters Inc',
  38 |     logo: Factory,
  39 |     plan: 'pro',
  40 |   },
  41 |   {
  42 |     name: 'Devs Inc',
  43 |     logo: Code2,
  44 |     plan: 'enterprise',
  45 |   },
  46 | ];
  47 | 
  48 | // Wrap the component with React.memo to prevent unnecessary re-renders
  49 | const TeamSwitcher = React.memo(function TeamSwitcher({ teams = defaultTeams }: TeamSwitcherProps) {
  50 |   const { open } = useSidebar();
  51 |   const { role } = useRole();
  52 |   const isCollapsed = !open;
  53 |   
  54 |   // Simply use the teams passed as props or the default teams
  55 |   const teamsToDisplay = teams || defaultTeams;
  56 |   
  57 |   // Set active team
  58 |   const [activeTeam, setActiveTeam] = React.useState<Team>(teamsToDisplay[0]);
  59 |   const Icon = activeTeam.logo;
  60 | 
  61 |   // We don't need any auth check - just always display the component
  62 |   
  63 |   // Show different UI based on sidebar state
  64 |   if (isCollapsed) {
  65 |     return (
  66 |       <div className="flex items-center justify-center p-1.5">
  67 |         <div className="flex h-7 w-7 items-center justify-center rounded-md border border-border bg-background">
  68 |           <Icon className="h-4 w-4" />
  69 |         </div>
  70 |       </div>
  71 |     );
  72 |   }
  73 | 
  74 |   return (
  75 |     <DropdownMenu>
  76 |       <DropdownMenuTrigger asChild>
  77 |         <button className="flex w-full items-center justify-between rounded-lg border border-border p-2 hover:bg-accent transition-colors">
  78 |           <div className="flex items-center gap-2">
  79 |             <div className="flex h-5 w-5 shrink-0 items-center justify-center rounded-md border border-border bg-background">
  80 |               <Icon className="h-3.5 w-3.5" />
  81 |             </div>
  82 |             <span className="text-xs font-medium">{activeTeam.name}</span>
  83 |           </div>
  84 |           <ChevronDown className="h-3.5 w-3.5 text-muted-foreground" />
  85 |         </button>
  86 |       </DropdownMenuTrigger>
  87 |       <DropdownMenuContent className="w-56" align="start" side="right" forceMount>
  88 |         <DropdownMenuLabel>Switch team</DropdownMenuLabel>
  89 |         <DropdownMenuSeparator />
  90 |         {teamsToDisplay.map((team: Team) => (
  91 |           <DropdownMenuItem
  92 |             key={team.name}
  93 |             onClick={() => setActiveTeam(team)}
  94 |             className={cn(
  95 |               "cursor-pointer",
  96 |               team.name === activeTeam.name ? "bg-accent text-accent-foreground" : ""
  97 |             )}
  98 |           >
  99 |             <div className="flex h-6 w-6 shrink-0 items-center justify-center rounded-md border border-border bg-background mr-2">
 100 |               <team.logo className="h-4 w-4" />
 101 |             </div>
 102 |             <span>{team.name}</span>
 103 |             {team.plan && (
 104 |               <span className="ml-auto text-xs text-muted-foreground">{team.plan}</span>
 105 |             )}
 106 |           </DropdownMenuItem>
 107 |         ))}
 108 |       </DropdownMenuContent>
 109 |     </DropdownMenu>
 110 |   );
 111 | });
 112 | 
 113 | // Export the memoized component
 114 | export { TeamSwitcher };

```

`/workspaces/automai/src/components/layout/data/sidebarData.ts`:

```ts
   1 | /* eslint-disable */
   2 | import {
   3 |   LayoutDashboard,
   4 |   Code2,
   5 |   Rocket,
   6 |   Monitor,
   7 |   BarChart3,
   8 |   Settings,
   9 |   FileCode,
  10 |   TestTube,
  11 |   Users,
  12 |   Building,
  13 |   Factory,
  14 |   Server,
  15 |   GitBranch,
  16 | } from 'lucide-react';
  17 | import { Role } from '@/types/user';
  18 | 
  19 | export type SidebarData = {
  20 |   user: {
  21 |     name: string;
  22 |     email: string;
  23 |     avatar?: string;
  24 |   };
  25 |   teams: {
  26 |     name: string;
  27 |     logo: any;
  28 |     plan: string;
  29 |   }[];
  30 |   navGroups: {
  31 |     title: string;
  32 |     items: {
  33 |       title: string;
  34 |       href: string;
  35 |       icon: any;
  36 |       roles?: Role[];
  37 |       items?: {
  38 |         title: string;
  39 |         href: string;
  40 |         icon: any;
  41 |         roles?: Role[];
  42 |       }[];
  43 |     }[];
  44 |   }[];
  45 | };
  46 | 
  47 | export const sidebarData: SidebarData = {
  48 |   user: {
  49 |     name: 'User',
  50 |     email: 'user@example.com',
  51 |   },
  52 |   teams: [
  53 |     {
  54 |       name: 'TeamA',
  55 |       logo: Code2,
  56 |       plan: 'fr',
  57 |     },
  58 |     {
  59 |       name: 'Team B',
  60 |       logo: Building,
  61 |       plan: 'swi',
  62 |     },
  63 |     {
  64 |       name: 'Team C',
  65 |       logo: Factory,
  66 |       plan: 'us',
  67 |     },
  68 |   ],
  69 |   navGroups: [
  70 |     {
  71 |       title: 'Overview',
  72 |       items: [
  73 |         {
  74 |           title: 'Dashboard',
  75 |           href: '/dashboard',
  76 |           icon: LayoutDashboard,
  77 |           roles: ['admin', 'developer', 'tester', 'viewer'],
  78 |         },
  79 |       ],
  80 |     },
  81 |     {
  82 |       title: 'Main',
  83 |       items: [
  84 |         {
  85 |           title: 'Development',
  86 |           href: '/development',
  87 |           icon: Code2,
  88 |           roles: ['admin', 'developer'],
  89 |           items: [
  90 |             { 
  91 |               title: 'Projects', 
  92 |               href: '/development/projects', 
  93 |               icon: FileCode,
  94 |               roles: ['admin', 'developer'],
  95 |             },
  96 |             { 
  97 |               title: 'Use Cases', 
  98 |               href: '/development/usecases', 
  99 |               icon: TestTube,
 100 |               roles: ['admin', 'developer'],
 101 |             },
 102 |           ],
 103 |         },
 104 |         {
 105 |           title: 'Repositories',
 106 |           href: '/repositories',
 107 |           icon: GitBranch,
 108 |           roles: ['admin', 'developer'],
 109 |         },
 110 |         {
 111 |           title: 'Tests',
 112 |           href: '/tests',
 113 |           icon: Rocket,
 114 |           roles: ['admin', 'developer', 'tester'],
 115 |         },
 116 |         {
 117 |           title: 'Reports',
 118 |           href: '/reports',
 119 |           icon: BarChart3,
 120 |           roles: ['admin', 'developer', 'tester', 'viewer'],
 121 |         },
 122 |       ],
 123 |     },
 124 |     {
 125 |       title: 'Environment',
 126 |       items: [
 127 |         {
 128 |           title: 'Devices',
 129 |           href: '/devices',
 130 |           icon: Monitor,
 131 |           roles: ['admin', 'developer', 'tester'],
 132 |         },
 133 |         {
 134 |           title: 'Hosts',
 135 |           href: '/hosts',
 136 |           icon: Server,
 137 |           roles: ['admin', 'developer', 'tester'],
 138 |         },
 139 |         {
 140 |           title: 'Deployment',
 141 |           href: '/deployment',
 142 |           icon: Rocket,
 143 |           roles: ['admin', 'developer', 'tester'],
 144 |         },
 145 |       ],
 146 |     },
 147 |     {
 148 |       title: 'Admin',
 149 |       items: [
 150 |         {
 151 |           title: 'Settings',
 152 |           href: '/settings',
 153 |           icon: Settings,
 154 |           roles: ['admin'],
 155 |         },
 156 |         {
 157 |           title: 'Team',
 158 |           href: '/team',
 159 |           icon: Users,
 160 |           roles: ['admin'],
 161 |         },
 162 |         {
 163 |           title: 'Billing',
 164 |           href: '/billing',
 165 |           icon: Building,
 166 |           roles: ['admin'],
 167 |         },
 168 |       ],
 169 |     },
 170 |   ],
 171 | };

```

`/workspaces/automai/src/components/layout/AppSidebar.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useEffect, useMemo } from 'react';
   4 | import { NavGroup } from '@/components/layout/NavGroup';
   5 | import { NavUser } from '@/components/layout/NavUser';
   6 | import { TeamSwitcher } from '@/components/layout/TeamSwitcher';
   7 | import {
   8 |   Sidebar,
   9 |   SidebarContent,
  10 |   SidebarFooter,
  11 |   SidebarHeader,
  12 |   SidebarRail,
  13 |   useSidebar,
  14 | } from '@/components/sidebar';
  15 | import { useRole } from '@/context/RoleContext';
  16 | import { useAuth } from '@/hooks/useAuth';
  17 | import { Role } from '@/types/user';
  18 | import * as React from 'react';
  19 | 
  20 | import { sidebarData } from './data/sidebarData';
  21 | 
  22 | // Wrap the component with React.memo to prevent unnecessary re-renders
  23 | const AppSidebar = React.memo(function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {
  24 |   const { user } = useAuth();
  25 |   const { role } = useRole();
  26 |   const { open } = useSidebar();
  27 |   const isCollapsed = !open;
  28 | 
  29 |   // Always call useMemo hooks in the same order, regardless of conditions
  30 |   // Create empty/default values for the memoized data when user is not available
  31 |   const userRole = role as Role;
  32 |   
  33 |   // Filter out empty sections based on user role - memoize this calculation
  34 |   const filteredNavGroups = useMemo(() => {
  35 |     // If no user, show nav items that an admin would see
  36 |     if (!user) {
  37 |       return sidebarData.navGroups.filter((group) => {
  38 |         // Show items accessible to admins
  39 |         const accessibleItems = group.items.filter((item) => {
  40 |           if (!item.roles) return true;
  41 |           // Show if admin has access
  42 |           return item.roles.includes('admin');
  43 |         });
  44 |         return accessibleItems.length > 0;
  45 |       });
  46 |     }
  47 |     
  48 |     // Existing logic for authenticated users
  49 |     return sidebarData.navGroups.filter((group) => {
  50 |       // Filter items in each group based on user role
  51 |       const accessibleItems = group.items.filter((item) => {
  52 |         if (!item.roles) return true;
  53 |         const hasAccess = item.roles.includes(userRole);
  54 |         return hasAccess;
  55 |       });
  56 | 
  57 |       // Only include groups that have at least one accessible item
  58 |       return accessibleItems.length > 0;
  59 |     });
  60 |   }, [user, userRole, sidebarData.navGroups]);
  61 | 
  62 |   // Get user avatar from metadata
  63 |   const avatarUrl = user?.user_metadata && (user.user_metadata as any)?.avatar_url || '';
  64 | 
  65 |   // IMPORTANT: Debug with unique timestamp to avoid cache issues - 2025-03-09-23:45
  66 |   console.log('🔍 DEBUG USER DATA - UNIQUE LOG');
  67 |   console.log('User object:', user);
  68 |   console.log('User metadata:', user?.user_metadata);
  69 |   if (user?.user_metadata) {
  70 |     console.log('Direct name in metadata:', user.user_metadata.name);
  71 |     console.log('Full name in metadata:', user.user_metadata.full_name);
  72 |     console.log('Raw user meta data:', (user.user_metadata as any)?.raw_user_meta_data);
  73 |     console.log('Preferred username:', user.user_metadata.preferred_username);
  74 |   }
  75 |   console.log('Name field directly on user:', user?.name);
  76 |   
  77 |   // Prepare user data for NavUser - memoize this calculation
  78 |   const userData = useMemo(() => {
  79 |     if (!user) return { name: 'Guest', email: '', avatar: undefined };
  80 |     
  81 |     // Handle different possible metadata structures from Supabase
  82 |     const userMetadata = user.user_metadata || {};
  83 |     
  84 |     // First check for name directly on user object (might be added by our code)
  85 |     let userName = user.name;
  86 |     
  87 |     // If no name directly on user, try various metadata locations
  88 |     if (!userName) {
  89 |       userName = 
  90 |         // Try direct access to metadata
  91 |         userMetadata.name || 
  92 |         // Try full_name which is sometimes used by OAuth providers
  93 |         userMetadata.full_name || 
  94 |         // Try to get it from raw metadata if it's nested
  95 |         (userMetadata as any)?.raw_user_meta_data?.name ||
  96 |         // Try preferred_username which some providers use
  97 |         userMetadata.preferred_username ||
  98 |         // Fall back to email username
  99 |         user.email?.split('@')[0] || 
 100 |         // Final fallback
 101 |         'Guest';
 102 |     }
 103 |     
 104 |     console.log('Resolved userName:', userName);
 105 |     
 106 |     return {
 107 |       name: userName,
 108 |       email: user.email || '',
 109 |       avatar: avatarUrl,
 110 |     };
 111 |   }, [user, avatarUrl]);
 112 | 
 113 |   // Always render the sidebar with content, no more loading state for unauthenticated users
 114 |   // Updated version - March 9, 2025
 115 |   return (
 116 |     <Sidebar 
 117 |       collapsible="icon" 
 118 |       variant="floating" 
 119 |       className="fixed left-0 top-0 z-30"
 120 |       {...props}
 121 |     >
 122 |       {!isCollapsed && (
 123 |         <SidebarHeader className="p-1.5">
 124 |           <TeamSwitcher />
 125 |         </SidebarHeader>
 126 |       )}
 127 |       <SidebarContent className={isCollapsed ? "pt-4" : "pt-2"}>
 128 |         {filteredNavGroups.map((group) => (
 129 |           <NavGroup key={group.title} {...group} />
 130 |         ))}
 131 |       </SidebarContent>
 132 |       <SidebarFooter className="pb-2">
 133 |         <NavUser user={userData} />
 134 |       </SidebarFooter>
 135 |       <SidebarRail />
 136 |     </Sidebar>
 137 |   );
 138 | });
 139 | 
 140 | // Export the memoized component
 141 | export { AppSidebar };

```

`/workspaces/automai/src/components/layout/EmptyState.tsx`:

```tsx
   1 | import React from 'react';
   2 | 
   3 | interface EmptyStateProps {
   4 |   title: string;
   5 |   description: string;
   6 |   icon?: React.ReactNode;
   7 |   action?: React.ReactNode;
   8 | }
   9 | 
  10 | export function EmptyState({ title, description, icon, action }: EmptyStateProps) {
  11 |   return (
  12 |     <div className="flex flex-col items-center justify-center py-12 px-4 text-center">
  13 |       {icon && <div className="rounded-full bg-muted p-4 mb-4">{icon}</div>}
  14 |       <h3 className="text-lg font-medium mb-2">{title}</h3>
  15 |       <p className="text-sm text-muted-foreground mb-6 max-w-md">{description}</p>
  16 |       {action && <div>{action}</div>}
  17 |     </div>
  18 |   );
  19 | }

```

`/workspaces/automai/src/components/layout/PageHeader.tsx`:

```tsx
   1 | import React from 'react';
   2 | 
   3 | interface PageHeaderProps {
   4 |   title: string;
   5 |   description?: string;
   6 |   icon?: React.ReactNode;
   7 |   children?: React.ReactNode;
   8 | }
   9 | 
  10 | export function PageHeader({ title, description, icon, children }: PageHeaderProps) {
  11 |   return (
  12 |     <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
  13 |       <div className="flex items-center gap-3">
  14 |         {icon && <div className="text-primary">{icon}</div>}
  15 |         <div>
  16 |           <h1 className="text-2xl font-bold">{title}</h1>
  17 |           {description && <p className="text-sm text-muted-foreground">{description}</p>}
  18 |         </div>
  19 |       </div>
  20 |       {children && <div className="flex-shrink-0">{children}</div>}
  21 |     </div>
  22 |   );
  23 | }

```

`/workspaces/automai/src/components/profile/ProfileContent.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { ArrowLeft } from 'lucide-react';
   4 | import { useParams, useRouter } from 'next/navigation';
   5 | import { useTranslations } from 'next-intl';
   6 | import { useState, useEffect } from 'react';
   7 | 
   8 | import { Button } from '@/components/shadcn/button';
   9 | import { Input } from '@/components/shadcn/input';
  10 | import { useAuth } from '@/hooks/useAuth';
  11 | import { useProfile } from '@/hooks/useProfile';
  12 | 
  13 | export function ProfileContent() {
  14 |   const { user, loading, refreshUser } = useAuth();
  15 |   const { updateProfile, isUpdating } = useProfile();
  16 |   const t = useTranslations('Profile');
  17 |   const params = useParams();
  18 |   const locale = params.locale as string;
  19 |   const tenant = params.tenant as string | undefined;
  20 |   const [name, setName] = useState('');
  21 |   const router = useRouter();
  22 | 
  23 |   // Update name state when user data becomes available
  24 |   useEffect(() => {
  25 |     if (user) {
  26 |       // Extended debug logging - VERSION 2025-03-09
  27 |       console.log('🔍 PROFILE COMPONENT: Full user object:', user);
  28 |       console.log('🔍 PROFILE COMPONENT: User metadata:', user.user_metadata);
  29 |       console.log('🔍 PROFILE COMPONENT: Direct name on metadata:', user.user_metadata?.name);
  30 |       console.log('🔍 PROFILE COMPONENT: Direct name on user:', user.name);
  31 |       
  32 |       // Check all possible name locations
  33 |       const possibleNames = {
  34 |         'user.name': user.name,
  35 |         'user.user_metadata.name': user.user_metadata?.name,
  36 |         'user.user_metadata.full_name': user.user_metadata?.full_name,
  37 |         'user.user_metadata.raw_user_meta_data?.name': (user.user_metadata as any)?.raw_user_meta_data?.name,
  38 |         'user.user_metadata.preferred_username': user.user_metadata?.preferred_username,
  39 |         'email username': user.email?.split('@')[0]
  40 |       };
  41 |       
  42 |       console.log('🔍 PROFILE COMPONENT: All possible name values:', possibleNames);
  43 |       
  44 |       // Use any available name with priority order
  45 |       const userName = user?.name || user?.user_metadata?.name || user?.user_metadata?.full_name || 
  46 |                       (user.user_metadata as any)?.raw_user_meta_data?.name || 
  47 |                       user?.user_metadata?.preferred_username || 
  48 |                       user?.email?.split('@')[0] || '';
  49 |       
  50 |       console.log('🔍 PROFILE COMPONENT: Selected username:', userName);
  51 |       setName(userName);
  52 |     }
  53 |   }, [user]);
  54 | 
  55 |   // Force refresh user data on component mount
  56 |   useEffect(() => {
  57 |     if (refreshUser) {
  58 |       console.log('Refreshing user data...');
  59 |       refreshUser();
  60 |     }
  61 |   }, [refreshUser]);
  62 | 
  63 |   const handleUpdateName = async () => {
  64 |     try {
  65 |       const formData = new FormData();
  66 |       formData.append('name', name);
  67 |       formData.append('locale', locale);
  68 |       await updateProfile(formData);
  69 |       if (refreshUser) {
  70 |         // Refresh user data after update
  71 |         await refreshUser();
  72 |       }
  73 |     } catch (error) {
  74 |       console.error('Error updating profile:', error);
  75 |     }
  76 |   };
  77 | 
  78 |   if (loading) {
  79 |     return (
  80 |       <div className="flex items-center justify-center min-h-screen">
  81 |         <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
  82 |       </div>
  83 |     );
  84 |   }
  85 | 
  86 |   if (!user) {
  87 |     return (
  88 |       <div className="flex items-center justify-center min-h-screen">
  89 |         <div className="text-center">
  90 |           <h2 className="text-xl font-semibold mb-4">{t('sessionExpired')}</h2>
  91 |           <p className="text-muted-foreground mb-4">{t('pleaseLogin')}</p>
  92 |           <Button onClick={() => {
  93 |             // Clear any stale authentication data
  94 |             document.cookie.split(";").forEach((c) => {
  95 |               document.cookie = c
  96 |                 .replace(/^ +/, "")
  97 |                 .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);
  98 |             });
  99 |             window.location.href = `/${locale}/login`;
 100 |           }}>{t('logIn')}</Button>
 101 |         </div>
 102 |       </div>
 103 |     );
 104 |   }
 105 | 
 106 |   return (
 107 |     <div className="container mx-auto px-4 py-8">
 108 |       <div className="flex justify-between items-center mb-6">
 109 |         <div className="flex items-center space-x-4">
 110 |           <Button variant="ghost" size="icon" onClick={() => router.back()} className="h-8 w-8">
 111 |             <ArrowLeft className="h-4 w-4" />
 112 |           </Button>
 113 |           <h1 className="text-3xl font-bold">{t('title')}</h1>
 114 |         </div>
 115 |       </div>
 116 | 
 117 |       <div className="grid gap-6">
 118 |         {/* Personal Information */}
 119 |         <div className="p-6 bg-card rounded-lg shadow">
 120 |           <h2 className="text-xl font-semibold mb-4">{t('personalInfo')}</h2>
 121 |           <div className="space-y-4">
 122 |             <div>
 123 |               <label className="text-sm font-medium">{t('name')}</label>
 124 |               <div className="flex gap-2 mt-1">
 125 |                 <Input
 126 |                   value={name}
 127 |                   onChange={(e) => setName(e.target.value)}
 128 |                   placeholder={t('enterName')}
 129 |                   className="max-w-md"
 130 |                 />
 131 |                 <Button 
 132 |                   onClick={handleUpdateName} 
 133 |                   disabled={isUpdating || name === (user.name || user.user_metadata?.name || '')}
 134 |                 >
 135 |                   {isUpdating ? t('updating') : t('update')}
 136 |                 </Button>
 137 |               </div>
 138 |             </div>
 139 |             <div>
 140 |               <label className="text-sm font-medium">{t('email')}</label>
 141 |               <p className="text-muted-foreground">{user.email}</p>
 142 |             </div>
 143 |             <div>
 144 |               <label className="text-sm font-medium">{t('plan')}</label>
 145 |               <p className="text-muted-foreground">{(user.user_metadata as any)?.plan || 'TRIAL'}</p>
 146 |             </div>
 147 |           </div>
 148 |         </div>
 149 | 
 150 |         {/* Account Settings */}
 151 |         <div className="p-6 bg-card rounded-lg shadow">
 152 |           <h2 className="text-xl font-semibold mb-4">{t('accountSettings')}</h2>
 153 |           <div className="space-y-4">
 154 |             <Button
 155 |               variant="outline"
 156 |               onClick={() => router.push(`/${locale}/${tenant || 'trial'}/settings`)}
 157 |             >
 158 |               {t('manageSettings')}
 159 |             </Button>
 160 |             {((user.user_metadata as any)?.plan !== 'ENTERPRISE') && (
 161 |               <Button
 162 |                 variant="outline"
 163 |                 onClick={() => router.push(`/${locale}/${tenant || 'trial'}/billing`)}
 164 |               >
 165 |                 {t('upgradePlan')}
 166 |               </Button>
 167 |             )}
 168 |           </div>
 169 |         </div>
 170 | 
 171 |         {/* Tenant Information (Enterprise only) */}
 172 |         {((user.user_metadata as any)?.plan === 'ENTERPRISE') && tenant && (
 173 |           <div className="p-6 bg-card rounded-lg shadow">
 174 |             <h2 className="text-xl font-semibold mb-4">{t('workspaceInfo')}</h2>
 175 |             <div className="space-y-4">
 176 |               <div>
 177 |                 <label className="text-sm font-medium">Workspace ID</label>
 178 |                 <p className="text-muted-foreground">{tenant}</p>
 179 |               </div>
 180 |               <Button
 181 |                 variant="outline"
 182 |                 onClick={() => (window.location.href = `/${locale}/${tenant}/team`)}
 183 |               >
 184 |                 {t('manageTeam')}
 185 |               </Button>
 186 |             </div>
 187 |           </div>
 188 |         )}
 189 |       </div>
 190 |     </div>
 191 |   );
 192 | }

```

`/workspaces/automai/src/components/profile/UserProfile.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { LogOut, Settings, User as UserIcon } from 'lucide-react';
   4 | import Image from 'next/image';
   5 | import { useRouter, useParams } from 'next/navigation';
   6 | import * as React from 'react';
   7 | 
   8 | import { Avatar, AvatarFallback, AvatarImage } from '@/components/shadcn/avatar';
   9 | import { Button } from '@/components/shadcn/button';
  10 | import {
  11 |   DropdownMenu,
  12 |   DropdownMenuContent,
  13 |   DropdownMenuItem,
  14 |   DropdownMenuLabel,
  15 |   DropdownMenuSeparator,
  16 |   DropdownMenuShortcut,
  17 |   DropdownMenuTrigger,
  18 | } from '@/components/shadcn/dropdown-menu';
  19 | import { useAuth } from '@/hooks/useAuth';
  20 | 
  21 | interface UserProfileProps {
  22 |   tenant?: string;
  23 | }
  24 | 
  25 | export function UserProfile({ tenant: propTenant }: UserProfileProps) {
  26 |   const router = useRouter();
  27 |   const params = useParams();
  28 |   const { user, signOut } = useAuth();
  29 |   const locale = params.locale as string || 'en';
  30 |   const [imageError, setImageError] = React.useState(false);
  31 |   
  32 |   // Use tenant from props if available, otherwise use from URL params as fallback
  33 |   const tenant = propTenant || (params.tenant as string) || 'trial';
  34 |   
  35 |   // Get user's initials for avatar fallback
  36 |   const getInitials = (name: string) => {
  37 |     return name
  38 |       .split(' ')
  39 |       .map((part) => part[0])
  40 |       .join('')
  41 |       .toUpperCase();
  42 |   };
  43 | 
  44 |   // Enhanced metadata handling
  45 |   const metadata = user?.user_metadata || {};
  46 |   
  47 |   // Try all possible name fields
  48 |   const userName = 
  49 |     // Try direct metadata fields
  50 |     metadata.name || 
  51 |     metadata.full_name || 
  52 |     // Try raw metadata if nested
  53 |     (metadata as any)?.raw_user_meta_data?.name ||
  54 |     // Try preferred_username which some providers use
  55 |     metadata.preferred_username ||
  56 |     // Users with name directly on user object (from our enhancements)
  57 |     user?.name ||
  58 |     // Fall back to email username
  59 |     user?.email?.split('@')[0] || 
  60 |     // Final fallback
  61 |     'Guest';
  62 |   
  63 |   const avatarSrc = user && (metadata as any)?.avatar_url || '/avatars/default.svg';
  64 |   
  65 |   const handleSignOut = () => {
  66 |     const formData = new FormData();
  67 |     formData.append('locale', locale);
  68 |     signOut(formData);
  69 |   };
  70 | 
  71 |   return (
  72 |     <DropdownMenu>
  73 |       <DropdownMenuTrigger asChild>
  74 |         <Button 
  75 |           variant="ghost" 
  76 |           className="relative h-8 w-8 rounded-full hover:bg-accent hover:text-accent-foreground"
  77 |         >
  78 |           <Avatar className="h-8 w-8 border border-border dark:border-gray-600 shadow-sm">
  79 |             <AvatarImage
  80 |               src={avatarSrc}
  81 |               alt={userName}
  82 |               onError={() => setImageError(true)}
  83 |             />
  84 |             <AvatarFallback className="bg-accent text-accent-foreground dark:bg-gray-700 dark:text-gray-200">
  85 |               {userName ? getInitials(userName) : <UserIcon className="h-4 w-4" />}
  86 |             </AvatarFallback>
  87 |           </Avatar>
  88 |         </Button>
  89 |       </DropdownMenuTrigger>
  90 |       <DropdownMenuContent className="w-56" align="end" forceMount>
  91 |         <DropdownMenuLabel className="font-normal">
  92 |           <div className="flex flex-col space-y-1">
  93 |             <p className="text-sm font-medium leading-none">{userName}</p>
  94 |             {user && <p className="text-xs leading-none text-muted-foreground">{user.email}</p>}
  95 |           </div>
  96 |         </DropdownMenuLabel>
  97 |         <DropdownMenuSeparator />
  98 |         <DropdownMenuItem onClick={() => router.push(`/${locale}/${tenant}/profile`)}>
  99 |           <UserIcon className="mr-2 h-4 w-4" />
 100 |           Profile
 101 |           <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>
 102 |         </DropdownMenuItem>
 103 |         <DropdownMenuItem onClick={() => router.push(`/${locale}/${tenant}/settings`)}>
 104 |           <Settings className="mr-2 h-4 w-4" />
 105 |           Settings
 106 |           <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>
 107 |         </DropdownMenuItem>
 108 |         <DropdownMenuSeparator />
 109 |         <DropdownMenuItem 
 110 |           onClick={handleSignOut}
 111 |           className="text-red-500 focus:bg-red-50 focus:text-red-600 dark:focus:bg-red-950 dark:focus:text-red-400"
 112 |         >
 113 |           <LogOut className="mr-2 h-4 w-4" />
 114 |           Log out
 115 |           <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>
 116 |         </DropdownMenuItem>
 117 |       </DropdownMenuContent>
 118 |     </DropdownMenu>
 119 |   );
 120 | }

```

`/workspaces/automai/src/components/profile/ProfileDropdown.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useAuth } from '@/hooks/useAuth';
   4 | import { useParams, useRouter } from 'next/navigation';
   5 | import * as React from 'react';
   6 | import { useTranslations } from 'next-intl';
   7 | 
   8 | import { Avatar, AvatarFallback, AvatarImage } from '@/components/shadcn/avatar';
   9 | import { Button } from '@/components/shadcn/button';
  10 | import {
  11 |   DropdownMenu,
  12 |   DropdownMenuContent,
  13 |   DropdownMenuGroup,
  14 |   DropdownMenuItem,
  15 |   DropdownMenuLabel,
  16 |   DropdownMenuSeparator,
  17 |   DropdownMenuShortcut,
  18 |   DropdownMenuTrigger,
  19 | } from '@/components/shadcn/dropdown-menu';
  20 | import { LogOut, Settings, User } from 'lucide-react';
  21 | 
  22 | export function ProfileDropdown() {
  23 |   const { user, signOut } = useAuth();
  24 |   const router = useRouter();
  25 |   const params = useParams();
  26 |   const locale = params.locale as string;
  27 |   const tenant = params.tenant as string;
  28 |   const t = useTranslations();
  29 | 
  30 |   // Create a wrapper function for signOut
  31 |   const handleSignOut = () => {
  32 |     const formData = new FormData();
  33 |     formData.append('locale', locale);
  34 |     signOut(formData);
  35 |   };
  36 | 
  37 |   if (!user) return null;
  38 | 
  39 |   // Get user avatar image
  40 |   const userImage = (user.user_metadata as any)?.avatar_url || '/avatars/01.svg';
  41 |   
  42 |   // Get user metadata with better handling of different structures
  43 |   const metadata = user.user_metadata || {};
  44 |   
  45 |   // Get user display name using various possible fields
  46 |   const userName = 
  47 |     // Try direct metadata fields
  48 |     metadata.name || 
  49 |     metadata.full_name || 
  50 |     // Try raw metadata if nested
  51 |     (metadata as any)?.raw_user_meta_data?.name ||
  52 |     // Try preferred_username which some providers use
  53 |     metadata.preferred_username ||
  54 |     // Users with name directly on user object (from our enhancements)
  55 |     user.name ||
  56 |     // Fall back to email username
  57 |     user.email?.split('@')[0] || 
  58 |     // Final fallback
  59 |     'Guest';
  60 |   
  61 |   // Get user initials for avatar fallback
  62 |   const userInitials = userName
  63 |     .split(' ')
  64 |     .map((part) => part[0])
  65 |     .join('')
  66 |     .toUpperCase();
  67 | 
  68 |   return (
  69 |     <DropdownMenu>
  70 |       <DropdownMenuTrigger asChild>
  71 |         <Button variant="ghost" className="relative h-8 w-8 rounded-full">
  72 |           <Avatar className="h-8 w-8">
  73 |             <AvatarImage src={userImage} alt={userName} />
  74 |             <AvatarFallback>{userInitials}</AvatarFallback>
  75 |           </Avatar>
  76 |         </Button>
  77 |       </DropdownMenuTrigger>
  78 |       <DropdownMenuContent className="w-56" align="end" forceMount>
  79 |         <DropdownMenuLabel className="font-normal">
  80 |           <div className="flex flex-col space-y-1">
  81 |             <p className="text-sm font-medium leading-none">{userName}</p>
  82 |             <p className="text-xs leading-none text-muted-foreground">{user.email}</p>
  83 |           </div>
  84 |         </DropdownMenuLabel>
  85 |         <DropdownMenuSeparator />
  86 |         <DropdownMenuGroup>
  87 |           <DropdownMenuItem onClick={() => router.push(`/${locale}/${tenant}/profile`)}>
  88 |             <User className="mr-2 h-4 w-4" />
  89 |             <span>{t('Profile.profile')}</span>
  90 |             <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>
  91 |           </DropdownMenuItem>
  92 |           <DropdownMenuItem onClick={() => router.push(`/${locale}/${tenant}/settings`)}>
  93 |             <Settings className="mr-2 h-4 w-4" />
  94 |             <span>{t('Settings.title')}</span>
  95 |             <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>
  96 |           </DropdownMenuItem>
  97 |         </DropdownMenuGroup>
  98 |         <DropdownMenuSeparator />
  99 |         <DropdownMenuItem onClick={handleSignOut}>
 100 |           <LogOut className="mr-2 h-4 w-4" />
 101 |           <span>{t('Auth.signOut')}</span>
 102 |           <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>
 103 |         </DropdownMenuItem>
 104 |       </DropdownMenuContent>
 105 |     </DropdownMenu>
 106 |   );
 107 | }

```

`/workspaces/automai/src/components/ui/LoadingSpinner.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | export function LoadingSpinner({ fullScreen = false }: { fullScreen?: boolean }) {
   4 |   if (fullScreen) {
   5 |     return (
   6 |       <div className="flex items-center justify-center min-h-screen">
   7 |         <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
   8 |       </div>
   9 |     );
  10 |   }
  11 |   
  12 |   return (
  13 |     <div className="flex items-center justify-center p-4">
  14 |       <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
  15 |     </div>
  16 |   );
  17 | } 

```

`/workspaces/automai/src/components/ui/LongText.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { useEffect, useRef, useState } from 'react';
   4 | 
   5 | import { Popover, PopoverContent, PopoverTrigger } from '@/components/shadcn/popover';
   6 | import {
   7 |   Tooltip,
   8 |   TooltipContent,
   9 |   TooltipProvider,
  10 |   TooltipTrigger,
  11 | } from '@/components/shadcn/tooltip';
  12 | import { cn } from '@/lib/utils';
  13 | 
  14 | interface Props {
  15 |   children: React.ReactNode;
  16 |   className?: string;
  17 |   contentClassName?: string;
  18 | }
  19 | 
  20 | export default function LongText({ children, className = '', contentClassName = '' }: Props) {
  21 |   const ref = useRef<HTMLDivElement>(null);
  22 |   const [isOverflown, setIsOverflown] = useState(false);
  23 | 
  24 |   useEffect(() => {
  25 |     if (checkOverflow(ref.current)) {
  26 |       setIsOverflown(true);
  27 |       return;
  28 |     }
  29 | 
  30 |     setIsOverflown(false);
  31 |   }, []);
  32 | 
  33 |   if (!isOverflown)
  34 |     return (
  35 |       <div ref={ref} className={cn('truncate', className)}>
  36 |         {children}
  37 |       </div>
  38 |     );
  39 | 
  40 |   return (
  41 |     <>
  42 |       <div className="hidden sm:block">
  43 |         <TooltipProvider delayDuration={0}>
  44 |           <Tooltip>
  45 |             <TooltipTrigger asChild>
  46 |               <div ref={ref} className={cn('truncate', className)}>
  47 |                 {children}
  48 |               </div>
  49 |             </TooltipTrigger>
  50 |             <TooltipContent>
  51 |               <p className={contentClassName}>{children}</p>
  52 |             </TooltipContent>
  53 |           </Tooltip>
  54 |         </TooltipProvider>
  55 |       </div>
  56 |       <div className="sm:hidden">
  57 |         <Popover>
  58 |           <PopoverTrigger asChild>
  59 |             <div ref={ref} className={cn('truncate', className)}>
  60 |               {children}
  61 |             </div>
  62 |           </PopoverTrigger>
  63 |           <PopoverContent className={cn('w-fit', contentClassName)}>
  64 |             <p>{children}</p>
  65 |           </PopoverContent>
  66 |         </Popover>
  67 |       </div>
  68 |     </>
  69 |   );
  70 | }
  71 | 
  72 | const checkOverflow = (textContainer: HTMLDivElement | null) => {
  73 |   if (textContainer) {
  74 |     return (
  75 |       textContainer.offsetHeight < textContainer.scrollHeight ||
  76 |       textContainer.offsetWidth < textContainer.scrollWidth
  77 |     );
  78 |   }
  79 |   return false;
  80 | };

```

`/workspaces/automai/src/components/ui/Search.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { IconSearch } from '@tabler/icons-react';
   4 | 
   5 | import { cn } from '@/lib/utils';
   6 | 
   7 | import { Button } from '../shadcn/button';
   8 | 
   9 | import { useSearch } from '../../context/SearchContext';
  10 | 
  11 | interface Props {
  12 |   className?: string;
  13 |   type?: React.HTMLInputTypeAttribute;
  14 |   placeholder?: string;
  15 | }
  16 | 
  17 | export function Search({ className = '', placeholder = 'Search' }: Props) {
  18 |   const { setOpen } = useSearch();
  19 |   return (
  20 |     <Button
  21 |       variant="outline"
  22 |       className={cn(
  23 |         'relative h-8 w-full flex-1 justify-start rounded-md bg-muted/25 text-sm font-normal text-muted-foreground shadow-none hover:bg-muted/50 sm:pr-12 md:w-40 md:flex-none lg:w-56 xl:w-64',
  24 |         className,
  25 |       )}
  26 |       onClick={() => setOpen(true)}
  27 |     >
  28 |       <IconSearch aria-hidden="true" className="absolute left-1.5 top-1/2 -translate-y-1/2" />
  29 |       <span className="ml-3">{placeholder}</span>
  30 |       <kbd className="pointer-events-none absolute right-[0.3rem] top-[0.3rem] hidden h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100 sm:flex">
  31 |         <span className="text-xs">⌘</span>K
  32 |       </kbd>
  33 |     </Button>
  34 |   );
  35 | }

```

`/workspaces/automai/src/context/FontContext.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
   4 | 
   5 | type FontSize = 'small' | 'medium' | 'large';
   6 | 
   7 | interface FontContextType {
   8 |   fontSize: FontSize;
   9 |   setFontSize: (size: FontSize) => void;
  10 | }
  11 | 
  12 | const FontContext = createContext<FontContextType>({
  13 |   fontSize: 'medium',
  14 |   setFontSize: () => null,
  15 | });
  16 | 
  17 | interface FontProviderProps {
  18 |   children: ReactNode;
  19 | }
  20 | 
  21 | export function FontProvider({ children }: FontProviderProps) {
  22 |   const [fontSize, setFontSize] = useState<FontSize>('medium');
  23 | 
  24 |   useEffect(() => {
  25 |     // Apply font size to document
  26 |     const savedFontSize = localStorage.getItem('fontSize') as FontSize;
  27 |     if (savedFontSize) {
  28 |       setFontSize(savedFontSize);
  29 |     }
  30 | 
  31 |     // Apply font size class to document
  32 |     document.documentElement.dataset.fontSize = fontSize;
  33 |   }, [fontSize]);
  34 | 
  35 |   const handleSetFontSize = (size: FontSize) => {
  36 |     setFontSize(size);
  37 |     localStorage.setItem('fontSize', size);
  38 |     document.documentElement.dataset.fontSize = size;
  39 |   };
  40 | 
  41 |   return (
  42 |     <FontContext.Provider value={{ fontSize, setFontSize: handleSetFontSize }}>
  43 |       {children}
  44 |     </FontContext.Provider>
  45 |   );
  46 | }
  47 | 
  48 | export const useFont = () => useContext(FontContext); 

```

`/workspaces/automai/src/context/ThemeContext.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
   4 | 
   5 | type Theme = 'light' | 'dark' | 'system';
   6 | 
   7 | interface ThemeContextType {
   8 |   theme: Theme;
   9 |   setTheme: (theme: Theme) => void;
  10 | }
  11 | 
  12 | const ThemeContext = createContext<ThemeContextType>({
  13 |   theme: 'system',
  14 |   setTheme: () => null,
  15 | });
  16 | 
  17 | interface ThemeProviderProps {
  18 |   children: ReactNode;
  19 |   defaultTheme?: Theme;
  20 | }
  21 | 
  22 | export function ThemeProvider({ children, defaultTheme = 'system' }: ThemeProviderProps) {
  23 |   const [theme, setTheme] = useState<Theme>(defaultTheme);
  24 | 
  25 |   useEffect(() => {
  26 |     const root = document.documentElement;
  27 |     // Read the initial theme from the server-rendered classList
  28 |     const initialIsDark = root.classList.contains('dark');
  29 |     const savedTheme = localStorage.getItem('theme') as Theme;
  30 |     const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  31 | 
  32 |     // Determine the effective theme
  33 |     let effectiveTheme: Theme;
  34 |     if (savedTheme) {
  35 |       effectiveTheme = savedTheme;
  36 |     } else if (initialIsDark) {
  37 |       effectiveTheme = 'dark';
  38 |     } else {
  39 |       effectiveTheme = defaultTheme;
  40 |     }
  41 | 
  42 |     // Apply the theme and sync with system preferences if needed
  43 |     const isDark =
  44 |       effectiveTheme === 'dark' ||
  45 |       (effectiveTheme === 'system' && prefersDark);
  46 | 
  47 |     root.classList.toggle('dark', isDark);
  48 |     setTheme(effectiveTheme);
  49 | 
  50 |     // Save to localStorage and cookie for SSR consistency
  51 |     localStorage.setItem('theme', effectiveTheme);
  52 |     document.cookie = `theme=${effectiveTheme}; path=/; max-age=31536000`; // 1 year expiry
  53 |   }, [defaultTheme]);
  54 | 
  55 |   const handleSetTheme = (newTheme: Theme) => {
  56 |     const root = document.documentElement;
  57 |     const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  58 |     const isDark =
  59 |       newTheme === 'dark' ||
  60 |       (newTheme === 'system' && prefersDark);
  61 | 
  62 |     root.classList.toggle('dark', isDark);
  63 |     setTheme(newTheme);
  64 |     localStorage.setItem('theme', newTheme);
  65 |     document.cookie = `theme=${newTheme}; path=/; max-age=31536000`;
  66 |   };
  67 | 
  68 |   return (
  69 |     <ThemeContext.Provider value={{ theme, setTheme: handleSetTheme }}>
  70 |       {children}
  71 |     </ThemeContext.Provider>
  72 |   );
  73 | }
  74 | 
  75 | export const useTheme = () => useContext(ThemeContext);

```

`/workspaces/automai/src/context/SidebarContext.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import { createContext, useContext, useState, useEffect, useCallback } from 'react';
   4 | import Cookies from 'js-cookie';
   5 | import { SidebarContext as SidebarContextType } from '@/types/sidebar';
   6 | import { SIDEBAR_COOKIE_NAME } from '@/components/sidebar/constants';
   7 | 
   8 | export const SidebarContext = createContext<SidebarContextType | null>(null);
   9 | 
  10 | interface SidebarProviderProps {
  11 |   children: React.ReactNode;
  12 |   defaultOpen?: boolean;
  13 | }
  14 | 
  15 | export function SidebarProvider({ children, defaultOpen = true }: SidebarProviderProps) {
  16 |   // Initialize state from cookie if available, otherwise use defaultOpen
  17 |   const initialOpen = typeof window !== 'undefined' 
  18 |     ? Cookies.get(SIDEBAR_COOKIE_NAME) !== 'false' 
  19 |     : defaultOpen;
  20 |     
  21 |   const [open, setOpen] = useState(initialOpen);
  22 |   const [openMobile, setOpenMobile] = useState(false);
  23 |   const [isMobile, setIsMobile] = useState(false);
  24 |   const [state, setState] = useState<'expanded' | 'collapsed'>(
  25 |     initialOpen ? 'expanded' : 'collapsed',
  26 |   );
  27 | 
  28 |   // Use useCallback for the resize handler to prevent recreation on each render
  29 |   const checkIsMobile = useCallback(() => {
  30 |     if (typeof window !== 'undefined') {
  31 |       setIsMobile(window.innerWidth < 768);
  32 |     }
  33 |   }, []);
  34 | 
  35 |   useEffect(() => {
  36 |     checkIsMobile();
  37 |     
  38 |     if (typeof window !== 'undefined') {
  39 |       // Use a debounced resize handler to prevent excessive updates
  40 |       let resizeTimer: NodeJS.Timeout;
  41 |       const handleResize = () => {
  42 |         clearTimeout(resizeTimer);
  43 |         resizeTimer = setTimeout(checkIsMobile, 100);
  44 |       };
  45 |       
  46 |       window.addEventListener('resize', handleResize);
  47 |       return () => {
  48 |         window.removeEventListener('resize', handleResize);
  49 |         clearTimeout(resizeTimer);
  50 |       };
  51 |     }
  52 |   }, [checkIsMobile]);
  53 | 
  54 |   // Use useCallback for toggleSidebar to prevent recreation on each render
  55 |   const toggleSidebar = useCallback(() => {
  56 |     const newOpen = !open;
  57 |     setOpen(newOpen);
  58 |     setState(newOpen ? 'expanded' : 'collapsed');
  59 |     
  60 |     // Update cookie
  61 |     if (typeof window !== 'undefined') {
  62 |       Cookies.set(SIDEBAR_COOKIE_NAME, String(newOpen), { path: '/' });
  63 |     }
  64 |   }, [open]);
  65 | 
  66 |   // Memoize the context value to prevent unnecessary re-renders
  67 |   const contextValue = {
  68 |     state,
  69 |     open,
  70 |     setOpen,
  71 |     openMobile,
  72 |     setOpenMobile,
  73 |     isMobile,
  74 |     toggleSidebar,
  75 |   };
  76 | 
  77 |   return (
  78 |     <SidebarContext.Provider value={contextValue}>
  79 |       {children}
  80 |     </SidebarContext.Provider>
  81 |   );
  82 | }
  83 | 
  84 | export const useSidebar = () => {
  85 |   const context = useContext(SidebarContext);
  86 | 
  87 |   if (!context) {
  88 |     throw new Error('useSidebar must be used within a SidebarProvider');
  89 |   }
  90 | 
  91 |   return context;
  92 | };

```

`/workspaces/automai/src/context/SearchContext.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React, { createContext, useContext, useState, ReactNode } from 'react';
   4 | 
   5 | interface SearchContextType {
   6 |   searchTerm: string;
   7 |   setSearchTerm: (term: string) => void;
   8 |   isSearchOpen: boolean;
   9 |   setIsSearchOpen: (isOpen: boolean) => void;
  10 |   open: boolean;
  11 |   setOpen: (isOpen: boolean) => void;
  12 | }
  13 | 
  14 | const SearchContext = createContext<SearchContextType>({
  15 |   searchTerm: '',
  16 |   setSearchTerm: () => null,
  17 |   isSearchOpen: false,
  18 |   setIsSearchOpen: () => null,
  19 |   open: false,
  20 |   setOpen: () => null,
  21 | });
  22 | 
  23 | interface SearchProviderProps {
  24 |   children: ReactNode;
  25 | }
  26 | 
  27 | export function SearchProvider({ children }: SearchProviderProps) {
  28 |   const [searchTerm, setSearchTerm] = useState('');
  29 |   const [isSearchOpen, setIsSearchOpen] = useState(false);
  30 |   const [open, setOpen] = useState(false);
  31 | 
  32 |   return (
  33 |     <SearchContext.Provider value={{ searchTerm, setSearchTerm, isSearchOpen, setIsSearchOpen, open, setOpen }}>
  34 |       {children}
  35 |     </SearchContext.Provider>
  36 |   );
  37 | }
  38 | 
  39 | export const useSearch = () => useContext(SearchContext); 

```

`/workspaces/automai/src/context/RoleContext.tsx`:

```tsx
   1 | 'use client';
   2 | 
   3 | import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';
   4 | import { useAuth } from '@/hooks/useAuth';
   5 | import { Role } from '@/types/user';
   6 | import { getCurrentUserRoles } from '@/app/actions/user';
   7 | 
   8 | interface RoleContextType {
   9 |   role: Role;
  10 |   setRole: (role: Role) => void;
  11 | }
  12 | 
  13 | // Default role that matches the Role type
  14 | const DEFAULT_ROLE: Role = 'viewer';
  15 | 
  16 | const RoleContext = createContext<RoleContextType>({
  17 |   role: DEFAULT_ROLE,
  18 |   setRole: () => null,
  19 | });
  20 | 
  21 | interface RoleProviderProps {
  22 |   children: ReactNode;
  23 | }
  24 | 
  25 | export function RoleProvider({ children }: RoleProviderProps) {
  26 |   const [role, setRoleState] = useState<Role>(DEFAULT_ROLE);
  27 |   const { user, loading } = useAuth();
  28 | 
  29 |   // Use useCallback to memoize the setRole function
  30 |   const setRole = useCallback((newRole: Role) => {
  31 |     // Only update if the role actually changed
  32 |     setRoleState(prevRole => {
  33 |       if (prevRole === newRole) return prevRole;
  34 |       return newRole;
  35 |     });
  36 |   }, []);
  37 | 
  38 |   // Effect to set the initial role from the user object
  39 |   useEffect(() => {
  40 |     if (user && !loading) {
  41 |       console.log('RoleContext: Initializing user role from user data:', user);
  42 |       
  43 |       // First try to get the role from user metadata
  44 |       const metadata = user.user_metadata as any;
  45 |       console.log('RoleContext: User metadata:', metadata);
  46 |       const metadataRole = metadata?.role || metadata?.user_role;
  47 |       console.log('RoleContext: Found role in metadata:', metadataRole);
  48 |       
  49 |       if (metadataRole) {
  50 |         // If admin role is found, prioritize it
  51 |         if (metadataRole === 'admin') {
  52 |           console.log('RoleContext: Setting admin role from metadata');
  53 |           setRoleState('admin');
  54 |           return;
  55 |         }
  56 |         
  57 |         // Ensure the role is a valid Role type
  58 |         const validRole = isValidRole(metadataRole) ? metadataRole : DEFAULT_ROLE;
  59 |         console.log('RoleContext: Setting validated role from metadata:', validRole);
  60 |         setRoleState(validRole);
  61 |       } else {
  62 |         // If not found in metadata, fetch from the database
  63 |         const fetchRoleFromDB = async () => {
  64 |           try {
  65 |             console.log('RoleContext: Fetching role from database');
  66 |             const response = await getCurrentUserRoles();
  67 |             console.log('RoleContext: Database role response:', response);
  68 |             
  69 |             if (response.success && response.data && response.data.length > 0) {
  70 |               const dbRole = response.data[0].name;
  71 |               console.log('RoleContext: Role from database:', dbRole);
  72 |               
  73 |               // If admin role is found in DB, prioritize it
  74 |               if (dbRole === 'admin') {
  75 |                 console.log('RoleContext: Setting admin role from database');
  76 |                 setRoleState('admin');
  77 |                 return;
  78 |               }
  79 |               
  80 |               // Ensure the role from DB is a valid Role type
  81 |               const validRole = isValidRole(dbRole) ? dbRole as Role : DEFAULT_ROLE;
  82 |               console.log('RoleContext: Setting validated role from database:', validRole);
  83 |               setRoleState(validRole);
  84 |             }
  85 |           } catch (error) {
  86 |             console.error('RoleContext: Error fetching user role:', error);
  87 |             // Default to DEFAULT_ROLE if there's an error
  88 |             setRoleState(DEFAULT_ROLE);
  89 |           }
  90 |         };
  91 |         
  92 |         fetchRoleFromDB();
  93 |       }
  94 |     }
  95 |   }, [user, loading]);
  96 | 
  97 |   // Helper function to check if a role is valid
  98 |   const isValidRole = (role: string): role is Role => {
  99 |     return ['admin', 'tester', 'developer', 'viewer'].includes(role);
 100 |   };
 101 | 
 102 |   // Create a memoized context value to prevent unnecessary re-renders
 103 |   const contextValue = React.useMemo(() => ({
 104 |     role,
 105 |     setRole
 106 |   }), [role, setRole]);
 107 | 
 108 |   return (
 109 |     <RoleContext.Provider value={contextValue}>
 110 |       {children}
 111 |     </RoleContext.Provider>
 112 |   );
 113 | }
 114 | 
 115 | export const useRole = () => useContext(RoleContext); 

```

`/workspaces/automai/src/config/fonts.ts`:

```ts
   1 | /**
   2 |  * List of available font names (visit the url`/settings/appearance`).
   3 |  * This array is used to generate Tailwind's `safelist` inside 'tailwind.config.js' and 'appearance-form.tsx'
   4 |  * to prevent dynamic font classes (e.g., `font-inter`, `font-manrope`) from being removed during purging.
   5 |  *
   6 |  * 📝 How to Add a New Font:
   7 |  * 1. Add the font name here.
   8 |  * 2. Update the `<link>` tag in 'index.html' to include the new font from Google Fonts (_or any other source).
   9 |  * 3. Add new fontFamily 'tailwind.config.js'
  10 |  *
  11 |  * Example:
  12 |  * fonts.ts           → Add 'roboto' to this array.
  13 |  * index.html         → Add Google Fonts link for Roboto.
  14 |  * tailwind.config.js  → Add the new font inside `theme.extend.fontFamily`.
  15 |  * ```ts
  16 |  * theme: {
  17 |  *   // other configs
  18 |  *   extend: {
  19 |  *      fontFamily: {
  20 |  *        inter: ['Inter', ...fontFamily.sans],
  21 |  *        manrope: ['Manrope', ...fontFamily.sans],
  22 |  *        roboto: ['Roboto', ...fontFamily.sans], // Add new font here
  23 |  *      }
  24 |  *   }
  25 |  * }
  26 |  * ```
  27 |  */
  28 | export const fonts = ['inter', 'manrope', 'system'] as const;

```

`/workspaces/automai/src/utils/isElectron.ts`:

```ts
   1 | export const isElectron = (): boolean => {
   2 |   if (
   3 |     typeof window !== 'undefined' &&
   4 |     typeof window.process === 'object' &&
   5 |     window.process.type === 'renderer'
   6 |   ) {
   7 |     return true;
   8 |   }
   9 |   return false;
  10 | };
  11 | 
  12 | export default isElectron;

```

`/workspaces/automai/src/utils/electronApi.ts`:

```ts
   1 | import isElectronModule from 'is-electron';
   2 | 
   3 | // Type definitions for IPC communication
   4 | interface IPCResponse<T> {
   5 |   success: boolean;
   6 |   message?: string;
   7 |   data?: T;
   8 | }
   9 | 
  10 | // Safe require of electron
  11 | const getIpcRenderer = () => {
  12 |   if (isElectronModule()) {
  13 |     const electron = window.require('electron');
  14 |     return electron.ipcRenderer;
  15 |   }
  16 |   return null;
  17 | };
  18 | 
  19 | export const runPython = async (script: string): Promise<IPCResponse<string>> => {
  20 |   const ipcRenderer = getIpcRenderer();
  21 |   if (!ipcRenderer) {
  22 |     return { success: false, message: 'Python execution is only available in desktop mode' };
  23 |   }
  24 |   try {
  25 |     const result = await ipcRenderer.invoke('run-python', script);
  26 |     return { success: true, data: result };
  27 |   } catch (error: unknown) {
  28 |     const message = error instanceof Error ? error.message : 'Unknown error occurred';
  29 |     return { success: false, message };
  30 |   }
  31 | };
  32 | 
  33 | export const syncGit = async (): Promise<IPCResponse<string>> => {
  34 |   const ipcRenderer = getIpcRenderer();
  35 |   if (!ipcRenderer) {
  36 |     return { success: false, message: 'Git sync is only available in desktop mode' };
  37 |   }
  38 |   try {
  39 |     const result = await ipcRenderer.invoke('git-sync');
  40 |     return result;
  41 |   } catch (error: unknown) {
  42 |     const message = error instanceof Error ? error.message : 'Unknown error occurred';
  43 |     return { success: false, message };
  44 |   }
  45 | };
  46 | 
  47 | export const store = {
  48 |   set: async <T>(key: string, value: T): Promise<IPCResponse<void>> => {
  49 |     const ipcRenderer = getIpcRenderer();
  50 |     if (!ipcRenderer) {
  51 |       return { success: false, message: 'Local storage is only available in desktop mode' };
  52 |     }
  53 |     try {
  54 |       return await ipcRenderer.invoke('store-set', { key, value });
  55 |     } catch (error: unknown) {
  56 |       const message = error instanceof Error ? error.message : 'Unknown error occurred';
  57 |       return { success: false, message };
  58 |     }
  59 |   },
  60 | 
  61 |   get: async <T>(key: string): Promise<IPCResponse<T>> => {
  62 |     const ipcRenderer = getIpcRenderer();
  63 |     if (!ipcRenderer) {
  64 |       return { success: false, message: 'Local storage is only available in desktop mode' };
  65 |     }
  66 |     try {
  67 |       const value = await ipcRenderer.invoke('store-get', { key });
  68 |       return { success: true, data: value };
  69 |     } catch (error: unknown) {
  70 |       const message = error instanceof Error ? error.message : 'Unknown error occurred';
  71 |       return { success: false, message };
  72 |     }
  73 |   },
  74 | };

```

`/workspaces/automai/src/config.ts`:

```ts
   1 | import { Pathnames } from 'next-intl/navigation';
   2 | 
   3 | export const locales = ['en', 'fr'] as const;
   4 | 
   5 | export const defaultLocale = 'en' as const;
   6 | 
   7 | export const pathnames = {
   8 |   // Marketing routes
   9 |   '/': '/',
  10 |   '/features': '/features',
  11 |   '/pricing': '/pricing',
  12 |   '/docs': '/docs',
  13 | 
  14 |   // Auth routes
  15 |   '/login': '/login',
  16 |   '/signup': '/signup',
  17 |   '/forgot-password': '/forgot-password',
  18 | 
  19 |   // Workspace/Tenant routes
  20 |   '/[tenant]/dashboard': '/[tenant]/dashboard',
  21 |   '/[tenant]/scripts': '/[tenant]/scripts',
  22 |   '/[tenant]/settings': '/[tenant]/settings',
  23 |   '/[tenant]/tests': '/[tenant]/tests',
  24 |   '/[tenant]/reports': '/[tenant]/reports',
  25 |   '/[tenant]/profile': '/[tenant]/profile',
  26 |   '/[tenant]/team': '/[tenant]/team',
  27 |   '/[tenant]/billing': '/[tenant]/billing',
  28 |   '/[tenant]/hosts': '/[tenant]/hosts',
  29 | } satisfies Pathnames<typeof locales>;
  30 | 
  31 | // Use the default: `always`
  32 | export const _localePrefix = 'always';
  33 | 
  34 | export type AppPathnames = keyof typeof pathnames;

```

`/workspaces/automai/src/lib/supabase/auth.ts`:

```ts
   1 | import { cookies } from 'next/headers';
   2 | import { createClient } from './server';
   3 | import db from '@/lib/supabase/db';
   4 | 
   5 | // Flag to track if we've already logged auth session missing errors
   6 | let authSessionMissingErrorLogged = false;
   7 | 
   8 | // Check if we're in an environment where Supabase auth is available
   9 | const isUsingSupabase = () => {
  10 |   return process.env.NEXT_PUBLIC_SUPABASE_URL && process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  11 | };
  12 | 
  13 | // Types for Supabase auth
  14 | export interface UserSession {
  15 |   id: string;
  16 |   email?: string | null;
  17 |   name?: string | null;
  18 |   image?: string | null;
  19 |   role?: string;
  20 |   tenant_id?: string;
  21 |   tenant_name?: string | null;
  22 | }
  23 | 
  24 | export interface SessionData {
  25 |   user: UserSession;
  26 |   accessToken: string;
  27 |   expires: string;
  28 | }
  29 | 
  30 | export interface AuthResult<T = any> {
  31 |   success: boolean;
  32 |   error?: string;
  33 |   data?: T;
  34 | }
  35 | 
  36 | /**
  37 |  * Centralized Supabase Authentication Service
  38 |  * This combines functionality from both src/auth.ts and src/lib/services/supabase-auth.ts
  39 |  */
  40 | export const supabaseAuth = {
  41 |   /**
  42 |    * Get the current session from Supabase
  43 |    */
  44 |   async getSession(): Promise<AuthResult<SessionData>> {
  45 |     if (!isUsingSupabase()) {
  46 |       return {
  47 |         success: false,
  48 |         error: 'Supabase auth not available in this environment',
  49 |       };
  50 |     }
  51 | 
  52 |     try {
  53 |       // Get cookies and create client
  54 |       const cookieStore = await cookies();
  55 |       const supabase = await createClient(cookieStore);
  56 | 
  57 |       // Try to get the session
  58 |       const { data, error } = await supabase.auth.getSession();
  59 | 
  60 |       if (error) {
  61 |         console.error('Error getting session:', error);
  62 |         return { 
  63 |           success: false, 
  64 |           error: error.message 
  65 |         };
  66 |       }
  67 | 
  68 |       if (!data.session) {
  69 |         return {
  70 |           success: false,
  71 |           error: 'No active session',
  72 |         };
  73 |       }
  74 | 
  75 |       // Extract user data
  76 |       const user = data.session.user;
  77 |       
  78 |       // Log the raw user data for debugging
  79 |       console.log('Raw Supabase session user data:', JSON.stringify(user, null, 2));
  80 |       
  81 |       // Extract name from various possible metadata fields
  82 |       const metadata = user.user_metadata || {};
  83 |       const name = metadata.name || 
  84 |                   metadata.full_name || 
  85 |                   (metadata as any)?.raw_user_meta_data?.name ||
  86 |                   metadata.preferred_username ||
  87 |                   user.email?.split('@')[0] || 
  88 |                   null;
  89 |       
  90 |       // Get tenant_id from metadata
  91 |       const tenant_id = metadata.tenant_id;
  92 |       
  93 |       // Simplified approach: Just use tenant_name from metadata or fallback to tenant_id
  94 |       // No need to query the database for tenant information anymore
  95 |       let tenant_name = metadata.tenant_name || tenant_id;
  96 |       
  97 |       // Log for debugging
  98 |       console.log('SUPABASE-AUTH: Using tenant_name from metadata:', tenant_name);
  99 |       
 100 |       const userData: UserSession = {
 101 |         id: user.id,
 102 |         email: user.email,
 103 |         name: name,
 104 |         image: metadata.avatar_url,
 105 |         role: metadata.role || 'user',
 106 |         tenant_id: tenant_id,
 107 |         tenant_name: tenant_name,
 108 |       };
 109 | 
 110 |       return {
 111 |         success: true,
 112 |         data: {
 113 |           user: userData,
 114 |           accessToken: data.session.access_token,
 115 |           expires: data.session.expires_at?.toString() || '',
 116 |         },
 117 |       };
 118 |     } catch (error) {
 119 |       console.error('Error in getSession:', error);
 120 |       return {
 121 |         success: false,
 122 |         error: error instanceof Error ? error.message : 'Unknown error',
 123 |       };
 124 |     }
 125 |   },
 126 | 
 127 |   /**
 128 |    * Extract session from Authorization header
 129 |    */
 130 |   async extractSessionFromHeader(authHeader: string | null): Promise<AuthResult<SessionData>> {
 131 |     if (!isUsingSupabase() || !authHeader) {
 132 |       return {
 133 |         success: false,
 134 |         error: !authHeader ? 'No authorization header provided' : 'Supabase auth not available',
 135 |       };
 136 |     }
 137 | 
 138 |     try {
 139 |       // Create a Supabase client
 140 |       const supabase = await createClient();
 141 | 
 142 |       // Get the user from the token
 143 |       const token = authHeader.replace('Bearer ', '');
 144 |       const { data, error } = await supabase.auth.getUser(token);
 145 | 
 146 |       if (error || !data.user) {
 147 |         return {
 148 |           success: false,
 149 |           error: error?.message || 'Invalid token',
 150 |         };
 151 |       }
 152 | 
 153 |       const user = data.user;
 154 |       
 155 |       // Log the raw user data for debugging
 156 |       console.log('Raw Supabase token user data:', JSON.stringify(user, null, 2));
 157 |       
 158 |       // Extract name from various possible metadata fields
 159 |       const metadata = user.user_metadata || {};
 160 |       const name = metadata.name || 
 161 |                   metadata.full_name || 
 162 |                   (metadata as any)?.raw_user_meta_data?.name ||
 163 |                   metadata.preferred_username ||
 164 |                   user.email?.split('@')[0] || 
 165 |                   null;
 166 |       
 167 |       // Get tenant_id from metadata
 168 |       const tenant_id = metadata.tenant_id;
 169 |       
 170 |       // Simplified approach: Just use tenant_name from metadata or fallback to tenant_id
 171 |       // No need to query the database for tenant information anymore
 172 |       let tenant_name = metadata.tenant_name || tenant_id;
 173 |       
 174 |       // Log for debugging
 175 |       console.log('SUPABASE-AUTH: Using tenant_name from metadata:', tenant_name);
 176 |       
 177 |       const userData: UserSession = {
 178 |         id: user.id,
 179 |         email: user.email,
 180 |         name: name,
 181 |         image: metadata.avatar_url,
 182 |         role: metadata.role || 'user',
 183 |         tenant_id: tenant_id,
 184 |         tenant_name: tenant_name,
 185 |       };
 186 | 
 187 |       return {
 188 |         success: true,
 189 |         data: {
 190 |           user: userData,
 191 |           accessToken: token,
 192 |           expires: '', // We don't have expiry info from getUser
 193 |         },
 194 |       };
 195 |     } catch (error) {
 196 |       console.error('Error extracting session from header:', error);
 197 |       return {
 198 |         success: false,
 199 |         error: error instanceof Error ? error.message : 'Unknown error',
 200 |       };
 201 |     }
 202 |   },
 203 | 
 204 |   /**
 205 |    * Get the current user
 206 |    */
 207 |   async getUser(): Promise<AuthResult<UserSession>> {
 208 |     if (!isUsingSupabase()) {
 209 |       return {
 210 |         success: false,
 211 |         error: 'Supabase auth not available in this environment',
 212 |       };
 213 |     }
 214 | 
 215 |     try {
 216 |       // Get cookies and create client
 217 |       const cookieStore = await cookies();
 218 |       const supabase = await createClient(cookieStore);
 219 | 
 220 |       // Use getUser instead of getSession for better security
 221 |       console.log('SUPABASE-AUTH: Calling supabase.auth.getUser()');
 222 |       const { data, error } = await supabase.auth.getUser();
 223 |       console.log('SUPABASE-AUTH: Raw getUser response:', JSON.stringify(data, null, 2));
 224 | 
 225 |       if (error) {
 226 |         // Don't log Auth session missing errors as they're expected on login pages
 227 |         if (error.message !== 'Auth session missing!' || !authSessionMissingErrorLogged) {
 228 |           if (error.message === 'Auth session missing!') {
 229 |             // Only log this error once per session
 230 |             authSessionMissingErrorLogged = true;
 231 |           }
 232 |           
 233 |           if (error.message !== 'Auth session missing!') {
 234 |             console.error('Error getting user:', error);
 235 |           }
 236 |         }
 237 |         
 238 |         return { 
 239 |           success: false, 
 240 |           error: error.message 
 241 |         };
 242 |       }
 243 | 
 244 |       // Fix for incorrect handling of data structure
 245 |       if (!data || !data.user || !data.user.id) {
 246 |         console.log('SUPABASE-AUTH: No user data found in response');
 247 |         return {
 248 |           success: false,
 249 |           error: 'No authenticated user',
 250 |         };
 251 |       }
 252 |       
 253 |       console.log('SUPABASE-AUTH: User found in response');
 254 | 
 255 |       // Extract user data
 256 |       const user = data.user;
 257 |       
 258 |       // Log the raw user data for debugging
 259 |       console.log('Raw Supabase user data:', JSON.stringify(user, null, 2));
 260 |       
 261 |       // Extract name from various possible metadata fields
 262 |       const metadata = user.user_metadata || {};
 263 |       const name = metadata.name || 
 264 |                   metadata.full_name || 
 265 |                   (metadata as any)?.raw_user_meta_data?.name ||
 266 |                   metadata.preferred_username ||
 267 |                   user.email?.split('@')[0] || 
 268 |                   null;
 269 |       
 270 |       // Get tenant_id from metadata
 271 |       const tenant_id = metadata.tenant_id;
 272 |       
 273 |       // Simplified approach: Just use tenant_name from metadata or fallback to tenant_id
 274 |       // No need to query the database for tenant information anymore
 275 |       let tenant_name = metadata.tenant_name || tenant_id;
 276 |       
 277 |       // Log for debugging
 278 |       console.log('SUPABASE-AUTH: Using tenant_name from metadata:', tenant_name);
 279 |       
 280 |       const userData: UserSession = {
 281 |         id: user.id,
 282 |         email: user.email,
 283 |         name: name,
 284 |         image: metadata.avatar_url,
 285 |         role: metadata.role || 'user',
 286 |         tenant_id: tenant_id,
 287 |         tenant_name: tenant_name,
 288 |       };
 289 | 
 290 |       return {
 291 |         success: true,
 292 |         data: userData,
 293 |       };
 294 |     } catch (error) {
 295 |       console.error('Error in getUser:', error);
 296 |       return {
 297 |         success: false,
 298 |         error: error instanceof Error ? error.message : 'Unknown error',
 299 |       };
 300 |     }
 301 |   },
 302 | 
 303 |   /**
 304 |    * Check if the user is authenticated
 305 |    */
 306 |   async isAuthenticated(): Promise<boolean> {
 307 |     const sessionResult = await this.getSession();
 308 |     return sessionResult.success;
 309 |   },
 310 | 
 311 |   /**
 312 |    * Sign in with email and password
 313 |    */
 314 |   async signInWithPassword(email: string, password: string): Promise<AuthResult> {
 315 |     if (!isUsingSupabase()) {
 316 |       return {
 317 |         success: false,
 318 |         error: 'Supabase auth not available in this environment',
 319 |       };
 320 |     }
 321 | 
 322 |     try {
 323 |       const cookieStore = await cookies();
 324 |       const supabase = await createClient(cookieStore);
 325 | 
 326 |       const { data, error } = await supabase.auth.signInWithPassword({
 327 |         email,
 328 |         password,
 329 |       });
 330 | 
 331 |       if (error) {
 332 |         return {
 333 |           success: false,
 334 |           error: error.message,
 335 |         };
 336 |       }
 337 | 
 338 |       return {
 339 |         success: true,
 340 |         data: data.session,
 341 |       };
 342 |     } catch (error) {
 343 |       console.error('Error signing in:', error);
 344 |       return {
 345 |         success: false,
 346 |         error: error instanceof Error ? error.message : 'Unknown error',
 347 |       };
 348 |     }
 349 |   },
 350 | 
 351 |   /**
 352 |    * Sign up with email and password
 353 |    */
 354 |   async signUp(email: string, password: string, options?: { 
 355 |     redirectTo?: string; 
 356 |     data?: Record<string, any>; 
 357 |   }): Promise<AuthResult> {
 358 |     if (!isUsingSupabase()) {
 359 |       return {
 360 |         success: false,
 361 |         error: 'Supabase auth not available in this environment',
 362 |       };
 363 |     }
 364 | 
 365 |     try {
 366 |       const cookieStore = await cookies();
 367 |       const supabase = await createClient(cookieStore);
 368 | 
 369 |       const { data, error } = await supabase.auth.signUp({
 370 |         email,
 371 |         password,
 372 |         options
 373 |       });
 374 | 
 375 |       if (error) {
 376 |         console.error('Error signing up:', error);
 377 |         return {
 378 |           success: false,
 379 |           error: error.message,
 380 |         };
 381 |       }
 382 | 
 383 |       return {
 384 |         success: true,
 385 |         data,
 386 |       };
 387 |     } catch (error: any) {
 388 |       console.error('Error signing up:', error);
 389 |       return {
 390 |         success: false,
 391 |         error: error.message || 'Failed to sign up',
 392 |       };
 393 |     }
 394 |   },
 395 | 
 396 |   /**
 397 |    * Sign in with OAuth provider
 398 |    */
 399 |   async signInWithOAuth(provider: 'google' | 'github' | 'gitlab', options?: { 
 400 |     redirectTo?: string;
 401 |   }): Promise<AuthResult> {
 402 |     if (!isUsingSupabase()) {
 403 |       return {
 404 |         success: false,
 405 |         error: 'Supabase auth not available in this environment',
 406 |       };
 407 |     }
 408 | 
 409 |     try {
 410 |       const cookieStore = await cookies();
 411 |       const supabase = await createClient(cookieStore);
 412 | 
 413 |       const { data, error } = await supabase.auth.signInWithOAuth({
 414 |         provider,
 415 |         options
 416 |       });
 417 | 
 418 |       if (error) {
 419 |         console.error('Error signing in with OAuth:', error);
 420 |         return {
 421 |           success: false,
 422 |           error: error.message,
 423 |         };
 424 |       }
 425 | 
 426 |       return {
 427 |         success: true,
 428 |         data,
 429 |       };
 430 |     } catch (error: any) {
 431 |       console.error('Error signing in with OAuth:', error);
 432 |       return {
 433 |         success: false,
 434 |         error: error.message || 'Failed to sign in with OAuth',
 435 |       };
 436 |     }
 437 |   },
 438 | 
 439 |   /**
 440 |    * Handle OAuth callback
 441 |    * This is part of the server DB layer that directly interacts with Supabase
 442 |    */
 443 |   async handleOAuthCallback(code: string): Promise<AuthResult> {
 444 |     if (!isUsingSupabase()) {
 445 |       return {
 446 |         success: false,
 447 |         error: 'Supabase auth not available in this environment',
 448 |       };
 449 |     }
 450 | 
 451 |     try {
 452 |       const cookieStore = await cookies();
 453 |       const supabase = await createClient(cookieStore);
 454 | 
 455 |       const { data, error } = await supabase.auth.exchangeCodeForSession(code);
 456 | 
 457 |       if (error) {
 458 |         console.error('Error exchanging code for session:', error);
 459 |         return {
 460 |           success: false,
 461 |           error: error.message,
 462 |         };
 463 |       }
 464 | 
 465 |       return {
 466 |         success: true,
 467 |         data,
 468 |       };
 469 |     } catch (error: any) {
 470 |       console.error('Error handling OAuth callback:', error);
 471 |       return {
 472 |         success: false,
 473 |         error: error.message || 'Failed to process OAuth callback',
 474 |       };
 475 |     }
 476 |   },
 477 | 
 478 |   /**
 479 |    * Sign out the current user
 480 |    */
 481 |   async signOut(): Promise<AuthResult> {
 482 |     if (!isUsingSupabase()) {
 483 |       return {
 484 |         success: false,
 485 |         error: 'Supabase auth not available in this environment',
 486 |       };
 487 |     }
 488 | 
 489 |     try {
 490 |       const cookieStore = await cookies();
 491 |       const supabase = await createClient(cookieStore);
 492 | 
 493 |       const { error } = await supabase.auth.signOut();
 494 | 
 495 |       if (error) {
 496 |         console.error('Error signing out:', error);
 497 |         return {
 498 |           success: false,
 499 |           error: error.message,
 500 |         };
 501 |       }
 502 | 
 503 |       return {
 504 |         success: true,
 505 |       };
 506 |     } catch (error: any) {
 507 |       console.error('Error signing out:', error);
 508 |       return {
 509 |         success: false,
 510 |         error: error.message || 'Failed to sign out',
 511 |       };
 512 |     }
 513 |   },
 514 | 
 515 |   /**
 516 |    * Update user password
 517 |    */
 518 |   async updatePassword(password: string): Promise<AuthResult> {
 519 |     if (!isUsingSupabase()) {
 520 |       return {
 521 |         success: false,
 522 |         error: 'Supabase auth not available in this environment',
 523 |       };
 524 |     }
 525 | 
 526 |     try {
 527 |       const cookieStore = await cookies();
 528 |       const supabase = await createClient(cookieStore);
 529 | 
 530 |       const { data, error } = await supabase.auth.updateUser({
 531 |         password,
 532 |       });
 533 | 
 534 |       if (error) {
 535 |         console.error('Error updating password:', error);
 536 |         return {
 537 |           success: false,
 538 |           error: error.message,
 539 |         };
 540 |       }
 541 | 
 542 |       return {
 543 |         success: true,
 544 |         data,
 545 |       };
 546 |     } catch (error: any) {
 547 |       console.error('Error updating password:', error);
 548 |       return {
 549 |         success: false,
 550 |         error: error.message || 'Failed to update password',
 551 |       };
 552 |     }
 553 |   },
 554 | 
 555 |   /**
 556 |    * Reset password for email
 557 |    */
 558 |   async resetPasswordForEmail(email: string, redirectTo?: string): Promise<AuthResult> {
 559 |     if (!isUsingSupabase()) {
 560 |       return {
 561 |         success: false,
 562 |         error: 'Supabase auth not available in this environment',
 563 |       };
 564 |     }
 565 | 
 566 |     try {
 567 |       const cookieStore = await cookies();
 568 |       const supabase = await createClient(cookieStore);
 569 | 
 570 |       const options = redirectTo 
 571 |         ? { redirectTo } 
 572 |         : undefined;
 573 | 
 574 |       const { error } = await supabase.auth.resetPasswordForEmail(email, options);
 575 | 
 576 |       if (error) {
 577 |         console.error('Error resetting password:', error);
 578 |         return {
 579 |           success: false,
 580 |           error: error.message,
 581 |         };
 582 |       }
 583 | 
 584 |       return {
 585 |         success: true,
 586 |       };
 587 |     } catch (error: any) {
 588 |       console.error('Error resetting password:', error);
 589 |       return {
 590 |         success: false,
 591 |         error: error.message || 'Failed to reset password',
 592 |       };
 593 |     }
 594 |   },
 595 | 
 596 |   /**
 597 |    * Update user profile
 598 |    */
 599 |   async updateProfile(data: Record<string, any>): Promise<AuthResult> {
 600 |     if (!isUsingSupabase()) {
 601 |       return {
 602 |         success: false,
 603 |         error: 'Supabase auth not available in this environment',
 604 |       };
 605 |     }
 606 | 
 607 |     try {
 608 |       const cookieStore = await cookies();
 609 |       const supabase = await createClient(cookieStore);
 610 | 
 611 |       const { data: userData, error } = await supabase.auth.updateUser({
 612 |         data,
 613 |       });
 614 | 
 615 |       if (error) {
 616 |         console.error('Error updating profile:', error);
 617 |         return {
 618 |           success: false,
 619 |           error: error.message,
 620 |         };
 621 |       }
 622 | 
 623 |       return {
 624 |         success: true,
 625 |         data: userData,
 626 |       };
 627 |     } catch (error: any) {
 628 |       console.error('Error updating profile:', error);
 629 |       return {
 630 |         success: false,
 631 |         error: error.message || 'Failed to update profile',
 632 |       };
 633 |     }
 634 |   },
 635 | };
 636 | 
 637 | // Export a simplified direct access to commonly used functions
 638 | export const getSession = () => supabaseAuth.getSession();
 639 | export const getUser = () => supabaseAuth.getUser();
 640 | export const isAuthenticated = () => supabaseAuth.isAuthenticated();
 641 | export const extractSessionFromHeader = (header: string | null) => 
 642 |   supabaseAuth.extractSessionFromHeader(header);

```

`/workspaces/automai/src/lib/supabase/middleware.ts`:

```ts
   1 | // DO NOT MODIFY THIS FILE
   2 | import { createServerClient } from '@supabase/ssr';
   3 | import { type NextRequest, NextResponse } from 'next/server';
   4 | import type { CookieOptions } from '@supabase/ssr';
   5 | import { locales, defaultLocale } from '@/config';
   6 | 
   7 | /**
   8 |  * Creates a Supabase client for middleware
   9 |  * - Handles cookie management for authentication in middleware
  10 |  * - Allows updating cookies in the response
  11 |  */
  12 | export const createClient = (request: NextRequest) => {
  13 |   // Create response to manipulate cookies
  14 |   const response = NextResponse.next({
  15 |     request: {
  16 |       headers: request.headers,
  17 |     },
  18 |   });
  19 |   
  20 |   // Create client with cookie handlers for middleware
  21 |   const supabase = createServerClient(
  22 |     process.env.NEXT_PUBLIC_SUPABASE_URL!,
  23 |     process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  24 |     {
  25 |       cookies: {
  26 |         getAll() {
  27 |           // Simply map the cookies to the expected format
  28 |           return request.cookies.getAll().map(cookie => ({
  29 |             name: cookie.name,
  30 |             value: cookie.value,
  31 |           }));
  32 |         },
  33 |         setAll(cookiesToSet: { name: string; value: string; options?: CookieOptions }[]) {
  34 |           // Set cookies both on the request (for Supabase) and response (for browser)
  35 |           cookiesToSet.forEach(({ name, value, options }) => {
  36 |             request.cookies.set({
  37 |               name,
  38 |               value,
  39 |               ...options,
  40 |             });
  41 |             response.cookies.set({
  42 |               name,
  43 |               value,
  44 |               ...options,
  45 |             });
  46 |           });
  47 |         },
  48 |       },
  49 |     }
  50 |   );
  51 |   
  52 |   return { supabase, response };
  53 | };
  54 | 
  55 | /**
  56 |  * Clears all Supabase auth-related cookies
  57 |  */
  58 | function clearAuthCookies(response: NextResponse): NextResponse {
  59 |   // Known Supabase auth cookie names
  60 |   const authCookies = [
  61 |     'sb-access-token',
  62 |     'sb-refresh-token',
  63 |     'supabase-auth-token'
  64 |   ];
  65 |   
  66 |   // Clear each cookie
  67 |   authCookies.forEach(name => {
  68 |     response.cookies.set({
  69 |       name,
  70 |       value: '',
  71 |       expires: new Date(0), // Immediately expire
  72 |       path: '/',
  73 |     });
  74 |   });
  75 |   
  76 |   return response;
  77 | }
  78 | 
  79 | /**
  80 |  * Updates the Supabase Auth session in middleware
  81 |  * - Refreshes the auth token
  82 |  * - Validates the user's session
  83 |  * - Returns a NextResponse with updated cookies
  84 |  * - Redirects to login if no authenticated user is found
  85 |  */
  86 | export async function updateSession(request: NextRequest): Promise<NextResponse> {
  87 |   // Create the Supabase client
  88 |   const { supabase, response } = createClient(request);
  89 | 
  90 |   // IMPORTANT: DO NOT REMOVE auth.getUser() call or add code between
  91 |   // createClient and getUser() - this ensures proper token validation
  92 |   const { data, error } = await supabase.auth.getUser();
  93 | 
  94 |   // If no user is found or there's an error, redirect to login
  95 |   if (error || !data.user) {
  96 |     console.log('No authenticated user found. Redirecting to login page.');
  97 |     
  98 |     // Extract locale from URL
  99 |     const pathParts = request.nextUrl.pathname.split('/').filter(Boolean);
 100 |     const locale = pathParts.length > 0 && locales.includes(pathParts[0] as any) 
 101 |       ? pathParts[0] 
 102 |       : defaultLocale;
 103 |     
 104 |     // Create a new URL for the redirect
 105 |     const redirectUrl = new URL(`/${locale}/login`, request.url);
 106 |     
 107 |     // Create a redirect response
 108 |     const redirectResponse = NextResponse.redirect(redirectUrl, { status: 307 });
 109 |     
 110 |     // Clear auth cookies in the redirect response
 111 |     return clearAuthCookies(redirectResponse);
 112 |   }
 113 | 
 114 |   // Return the response with updated cookies for authenticated users
 115 |   return response;
 116 | }

```

`/workspaces/automai/src/lib/supabase/admin.ts`:

```ts
   1 | // DO NOT MODIFY THIS FILE
   2 | import { createClient as createSupabaseClient } from '@supabase/supabase-js';
   3 | 
   4 | // Cache the admin client
   5 | let adminClient: ReturnType<typeof createSupabaseClient> | null = null;
   6 | 
   7 | /**
   8 |  * Creates a Supabase admin client with service role permissions
   9 |  * - Uses service role key for privileged operations
  10 |  * - Falls back to anon key if service role not available (in development)
  11 |  * - Caches the client for efficiency
  12 |  */
  13 | export const createClient = () => {
  14 |   if (adminClient) return adminClient;
  15 |   
  16 |   const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  17 |   const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  18 |   const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
  19 |   
  20 |   // Use service key if available, otherwise fall back to anon key
  21 |   const key = serviceKey || anonKey;
  22 |   
  23 |   if (!serviceKey) {
  24 |     console.warn('SUPABASE_SERVICE_ROLE_KEY not found, using anon key. Admin operations will be limited.');
  25 |   }
  26 |   
  27 |   // Create and cache the admin client
  28 |   adminClient = createSupabaseClient(supabaseUrl, key, {
  29 |     auth: { persistSession: false },
  30 |   });
  31 |   
  32 |   return adminClient;
  33 | };

```

`/workspaces/automai/src/lib/supabase/index.ts`:

```ts
   1 | // Re-export everything from each file for convenient imports
   2 | export * as clientModule from './client';
   3 | export * as serverModule from './server';
   4 | export * as middlewareModule from './middleware';
   5 | export * as adminModule from './admin';
   6 | 
   7 | // Export the client creation functions directly
   8 | export { createClient as createBrowserClient } from './client';
   9 | export { createClient as createServerClient } from './server';
  10 | export { createClient as createMiddlewareClient } from './middleware';
  11 | export { createClient as createAdminClient } from './admin';

```

`/workspaces/automai/src/lib/supabase/db.ts`:

```ts
   1 | import { createClient } from '@/lib/supabase/server';
   2 | import { cookies } from 'next/headers';
   3 | 
   4 | // Create a simple database interface that uses Supabase
   5 | const db = {
   6 |   // Generic query method
   7 |   async query(table: string, query: any = {}) {
   8 |     const cookieStore = await cookies();
   9 |     const supabase = await createClient(cookieStore);
  10 |     
  11 |     let builder = supabase.from(table).select();
  12 |     
  13 |     // Apply filters if provided
  14 |     if (query.where) {
  15 |       Object.entries(query.where).forEach(([key, value]) => {
  16 |         builder = builder.eq(key, value);
  17 |       });
  18 |     }
  19 |     
  20 |     // Apply pagination
  21 |     if (query.take) {
  22 |       builder = builder.limit(query.take);
  23 |     }
  24 |     
  25 |     if (query.skip) {
  26 |       builder = builder.range(query.skip, query.skip + (query.take || 10) - 1);
  27 |     }
  28 |     
  29 |     // Execute the query
  30 |     const { data, error } = await builder;
  31 |     
  32 |     if (error) {
  33 |       console.error(`Error querying ${table}:`, error);
  34 |       return [];
  35 |     }
  36 |     
  37 |     return data || [];
  38 |   },
  39 |   
  40 |   user: {
  41 |     async findUnique({ where }: { where: any }) {
  42 |       const cookieStore = await cookies();
  43 |       const supabase = await createClient(cookieStore);
  44 |       
  45 |       const { data, error } = await supabase
  46 |         .from('users')
  47 |         .select()
  48 |         .match(where)
  49 |         .single();
  50 |       
  51 |       if (error) {
  52 |         console.error('Error finding user:', error);
  53 |         return null;
  54 |       }
  55 |       
  56 |       return data;
  57 |     },
  58 |     
  59 |     async findMany(options: any = {}) {
  60 |       return db.query('users', options);
  61 |     },
  62 |     
  63 |     async create({ data }: { data: any }) {
  64 |       const cookieStore = await cookies();
  65 |       const supabase = await createClient(cookieStore);
  66 |       
  67 |       const { data: result, error } = await supabase
  68 |         .from('users')
  69 |         .insert(data)
  70 |         .select()
  71 |         .single();
  72 |       
  73 |       if (error) {
  74 |         console.error('Error creating user:', error);
  75 |         throw error;
  76 |       }
  77 |       
  78 |       return result;
  79 |     },
  80 |     
  81 |     async update({ where, data }: { where: any; data: any }) {
  82 |       const cookieStore = await cookies();
  83 |       const supabase = await createClient(cookieStore);
  84 |       
  85 |       const { data: result, error } = await supabase
  86 |         .from('users')
  87 |         .update(data)
  88 |         .match(where)
  89 |         .select()
  90 |         .single();
  91 |       
  92 |       if (error) {
  93 |         console.error('Error updating user:', error);
  94 |         throw error;
  95 |       }
  96 |       
  97 |       return result;
  98 |     }
  99 |   },
 100 |   
 101 |   project: {
 102 |     async findUnique({ where }: { where: any }) {
 103 |       const cookieStore = await cookies();
 104 |       const supabase = await createClient(cookieStore);
 105 |       
 106 |       const { data, error } = await supabase
 107 |         .from('projects')
 108 |         .select()
 109 |         .match(where)
 110 |         .single();
 111 |       
 112 |       if (error) {
 113 |         console.error('Error finding project:', error);
 114 |         return null;
 115 |       }
 116 |       
 117 |       return data;
 118 |     },
 119 |     
 120 |     async findMany(options: any = {}) {
 121 |       return db.query('projects', options);
 122 |     },
 123 |     
 124 |     async create({ data }: { data: any }) {
 125 |       const cookieStore = await cookies();
 126 |       const supabase = await createClient(cookieStore);
 127 |       
 128 |       const { data: result, error } = await supabase
 129 |         .from('projects')
 130 |         .insert(data)
 131 |         .select()
 132 |         .single();
 133 |       
 134 |       if (error) {
 135 |         console.error('Error creating project:', error);
 136 |         throw error;
 137 |       }
 138 |       
 139 |       return result;
 140 |     },
 141 |     
 142 |     async update({ where, data }: { where: any; data: any }) {
 143 |       const cookieStore = await cookies();
 144 |       const supabase = await createClient(cookieStore);
 145 |       
 146 |       const { data: result, error } = await supabase
 147 |         .from('projects')
 148 |         .update(data)
 149 |         .match(where)
 150 |         .select()
 151 |         .single();
 152 |       
 153 |       if (error) {
 154 |         console.error('Error updating project:', error);
 155 |         throw error;
 156 |       }
 157 |       
 158 |       return result;
 159 |     },
 160 |     
 161 |     async delete({ where }: { where: any }) {
 162 |       const cookieStore = await cookies();
 163 |       const supabase = await createClient(cookieStore);
 164 |       
 165 |       const { error } = await supabase
 166 |         .from('projects')
 167 |         .delete()
 168 |         .match(where);
 169 |       
 170 |       if (error) {
 171 |         console.error('Error deleting project:', error);
 172 |         throw error;
 173 |       }
 174 |       
 175 |       return { success: true };
 176 |     }
 177 |   },
 178 |   
 179 |   tenant: {
 180 |     async findUnique({ where }: { where: any }) {
 181 |       const cookieStore = await cookies();
 182 |       const supabase = await createClient(cookieStore);
 183 |       
 184 |       const { data, error } = await supabase
 185 |         .from('tenants')
 186 |         .select()
 187 |         .match(where)
 188 |         .single();
 189 |       
 190 |       if (error) {
 191 |         console.error('Error finding tenant:', error);
 192 |         return null;
 193 |       }
 194 |       
 195 |       return data;
 196 |     },
 197 |     
 198 |     async findMany(options: any = {}) {
 199 |       const cookieStore = await cookies();
 200 |       const supabase = await createClient(cookieStore);
 201 |       
 202 |       let builder = supabase.from('tenants').select();
 203 |       
 204 |       // Apply filters if provided
 205 |       if (options.where) {
 206 |         Object.entries(options.where).forEach(([key, value]) => {
 207 |           builder = builder.eq(key, value);
 208 |         });
 209 |       }
 210 |       
 211 |       // Apply ordering
 212 |       if (options.orderBy) {
 213 |         Object.entries(options.orderBy).forEach(([key, value]) => {
 214 |           builder = builder.order(key, { ascending: value === 'asc' });
 215 |         });
 216 |       }
 217 |       
 218 |       const { data, error } = await builder;
 219 |       
 220 |       if (error) {
 221 |         console.error('Error finding tenants:', error);
 222 |         return [];
 223 |       }
 224 |       
 225 |       return data || [];
 226 |     },
 227 |     
 228 |     async create({ data }: { data: any }) {
 229 |       const cookieStore = await cookies();
 230 |       const supabase = await createClient(cookieStore);
 231 |       
 232 |       const { data: result, error } = await supabase
 233 |         .from('tenants')
 234 |         .insert(data)
 235 |         .select()
 236 |         .single();
 237 |       
 238 |       if (error) {
 239 |         console.error('Error creating tenant:', error);
 240 |         throw error;
 241 |       }
 242 |       
 243 |       return result;
 244 |     },
 245 |     
 246 |     async update({ where, data }: { where: any; data: any }) {
 247 |       const cookieStore = await cookies();
 248 |       const supabase = await createClient(cookieStore);
 249 |       
 250 |       const { data: result, error } = await supabase
 251 |         .from('tenants')
 252 |         .update(data)
 253 |         .match(where)
 254 |         .select()
 255 |         .single();
 256 |       
 257 |       if (error) {
 258 |         console.error('Error updating tenant:', error);
 259 |         throw error;
 260 |       }
 261 |       
 262 |       return result;
 263 |     }
 264 |   },
 265 |   
 266 |   gitProvider: {
 267 |     async findMany(options: any = {}) {
 268 |       const cookieStore = await cookies();
 269 |       const supabase = await createClient(cookieStore);
 270 |       
 271 |       let builder = supabase.from('git_providers').select();
 272 |       
 273 |       // Apply filters if provided
 274 |       if (options.where) {
 275 |         Object.entries(options.where).forEach(([key, value]) => {
 276 |           if (key === 'OR' && Array.isArray(value)) {
 277 |             // Handle OR conditions
 278 |             // This is a simplified approach - for complex OR queries, you might need a different strategy
 279 |             console.warn('OR queries are not fully supported in this implementation');
 280 |           } else if (key === 'in' && typeof value === 'object' && value !== null) {
 281 |             // Handle 'in' query with null check
 282 |             const fieldNames = Object.keys(value);
 283 |             if (fieldNames.length > 0) {
 284 |               const fieldName = fieldNames[0];
 285 |               // Use type assertion to handle the indexing safely
 286 |               const fieldValue = value as Record<string, unknown>;
 287 |               const values = fieldValue[fieldName];
 288 |               if (Array.isArray(values)) {
 289 |                 builder = builder.in(fieldName, values);
 290 |               }
 291 |             }
 292 |           } else {
 293 |             builder = builder.eq(key, value);
 294 |           }
 295 |         });
 296 |       }
 297 |       
 298 |       // Apply ordering
 299 |       if (options.orderBy) {
 300 |         const [field, direction] = Object.entries(options.orderBy)[0];
 301 |         builder = builder.order(field as string, { ascending: direction === 'asc' });
 302 |       } else {
 303 |         builder = builder.order('created_at', { ascending: false });
 304 |       }
 305 |       
 306 |       // Apply pagination
 307 |       if (options.take) {
 308 |         builder = builder.limit(options.take);
 309 |       }
 310 |       
 311 |       if (options.skip) {
 312 |         builder = builder.range(options.skip, options.skip + (options.take || 10) - 1);
 313 |       }
 314 |       
 315 |       // Execute the query
 316 |       const { data, error } = await builder;
 317 |       
 318 |       if (error) {
 319 |         console.error('Error querying git providers:', error);
 320 |         return [];
 321 |       }
 322 |       
 323 |       return data || [];
 324 |     },
 325 |     
 326 |     async findUnique({ where }: { where: any }) {
 327 |       const cookieStore = await cookies();
 328 |       const supabase = await createClient(cookieStore);
 329 |       
 330 |       const { data, error } = await supabase
 331 |         .from('git_providers')
 332 |         .select()
 333 |         .match(where)
 334 |         .single();
 335 |       
 336 |       if (error) {
 337 |         console.error('Error finding git provider:', error);
 338 |         return null;
 339 |       }
 340 |       
 341 |       return data;
 342 |     },
 343 |     
 344 |     async create({ data }: { data: any }) {
 345 |       const cookieStore = await cookies();
 346 |       const supabase = await createClient(cookieStore);
 347 |       
 348 |       const { data: result, error } = await supabase
 349 |         .from('git_providers')
 350 |         .insert(data)
 351 |         .select()
 352 |         .single();
 353 |       
 354 |       if (error) {
 355 |         console.error('Error creating git provider:', error);
 356 |         throw error;
 357 |       }
 358 |       
 359 |       return result;
 360 |     },
 361 |     
 362 |     async update({ where, data }: { where: any; data: any }) {
 363 |       const cookieStore = await cookies();
 364 |       const supabase = await createClient(cookieStore);
 365 |       
 366 |       const { data: result, error } = await supabase
 367 |         .from('git_providers')
 368 |         .update(data)
 369 |         .match(where)
 370 |         .select()
 371 |         .single();
 372 |       
 373 |       if (error) {
 374 |         console.error('Error updating git provider:', error);
 375 |         throw error;
 376 |       }
 377 |       
 378 |       return result;
 379 |     },
 380 |     
 381 |     async delete({ where }: { where: any }) {
 382 |       const cookieStore = await cookies();
 383 |       const supabase = await createClient(cookieStore);
 384 |       
 385 |       const { error } = await supabase
 386 |         .from('git_providers')
 387 |         .delete()
 388 |         .match(where);
 389 |       
 390 |       if (error) {
 391 |         console.error('Error deleting git provider:', error);
 392 |         throw error;
 393 |       }
 394 |       
 395 |       return { success: true };
 396 |     }
 397 |   },
 398 |   
 399 |   repository: {
 400 |     async findMany(options: any = {}) {
 401 |       const cookieStore = await cookies();
 402 |       const supabase = await createClient(cookieStore);
 403 |       
 404 |       let selectQuery = '*';
 405 |       if (options.include?.provider) {
 406 |         selectQuery = '*, git_providers(*)';
 407 |       }
 408 |       
 409 |       let builder = supabase.from('repositories').select(selectQuery);
 410 |       
 411 |       // Apply filters if provided
 412 |       if (options.where) {
 413 |         Object.entries(options.where).forEach(([key, value]) => {
 414 |           if (key === 'provider_id' && typeof value === 'object' && value !== null && 'in' in value && Array.isArray((value as any).in)) {
 415 |             builder = builder.in('provider_id', (value as any).in);
 416 |           } else {
 417 |             builder = builder.eq(key, value);
 418 |           }
 419 |         });
 420 |       }
 421 |       
 422 |       // Apply pagination
 423 |       if (options.take) {
 424 |         builder = builder.limit(options.take);
 425 |       }
 426 |       
 427 |       if (options.skip) {
 428 |         builder = builder.range(options.skip, options.skip + (options.take || 10) - 1);
 429 |       }
 430 |       
 431 |       // Execute the query
 432 |       const { data, error } = await builder;
 433 |       
 434 |       if (error) {
 435 |         console.error('Error querying repositories:', error);
 436 |         return [];
 437 |       }
 438 |       
 439 |       return data || [];
 440 |     },
 441 |     
 442 |     async findUnique({ where }: { where: any }) {
 443 |       const cookieStore = await cookies();
 444 |       const supabase = await createClient(cookieStore);
 445 |       
 446 |       const { data, error } = await supabase
 447 |         .from('repositories')
 448 |         .select('*, git_providers(*)')
 449 |         .match(where)
 450 |         .single();
 451 |       
 452 |       if (error) {
 453 |         console.error('Error finding repository:', error);
 454 |         return null;
 455 |       }
 456 |       
 457 |       return data;
 458 |     },
 459 |     
 460 |     async create({ data }: { data: any }) {
 461 |       const cookieStore = await cookies();
 462 |       const supabase = await createClient(cookieStore);
 463 |       
 464 |       const { data: result, error } = await supabase
 465 |         .from('repositories')
 466 |         .insert(data)
 467 |         .select()
 468 |         .single();
 469 |       
 470 |       if (error) {
 471 |         console.error('Error creating repository:', error);
 472 |         throw error;
 473 |       }
 474 |       
 475 |       return result;
 476 |     },
 477 |     
 478 |     async update({ where, data }: { where: any; data: any }) {
 479 |       const cookieStore = await cookies();
 480 |       const supabase = await createClient(cookieStore);
 481 |       
 482 |       const { data: result, error } = await supabase
 483 |         .from('repositories')
 484 |         .update(data)
 485 |         .match(where)
 486 |         .select()
 487 |         .single();
 488 |       
 489 |       if (error) {
 490 |         console.error('Error updating repository:', error);
 491 |         throw error;
 492 |       }
 493 |       
 494 |       return result;
 495 |     },
 496 |     
 497 |     async delete({ where }: { where: any }) {
 498 |       const cookieStore = await cookies();
 499 |       const supabase = await createClient(cookieStore);
 500 |       
 501 |       const { error } = await supabase
 502 |         .from('repositories')
 503 |         .delete()
 504 |         .match(where);
 505 |       
 506 |       if (error) {
 507 |         console.error('Error deleting repository:', error);
 508 |         throw error;
 509 |       }
 510 |       
 511 |       return { success: true };
 512 |     }
 513 |   },
 514 |   
 515 |   host: {
 516 |     async findMany(options: any = {}) {
 517 |       const cookieStore = await cookies();
 518 |       const supabase = await createClient(cookieStore);
 519 |       
 520 |       let builder = supabase.from('hosts').select('*');
 521 |       
 522 |       // Apply filters if provided
 523 |       if (options.where) {
 524 |         Object.entries(options.where).forEach(([key, value]) => {
 525 |           builder = builder.eq(key, value);
 526 |         });
 527 |       }
 528 |       
 529 |       // Apply ordering
 530 |       if (options.orderBy) {
 531 |         const [field, direction] = Object.entries(options.orderBy)[0];
 532 |         builder = builder.order(field as string, { ascending: direction === 'asc' });
 533 |       } else {
 534 |         builder = builder.order('created_at', { ascending: false });
 535 |       }
 536 |       
 537 |       // Apply pagination
 538 |       if (options.take) {
 539 |         builder = builder.limit(options.take);
 540 |       }
 541 |       
 542 |       if (options.skip) {
 543 |         builder = builder.range(options.skip, options.skip + (options.take || 10) - 1);
 544 |       }
 545 |       
 546 |       // Execute the query
 547 |       const { data, error } = await builder;
 548 |       
 549 |       if (error) {
 550 |         console.error('Error querying hosts:', error);
 551 |         return [];
 552 |       }
 553 |       
 554 |       return data || [];
 555 |     },
 556 |     
 557 |     async findUnique({ where }: { where: any }) {
 558 |       const cookieStore = await cookies();
 559 |       const supabase = await createClient(cookieStore);
 560 |       
 561 |       const { data, error } = await supabase
 562 |         .from('hosts')
 563 |         .select()
 564 |         .match(where)
 565 |         .single();
 566 |       
 567 |       if (error) {
 568 |         console.error('Error finding host:', error);
 569 |         return null;
 570 |       }
 571 |       
 572 |       return data;
 573 |     },
 574 |     
 575 |     async create({ data }: { data: any }) {
 576 |       const cookieStore = await cookies();
 577 |       const supabase = await createClient(cookieStore);
 578 |       
 579 |       const { data: result, error } = await supabase
 580 |         .from('hosts')
 581 |         .insert(data)
 582 |         .select()
 583 |         .single();
 584 |       
 585 |       if (error) {
 586 |         console.error('Error creating host:', error);
 587 |         throw error;
 588 |       }
 589 |       
 590 |       return result;
 591 |     },
 592 |     
 593 |     async update({ where, data }: { where: any; data: any }) {
 594 |       const cookieStore = await cookies();
 595 |       const supabase = await createClient(cookieStore);
 596 |       
 597 |       const { data: result, error } = await supabase
 598 |         .from('hosts')
 599 |         .update(data)
 600 |         .match(where)
 601 |         .select()
 602 |         .single();
 603 |       
 604 |       if (error) {
 605 |         console.error('Error updating host:', error);
 606 |         throw error;
 607 |       }
 608 |       
 609 |       return result;
 610 |     },
 611 |     
 612 |     async delete({ where }: { where: any }) {
 613 |       const cookieStore = await cookies();
 614 |       const supabase = await createClient(cookieStore);
 615 |       
 616 |       const { error } = await supabase
 617 |         .from('hosts')
 618 |         .delete()
 619 |         .match(where);
 620 |       
 621 |       if (error) {
 622 |         console.error('Error deleting host:', error);
 623 |         throw error;
 624 |       }
 625 |       
 626 |       return { success: true };
 627 |     }
 628 |   }
 629 | };
 630 | 
 631 | export default db;

```

`/workspaces/automai/src/lib/supabase/server.ts`:

```ts
   1 | //DO NOT MODIFY
   2 | import { createServerClient } from "@supabase/ssr";
   3 | import { cookies } from "next/headers";
   4 | import type { CookieOptions } from "@supabase/ssr";
   5 | 
   6 | type CookieStore = ReturnType<typeof cookies> extends Promise<infer T> ? T : never;
   7 | 
   8 | export const createClient = async (cookieStore?: CookieStore) => {
   9 |   const resolvedCookieStore: CookieStore = cookieStore ?? (await cookies());
  10 |   return createServerClient(
  11 |     process.env.NEXT_PUBLIC_SUPABASE_URL!,
  12 |     process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  13 |     {
  14 |       cookies: {
  15 |         getAll() {
  16 |           return resolvedCookieStore.getAll().map((cookie) => ({ ...cookie }));
  17 |         },
  18 |         setAll(cookiesToSet: { name: string; value: string; options?: CookieOptions }[]) {
  19 |           try {
  20 |             cookiesToSet.forEach(({ name, value, options }) => {
  21 |               resolvedCookieStore.set(name, value, options);
  22 |             });
  23 |           } catch {
  24 |             // Ignore if called from a Server Component with middleware refreshing sessions
  25 |           }
  26 |         },
  27 |       },
  28 |     }
  29 |   );
  30 | };

```

`/workspaces/automai/src/lib/supabase/client.ts`:

```ts
   1 | // DO NOT MODIFY THIS FILE
   2 | import { createBrowserClient } from '@supabase/ssr';
   3 | 
   4 | // Cache the client instance to avoid creating multiple instances
   5 | // that lead to GoTrueClient warnings
   6 | let browserClientInstance: ReturnType<typeof createBrowserClient> | null = null;
   7 | 
   8 | /**
   9 |  * Creates a Supabase client for browser/client components
  10 |  * - Caches the client to prevent multiple instances
  11 |  * - Uses browser-specific implementation from @supabase/ssr
  12 |  */
  13 | export const createClient = async () => {
  14 |   if (typeof window === 'undefined') {
  15 |     throw new Error('createClient should only be called in browser/client components');
  16 |   }
  17 |   
  18 |   // Return cached instance if available
  19 |   if (browserClientInstance) {
  20 |     return browserClientInstance;
  21 |   }
  22 |   
  23 |   // Create and cache the client
  24 |   browserClientInstance = createBrowserClient(
  25 |     process.env.NEXT_PUBLIC_SUPABASE_URL!,
  26 |     process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  27 |   );
  28 |   
  29 |   return browserClientInstance;
  30 | };

```

`/workspaces/automai/src/lib/logger.ts`:

```ts
   1 | /**
   2 |  * Logger utility for backend interactions
   3 |  * Provides consistent logging format and levels
   4 |  */
   5 | 
   6 | export type LogLevel = 'debug' | 'info' | 'warn' | 'error';
   7 | 
   8 | export interface LogOptions {
   9 |   userId?: string;
  10 |   tenantId?: string;
  11 |   ip?: string;
  12 |   action?: string;
  13 |   connectionId?: string;
  14 |   data?: Record<string, any>;
  15 |   pathname?: string;
  16 |   connectionType?: string;
  17 |   type?: string;
  18 |   error?: string | Error;
  19 |   path?: string;
  20 |   [key: string]: any; // Allow any additional properties
  21 | }
  22 | 
  23 | // Environment-based logging (more verbose in development)
  24 | const isDev = process.env.NODE_ENV === 'development';
  25 | 
  26 | // Helper to determine if we should log based on environment and level
  27 | function shouldLog(level: LogLevel): boolean {
  28 |   // Always log info and above
  29 |   return level !== 'debug';
  30 | }
  31 | 
  32 | /**
  33 |  * Log a message with metadata
  34 |  */
  35 | export function log(level: LogLevel, message: string, options: LogOptions = {}): void {
  36 |   if (!shouldLog(level)) return;
  37 | 
  38 |   const timestamp = new Date().toISOString();
  39 |   const { userId, tenantId, ip, action, connectionId, data } = options;
  40 | 
  41 |   const logEntry = {
  42 |     timestamp,
  43 |     level,
  44 |     message,
  45 |     userId,
  46 |     tenantId,
  47 |     ip,
  48 |     action,
  49 |     connectionId,
  50 |     data,
  51 |   };
  52 | 
  53 |   // Use info level for all console logs
  54 |   console.info(JSON.stringify(logEntry));
  55 | 
  56 |   // Database logging has been removed
  57 | }
  58 | 
  59 | /**
  60 |  * Convenience methods for different log levels
  61 |  */
  62 | export const logger = {
  63 |   debug: (message: string, options?: LogOptions) => log('debug', message, options),
  64 |   info: (message: string, options?: LogOptions) => log('info', message, options),
  65 |   warn: (message: string, options?: LogOptions) => log('warn', message, options),
  66 |   error: (message: string, options?: LogOptions) => log('error', message, options),
  67 | };

```

`/workspaces/automai/src/lib/utils.ts`:

```ts
   1 | import { clsx, type ClassValue } from 'clsx';
   2 | import { twMerge } from 'tailwind-merge';
   3 | 
   4 | export function cn(...inputs: ClassValue[]) {
   5 |   return twMerge(clsx(inputs));
   6 | }
   7 | 
   8 | export function debounce<T extends (...args: any[]) => any>(
   9 |   func: T,
  10 |   wait: number,
  11 | ): (...args: Parameters<T>) => void {
  12 |   let timeout: NodeJS.Timeout | null = null;
  13 | 
  14 |   return function (...args: Parameters<T>) {
  15 |     if (timeout) {
  16 |       clearTimeout(timeout);
  17 |     }
  18 | 
  19 |     timeout = setTimeout(() => {
  20 |       func(...args);
  21 |     }, wait);
  22 |   };
  23 | }

```

`/workspaces/automai/src/lib/env.ts`:

```ts
   1 | import { z } from 'zod';
   2 | 
   3 | // Define environment schema
   4 | const envSchema = z
   5 |   .object({
   6 |     // Server
   7 |     NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
   8 |     PORT: z.string().transform(Number).default('3000'),
   9 | 
  10 | 
  11 |     NEXT_PUBLIC_SUPABASE_URL: z.string().url().optional(),
  12 |     NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().optional(),
  13 |     SUPABASE_SERVICE_ROLE_KEY: z.string().optional(),
  14 | 
  15 |     // Authentication
  16 |     JWT_SECRET: z.string().min(1),
  17 | 
  18 |   })
  19 |   .refine(
  20 |     // Supabase credentials are required in production environment
  21 |     (data) => {
  22 |       return !!data.NEXT_PUBLIC_SUPABASE_URL && !!data.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  23 |     },
  24 |     {
  25 |       message: 'Supabase credentials are required in production environment',
  26 |       path: ['NEXT_PUBLIC_SUPABASE_URL', 'NEXT_PUBLIC_SUPABASE_ANON_KEY'],
  27 |     },
  28 |   );
  29 | 
  30 | // Process environment variables
  31 | const processEnv = {
  32 |   NODE_ENV: process.env.NODE_ENV,
  33 |   PORT: process.env.PORT,
  34 |   NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
  35 |   NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
  36 |   SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY,
  37 |   JWT_SECRET: process.env.JWT_SECRET,
  38 | };
  39 | 
  40 | // Detect if we're in a browser environment
  41 | const isBrowser = typeof window !== 'undefined';
  42 | 
  43 | // For client-side, only validate public env vars
  44 | const clientEnvSchema = z.object({
  45 |   NEXT_PUBLIC_SUPABASE_URL: z.string().url().optional().default('http://localhost:54321'),
  46 |   NEXT_PUBLIC_SUPABASE_ANON_KEY: z
  47 |     .string()
  48 |     .optional()
  49 |     .default(
  50 |       'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0',
  51 |     ),
  52 |   NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
  53 | });
  54 | 
  55 | // Validate and export environment configuration based on environment
  56 | export const env = isBrowser
  57 |   ? clientEnvSchema.parse({
  58 |       NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
  59 |       NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
  60 |       NODE_ENV: process.env.NODE_ENV,
  61 |     })
  62 |   : envSchema.parse(processEnv);
  63 | 
  64 | // Safe helper functions that work in both browser and server
  65 | export const isCodespace = () => {
  66 |   if (isBrowser) {
  67 |     return typeof window !== 'undefined' && window.location.hostname.includes('.app.github.dev');
  68 |   }
  69 |   return Boolean(process.env.CODESPACE);
  70 | };
  71 | export const isDevelopment = () => process.env.NODE_ENV === 'development';
  72 | export const isProduction = () => process.env.NODE_ENV === 'production';
  73 | 
  74 | // Helper to check if we're using Supabase
  75 | export const isUsingSupabase = () => {
  76 |   return (
  77 |     Boolean(process.env.NEXT_PUBLIC_SUPABASE_URL) &&
  78 |     Boolean(process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)
  79 |   );
  80 | };
  81 | 
  82 | // Dynamic site URL determination based on environment
  83 | export const getSiteUrl = () => {
  84 |   // Client-side: use the current origin
  85 |   if (isBrowser) {
  86 |     return window.location.origin;
  87 |   }
  88 | 
  89 |   // Server-side determination based on environment
  90 |   if (isCodespace()) {
  91 |     return `https://${process.env.CODESPACE_NAME}-3000.${process.env.GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN || 'app.github.dev'}`;
  92 |   }
  93 |   
  94 |   // Production
  95 |   if (isProduction()) {
  96 |     return 'https://automai-eta.vercel.app';
  97 |   }
  98 |   
  99 |   // Development fallback
 100 |   return 'http://localhost:3000';
 101 | };

```

`/workspaces/automai/src/lib/api/hosts.ts`:

```ts
   1 | /**
   2 |  * @fileoverview Client-side Host API Layer
   3 |  * This file contains the API calls for host management.
   4 |  * Does NOT contain business logic - only API calls.
   5 |  */
   6 | 
   7 | import { Host } from '@/types/hosts';
   8 | 
   9 | // Helper to get the base URL
  10 | const getBaseUrl = () => {
  11 |   return typeof window !== 'undefined' ? window.location.origin : '';
  12 | };
  13 | 
  14 | export const hostsApi = {
  15 |   /**
  16 |    * Get all hosts
  17 |    */
  18 |   getHosts: async () => {
  19 |     // Add cache-busting parameter to prevent browser caching
  20 |     const timestamp = new Date().getTime();
  21 |     const response = await fetch(`${getBaseUrl()}/api/hosts?_=${timestamp}`, {
  22 |       method: 'GET',
  23 |       headers: {
  24 |         'Cache-Control': 'no-cache, no-store, must-revalidate',
  25 |         Pragma: 'no-cache',
  26 |         Expires: '0',
  27 |         'X-Requested-With': 'XMLHttpRequest',
  28 |       },
  29 |       cache: 'no-store',
  30 |     });
  31 |     if (!response.ok) throw new Error('Failed to fetch hosts');
  32 |     return response.json();
  33 |   },
  34 | 
  35 |   /**
  36 |    * Delete a host
  37 |    */
  38 |   deleteHost: async (id: string) => {
  39 |     const response = await fetch(`${getBaseUrl()}/api/hosts/${id}`, {
  40 |       method: 'DELETE',
  41 |     });
  42 |     if (!response.ok) throw new Error('Failed to delete host');
  43 |     return response.json();
  44 |   },
  45 | 
  46 |   /**
  47 |    * Test host connection
  48 |    */
  49 |   testConnection: async (data: {
  50 |     type: string;
  51 |     ip: string;
  52 |     port?: number;
  53 |     username?: string;
  54 |     password?: string;
  55 |     hostId?: string;
  56 |   }) => {
  57 |     const requestData = {
  58 |       type: data.type,
  59 |       ip: data.ip,
  60 |       port: data.port,
  61 |       username: data.username,
  62 |       hostId: data.hostId,
  63 |       ...(data.password && { password: data.password }),
  64 |     };
  65 | 
  66 |     const response = await fetch(`${getBaseUrl()}/api/hosts/test-connection`, {
  67 |       method: 'POST',
  68 |       headers: {
  69 |         'Content-Type': 'application/json',
  70 |       },
  71 |       body: JSON.stringify(requestData),
  72 |     });
  73 | 
  74 |     if (!response.ok) {
  75 |       const error = await response.text();
  76 |       try {
  77 |         const parsed = JSON.parse(error);
  78 |         throw new Error(parsed.message || 'Failed to test connection');
  79 |       } catch {
  80 |         throw new Error('Failed to test connection');
  81 |       }
  82 |     }
  83 | 
  84 |     return response.json();
  85 |   },
  86 | 
  87 |   /**
  88 |    * Test all host connections at once
  89 |    */
  90 |   testAllHosts: async () => {
  91 |     // Add cache-busting parameter to prevent browser caching
  92 |     const timestamp = new Date().getTime();
  93 |     const response = await fetch(`${getBaseUrl()}/api/hosts/test-all?_=${timestamp}`, {
  94 |       method: 'GET',
  95 |       headers: {
  96 |         'Cache-Control': 'no-cache, no-store, must-revalidate',
  97 |         Pragma: 'no-cache',
  98 |         Expires: '0',
  99 |         'X-Requested-With': 'XMLHttpRequest',
 100 |       },
 101 |       cache: 'no-store',
 102 |     });
 103 |     if (!response.ok) throw new Error('Failed to test all connections');
 104 |     return response.json();
 105 |   },
 106 | 
 107 |   async verifyFingerprint(data: { fingerprint: string; host: string; port?: number }) {
 108 |     const response = await fetch(`${getBaseUrl()}/api/hosts/verify-fingerprint`, {
 109 |       method: 'POST',
 110 |       headers: {
 111 |         'Content-Type': 'application/json',
 112 |       },
 113 |       body: JSON.stringify(data),
 114 |     });
 115 | 
 116 |     if (!response.ok) {
 117 |       const error = await response.text();
 118 |       try {
 119 |         const parsed = JSON.parse(error);
 120 |         throw new Error(parsed.message || 'Failed to verify fingerprint');
 121 |       } catch {
 122 |         throw new Error('Failed to verify fingerprint');
 123 |       }
 124 |     }
 125 | 
 126 |     return response.json();
 127 |   },
 128 | 
 129 |   /**
 130 |    * Create a new host
 131 |    *
 132 |    * @param {Object} data - Host data
 133 |    * @param {string} data.name - Required: Host name
 134 |    * @param {string} data.description - Optional: Host description
 135 |    * @param {string} data.type - Required: Host type (ssh, docker, portainer)
 136 |    * @param {string} data.ip - Required: Host IP address
 137 |    * @param {number} data.port - Optional: Host port (defaults to 22 for SSH)
 138 |    * @param {string} data.user - Required for SSH: Username (can also be provided as 'username')
 139 |    * @param {string} data.password - Required for SSH: Password
 140 |    * @param {string} data.status - Optional: Initial status (defaults to 'pending')
 141 |    * @returns {Promise<Host>} Created host
 142 |    */
 143 |   createHost: async (data: {
 144 |     name: string;
 145 |     description: string;
 146 |     type: string;
 147 |     ip: string;
 148 |     port: number;
 149 |     user?: string;
 150 |     username?: string; // Allow either user or username
 151 |     password: string;
 152 |     status: string;
 153 |   }) => {
 154 |     try {
 155 |       // Normalize the data to ensure we have 'user' property
 156 |       const normalizedData = {
 157 |         name: data.name,
 158 |         description: data.description,
 159 |         type: data.type,
 160 |         ip: data.ip,
 161 |         port: data.port,
 162 |         user: data.user || data.username, // Use user if available, otherwise fallback to username
 163 |         password: data.password,
 164 |         status: data.status,
 165 |       };
 166 | 
 167 |       console.log('Creating host with data:', {
 168 |         ...normalizedData,
 169 |         password: '***' // Mask password in logs
 170 |       });
 171 | 
 172 |       const response = await fetch(`${getBaseUrl()}/api/hosts`, {
 173 |         method: 'POST',
 174 |         headers: {
 175 |           'Content-Type': 'application/json',
 176 |         },
 177 |         body: JSON.stringify(normalizedData),
 178 |       });
 179 | 
 180 |       if (!response.ok) {
 181 |         // Try to extract detailed error information
 182 |         try {
 183 |           const errorData = await response.json();
 184 |           console.error('Error creating host:', errorData);
 185 |           throw new Error(errorData.message || errorData.error || 'Failed to create host');
 186 |         } catch (parseError) {
 187 |           // If we can't parse the error JSON, fall back to generic error
 188 |           console.error('Error creating host:', response.status, response.statusText);
 189 |           throw new Error(`Failed to create host: ${response.status} ${response.statusText}`);
 190 |         }
 191 |       }
 192 | 
 193 |       return response.json();
 194 |     } catch (error) {
 195 |       console.error('Host creation error:', error);
 196 |       throw error; // Re-throw the error to be caught by the caller
 197 |     }
 198 |   },
 199 | 
 200 |   /**
 201 |    * Check connections for multiple hosts sequentially
 202 |    */
 203 |   checkAllConnections: async (hosts: Host[]) => {
 204 |     const results = [];
 205 |     for (const host of hosts) {
 206 |       const result = await hostsApi.testConnection({
 207 |         type: host.type,
 208 |         ip: host.ip,
 209 |         port: host.port,
 210 |         username: host.user,
 211 |         password: host.password,
 212 |         hostId: host.id,
 213 |       });
 214 |       results.push({ hostId: host.id, result });
 215 |       await new Promise((resolve) => setTimeout(resolve, 300)); // Small delay to avoid overwhelming the server
 216 |     }
 217 |     return results;
 218 |   },
 219 | };

```

`/workspaces/automai/src/lib/db.ts`:

```ts
   1 | import { createClient } from '@/lib/supabase/server';
   2 | 
   3 | 
   4 | // Create a simple database interface that uses Supabase
   5 | const db = {
   6 |   // Generic query method
   7 |   async query(table: string, query: any = {}) {
   8 |     const cookieStore = cookies();
   9 |     const supabase = await createClient(cookieStore);
  10 |     
  11 |     let builder = supabase.from(table).select();
  12 |     
  13 |     // Apply filters if provided
  14 |     if (query.where) {
  15 |       Object.entries(query.where).forEach(([key, value]) => {
  16 |         builder = builder.eq(key, value);
  17 |       });
  18 |     }
  19 |     
  20 |     // Apply pagination
  21 |     if (query.take) {
  22 |       builder = builder.limit(query.take);
  23 |     }
  24 |     
  25 |     if (query.skip) {
  26 |       builder = builder.range(query.skip, query.skip + (query.take || 10) - 1);
  27 |     }
  28 |     
  29 |     // Apply ordering
  30 |     if (query.orderBy) {
  31 |       Object.entries(query.orderBy).forEach(([key, value]) => {
  32 |         builder = builder.order(key, { ascending: value === 'asc' });
  33 |       });
  34 |     }
  35 |     
  36 |     const { data, error } = await builder;
  37 |     
  38 |     if (error) {
  39 |       console.error('Database query error:', error);
  40 |       throw error;
  41 |     }
  42 |     
  43 |     return data;
  44 |   },
  45 |   
  46 |   user: {
  47 |     async findUnique({ where }: { where: any }) {
  48 |       const cookieStore = cookies();
  49 |       const supabase = await createClient(cookieStore);
  50 |       
  51 |       const { data, error } = await supabase
  52 |         .from('users')
  53 |         .select()
  54 |         .match(where)
  55 |         .single();
  56 |       
  57 |       if (error) {
  58 |         console.error('Error finding user:', error);
  59 |         return null;
  60 |       }
  61 |       
  62 |       return data;
  63 |     },
  64 |     
  65 |     async findMany(options: any = {}) {
  66 |       return db.query('users', options);
  67 |     },
  68 |     
  69 |     async create({ data }: { data: any }) {
  70 |       const cookieStore = cookies();
  71 |       const supabase = await createClient(cookieStore);
  72 |       
  73 |       const { data: result, error } = await supabase
  74 |         .from('users')
  75 |         .insert(data)
  76 |         .select()
  77 |         .single();
  78 |       
  79 |       if (error) {
  80 |         console.error('Error creating user:', error);
  81 |         throw error;
  82 |       }
  83 |       
  84 |       return result;
  85 |     },
  86 |     
  87 |     async update({ where, data }: { where: any; data: any }) {
  88 |       const cookieStore = cookies();
  89 |       const supabase = await createClient(cookieStore);
  90 |       
  91 |       const { data: result, error } = await supabase
  92 |         .from('users')
  93 |         .update(data)
  94 |         .match(where)
  95 |         .select()
  96 |         .single();
  97 |       
  98 |       if (error) {
  99 |         console.error('Error updating user:', error);
 100 |         throw error;
 101 |       }
 102 |       
 103 |       return result;
 104 |     }
 105 |   },
 106 |   
 107 |   // Add other tables as needed following the same pattern
 108 |   project: {
 109 |     async findMany(options: any = {}) {
 110 |       return db.query('projects', options);
 111 |     },
 112 |     
 113 |     async findUnique({ where }: { where: any }) {
 114 |       const cookieStore = cookies();
 115 |       const supabase = await createClient(cookieStore);
 116 |       
 117 |       const { data, error } = await supabase
 118 |         .from('projects')
 119 |         .select()
 120 |         .match(where)
 121 |         .single();
 122 |       
 123 |       if (error && error.code !== 'PGRST116') { // PGRST116 is "no rows returned"
 124 |         console.error('Error finding project:', error);
 125 |         throw error;
 126 |       }
 127 |       
 128 |       return data || null;
 129 |     },
 130 |     
 131 |     async create({ data }: { data: any }) {
 132 |       const cookieStore = cookies();
 133 |       const supabase = await createClient(cookieStore);
 134 |       
 135 |       const { data: result, error } = await supabase
 136 |         .from('projects')
 137 |         .insert(data)
 138 |         .select()
 139 |         .single();
 140 |       
 141 |       if (error) {
 142 |         console.error('Error creating project:', error);
 143 |         throw error;
 144 |       }
 145 |       
 146 |       return result;
 147 |     },
 148 |     
 149 |     async update({ where, data }: { where: any; data: any }) {
 150 |       const cookieStore = cookies();
 151 |       const supabase = await createClient(cookieStore);
 152 |       
 153 |       const { data: result, error } = await supabase
 154 |         .from('projects')
 155 |         .update(data)
 156 |         .match(where)
 157 |         .select()
 158 |         .single();
 159 |       
 160 |       if (error) {
 161 |         console.error('Error updating project:', error);
 162 |         throw error;
 163 |       }
 164 |       
 165 |       return result;
 166 |     },
 167 |     
 168 |     async delete({ where }: { where: any }) {
 169 |       const cookieStore = cookies();
 170 |       const supabase = await createClient(cookieStore);
 171 |       
 172 |       const { error } = await supabase
 173 |         .from('projects')
 174 |         .delete()
 175 |         .match(where);
 176 |       
 177 |       if (error) {
 178 |         console.error('Error deleting project:', error);
 179 |         throw error;
 180 |       }
 181 |       
 182 |       return { success: true };
 183 |     }
 184 |   },
 185 |   
 186 |   // Add tenant model
 187 |   tenant: {
 188 |     async findUnique({ where }: { where: any }) {
 189 |       const cookieStore = cookies();
 190 |       const supabase = await createClient(cookieStore);
 191 |       
 192 |       const { data, error } = await supabase
 193 |         .from('tenants')
 194 |         .select()
 195 |         .match(where)
 196 |         .single();
 197 |       
 198 |       if (error && error.code !== 'PGRST116') { // PGRST116 is "no rows returned"
 199 |         console.error('Error finding tenant:', error);
 200 |         throw error;
 201 |       }
 202 |       
 203 |       return data || null;
 204 |     },
 205 |     
 206 |     async create({ data }: { data: any }) {
 207 |       const cookieStore = cookies();
 208 |       const supabase = await createClient(cookieStore);
 209 |       
 210 |       const { data: result, error } = await supabase
 211 |         .from('tenants')
 212 |         .insert(data)
 213 |         .select()
 214 |         .single();
 215 |       
 216 |       if (error) {
 217 |         console.error('Error creating tenant:', error);
 218 |         throw error;
 219 |       }
 220 |       
 221 |       return result;
 222 |     },
 223 |     
 224 |     async update({ where, data }: { where: any; data: any }) {
 225 |       const cookieStore = cookies();
 226 |       const supabase = await createClient(cookieStore);
 227 |       
 228 |       const { data: result, error } = await supabase
 229 |         .from('tenants')
 230 |         .update(data)
 231 |         .match(where)
 232 |         .select()
 233 |         .single();
 234 |       
 235 |       if (error) {
 236 |         console.error('Error updating tenant:', error);
 237 |         throw error;
 238 |       }
 239 |       
 240 |       return result;
 241 |     }
 242 |   },
 243 |   
 244 |   // Add GitProvider model
 245 |   gitProvider: {
 246 |     async findMany(options: any = {}) {
 247 |       const cookieStore = cookies();
 248 |       const supabase = await createClient(cookieStore);
 249 |       
 250 |       let builder = supabase.from('git_providers').select();
 251 |       
 252 |       // Apply filters if provided
 253 |       if (options.where) {
 254 |         Object.entries(options.where).forEach(([key, value]) => {
 255 |           if (key === 'userId') {
 256 |             builder = builder.eq('user_id', value);
 257 |           } else if (key === 'in' && typeof value === 'object') {
 258 |             // Handle 'in' query
 259 |             const fieldName = Object.keys(value)[0];
 260 |             const values = value[fieldName];
 261 |             builder = builder.in(fieldName, values);
 262 |           } else {
 263 |             builder = builder.eq(key, value);
 264 |           }
 265 |         });
 266 |       }
 267 |       
 268 |       // Handle select option
 269 |       if (options.select) {
 270 |         const selectFields = Object.keys(options.select).join(',');
 271 |         builder = supabase.from('git_providers').select(selectFields);
 272 |       }
 273 |       
 274 |       const { data, error } = await builder;
 275 |       
 276 |       if (error) {
 277 |         console.error('Error finding git providers:', error);
 278 |         throw error;
 279 |       }
 280 |       
 281 |       return data || [];
 282 |     }
 283 |   },
 284 |   
 285 |   // Add Repository model
 286 |   repository: {
 287 |     async findMany(options: any = {}) {
 288 |       const cookieStore = cookies();
 289 |       const supabase = await createClient(cookieStore);
 290 |       
 291 |       let selectQuery = '*';
 292 |       if (options.include?.provider) {
 293 |         selectQuery = '*, provider:git_providers(*)';
 294 |       }
 295 |       
 296 |       let builder = supabase.from('repositories').select(selectQuery);
 297 |       
 298 |       // Apply filters if provided
 299 |       if (options.where) {
 300 |         Object.entries(options.where).forEach(([key, value]) => {
 301 |           if (key === 'providerId') {
 302 |             if (typeof value === 'object' && value !== null && 'in' in value) {
 303 |               builder = builder.in('provider_id', value.in);
 304 |             } else {
 305 |               builder = builder.eq('provider_id', value);
 306 |             }
 307 |           } else {
 308 |             builder = builder.eq(key, value);
 309 |           }
 310 |         });
 311 |       }
 312 |       
 313 |       const { data, error } = await builder;
 314 |       
 315 |       if (error) {
 316 |         console.error('Error finding repositories:', error);
 317 |         throw error;
 318 |       }
 319 |       
 320 |       return data || [];
 321 |     }
 322 |   },
 323 |   
 324 |   // Add more tables as needed
 325 | };
 326 | 
 327 | export default db;

```

`/workspaces/automai/src/lib/features.ts`:

```ts
   1 | export type PlanType = 'TRIAL' | 'PRO' | 'ENTERPRISE';
   2 | 
   3 | export interface PlanFeatures {
   4 |   maxProjects: number;
   5 |   maxUseCases: number;
   6 |   maxCampaigns: number;
   7 |   environments: ('web' | 'mobile' | 'desktop' | 'vision')[];
   8 |   teamManagement: boolean;
   9 |   multiTenant: boolean;
  10 | }
  11 | 
  12 | export const PLAN_FEATURES: Record<PlanType, PlanFeatures> = {
  13 |   TRIAL: {
  14 |     maxProjects: 1,
  15 |     maxUseCases: 5,
  16 |     maxCampaigns: 1,
  17 |     environments: ['web'],
  18 |     teamManagement: false,
  19 |     multiTenant: false,
  20 |   },
  21 |   PRO: {
  22 |     maxProjects: Infinity,
  23 |     maxUseCases: Infinity,
  24 |     maxCampaigns: Infinity,
  25 |     environments: ['web', 'mobile', 'desktop', 'vision'],
  26 |     teamManagement: false,
  27 |     multiTenant: false,
  28 |   },
  29 |   ENTERPRISE: {
  30 |     maxProjects: Infinity,
  31 |     maxUseCases: Infinity,
  32 |     maxCampaigns: Infinity,
  33 |     environments: ['web', 'mobile', 'desktop', 'vision'],
  34 |     teamManagement: true,
  35 |     multiTenant: true,
  36 |   },
  37 | };
  38 | 
  39 | export function getPlanFeatures(plan: PlanType): PlanFeatures {
  40 |   return PLAN_FEATURES[plan];
  41 | }
  42 | 
  43 | export function isFeatureEnabled(plan: PlanType, feature: keyof PlanFeatures): boolean {
  44 |   const features = PLAN_FEATURES[plan];
  45 |   const value = features[feature];
  46 |   if (typeof value === 'boolean') return value;
  47 |   if (typeof value === 'number') return value > 0;
  48 |   if (Array.isArray(value)) return value.length > 0;
  49 |   return false;
  50 | }
  51 | 
  52 | export function canCreateMore(
  53 |   plan: PlanType,
  54 |   feature: 'maxProjects' | 'maxUseCases' | 'maxCampaigns',
  55 |   currentCount: number,
  56 | ): boolean {
  57 |   const limit = PLAN_FEATURES[plan][feature];
  58 |   return currentCount < limit;
  59 | }
  60 | 
  61 | export function getUpgradeMessage(plan: PlanType, feature: keyof PlanFeatures): string {
  62 |   const messages = {
  63 |     TRIAL: {
  64 |       maxProjects: 'Upgrade to Pro for unlimited projects',
  65 |       maxUseCases: 'Upgrade to Pro for unlimited test cases',
  66 |       maxCampaigns: 'Upgrade to Pro for unlimited campaigns',
  67 |       environments: 'Upgrade to Pro for access to all environments',
  68 |       teamManagement: 'Upgrade to Enterprise for team management',
  69 |       multiTenant: 'Upgrade to Enterprise for multi-tenant support',
  70 |     },
  71 |     PRO: {
  72 |       teamManagement: 'Upgrade to Enterprise for team management',
  73 |       multiTenant: 'Upgrade to Enterprise for multi-tenant support',
  74 |       maxProjects: '',
  75 |       maxUseCases: '',
  76 |       maxCampaigns: '',
  77 |       environments: '',
  78 |     },
  79 |     ENTERPRISE: {
  80 |       maxProjects: '',
  81 |       maxUseCases: '',
  82 |       maxCampaigns: '',
  83 |       environments: '',
  84 |       teamManagement: '',
  85 |       multiTenant: '',
  86 |     },
  87 |   };
  88 | 
  89 |   return messages[plan][feature] || '';
  90 | }

```

`/workspaces/automai/src/lib/chart.ts`:

```ts
   1 | import {
   2 |   Chart as ChartJS,
   3 |   CategoryScale,
   4 |   LinearScale,
   5 |   PointElement,
   6 |   LineElement,
   7 |   Title,
   8 |   Tooltip,
   9 |   Legend,
  10 | } from 'chart.js';
  11 | 
  12 | // Register Chart.js components
  13 | ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);
  14 | 
  15 | export const _chartConfig = {
  16 |   // Add any global chart configuration here
  17 | };

```

`/workspaces/automai/src/lib/services/models.ts`:

```ts
   1 | import supabase from '../supabase';
   2 | import { PostgrestFilterBuilder } from '@supabase/postgrest-js';
   3 | 
   4 | // Helper to apply common filters
   5 | function applyFilters<T>(
   6 |   query: PostgrestFilterBuilder<any, any, T[], unknown>,
   7 |   where: Record<string, any> = {},
   8 | ) {
   9 |   let filteredQuery = query;
  10 | 
  11 |   Object.entries(where).forEach(([key, value]) => {
  12 |     if (value === null) {
  13 |       filteredQuery = filteredQuery.is(key, null) as any;
  14 |     } else if (typeof value === 'object' && value !== null) {
  15 | 
  16 |       Object.entries(value).forEach(([op, opValue]) => {
  17 |         switch (op) {
  18 |           case 'equals':
  19 |             filteredQuery = filteredQuery.eq(key, opValue) as any;
  20 |             break;
  21 |           case 'not':
  22 |             filteredQuery = filteredQuery.neq(key, opValue) as any;
  23 |             break;
  24 |           case 'gt':
  25 |             filteredQuery = filteredQuery.gt(key, opValue) as any;
  26 |             break;
  27 |           case 'gte':
  28 |             filteredQuery = filteredQuery.gte(key, opValue) as any;
  29 |             break;
  30 |           case 'lt':
  31 |             filteredQuery = filteredQuery.lt(key, opValue) as any;
  32 |             break;
  33 |           case 'lte':
  34 |             filteredQuery = filteredQuery.lte(key, opValue) as any;
  35 |             break;
  36 |           case 'in':
  37 |             filteredQuery = filteredQuery.in(
  38 |               key,
  39 |               Array.isArray(opValue) ? opValue : [opValue],
  40 |             ) as any;
  41 |             break;
  42 |           case 'contains':
  43 |             filteredQuery = filteredQuery.ilike(key, `%${opValue}%`) as any;
  44 |             break;
  45 |           // Add other operators as needed
  46 |         }
  47 |       });
  48 |     } else {
  49 |       // Simple equality
  50 |       filteredQuery = filteredQuery.eq(key, value) as any;
  51 |     }
  52 |   });
  53 | 
  54 |   return filteredQuery;
  55 | }
  56 | 
  57 | // User model operations
  58 | export const userService = {
  59 |   findMany: async (args: any = {}) => {
  60 |     try {
  61 |       let query = supabase.from('users').select('*');
  62 | 
  63 |       // Apply filter conditions if provided
  64 |       if (args.where) {
  65 |         query = applyFilters(query, args.where);
  66 |       }
  67 | 
  68 |       // Apply pagination
  69 |       if (args.take) {
  70 |         query = query.limit(args.take);
  71 |       }
  72 | 
  73 |       if (args.skip) {
  74 |         query = query.range(args.skip, args.skip + (args.take || 10) - 1);
  75 |       }
  76 | 
  77 |       // Apply ordering
  78 |       if (args.orderBy) {
  79 |         const [field, direction] = Object.entries(args.orderBy)[0];
  80 |         query = query.order(field as string, { ascending: direction === 'asc' });
  81 |       }
  82 | 
  83 |       const { data, error } = await query;
  84 |       if (error) {
  85 |         console.error('Error fetching users:', error);
  86 |         throw error;
  87 |       }
  88 | 
  89 |       return data || [];
  90 |     } catch (err) {
  91 |       console.error('Error in userService.findMany:', err);
  92 |       return [];
  93 |     }
  94 |   },
  95 | 
  96 |   findUnique: async (args: any) => {
  97 |     if (!args?.where) return null;
  98 | 
  99 |     try {
 100 |       const { data, error } = await supabase.from('users').select('*').match(args.where).single();
 101 | 
 102 |       if (error) {
 103 |         if (error.code === 'PGRST116') return null; // Not found
 104 |         console.error('Error fetching user:', error);
 105 |         throw error;
 106 |       }
 107 | 
 108 |       return data;
 109 |     } catch (err) {
 110 |       console.error('Error in userService.findUnique:', err);
 111 |       return null;
 112 |     }
 113 |   },
 114 | 
 115 |   create: async (args: any) => {
 116 |     if (!args?.data) throw new Error('Data is required');
 117 | 
 118 |     try {
 119 |       const { data, error } = await supabase.from('users').insert(args.data).select().single();
 120 | 
 121 |       if (error) {
 122 |         console.error('Error creating user:', error);
 123 |         throw error;
 124 |       }
 125 | 
 126 |       return data;
 127 |     } catch (err) {
 128 |       console.error('Error in userService.create:', err);
 129 |       throw err;
 130 |     }
 131 |   },
 132 | 
 133 |   update: async (args: any) => {
 134 |     if (!args?.where || !args?.data) throw new Error('Where and data are required');
 135 | 
 136 |     try {
 137 |       const { data, error } = await supabase
 138 |         .from('users')
 139 |         .update(args.data)
 140 |         .match(args.where)
 141 |         .select()
 142 |         .single();
 143 | 
 144 |       if (error) {
 145 |         console.error('Error updating user:', error);
 146 |         throw error;
 147 |       }
 148 | 
 149 |       return data;
 150 |     } catch (err) {
 151 |       console.error('Error in userService.update:', err);
 152 |       throw err;
 153 |     }
 154 |   },
 155 | 
 156 |   delete: async (args: any) => {
 157 |     if (!args?.where) throw new Error('Where is required');
 158 | 
 159 |     try {
 160 |       const { data, error } = await supabase
 161 |         .from('users')
 162 |         .delete()
 163 |         .match(args.where)
 164 |         .select()
 165 |         .single();
 166 | 
 167 |       if (error) {
 168 |         console.error('Error deleting user:', error);
 169 |         throw error;
 170 |       }
 171 | 
 172 |       return data;
 173 |     } catch (err) {
 174 |       console.error('Error in userService.delete:', err);
 175 |       throw err;
 176 |     }
 177 |   },
 178 | };
 179 | 
 180 | // Host model operations
 181 | export const hostService = {
 182 |   findMany: async (args: any = {}) => {
 183 |     try {
 184 |       let query = supabase.from('hosts').select('*');
 185 | 
 186 |       if (args.where) {
 187 |         query = applyFilters(query, args.where);
 188 |       }
 189 | 
 190 |       if (args.take) {
 191 |         query = query.limit(args.take);
 192 |       }
 193 | 
 194 |       if (args.skip) {
 195 |         query = query.range(args.skip, args.skip + (args.take || 10) - 1);
 196 |       }
 197 | 
 198 |       if (args.orderBy) {
 199 |         const [field, direction] = Object.entries(args.orderBy)[0];
 200 |         query = query.order(field as string, { ascending: direction === 'asc' });
 201 |       }
 202 | 
 203 |       const { data, error } = await query;
 204 |       if (error) {
 205 |         console.error('Error fetching hosts:', error);
 206 |         throw error;
 207 |       }
 208 | 
 209 |       return data || [];
 210 |     } catch (err) {
 211 |       console.error('Error in hostService.findMany:', err);
 212 |       return [];
 213 |     }
 214 |   },
 215 | 
 216 |   findUnique: async (args: any) => {
 217 |     if (!args?.where) return null;
 218 | 
 219 |     try {
 220 |       const { data, error } = await supabase.from('hosts').select('*').match(args.where).single();
 221 | 
 222 |       if (error) {
 223 |         if (error.code === 'PGRST116') return null; // Not found
 224 |         console.error('Error fetching host:', error);
 225 |         throw error;
 226 |       }
 227 | 
 228 |       return data;
 229 |     } catch (err) {
 230 |       console.error('Error in hostService.findUnique:', err);
 231 |       return null;
 232 |     }
 233 |   },
 234 | 
 235 |   create: async (args: any) => {
 236 |     if (!args?.data) throw new Error('Data is required');
 237 | 
 238 |     try {
 239 |       const { data, error } = await supabase.from('hosts').insert(args.data).select().single();
 240 | 
 241 |       if (error) {
 242 |         console.error('Error creating host:', error);
 243 |         throw error;
 244 |       }
 245 | 
 246 |       return data;
 247 |     } catch (err) {
 248 |       console.error('Error in hostService.create:', err);
 249 |       throw err;
 250 |     }
 251 |   },
 252 | 
 253 |   update: async (args: any) => {
 254 |     if (!args?.where || !args?.data) throw new Error('Where and data are required');
 255 | 
 256 |     try {
 257 |       const { data, error } = await supabase
 258 |         .from('hosts')
 259 |         .update(args.data)
 260 |         .match(args.where)
 261 |         .select()
 262 |         .single();
 263 | 
 264 |       if (error) {
 265 |         console.error('Error updating host:', error);
 266 |         throw error;
 267 |       }
 268 | 
 269 |       return data;
 270 |     } catch (err) {
 271 |       console.error('Error in hostService.update:', err);
 272 |       throw err;
 273 |     }
 274 |   },
 275 | 
 276 |   delete: async (args: any) => {
 277 |     if (!args?.where) throw new Error('Where is required');
 278 | 
 279 |     try {
 280 |       const { data, error } = await supabase
 281 |         .from('hosts')
 282 |         .delete()
 283 |         .match(args.where)
 284 |         .select()
 285 |         .single();
 286 | 
 287 |       if (error) {
 288 |         console.error('Error deleting host:', error);
 289 |         throw error;
 290 |       }
 291 | 
 292 |       return data;
 293 |     } catch (err) {
 294 |       console.error('Error in hostService.delete:', err);
 295 |       throw err;
 296 |     }
 297 |   },
 298 | };
 299 | 
 300 | // Add other model services as needed following the same pattern
 301 | // export const connectionService = {...}
 302 | // export const repositoryService = {...}
 303 | // etc.

```

`/workspaces/automai/src/lib/services/repositories.ts`:

```ts
   1 | import db from '@/lib/supabase/db';
   2 | import {
   3 |   Repository,
   4 |   RepositoryCreateInput,
   5 |   RepositoryUpdateInput,
   6 |   GitProvider,
   7 |   GitProviderType,
   8 |   SyncStatus,
   9 | } from '@/types/repositories';
  10 | import { GitHubProviderService } from './git-providers/github';
  11 | import { GitLabProviderService } from './git-providers/gitlab';
  12 | import { GiteaProviderService } from './git-providers/gitea';
  13 | import { logger } from '../logger';
  14 | 
  15 | // Get a client for service operations - this is a no-op now as we'll use db directly
  16 | const getClient = () => {
  17 |   return db;
  18 | };
  19 | 
  20 | /**
  21 |  * Get the appropriate Git provider service based on type
  22 |  */
  23 | export async function getGitProviderService(
  24 |   providerType: GitProviderType,
  25 |   options?: { serverUrl?: string; accessToken?: string },
  26 | ) {
  27 |   try {
  28 |     switch (providerType) {
  29 |       case 'github':
  30 |         return new GitHubProviderService();
  31 |       case 'gitlab':
  32 |         return new GitLabProviderService({
  33 |           serverUrl: options?.serverUrl,
  34 |           accessToken: options?.accessToken,
  35 |         });
  36 |       case 'gitea':
  37 |         return new GiteaProviderService(options?.serverUrl, options?.accessToken);
  38 |       default:
  39 |         throw new Error(`Unsupported git provider type: ${providerType}`);
  40 |     }
  41 |   } catch (error) {
  42 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';
  43 |     logger.error('Failed to get git provider service:', { error: errorMessage, providerType });
  44 |     throw error;
  45 |   }
  46 | }
  47 | 
  48 | /**
  49 |  * List all git providers for a user
  50 |  */
  51 | export async function listGitProviders(userId: string): Promise<GitProvider[]> {
  52 |   try {
  53 |     logger.info('Listing git providers for user', { userId });
  54 |     
  55 |     const data = await db.query('git_providers', {
  56 |       where: { user_id: userId },
  57 |       orderBy: { created_at: 'desc' },
  58 |     });
  59 |     
  60 |     return data.map(mapGitProviderFromDb) || [];
  61 |   } catch (error) {
  62 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';
  63 |     logger.error('Failed to list git providers:', { error: errorMessage, userId });
  64 |     return [];
  65 |   }
  66 | }
  67 | 
  68 | /**
  69 |  * Get a git provider by ID
  70 |  */
  71 | export async function getGitProvider(id: string): Promise<GitProvider | null> {
  72 |   try {
  73 |     logger.info('Getting git provider', { id });
  74 |     
  75 |     const providers = await db.query('git_providers', {
  76 |       where: { id },
  77 |     });
  78 |     
  79 |     const provider = providers[0];
  80 |     if (!provider) return null;
  81 |     
  82 |     return mapGitProviderFromDb(provider);
  83 |   } catch (error) {
  84 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';
  85 |     logger.error('Failed to get git provider:', { error: errorMessage, id });
  86 |     return null;
  87 |   }
  88 | }
  89 | 
  90 | /**
  91 |  * Create a new git provider
  92 |  */
  93 | export async function createGitProvider(
  94 |   userId: string,
  95 |   data: {
  96 |     name: GitProviderType;
  97 |     type?: GitProviderType;
  98 |     displayName: string;
  99 |     serverUrl?: string;
 100 |     accessToken?: string;
 101 |     refreshToken?: string;
 102 |     expiresAt?: Date;
 103 |   }
 104 | ): Promise<GitProvider | null> {
 105 |   try {
 106 |     logger.info('Creating git provider', { userId, type: data.name });
 107 |     
 108 |     const providerData = {
 109 |       user_id: userId,
 110 |       tenant_id: userId, // Using userId as tenantId for now
 111 |       type: data.type || data.name,
 112 |       name: data.name,
 113 |       display_name: data.displayName,
 114 |       status: 'connected',
 115 |       server_url: data.serverUrl,
 116 |       access_token: data.accessToken,
 117 |       refresh_token: data.refreshToken,
 118 |       expires_at: data.expiresAt?.toISOString(),
 119 |       created_at: new Date().toISOString(),
 120 |       updated_at: new Date().toISOString(),
 121 |     };
 122 |     
 123 |     const result = await db.query('git_providers', {
 124 |       insert: providerData,
 125 |       returning: true,
 126 |     });
 127 |     
 128 |     const provider = result[0];
 129 |     if (!provider) {
 130 |       throw new Error('Failed to create git provider');
 131 |     }
 132 |     
 133 |     return mapGitProviderFromDb(provider);
 134 |   } catch (error) {
 135 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';
 136 |     logger.error('Failed to create git provider:', { error: errorMessage, data });
 137 |     return null;
 138 |   }
 139 | }
 140 | 
 141 | /**
 142 |  * Update a git provider
 143 |  */
 144 | export async function updateGitProvider(
 145 |   id: string,
 146 |   data: {
 147 |     accessToken?: string;
 148 |     refreshToken?: string;
 149 |     expiresAt?: Date;
 150 |   }
 151 | ): Promise<GitProvider | null> {
 152 |   try {
 153 |     logger.info('Updating git provider', { id });
 154 |     
 155 |     const updateData: Record<string, any> = {
 156 |       updated_at: new Date().toISOString(),
 157 |     };
 158 |     
 159 |     if (data.accessToken !== undefined) {
 160 |       updateData.access_token = data.accessToken;
 161 |     }
 162 |     
 163 |     if (data.refreshToken !== undefined) {
 164 |       updateData.refresh_token = data.refreshToken;
 165 |     }
 166 |     
 167 |     if (data.expiresAt !== undefined) {
 168 |       updateData.expires_at = data.expiresAt.toISOString();
 169 |     }
 170 |     
 171 |     const result = await db.query('git_providers', {
 172 |       where: { id },
 173 |       update: updateData,
 174 |       returning: true,
 175 |     });
 176 |     
 177 |     const provider = result[0];
 178 |     if (!provider) {
 179 |       throw new Error(`Git provider not found: ${id}`);
 180 |     }
 181 |     
 182 |     return mapGitProviderFromDb(provider);
 183 |   } catch (error) {
 184 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';
 185 |     logger.error('Failed to update git provider:', { error: errorMessage, id });
 186 |     return null;
 187 |   }
 188 | }
 189 | 
 190 | /**
 191 |  * Delete a git provider
 192 |  */
 193 | export async function deleteGitProvider(id: string): Promise<boolean> {
 194 |   try {
 195 |     logger.info('Deleting git provider', { id });
 196 |     
 197 |     await db.query('git_providers', {
 198 |       where: { id },
 199 |       delete: true,
 200 |     });
 201 |     
 202 |     return true;
 203 |   } catch (error) {
 204 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';
 205 |     logger.error('Failed to delete git provider:', { error: errorMessage, id });
 206 |     return false;
 207 |   }
 208 | }
 209 | 
 210 | /**
 211 |  * List repositories with optional filters
 212 |  */
 213 | export async function listRepositories(
 214 |   userId: string,
 215 |   filters?: {
 216 |     providerId?: string;
 217 |     projectId?: string;
 218 |     syncStatus?: SyncStatus;
 219 |   }
 220 | ): Promise<Repository[]> {
 221 |   try {
 222 |     logger.info('Listing repositories', { userId, filters });
 223 |     
 224 |     const where: Record<string, any> = {};
 225 |     
 226 |     // Join with git_providers to filter by user_id
 227 |     const joinConditions = {
 228 |       'repositories.provider_id': 'git_providers.id',
 229 |     };
 230 |     
 231 |     // Add filters
 232 |     if (filters?.providerId) {
 233 |       where.provider_id = filters.providerId;
 234 |     }
 235 |     
 236 |     if (filters?.projectId) {
 237 |       where.project_id = filters.projectId;
 238 |     }
 239 |     
 240 |     if (filters?.syncStatus) {
 241 |       where.sync_status = filters.syncStatus.toLowerCase();
 242 |     }
 243 |     
 244 |     // Add user filter through the join
 245 |     const additionalWhere = {
 246 |       'git_providers.user_id': userId,
 247 |     };
 248 |     
 249 |     const data = await db.query('repositories', {
 250 |       join: {
 251 |         table: 'git_providers',
 252 |         on: joinConditions,
 253 |         where: additionalWhere,
 254 |       },
 255 |       where,
 256 |       orderBy: { created_at: 'desc' },
 257 |     });
 258 |     
 259 |     return data.map(mapRepositoryFromDb) || [];
 260 |   } catch (error) {
 261 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';
 262 |     logger.error('Error in listRepositories:', { error: errorMessage });
 263 |     return [];
 264 |   }
 265 | }
 266 | 
 267 | // Helper function to map database fields to GitProvider interface
 268 | function mapGitProviderFromDb(data: any): GitProvider {
 269 |   return {
 270 |     id: data.id,
 271 |     userId: data.user_id,
 272 |     tenantId: data.tenant_id,
 273 |     type: data.type,
 274 |     displayName: data.display_name,
 275 |     status: data.status,
 276 |     serverUrl: data.server_url,
 277 |     accessToken: data.access_token,
 278 |     refreshToken: data.refresh_token,
 279 |     expiresAt: data.expires_at ? new Date(data.expires_at) : undefined,
 280 |     createdAt: new Date(data.created_at),
 281 |     updatedAt: new Date(data.updated_at),
 282 |     lastSyncedAt: data.last_synced_at ? new Date(data.last_synced_at) : undefined,
 283 |   };
 284 | }
 285 | 
 286 | // Helper function to map database fields to Repository interface
 287 | function mapRepositoryFromDb(data: any): Repository {
 288 |   return {
 289 |     id: data.id,
 290 |     providerId: data.provider_id,
 291 |     name: data.name,
 292 |     owner: data.owner,
 293 |     url: data.url,
 294 |     branch: data.branch,
 295 |     defaultBranch: data.default_branch,
 296 |     isPrivate: data.is_private,
 297 |     description: data.description,
 298 |     syncStatus: data.sync_status,
 299 |     createdAt: new Date(data.created_at),
 300 |     updatedAt: new Date(data.updated_at),
 301 |     lastSyncedAt: data.last_synced_at ? new Date(data.last_synced_at) : undefined,
 302 |     error: data.error,
 303 |   };
 304 | }
 305 | 
 306 | // Continue with the rest of the functions, replacing Supabase client usage with db...

```

`/workspaces/automai/src/lib/services/websocket.ts`:

```ts
   1 | /* eslint-disable */
   2 | import { WebSocketServer, WebSocket } from 'ws';
   3 | import { logger } from '../logger';
   4 | import { IncomingMessage } from 'http';
   5 | import { Socket } from 'net';
   6 | import { handleSshConnection, WebSocketConnection } from './ssh';
   7 | 
   8 | // Define custom WebSocket interface with isAlive property
   9 | interface ExtendedWebSocket extends WebSocket {
  10 |   ws_isAlive?: boolean;
  11 | }
  12 | 
  13 | // Global variable to store the WebSocket server instance
  14 | declare global {
  15 |   var websocketServer: WebSocketServer | undefined;
  16 | }
  17 | 
  18 | /**
  19 |  * Initialize the WebSocket server as a singleton
  20 |  */
  21 | export function initializeWebSocketServer(): WebSocketServer {
  22 |   console.log('Initializing WebSocket server (singleton)');
  23 | 
  24 |   // Check if we already have an instance
  25 |   if (global.websocketServer) {
  26 |     console.log('Using existing WebSocket server instance');
  27 |     return global.websocketServer;
  28 |   }
  29 | 
  30 |   // Create a new WebSocket server
  31 |   console.log('Creating new WebSocket server instance');
  32 |   const wss = new WebSocketServer({ noServer: true });
  33 | 
  34 |   // Set up ping interval to detect dead connections
  35 |   const pingInterval = setInterval(() => {
  36 |     wss.clients.forEach((client) => {
  37 |       const extClient = client as ExtendedWebSocket;
  38 |       if (extClient.ws_isAlive === false) {
  39 |         logger.info('Terminating inactive WebSocket connection');
  40 |         return client.terminate();
  41 |       }
  42 | 
  43 |       extClient.ws_isAlive = false;
  44 |       client.ping();
  45 |     });
  46 |   }, 30000);
  47 | 
  48 |   // Handle server close
  49 |   wss.on('close', () => {
  50 |     logger.info('WebSocket server closed, clearing ping interval');
  51 |     clearInterval(pingInterval);
  52 |     global.websocketServer = undefined;
  53 |   });
  54 | 
  55 |   // Log client connections
  56 |   wss.on('connection', (ws, req) => {
  57 |     logger.info('Client connected to WebSocket server', {
  58 |       ws_ip: req.socket.remoteAddress,
  59 |     });
  60 | 
  61 |     const extWs = ws as ExtendedWebSocket;
  62 |     extWs.ws_isAlive = true;
  63 | 
  64 |     ws.on('pong', () => {
  65 |       (ws as ExtendedWebSocket).ws_isAlive = true;
  66 |     });
  67 | 
  68 |     ws.on('error', (error) => {
  69 |       logger.error('WebSocket error', { error: error.message });
  70 |     });
  71 | 
  72 |     ws.on('close', () => {
  73 |       logger.info('Client disconnected from WebSocket server');
  74 |     });
  75 |   });
  76 | 
  77 |   // Store the instance in the global variable (in development/test)
  78 |   if (process.env.NODE_ENV !== 'production') {
  79 |     global.websocketServer = wss;
  80 |   }
  81 | 
  82 |   logger.info('WebSocket server initialized');
  83 |   return wss;
  84 | }
  85 | 
  86 | /**
  87 |  * Get the WebSocket server instance, initializing it if necessary
  88 |  */
  89 | export function getWebSocketServer(): WebSocketServer {
  90 |   if (!global.websocketServer) {
  91 |     return initializeWebSocketServer();
  92 |   }
  93 |   return global.websocketServer;
  94 | }
  95 | 
  96 | /**
  97 |  * Handle WebSocket upgrade request
  98 |  */
  99 | export function handleUpgrade(request: IncomingMessage, socket: Socket, head: Buffer) {
 100 |   // Check if the socket has already been handled
 101 |   if ((socket as any).__websocketHandled) {
 102 |     logger.info('Skipping already handled socket');
 103 |     return;
 104 |   }
 105 | 
 106 |   console.log('handleUpgrade called with request headers:', request.headers);
 107 |   console.log('handleUpgrade request URL:', request.url);
 108 | 
 109 |   const wss = getWebSocketServer();
 110 | 
 111 |   if (!wss) {
 112 |     logger.error('No WebSocket server instance available');
 113 |     socket.destroy();
 114 |     return;
 115 |   }
 116 | 
 117 |   logger.info('Handling WebSocket upgrade request');
 118 | 
 119 |   // Extract the connection ID from the request if available
 120 |   let ws_connectionId = (request as any).connectionId;
 121 | 
 122 |   // Try to extract from URL as fallback
 123 |   if (!ws_connectionId && request.url) {
 124 |     try {
 125 |       const urlPath = request.url || '';
 126 |       const pathParts = urlPath.split('/');
 127 |       const potentialId = pathParts[pathParts.length - 1].split('?')[0]; // Remove query params if any
 128 |       if (potentialId && potentialId.length > 0) {
 129 |         console.log('Extracted ID from URL:', potentialId);
 130 |         ws_connectionId = potentialId;
 131 |         (request as any).connectionId = potentialId;
 132 |       }
 133 |     } catch (e) {
 134 |       console.error('Failed to extract ID from URL', e);
 135 |     }
 136 |   }
 137 | 
 138 |   if (ws_connectionId) {
 139 |     logger.info('WebSocket upgrade with connection ID:', { ws_connectionId });
 140 |     console.log('Connection ID for WebSocket:', ws_connectionId);
 141 |   } else {
 142 |     logger.warn('WebSocket upgrade request missing connectionId');
 143 |     console.log('No connectionId found on WebSocket upgrade request');
 144 |   }
 145 | 
 146 |   try {
 147 |     // Mark socket as handled to prevent duplicate handling
 148 |     (socket as any).__websocketHandled = true;
 149 | 
 150 |     wss.handleUpgrade(request, socket, head, (ws) => {
 151 |       // Store the connection ID on the WebSocket object if available
 152 |       if (ws_connectionId) {
 153 |         (ws as any).connectionId = ws_connectionId;
 154 |         console.log('Set connectionId on WebSocket object:', ws_connectionId);
 155 |       } else {
 156 |         console.warn('Cannot set connectionId on WebSocket: undefined');
 157 |       }
 158 | 
 159 |       // Set up message handler
 160 |       ws.on('message', (message) => {
 161 |         try {
 162 |           const messageStr = message.toString();
 163 |           logger.debug('Received WebSocket message', {
 164 |             ws_connectionId: (ws as any).connectionId,
 165 |             ws_message: messageStr.substring(0, 100), // Log only first 100 chars
 166 |           });
 167 |           handleMessage(ws as WebSocketConnection, messageStr);
 168 |         } catch (error) {
 169 |           logger.error('Error handling WebSocket message', {
 170 |             error: error instanceof Error ? error.message : 'Unknown error',
 171 |           });
 172 |         }
 173 |       });
 174 | 
 175 |       wss.emit('connection', ws, request);
 176 |     });
 177 |   } catch (error) {
 178 |     logger.error('Error in WebSocket upgrade', {
 179 |       error: error instanceof Error ? error.message : String(error),
 180 |       ws_connectionId,
 181 |     });
 182 | 
 183 |     // Only destroy socket if it hasn't been handled
 184 |     if (!(socket as any).__websocketHandled) {
 185 |       socket.destroy();
 186 |     }
 187 |   }
 188 | }
 189 | 
 190 | /**
 191 |  * Handle messages from client
 192 |  */
 193 | export function handleMessage(ws: WebSocketConnection, message: string): void {
 194 |   try {
 195 |     const data = JSON.parse(message);
 196 |     const ws_connectionId = (ws as any).connectionId;
 197 | 
 198 |     console.log('handleMessage received data:', {
 199 |       type: data.type,
 200 |       ws_connectionId: ws_connectionId,
 201 |       ws_messageType: typeof message,
 202 |     });
 203 | 
 204 |     // Handle authentication
 205 |     if (data.type === 'auth') {
 206 |       logger.info('Received auth request', {
 207 |         ws_connectionId: ws_connectionId,
 208 |         connectionType: data.connectionType,
 209 |         ssh_username: data.username || data.ssh_username,
 210 |       });
 211 | 
 212 |       console.log('DEBUG: WebSocket connectionId:', ws_connectionId);
 213 |       console.log(
 214 |         'DEBUG: Auth data:',
 215 |         JSON.stringify({
 216 |           connectionType: data.connectionType,
 217 |           ssh_username: data.username || data.ssh_username,
 218 |           ssh_hasPassword: !!(data.password || data.ssh_password),
 219 |           ssh_host: data.host || data.ssh_host,
 220 |         }),
 221 |       );
 222 | 
 223 |       // Handle SSH connection
 224 |       if (data.connectionType === 'ssh') {
 225 |         // Map incoming parameters to ssh_ prefixed parameters
 226 |         handleSshConnection(ws, ws_connectionId, {
 227 |           ssh_username: data.username || data.ssh_username,
 228 |           ssh_password: data.password || data.ssh_password,
 229 |           ssh_host: data.host || data.ssh_host,
 230 |           ssh_port: data.port || data.ssh_port,
 231 |         });
 232 |       } else {
 233 |         logger.error('Unsupported connection type', { type: data.connectionType });
 234 |         ws.send(
 235 |           JSON.stringify({
 236 |             error: `Unsupported connection type: ${data.connectionType}`,
 237 |             errorType: 'UNSUPPORTED_CONNECTION_TYPE',
 238 |           }),
 239 |         );
 240 |       }
 241 |     }
 242 |   } catch (error) {
 243 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';
 244 |     logger.error('Error processing message', { error: errorMessage });
 245 |     ws.send(
 246 |       JSON.stringify({
 247 |         error: 'Invalid message format: ' + errorMessage,
 248 |         errorType: 'INVALID_MESSAGE',
 249 |       }),
 250 |     );
 251 |   }
 252 | }
 253 | 
 254 | /**
 255 |  * Close the WebSocket server and clean up resources
 256 |  */
 257 | export function closeWebSocketServer(): Promise<void> {
 258 |   return new Promise((resolve) => {
 259 |     if (!global.websocketServer) {
 260 |       resolve();
 261 |       return;
 262 |     }
 263 | 
 264 |     logger.info('Closing WebSocket server');
 265 | 
 266 |     // Close all connections with a timeout
 267 |     const closeTimeout = setTimeout(() => {
 268 |       logger.warn('WebSocket server close timed out, forcing close');
 269 |       global.websocketServer = undefined;
 270 |       resolve();
 271 |     }, 2000); // 2 second timeout
 272 | 
 273 |     // Close all connections
 274 |     global.websocketServer.clients.forEach((ws) => {
 275 |       ws.terminate();
 276 |     });
 277 | 
 278 |     // Close the server
 279 |     global.websocketServer.close(() => {
 280 |       clearTimeout(closeTimeout);
 281 |       logger.info('WebSocket server closed');
 282 |       global.websocketServer = undefined;
 283 |       resolve();
 284 |     });
 285 |   });
 286 | }

```

`/workspaces/automai/src/lib/services/oauth.ts`:

```ts
   1 | /**
   2 |  * OAuth helper functions for Git providers
   3 |  */
   4 | 
   5 | /**
   6 |  * Create a GitHub OAuth URL for authorization
   7 |  * @param providerId The ID of the Git provider to use as state
   8 |  * @returns The authorization URL
   9 |  */
  10 | export function createGithubOauthUrl(providerId: string): string {
  11 |   // Use either development or production GitHub client ID based on environment
  12 |   const clientId =
  13 |     process.env.NODE_ENV === 'development'
  14 |       ? process.env.GITHUB_DEV_CLIENT_ID || process.env.GITHUB_CLIENT_ID
  15 |       : process.env.GITHUB_CLIENT_ID;
  16 | 
  17 |   // Always use the current origin for the redirect URI
  18 |   const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';
  19 |   const redirectUri = `${baseUrl}/api/git-providers/callback`;
  20 |   const scope = 'repo,read:user,user:email';
  21 | 
  22 |   // Create state with providerId and redirectUri for callback handling
  23 |   const stateData = Buffer.from(JSON.stringify({ providerId, redirectUri })).toString('base64');
  24 | 
  25 |   const params = new URLSearchParams({
  26 |     client_id: clientId || '',
  27 |     redirect_uri: redirectUri,
  28 |     scope,
  29 |     state: stateData,
  30 |     response_type: 'code',
  31 |   });
  32 | 
  33 |   return `https://github.com/login/oauth/authorize?${params.toString()}`;
  34 | }
  35 | 
  36 | /**
  37 |  * Create a GitLab OAuth URL for authorization
  38 |  * @param providerId The ID of the Git provider to use as state
  39 |  * @returns The authorization URL
  40 |  */
  41 | export function createGitlabOauthUrl(providerId: string): string {
  42 |   const clientId = process.env.GITLAB_CLIENT_ID;
  43 |   const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';
  44 |   const redirectUri = `${baseUrl}/api/git-providers/callback`;
  45 |   
  46 |   // Create state with providerId and redirectUri for callback handling
  47 |   const stateData = Buffer.from(JSON.stringify({ providerId, redirectUri })).toString('base64');
  48 |   
  49 |   const scope = 'api read_api read_user read_repository';
  50 |   const params = new URLSearchParams({
  51 |     client_id: clientId || '',
  52 |     redirect_uri: redirectUri,
  53 |     scope,
  54 |     state: stateData,
  55 |     response_type: 'code',
  56 |   });
  57 | 
  58 |   return `https://gitlab.com/oauth/authorize?${params.toString()}`;
  59 | }

```

`/workspaces/automai/src/lib/services/hosts.ts`:

```ts
   1 | import { Client } from 'ssh2';
   2 | 
   3 | import { logger } from '../logger';
   4 | import db from '@/lib/supabase/db';
   5 | 
   6 | /**
   7 |  * Connection test result interface
   8 |  */
   9 | interface ConnectionTestResult {
  10 |   success: boolean;
  11 |   message?: string;
  12 |   fingerprint?: string;
  13 |   fingerprintVerified?: boolean;
  14 | }
  15 | 
  16 | /**
  17 |  * @fileoverview Host Service Layer Implementation
  18 |  *
  19 |  * ⚠️ DO NOT MODIFY THIS FILE ⚠️
  20 |  * This file contains the core host service implementations.
  21 |  * Any changes should be carefully reviewed and approved.
  22 |  *
  23 |  * Last validated: 2024-03-21
  24 |  * Implements:
  25 |  * - Proper error handling
  26 |  * - Logging
  27 |  * - Type safety
  28 |  */
  29 | 
  30 | /**
  31 |  * Get all hosts ordered by creation date
  32 |  */
  33 | export async function getHosts() {
  34 |   try {
  35 |     console.log('Fetching hosts from database...');
  36 |     console.log('Calling db.host.findMany...');
  37 |     // Use a client-side projection to avoid requesting the is_windows field directly
  38 |     const hosts = await db.host.findMany({
  39 |       orderBy: { createdAt: 'desc' },
  40 |     });
  41 |     console.log('Supabase returned hosts successfully');
  42 | 
  43 |     // Add the is_windows field with a default value
  44 |     return hosts.map((host) => ({
  45 |       ...host,
  46 |       is_windows: false, // Default value until the database is updated
  47 |     }));
  48 |   } catch (error) {
  49 |     console.error('Error in getHosts service:', error);
  50 |     throw error;
  51 |   }
  52 | }
  53 | 
  54 | /**
  55 |  * Get a single host by ID
  56 |  */
  57 | export async function getHostById(id: string) {
  58 |   try {
  59 |     return await db.host.findUnique({
  60 |       where: { id },
  61 |     });
  62 |   } catch (error) {
  63 |     console.error(`Error in getHostById service for id ${id}:`, error);
  64 |     throw error;
  65 |   }
  66 | }
  67 | 
  68 | /**
  69 |  * Create a new host
  70 |  *
  71 |  * @param {Object} data - Host data
  72 |  * @param {string} data.name - Required: Host name
  73 |  * @param {string} data.description - Optional: Host description
  74 |  * @param {string} data.type - Required: Host type (ssh, docker, portainer)
  75 |  * @param {string} data.ip - Required: Host IP address
  76 |  * @param {number} data.port - Optional: Host port (defaults to 22 for SSH)
  77 |  * @param {string} data.user - Required for SSH: Username
  78 |  * @param {string} data.password - Required for SSH: Password
  79 |  * @param {string} data.status - Optional: Initial status (defaults to 'pending')
  80 |  * @returns {Promise<Host>} Created host
  81 |  */
  82 | export async function createHost(data: {
  83 |   name: string;
  84 |   description?: string;
  85 |   type: string;
  86 |   ip: string;
  87 |   port?: number;
  88 |   user?: string;
  89 |   password?: string;
  90 |   status?: string; // Allow status to be passed in
  91 | }) {
  92 |   try {
  93 |     console.log(
  94 |       `Creating host with data: ${JSON.stringify({ ...data, password: data.password ? '***' : undefined })}`,
  95 |     );
  96 | 
  97 |     // Test connection first to detect Windows
  98 |     if (data.type === 'ssh' && data.user && data.password) {
  99 |       try {
 100 |         console.log(`Testing connection to detect Windows for: ${data.ip}`);
 101 |         const testResult = await testHostConnection({
 102 |           type: data.type,
 103 |           ip: data.ip,
 104 |           port: data.port,
 105 |           username: data.user,
 106 |           password: data.password,
 107 |         });
 108 | 
 109 |         if (testResult.is_windows) {
 110 |           console.log(`Windows detected for ${data.ip}, setting is_windows=true`);
 111 |           // Set is_windows in the data
 112 |           (data as any).is_windows = true;
 113 |         }
 114 |       } catch (e) {
 115 |         console.error(
 116 |           `Error testing connection for Windows detection: ${e instanceof Error ? e.message : String(e)}`,
 117 |         );
 118 |         // Continue with host creation even if test fails
 119 |       }
 120 |     }
 121 | 
 122 |     console.log(
 123 |       `Calling db.host.create with data: ${JSON.stringify({ ...data, password: data.password ? '***' : undefined })}`,
 124 |     );
 125 | 
 126 |     const host = await db.host.create({
 127 |       data: {
 128 |         name: data.name,
 129 |         description: data.description || '',
 130 |         type: data.type,
 131 |         ip: data.ip,
 132 |         port: data.port,
 133 |         user: data.user,
 134 |         password: data.password,
 135 |         status: data.status || 'pending',
 136 |         is_windows: (data as any).is_windows || false,
 137 |       },
 138 |     });
 139 | 
 140 |     console.log(`Supabase created host successfully`);
 141 |     console.log(
 142 |       `Host created successfully: ${JSON.stringify({ ...host, password: host.password ? '***' : undefined })}`,
 143 |     );
 144 |     return host;
 145 |   } catch (error) {
 146 |     if (error instanceof Error) {
 147 |       logger.error('Error creating host:', { error: error.message });
 148 |     }
 149 |     throw error;
 150 |   }
 151 | }
 152 | 
 153 | /**
 154 |  * Delete a host by ID
 155 |  */
 156 | export async function deleteHost(id: string) {
 157 |   try {
 158 |     return await db.host.delete({
 159 |       where: { id },
 160 |     });
 161 |   } catch (error) {
 162 |     console.error(`Error in deleteHost service for id ${id}:`, error);
 163 |     throw error;
 164 |   }
 165 | }
 166 | 
 167 | /**
 168 |  * Test connection to a host
 169 |  */
 170 | export async function testHostConnection(data: {
 171 |   type: string;
 172 |   ip: string;
 173 |   port?: number;
 174 |   username?: string;
 175 |   password?: string;
 176 |   hostId?: string;
 177 | }): Promise<ConnectionTestResult & { is_windows?: boolean }> {
 178 |   logger.info('Testing host connection', { ip: data.ip });
 179 | 
 180 |   let result: ConnectionTestResult & { is_windows?: boolean } = {
 181 |     success: false,
 182 |   };
 183 | 
 184 |   // Default Windows detection to false
 185 |   let detectedWindows = false;
 186 | 
 187 |   try {
 188 |     // Test SSH connection
 189 |     if (data.type === 'ssh') {
 190 |       // Implement SSH connection test
 191 |       const ssh = new Client();
 192 | 
 193 |       try {
 194 |         // Create debug handler for connection monitoring
 195 |         const debugHandler = (message: string) => {
 196 |           console.log(`[Windows Detection] Debug message: ${message}`);
 197 | 
 198 |           // Look for OpenSSH for Windows in the remote ident
 199 |           if (message.includes('Remote ident:') && message.includes('OpenSSH_for_Windows')) {
 200 |             console.log(`[Windows Detection] Remote ident from ${data.ip}: ${message}`);
 201 |             console.log(
 202 |               `[Windows Detection] 🪟 WINDOWS DETECTED from remote ident from ${data.ip}`,
 203 |             );
 204 |             detectedWindows = true;
 205 |             logger.info('Windows detected from remote ident', { ip: data.ip });
 206 |           }
 207 |           // Also check for Windows in the message
 208 |           else if (message.toLowerCase().includes('windows') && !detectedWindows) {
 209 |             console.log(`[Windows Detection] Windows string detected from ${data.ip}: ${message}`);
 210 |             console.log(
 211 |               `[Windows Detection] 🪟 WINDOWS DETECTED from string match from ${data.ip}`,
 212 |             );
 213 |             detectedWindows = true;
 214 |             logger.info('Windows detected from debug message', { ip: data.ip });
 215 |           }
 216 |           // Also check for OpenSSH which often indicates Windows
 217 |           else if (message.includes('OpenSSH') && !detectedWindows) {
 218 |             console.log(`[Windows Detection] OpenSSH detected from ${data.ip}: ${message}`);
 219 |             console.log(
 220 |               `[Windows Detection] 🪟 WINDOWS LIKELY from OpenSSH detection from ${data.ip}`,
 221 |             );
 222 |             detectedWindows = true;
 223 |             logger.info('Windows likely detected from OpenSSH', { ip: data.ip });
 224 |           }
 225 |         };
 226 | 
 227 |         // Add debug handler for connection information
 228 |         (ssh as any).on('debug', debugHandler);
 229 | 
 230 |         // Wait for connection to establish or fail
 231 |         await new Promise<void>((resolve, reject) => {
 232 |           ssh.on('ready', () => {
 233 |             result.success = true;
 234 |             resolve();
 235 |           });
 236 | 
 237 |           ssh.on('error', (err) => {
 238 |             reject(err);
 239 |           });
 240 | 
 241 |           // Connect with a timeout
 242 |           ssh.connect({
 243 |             host: data.ip,
 244 |             port: data.port || 22,
 245 |             username: data.username,
 246 |             password: data.password,
 247 |             readyTimeout: 10000, // 10 seconds timeout
 248 |             debug: (message: string) => {
 249 |               console.log(`SSH Debug: ${message}`);
 250 |               debugHandler(message); // Pass message to our debug handler for Windows detection
 251 |             },
 252 |           });
 253 |         });
 254 | 
 255 |         // Add a small delay to ensure Windows detection can complete
 256 |         await new Promise((resolve) => setTimeout(resolve, 1000));
 257 | 
 258 |         console.log(
 259 |           `[Windows Detection] Connection successful to ${data.ip}, Windows detected: ${detectedWindows}`,
 260 |         );
 261 | 
 262 |         // Ensure connection is closed
 263 |         ssh.end();
 264 |       } catch (error) {
 265 |         // Handle connection error
 266 |         result.success = false;
 267 |         result.message = error instanceof Error ? error.message : String(error);
 268 |         logger.error('SSH connection test failed', {
 269 |           error: result.message,
 270 |           ip: data.ip,
 271 |         });
 272 |       }
 273 |     }
 274 | 
 275 |     // Add Windows detection result
 276 |     result.is_windows = detectedWindows;
 277 | 
 278 |     // Update host status in database if hostId is provided
 279 |     if (data.hostId) {
 280 |       try {
 281 |         console.log(
 282 |           `[Windows Detection] Updating host ${data.hostId} with is_windows=${detectedWindows}`,
 283 |         );
 284 | 
 285 |         try {
 286 |           // Try to update with is_windows field
 287 |           await db.host.update({
 288 |             where: { id: data.hostId },
 289 |             data: {
 290 |               status: result.success ? 'connected' : 'failed',
 291 |               is_windows: detectedWindows,
 292 |             },
 293 |           });
 294 |         } catch (schemaError) {
 295 |           // If the update fails due to missing is_windows field, update without it
 296 |           if (
 297 |             (schemaError as Error).message &&
 298 |             (schemaError as Error).message.includes('Unknown field `is_windows`')
 299 |           ) {
 300 |             console.log(
 301 |               `[Windows Detection] is_windows field not in database schema, updating without it`,
 302 |             );
 303 |             await db.host.update({
 304 |               where: { id: data.hostId },
 305 |               data: {
 306 |                 status: result.success ? 'connected' : 'failed',
 307 |                 // is_windows field is omitted
 308 |               },
 309 |             });
 310 |           } else {
 311 |             // Re-throw if it's a different error
 312 |             throw schemaError;
 313 |           }
 314 |         }
 315 | 
 316 |         console.log(
 317 |           `[Windows Detection] ✅ Host ${data.hostId} updated with status=${result.success ? 'connected' : 'failed'}`,
 318 |         );
 319 |         logger.info(
 320 |           `Updated host status for ${data.hostId} to ${result.success ? 'connected' : 'failed'}, attempted to set is_windows: ${detectedWindows}`,
 321 |         );
 322 |       } catch (dbError) {
 323 |         console.error(`[Windows Detection] ❌ Failed to update host ${data.hostId}`, dbError);
 324 |         logger.error('Failed to update host status in database:', {
 325 |           error: dbError instanceof Error ? dbError.message : String(dbError),
 326 |         });
 327 |         // Don't throw here, we still want to return the connection test result
 328 |       }
 329 |     } else {
 330 |       console.log(
 331 |         `[Windows Detection] No hostId provided, is_windows=${detectedWindows} not saved to database`,
 332 |       );
 333 |     }
 334 | 
 335 |     console.log(
 336 |       `[Windows Detection] Final result for ${data.ip}: is_windows=${detectedWindows}, success=${result.success}`,
 337 |     );
 338 |     console.log(`Test connection result at ${new Date().toISOString()}: ${JSON.stringify(result)}`);
 339 |     return result;
 340 |   } catch (error) {
 341 |     // Handle other errors
 342 |     result.success = false;
 343 |     result.message = error instanceof Error ? error.message : String(error);
 344 |     logger.error('Connection test failed', {
 345 |       error: result.message,
 346 |       ip: data.ip,
 347 |     });
 348 |     return result;
 349 |   }
 350 | }

```

`/workspaces/automai/src/lib/services/http.ts`:

```ts
   1 | /* eslint-disable */
   2 | import http from 'http';
   3 | import { Server } from 'http';
   4 | import { parse } from 'url';
   5 | // We need to use the direct import here for the custom server
   6 | // This will generate a warning during build but is required for the custom server to work
   7 | import next from 'next';
   8 | import { NextServer } from 'next/dist/server/next';
   9 | import { initializeWebSocketServer, handleUpgrade } from './websocket';
  10 | import { logger } from '../logger';
  11 | import { Socket } from 'net';
  12 | 
  13 | // Server instance cache
  14 | let httpServer: Server | null = null;
  15 | let nextApp: NextServer | null = null;
  16 | let isWebSocketInitialized = false;
  17 | 
  18 | /**
  19 |  * Initialize the Next.js application
  20 |  */
  21 | export async function initializeNextApp(options: {
  22 |   dev?: boolean;
  23 |   hostname?: string;
  24 |   port?: number;
  25 | }): Promise<NextServer> {
  26 |   const { dev = false, hostname = 'localhost', port = 3000 } = options;
  27 | 
  28 |   if (nextApp) {
  29 |     logger.info('Reusing existing Next.js app');
  30 |     return nextApp;
  31 |   }
  32 | 
  33 |   // Create new Next.js app
  34 |   logger.info('Initializing Next.js app');
  35 |   try {
  36 |     nextApp = next({
  37 |       dev,
  38 |       hostname,
  39 |       port,
  40 |       // Add 'dir' option to make sure Next.js looks in the right directory
  41 |       dir: process.cwd(),
  42 |     }) as unknown as NextServer;
  43 |     await nextApp.prepare();
  44 |     logger.info('Next.js app prepared successfully');
  45 |   } catch (error) {
  46 |     logger.error(
  47 |       'Failed to prepare Next.js app: ' + (error instanceof Error ? error.message : String(error)),
  48 |     );
  49 |     throw error;
  50 |   }
  51 | 
  52 |   return nextApp;
  53 | }
  54 | 
  55 | /**
  56 |  * Create and initialize the HTTP server with WebSocket support
  57 |  */
  58 | export async function createServer(options: {
  59 |   dev?: boolean;
  60 |   hostname?: string;
  61 |   port?: number;
  62 |   enableWebSockets?: boolean;
  63 | }): Promise<Server> {
  64 |   const {
  65 |     dev = process.env.NODE_ENV !== 'production',
  66 |     hostname = 'localhost',
  67 |     port = 3000,
  68 |     enableWebSockets = false,
  69 |   } = options;
  70 | 
  71 |   // Reuse existing server if available
  72 |   if (httpServer) {
  73 |     logger.info('Reusing existing HTTP server');
  74 | 
  75 |     // Initialize WebSocket server if enabled and not already initialized
  76 |     if (enableWebSockets && !isWebSocketInitialized) {
  77 |       initializeWebSocketSupport(httpServer);
  78 |     }
  79 | 
  80 |     return httpServer;
  81 |   }
  82 | 
  83 |   try {
  84 |     // Initialize Next.js
  85 |     const app = await initializeNextApp({ dev, hostname, port });
  86 | 
  87 |     if (!app) {
  88 |       throw new Error('Failed to initialize Next.js app');
  89 |     }
  90 | 
  91 |     const handle = app.getRequestHandler();
  92 | 
  93 |     // Create HTTP server
  94 |     logger.info('Creating HTTP server');
  95 |     httpServer = http.createServer((req, res) => {
  96 |       try {
  97 |         const parsedUrl = parse(req.url || '', true);
  98 | 
  99 |         // Special handling for common Next.js system pages
 100 |         if (
 101 |           req.url?.startsWith('/_next/') ||
 102 |           req.url === '/_document' ||
 103 |           req.url === '/_app' ||
 104 |           req.url === '/_error'
 105 |         ) {
 106 |           console.log(`Handling Next.js system page: ${req.url}`);
 107 |         }
 108 | 
 109 |         // Let the Next.js request handler manage the request
 110 |         handle(req, res, parsedUrl);
 111 |       } catch (error) {
 112 |         const errorMessage = error instanceof Error ? error.message : String(error);
 113 |         logger.error(`Error handling request for ${req.url}: ${errorMessage}`);
 114 |         res.statusCode = 500;
 115 |         res.end('Internal Server Error');
 116 |       }
 117 |     });
 118 | 
 119 |     // Set max listeners to avoid warnings
 120 |     httpServer.setMaxListeners(20);
 121 | 
 122 |     // Initialize WebSocket server if enabled
 123 |     if (enableWebSockets) {
 124 |       initializeWebSocketSupport(httpServer);
 125 |     } else {
 126 |       // Set up upgrade handler to initialize WebSockets on-demand
 127 |       httpServer.on('upgrade', (request, socket, head) => {
 128 |         const { pathname } = parse(request.url || '');
 129 | 
 130 |         // Only handle WebSocket connections for our terminal endpoints
 131 |         if (pathname && pathname.startsWith('/api/terminals/ws/')) {
 132 |           // If WebSockets aren't initialized yet, initialize them on-demand
 133 |           if (!isWebSocketInitialized) {
 134 |             logger.info('Initializing WebSocket server on-demand');
 135 |             initializeWebSocketSupport(httpServer!);
 136 |           }
 137 | 
 138 |           // Handle the terminal WebSocket upgrade
 139 |           handleUpgrade(request, socket as Socket, head);
 140 |         }
 141 |         // For all other WebSocket connections (including Next.js HMR),
 142 |         // do nothing and let Next.js handle them
 143 |       });
 144 |     }
 145 | 
 146 |     return httpServer;
 147 |   } catch (error) {
 148 |     logger.error(`Error creating server: ${error}`);
 149 |     throw error;
 150 |   }
 151 | }
 152 | 
 153 | /**
 154 |  * Initialize WebSocket support for the given server
 155 |  */
 156 | function initializeWebSocketSupport(server: Server) {
 157 |   if (isWebSocketInitialized) {
 158 |     logger.info('WebSocket server already initialized');
 159 |     return;
 160 |   }
 161 | 
 162 |   logger.info('Initializing WebSocket server');
 163 |   initializeWebSocketServer();
 164 |   isWebSocketInitialized = true;
 165 | 
 166 |   // Handle upgrade requests without removing existing listeners
 167 |   server.on('upgrade', (request, socket, head) => {
 168 |     // Check if this request is already being handled
 169 |     if ((request as any).__isHandlingUpgrade) {
 170 |       logger.info('Skipping already handled WebSocket upgrade request');
 171 |       socket.destroy();
 172 |       return;
 173 |     }
 174 | 
 175 |     const { pathname } = parse(request.url || '');
 176 |     const pathnameStr = pathname || '';
 177 |     logger.info('Upgrade request received', { pathname: pathnameStr });
 178 | 
 179 |     // Only handle terminal connections and let Next.js handle its own WebSocket connections
 180 |     if (pathnameStr && pathnameStr.startsWith('/api/terminals/ws/')) {
 181 |       try {
 182 |         // Mark this request as being handled to prevent double handling
 183 |         (request as any).__isHandlingUpgrade = true;
 184 | 
 185 |         // Extract connection ID from URL
 186 |         const connectionId = pathnameStr.split('/').pop();
 187 |         if (connectionId) {
 188 |           logger.info('Handling terminal WebSocket upgrade', { connectionId });
 189 |           (request as any).connectionId = connectionId;
 190 |           handleUpgrade(request, socket as Socket, head);
 191 |         } else {
 192 |           logger.error('Invalid terminal WebSocket URL', { pathname: pathnameStr });
 193 |           socket.destroy();
 194 |         }
 195 |       } catch (error) {
 196 |         // Log error but don't crash server
 197 |         logger.error('Error handling WebSocket upgrade', {
 198 |           error: error instanceof Error ? error.message : String(error),
 199 |           pathname: pathnameStr,
 200 |         });
 201 |         socket.destroy();
 202 |       }
 203 |     } else {
 204 |       // Let Next.js handle other WebSocket connections
 205 |       logger.info('Letting Next.js handle WebSocket upgrade', { pathname: pathnameStr });
 206 |     }
 207 |   });
 208 | 
 209 |   logger.info('WebSocket server initialized successfully');
 210 | }
 211 | 
 212 | /**
 213 |  * Start the server on the specified port
 214 |  */
 215 | export async function startServer(options: {
 216 |   dev?: boolean;
 217 |   hostname?: string;
 218 |   port?: number;
 219 |   enableWebSockets?: boolean;
 220 | }): Promise<Server> {
 221 |   const {
 222 |     dev = process.env.NODE_ENV !== 'production',
 223 |     hostname = 'localhost',
 224 |     port = 3000,
 225 |     enableWebSockets = false,
 226 |   } = options;
 227 | 
 228 |   // Create server if not already created
 229 |   if (!httpServer) {
 230 |     httpServer = await createServer({ dev, hostname, port, enableWebSockets });
 231 |   }
 232 | 
 233 |   // Start listening with port incrementing logic
 234 |   return new Promise((resolve, reject) => {
 235 |     const tryPort = (currentPort: number, maxRetries = 10, retryCount = 0) => {
 236 |       if (retryCount >= maxRetries) {
 237 |         const error = new Error(`Could not find an available port after ${maxRetries} attempts`);
 238 |         logger.error(error.message);
 239 |         reject(error);
 240 |         return;
 241 |       }
 242 | 
 243 |       logger.info(`Attempting to listen on port ${currentPort}`);
 244 | 
 245 |       // Create a server just to test if the port is available
 246 |       const testServer = http.createServer();
 247 | 
 248 |       testServer.once('error', (err: NodeJS.ErrnoException) => {
 249 |         testServer.close();
 250 | 
 251 |         if (err.code === 'EADDRINUSE') {
 252 |           logger.info(`Port ${currentPort} in use, trying ${currentPort + 1}`);
 253 |           tryPort(currentPort + 1, maxRetries, retryCount + 1);
 254 |         } else {
 255 |           logger.error(`Error testing port ${currentPort}: ${err.message}`);
 256 |           reject(err);
 257 |         }
 258 |       });
 259 | 
 260 |       testServer.once('listening', () => {
 261 |         testServer.close();
 262 | 
 263 |         // Now that we know the port is available, start the actual server
 264 |         httpServer?.listen(currentPort, hostname, (err?: Error) => {
 265 |           if (err) {
 266 |             logger.error(`Error starting server: ${err.message}`);
 267 |             reject(err);
 268 |             return;
 269 |           }
 270 | 
 271 |           logger.info(`Server ready on http://${hostname}:${currentPort}`);
 272 |           resolve(httpServer as Server);
 273 |         });
 274 |       });
 275 | 
 276 |       testServer.listen(currentPort, hostname);
 277 |     };
 278 | 
 279 |     tryPort(port);
 280 |   });
 281 | }
 282 | 
 283 | /**
 284 |  * Stop the server
 285 |  */
 286 | export async function stopServer(): Promise<void> {
 287 |   return new Promise(async (resolve, reject) => {
 288 |     if (!httpServer) {
 289 |       resolve();
 290 |       return;
 291 |     }
 292 | 
 293 |     logger.info('Stopping server');
 294 | 
 295 |     // Set a timeout for the entire shutdown process
 296 |     const shutdownTimeout = setTimeout(() => {
 297 |       logger.warn('Server shutdown timed out after 1 second, forcing exit');
 298 | 
 299 |       // Remove all listeners to prevent memory leaks
 300 |       if (httpServer) {
 301 |         httpServer.removeAllListeners();
 302 |       }
 303 | 
 304 |       httpServer = null;
 305 |       resolve();
 306 |     }, 1000);
 307 | 
 308 |     // First close WebSocket server if initialized
 309 |     if (isWebSocketInitialized) {
 310 |       try {
 311 |         const { closeWebSocketServer } = await import('./websocket');
 312 |         await closeWebSocketServer();
 313 |         isWebSocketInitialized = false;
 314 |       } catch (err) {
 315 |         logger.error(`Error closing WebSocket server: ${err}`);
 316 |       }
 317 |     }
 318 | 
 319 |     // Remove all upgrade listeners to prevent memory leaks
 320 |     if (httpServer) {
 321 |       httpServer.removeAllListeners('upgrade');
 322 |     }
 323 | 
 324 |     // Force close all connections
 325 |     httpServer.closeAllConnections();
 326 | 
 327 |     // Then close HTTP server with a short timeout
 328 |     const serverCloseTimeout = setTimeout(() => {
 329 |       logger.warn('HTTP server close timed out, forcing close');
 330 |       httpServer = null;
 331 |       clearTimeout(shutdownTimeout);
 332 |       resolve();
 333 |     }, 500);
 334 | 
 335 |     httpServer.close((err) => {
 336 |       clearTimeout(serverCloseTimeout);
 337 |       clearTimeout(shutdownTimeout);
 338 | 
 339 |       if (err) {
 340 |         logger.error(`Error stopping server: ${err.message}`);
 341 |         reject(err);
 342 |         return;
 343 |       }
 344 | 
 345 |       httpServer = null;
 346 |       logger.info('HTTP server closed successfully');
 347 |       resolve();
 348 |     });
 349 |   });
 350 | }
 351 | 
 352 | /**
 353 |  * Get the HTTP server instance
 354 |  */
 355 | export function getServer(): Server | null {
 356 |   return httpServer;
 357 | }
 358 | 
 359 | /**
 360 |  * Initialize WebSockets on-demand
 361 |  */
 362 | export function initializeWebSockets(): boolean {
 363 |   if (!httpServer) {
 364 |     logger.error('Cannot initialize WebSockets: HTTP server not running');
 365 |     return false;
 366 |   }
 367 | 
 368 |   if (isWebSocketInitialized) {
 369 |     logger.info('WebSockets already initialized');
 370 |     return true;
 371 |   }
 372 | 
 373 |   initializeWebSocketSupport(httpServer);
 374 |   return true;
 375 | }

```

`/workspaces/automai/src/lib/services/index.ts`:

```ts
   1 | /**
   2 |  * Service layer exports
   3 |  * This file exports all service functions to provide a clean API
   4 |  */
   5 | 
   6 | export * from './hosts';
   7 | export * from './http';
   8 | export * from './ssh';
   9 | export * from './websocket';
  10 | export * from './terminal';

```

`/workspaces/automai/src/lib/services/terminal.ts`:

```ts
   1 | /* eslint-disable */
   2 | import db from '@/lib/supabase/db';
   3 | import { logger } from '../logger';
   4 | 
   5 | // Define a TerminalService class to implement singleton pattern
   6 | class TerminalService {
   7 |   private static instance: TerminalService;
   8 | 
   9 |   // Get singleton instance
  10 |   public static getInstance(): TerminalService {
  11 |     if (!TerminalService.instance) {
  12 |       TerminalService.instance = new TerminalService();
  13 |     }
  14 |     return TerminalService.instance;
  15 |   }
  16 | 
  17 |   /**
  18 |    * Create a new terminal connection
  19 |    */
  20 |   async createTerminalConnection(data: {
  21 |     hostId: string;
  22 |     type: string;
  23 |     username?: string;
  24 |     password?: string;
  25 |   }) {
  26 |     logger.info('Creating terminal connection', { hostId: data.hostId, type: data.type });
  27 | 
  28 |     try {
  29 |       // Get host information
  30 |       const host = await db.host.findUnique({
  31 |         where: { id: data.hostId },
  32 |       });
  33 | 
  34 |       if (!host) {
  35 |         logger.error('Host not found', { hostId: data.hostId });
  36 |         throw new Error(`Host not found: ${data.hostId}`);
  37 |       }
  38 | 
  39 |       // Create connection record using db.query
  40 |       const connections = await db.query('connections', {
  41 |         insert: {
  42 |           type: data.type,
  43 |           status: 'pending',
  44 |           ip: host.ip,
  45 |           port: host.port,
  46 |           username: data.username || host.user,
  47 |           password: data.password || host.password,
  48 |           hostId: host.id,
  49 |         },
  50 |         returning: true,
  51 |       });
  52 |       
  53 |       const connection = connections[0];
  54 |       
  55 |       if (!connection) {
  56 |         throw new Error('Failed to create connection record');
  57 |       }
  58 | 
  59 |       logger.info('Terminal connection created', { connectionId: connection.id });
  60 | 
  61 |       return connection;
  62 |     } catch (error) {
  63 |       const errorMessage = error instanceof Error ? error.message : 'Unknown error';
  64 |       logger.error('Error creating terminal connection', { error: errorMessage });
  65 |       throw new Error(`Failed to create terminal connection: ${errorMessage}`);
  66 |     }
  67 |   }
  68 | 
  69 |   /**
  70 |    * Get terminal connection by ID
  71 |    */
  72 |   async getTerminalConnection(id: string) {
  73 |     logger.info('Getting terminal connection', { connectionId: id });
  74 | 
  75 |     try {
  76 |       // Get connection using db.query
  77 |       const connections = await db.query('connections', {
  78 |         where: { id },
  79 |         include: { host: true },
  80 |       });
  81 |       
  82 |       const connection = connections[0];
  83 |       
  84 |       if (!connection) {
  85 |         logger.error('Connection not found', { connectionId: id });
  86 |         return null;
  87 |       }
  88 | 
  89 |       return connection;
  90 |     } catch (error) {
  91 |       const errorMessage = error instanceof Error ? error.message : 'Unknown error';
  92 |       logger.error('Error getting terminal connection', { error: errorMessage });
  93 |       return null;
  94 |     }
  95 |   }
  96 | 
  97 |   /**
  98 |    * Update terminal connection status
  99 |    */
 100 |   async updateTerminalConnectionStatus(id: string, status: string) {
 101 |     logger.info('Updating terminal connection status', { connectionId: id, status });
 102 | 
 103 |     try {
 104 |       // Update connection using db.query
 105 |       const connections = await db.query('connections', {
 106 |         where: { id },
 107 |         update: { status },
 108 |         returning: true,
 109 |       });
 110 |       
 111 |       const connection = connections[0];
 112 |       
 113 |       if (!connection) {
 114 |         throw new Error(`Connection not found: ${id}`);
 115 |       }
 116 | 
 117 |       return connection;
 118 |     } catch (error) {
 119 |       const errorMessage = error instanceof Error ? error.message : 'Unknown error';
 120 |       logger.error('Error updating terminal connection status', { error: errorMessage });
 121 |       throw new Error(`Failed to update terminal connection status: ${errorMessage}`);
 122 |     }
 123 |   }
 124 | 
 125 |   /**
 126 |    * Close terminal connection
 127 |    */
 128 |   async closeTerminalConnection(id: string) {
 129 |     logger.info('Closing terminal connection', { connectionId: id });
 130 | 
 131 |     try {
 132 |       // Close connection using db.query
 133 |       const connections = await db.query('connections', {
 134 |         where: { id },
 135 |         update: {
 136 |           status: 'closed',
 137 |           closedAt: new Date().toISOString(),
 138 |         },
 139 |         returning: true,
 140 |       });
 141 |       
 142 |       const connection = connections[0];
 143 |       
 144 |       if (!connection) {
 145 |         throw new Error(`Connection not found: ${id}`);
 146 |       }
 147 | 
 148 |       return connection;
 149 |     } catch (error) {
 150 |       const errorMessage = error instanceof Error ? error.message : 'Unknown error';
 151 |       logger.error('Error closing terminal connection', { error: errorMessage });
 152 |       throw new Error(`Failed to close terminal connection: ${errorMessage}`);
 153 |     }
 154 |   }
 155 | 
 156 |   /**
 157 |    * Get all terminal connections
 158 |    */
 159 |   async getTerminalConnections() {
 160 |     logger.info('Getting all terminal connections');
 161 | 
 162 |     try {
 163 |       // Get connections using db.query
 164 |       const connections = await db.query('connections', {
 165 |         include: { host: true },
 166 |         orderBy: { createdAt: 'desc' },
 167 |       });
 168 | 
 169 |       return connections || [];
 170 |     } catch (error) {
 171 |       const errorMessage = error instanceof Error ? error.message : 'Unknown error';
 172 |       logger.error('Error getting terminal connections', { error: errorMessage });
 173 |       return [];
 174 |     }
 175 |   }
 176 | }
 177 | 
 178 | // Export singleton instance
 179 | const terminalService = TerminalService.getInstance();
 180 | export default terminalService;
 181 | 
 182 | /**
 183 |  * Alternative fetch terminal connection details with added compatibility fields
 184 |  */
 185 | export async function getCompatibleConnection(connectionId: string) {
 186 |   logger.info('Getting compatible connection', { connectionId });
 187 | 
 188 |   // Get connection using db.query
 189 |   const connections = await db.query('connections', {
 190 |     where: { id: connectionId },
 191 |     include: { host: true },
 192 |   });
 193 |   
 194 |   const connection = connections[0];
 195 |   
 196 |   if (!connection) {
 197 |     logger.error('Connection not found', { connectionId });
 198 |     return null;
 199 |   }
 200 | 
 201 |   logger.debug('Connection found', {
 202 |     connectionId: connection.id,
 203 |     connectionType: connection.type,
 204 |     connectionHasHost: !!connection.host,
 205 |   });
 206 | 
 207 |   // Add missing properties for compatibility
 208 |   return {
 209 |     ...connection,
 210 |     // Add any additional properties needed for compatibility
 211 |   };
 212 | }

```

`/workspaces/automai/src/lib/services/ssh.ts`:

```ts
   1 | /* eslint-disable */
   2 | import { Client } from 'ssh2';
   3 | import { WebSocket } from 'ws';
   4 | import { logger } from '../logger';
   5 | 
   6 | // Define WebSocketConnection type
   7 | export type WebSocketConnection = WebSocket & {
   8 |   isAlive?: boolean;
   9 |   authTimeout?: NodeJS.Timeout;
  10 | };
  11 | 
  12 | // Define a more specific type for authData
  13 | interface SSHAuthData {
  14 |   ssh_username?: string;
  15 |   ssh_password?: string;
  16 |   ssh_host?: string;
  17 |   ssh_port?: number;
  18 |   is_windows?: boolean;
  19 |   username?: string;
  20 |   password?: string;
  21 |   host?: string;
  22 |   port?: number;
  23 | }
  24 | 
  25 | // Add SSH error interface
  26 | interface SSHError extends Error {
  27 |   code?: string;
  28 |   level?: string;
  29 | }
  30 | 
  31 | /**
  32 |  * Handle SSH connection for a WebSocket client
  33 |  */
  34 | export async function handleSshConnection(
  35 |   clientSocket: WebSocketConnection,
  36 |   connectionId: string,
  37 |   authData?: SSHAuthData,
  38 | ) {
  39 |   logger.info('Starting SSH connection handler', { connectionId });
  40 |   
  41 |   // Declare variables at the top to fix linter errors
  42 |   let stream: any = null;
  43 |   let sshClient: Client | null = null;
  44 | 
  45 |   // For backward compatibility, check both prefixed and non-prefixed parameters
  46 |   const ssh_username = (authData as any)?.ssh_username || (authData as any)?.username;
  47 |   const ssh_password = (authData as any)?.ssh_password || (authData as any)?.password;
  48 |   const ssh_host = (authData as any)?.ssh_host || (authData as any)?.host;
  49 |   const ssh_port = (authData as any)?.ssh_port || (authData as any)?.port;
  50 |   let is_windows = (authData as any)?.is_windows || false;
  51 | 
  52 |   // If we have a host IP and Windows flag is explicitly set, log it
  53 |   if (is_windows) {
  54 |     console.log(`[Windows Detection] 🪟 Using Windows mode from explicit flag for ${ssh_host}`);
  55 |   }
  56 | 
  57 |   // Function to attempt SSH connection with specified mode
  58 |   const attemptConnection = (useWindowsMode: boolean) => {
  59 |     is_windows = useWindowsMode;
  60 | 
  61 |     logger.info('Attempting SSH connection', {
  62 |       connectionId,
  63 |       ssh_username: ssh_username,
  64 |       ssh_password: ssh_password ? '[REDACTED]' : 'none',
  65 |       ssh_host: ssh_host,
  66 |       ssh_port: ssh_port || 22,
  67 |       is_windows: is_windows,
  68 |     });
  69 | 
  70 |     try {
  71 |       // Create new SSH client for retry
  72 |       if (sshClient) {
  73 |         try {
  74 |           sshClient.end();
  75 |         } catch (e) {
  76 |           // Ignore errors ending previous client
  77 |         }
  78 |       }
  79 | 
  80 |       sshClient = new Client();
  81 |       setupSshClientEvents();
  82 | 
  83 |       // Connection options with improved algorithm support for different SSH server types
  84 |       const connectionOptions: any = {
  85 |         host: ssh_host,
  86 |         port: ssh_port || 22,
  87 |         username: ssh_username,
  88 |         password: ssh_password,
  89 |         forceIPv4: true, // Force IPv4 to avoid IPv6 issues
  90 |         debug: (message: string) => {
  91 |           console.log(`SSH DEBUG [${connectionId}]:`, message);
  92 |           if (message.includes('Remote ident') && message.includes('Windows')) {
  93 |             logger.info('Detected Windows SSH server from banner', { connectionId, message });
  94 |           }
  95 |           if (
  96 |             message.includes('KEX') ||
  97 |             message.includes('AUTH') ||
  98 |             message.includes('USERAUTH') ||
  99 |             message.includes('handshake') ||
 100 |             message.includes('timeout') ||
 101 |             message.includes('error') ||
 102 |             message.includes('close')
 103 |           ) {
 104 |             logger.info(`SSH DETAIL [${connectionId}]:`, {
 105 |               message,
 106 |               ssh_host,
 107 |               ssh_port: ssh_port || 22,
 108 |             });
 109 |           }
 110 |         },
 111 |         readyTimeout: 25000, // 25 seconds timeout for slow networks
 112 |         keepaliveInterval: 30000,
 113 |         // Support a wide range of algorithms for compatibility with different SSH servers
 114 |         algorithms: {
 115 |           kex: [
 116 |             'diffie-hellman-group-exchange-sha256',
 117 |             'diffie-hellman-group14-sha256',
 118 |             'diffie-hellman-group16-sha512',
 119 |             'diffie-hellman-group18-sha512',
 120 |             'diffie-hellman-group14-sha1',
 121 |             'diffie-hellman-group1-sha1',
 122 |           ],
 123 |           cipher: [
 124 |             'aes128-ctr',
 125 |             'aes192-ctr',
 126 |             'aes256-ctr',
 127 |             'aes128-gcm',
 128 |             'aes256-gcm',
 129 |             'aes128-cbc',
 130 |             '3des-cbc',
 131 |           ],
 132 |           serverHostKey: [
 133 |             'ssh-rsa',
 134 |             'ecdsa-sha2-nistp256',
 135 |             'ecdsa-sha2-nistp384',
 136 |             'ecdsa-sha2-nistp521',
 137 |             'ssh-ed25519',
 138 |           ],
 139 |           hmac: ['hmac-sha2-256', 'hmac-sha2-512', 'hmac-sha1'],
 140 |         },
 141 |       };
 142 | 
 143 |       // Connect to SSH server
 144 |       sshClient.connect(connectionOptions);
 145 |     } catch (e) {
 146 |       handleConnectionError(e);
 147 |     }
 148 |   };
 149 | 
 150 |   // Function to setup all SSH client event handlers
 151 |   const setupSshClientEvents = () => {
 152 |     if (!sshClient) return;
 153 | 
 154 |     sshClient.on('banner', (message: string) => {
 155 |       logger.info('SSH banner received', { connectionId, message });
 156 |       console.log(`SSH BANNER [${connectionId}]:`, message);
 157 | 
 158 |       // Send banner to client for visibility
 159 |       try {
 160 |         if (clientSocket.readyState === WebSocket.OPEN) {
 161 |           clientSocket.send(
 162 |             JSON.stringify({
 163 |               type: 'banner',
 164 |               message: message,
 165 |             }),
 166 |           );
 167 |         }
 168 |       } catch (e) {
 169 |         logger.error(
 170 |           `Error sending banner to WebSocket: ${e instanceof Error ? e.message : String(e)}`,
 171 |           { connectionId },
 172 |         );
 173 |       }
 174 |     });
 175 | 
 176 |     sshClient.on('ready', () => {
 177 |       logger.info('SSH connection ready', {
 178 |         connectionId,
 179 |         ssh_host,
 180 |         ssh_port: ssh_port || 22,
 181 |         is_windows: is_windows,
 182 |       });
 183 | 
 184 |       try {
 185 |         if (clientSocket.readyState === WebSocket.OPEN) {
 186 |           clientSocket.send(
 187 |             JSON.stringify({
 188 |               status: 'connected',
 189 |               message: 'SSH connection established successfully',
 190 |               details: { is_windows: is_windows },
 191 |             }),
 192 |           );
 193 |         }
 194 |       } catch (e) {
 195 |         logger.error(
 196 |           `Failed to send connection success message: ${e instanceof Error ? e.message : String(e)}`,
 197 |           { connectionId },
 198 |         );
 199 |       }
 200 | 
 201 |       // Create shell session based on whether it's Windows or not
 202 |       if (is_windows) {
 203 |         tryWindowsConnection(0);
 204 |       } else {
 205 |         createShellSession();
 206 |       }
 207 |     });
 208 | 
 209 |     sshClient.on('error', handleSshError);
 210 |   };
 211 | 
 212 |   // Add this function to try different Windows connection methods
 213 |   const tryWindowsConnection = (retryCount = 0) => {
 214 |     if (!sshClient) return;
 215 | 
 216 |     const methods = [
 217 |       { cmd: 'cmd.exe', opts: { pty: true, term: 'xterm-256color' } },
 218 |       { cmd: 'cmd.exe /k "cd %USERPROFILE%"', opts: { pty: true, term: 'xterm-256color' } },
 219 |       { cmd: 'powershell.exe', opts: { pty: true, term: 'xterm-256color' } },
 220 |       { cmd: null, opts: { pty: true, term: 'xterm-256color' } }, // Regular shell as last resort
 221 |     ];
 222 | 
 223 |     if (retryCount >= methods.length) {
 224 |       logger.error('All Windows connection methods failed', { connectionId });
 225 |       return;
 226 |     }
 227 | 
 228 |     const method = methods[retryCount];
 229 | 
 230 |     if (method.cmd) {
 231 |       logger.info(`Trying Windows connection method ${retryCount}: ${method.cmd}`, {
 232 |         connectionId,
 233 |       });
 234 |       sshClient.exec(method.cmd, method.opts, (err, stream) => {
 235 |         if (err) {
 236 |           logger.warn(`Windows connection method ${retryCount} failed: ${err.message}`, {
 237 |             connectionId,
 238 |           });
 239 |           tryWindowsConnection(retryCount + 1);
 240 |         } else {
 241 |           setupStream(stream);
 242 |         }
 243 |       });
 244 |     } else {
 245 |       createShellSession(); // Fall back to regular shell
 246 |     }
 247 |   };
 248 | 
 249 |   // Error handler for SSH client errors
 250 |   const handleSshError = (err: SSHError) => {
 251 |     const errorInfo = {
 252 |       error: err.message,
 253 |       code: err.code,
 254 |       level: err.level,
 255 |       connectionId,
 256 |       ssh_host: ssh_host,
 257 |       ssh_port: ssh_port || 22,
 258 |       is_windows: is_windows,
 259 |     };
 260 | 
 261 |     logger.error('SSH connection error', errorInfo);
 262 |     console.error(`SSH connection error for ${connectionId}:`, err);
 263 | 
 264 |     try {
 265 |       const errorType =
 266 |         err.code === 'ECONNREFUSED'
 267 |           ? 'SSH_CONNECTION_REFUSED'
 268 |           : err.code === 'ECONNRESET'
 269 |             ? 'SSH_CONNECTION_RESET'
 270 |             : err.level === 'authentication'
 271 |               ? 'SSH_AUTHerror'
 272 |               : err.level === 'client-timeout'
 273 |                 ? 'SSH_HANDSHAKE_TIMEOUT'
 274 |                 : 'SSH_CONNECTIONerror';
 275 | 
 276 |       if (clientSocket.readyState === WebSocket.OPEN) {
 277 |         clientSocket.send(
 278 |           JSON.stringify({
 279 |             error: `SSH connection error: ${err.message}`,
 280 |             errorType: errorType,
 281 |             details: {
 282 |               code: err.code,
 283 |               level: err.level,
 284 |               ssh_host: ssh_host,
 285 |               ssh_port: ssh_port || 22,
 286 |               is_windows: is_windows,
 287 |             },
 288 |           }),
 289 |         );
 290 |       }
 291 |     } catch (e) {
 292 |       logger.error(
 293 |         `Error sending error to WebSocket: ${e instanceof Error ? e.message : String(e)}`,
 294 |         { connectionId },
 295 |       );
 296 |     }
 297 |   };
 298 | 
 299 |   // Error handler for connection attempt errors
 300 |   const handleConnectionError = (e: unknown) => {
 301 |     logger.error(`Error connecting to SSH server: ${e instanceof Error ? e.message : String(e)}`, {
 302 |       connectionId,
 303 |       ssh_host: ssh_host,
 304 |       ssh_port: ssh_port || 22,
 305 |       is_windows: is_windows,
 306 |     });
 307 | 
 308 |     try {
 309 |       if (clientSocket.readyState === WebSocket.OPEN) {
 310 |         clientSocket.send(
 311 |           JSON.stringify({
 312 |             error: `SSH connection attempt error: ${e instanceof Error ? e.message : String(e)}`,
 313 |             errorType: 'SSH_CONNECTION_ATTEMPTerror',
 314 |             details: {
 315 |               ssh_host: ssh_host,
 316 |               ssh_port: ssh_port || 22,
 317 |               is_windows: is_windows,
 318 |             },
 319 |           }),
 320 |         );
 321 |       }
 322 |     } catch (sendErr) {
 323 |       logger.error(
 324 |         `Error sending connection error to WebSocket: ${sendErr instanceof Error ? sendErr.message : String(sendErr)}`,
 325 |         { connectionId },
 326 |       );
 327 |     }
 328 |   };
 329 | 
 330 |   // Function to create a shell session (normal SSH or fallback for Windows)
 331 |   function createShellSession() {
 332 |     if (!sshClient) return;
 333 | 
 334 |     const shellOptions: any = {};
 335 | 
 336 |     // Even in shell mode, use pty for Windows
 337 |     if (is_windows) {
 338 |       shellOptions.pty = true;
 339 |       shellOptions.term = 'xterm-256color';
 340 |     }
 341 | 
 342 |     sshClient.shell(shellOptions, (err, stream) => {
 343 |       if (err) {
 344 |         logger.error(`SSH shell error: ${err.message}`, { connectionId });
 345 |         try {
 346 |           if (clientSocket.readyState === WebSocket.OPEN) {
 347 |             clientSocket.send(
 348 |               JSON.stringify({
 349 |                 error: `SSH shell error: ${err.message}`,
 350 |                 errorType: 'SSH_SHELLerror',
 351 |               }),
 352 |             );
 353 |           }
 354 |         } catch (e) {
 355 |           logger.error(
 356 |             `Error sending shell error to WebSocket: ${e instanceof Error ? e.message : String(e)}`,
 357 |             { connectionId },
 358 |           );
 359 |         }
 360 |         return;
 361 |       }
 362 | 
 363 |       setupStream(stream);
 364 |     });
 365 |   }
 366 | 
 367 |   function setupStream(stream: any) {
 368 |     // Pipe data from SSH to WebSocket
 369 |     stream.on('data', (data: Buffer) => {
 370 |       try {
 371 |         if (clientSocket.readyState === WebSocket.OPEN) {
 372 |           clientSocket.send(data);
 373 |         }
 374 |       } catch (e) {
 375 |         logger.error(
 376 |           `Error sending data to WebSocket: ${e instanceof Error ? e.message : String(e)}`,
 377 |           { connectionId },
 378 |         );
 379 |       }
 380 |     });
 381 | 
 382 |     // Handle WebSocket messages
 383 |     clientSocket.on('message', (message: any) => {
 384 |       try {
 385 |         // Try parsing as JSON for commands
 386 |         const data = JSON.parse(message.toString());
 387 |         if (data.type === 'resize') {
 388 |           stream.setWindow(data.rows, data.cols, 0, 0);
 389 |         }
 390 |       } catch (e) {
 391 |         // Not JSON, treat as terminal input
 392 |         try {
 393 |           stream.write(message);
 394 |         } catch (err) {
 395 |           logger.error(
 396 |             `Error writing to SSH stream: ${err instanceof Error ? err.message : String(err)}`,
 397 |             { connectionId },
 398 |           );
 399 |         }
 400 |       }
 401 |     });
 402 | 
 403 |     stream.on('close', () => {
 404 |       logger.info('SSH stream closed', { connectionId });
 405 |       // Don't close the WebSocket, let the client handle disconnection
 406 |     });
 407 |   }
 408 | 
 409 |   // Set up WebSocket close handler first
 410 |   clientSocket.on('close', () => {
 411 |     logger.info('WebSocket closed');
 412 |     if (stream) {
 413 |       try {
 414 |         // Use destroy instead of close for compatibility
 415 |         stream.destroy();
 416 |       } catch (e) {
 417 |         // Ignore errors when closing stream
 418 |       }
 419 |     }
 420 |     if (sshClient) {
 421 |       try {
 422 |         logger.info('Ending SSH client due to WebSocket closure', { connectionId });
 423 |         sshClient.end();
 424 |       } catch (e) {
 425 |         logger.error(`Error ending SSH client: ${e instanceof Error ? e.message : String(e)}`, {
 426 |           connectionId,
 427 |         });
 428 |       }
 429 |     }
 430 |   });
 431 | 
 432 |   logger.info('Establishing SSH connection', { connectionId });
 433 |   console.log('DEBUG: handleSshConnection called with connectionId:', connectionId);
 434 | 
 435 |   // Log connection details for troubleshooting but sanitize password
 436 |   console.log(
 437 |     'DEBUG: authData:',
 438 |     JSON.stringify({
 439 |       ssh_username: ssh_username,
 440 |       ssh_password: ssh_password ? '[REDACTED]' : 'none',
 441 |       ssh_host: ssh_host,
 442 |       ssh_port: ssh_port || 22,
 443 |       raw_keys: Object.keys(authData || {}).join(', '),
 444 |       is_windows: is_windows,
 445 |     }),
 446 |   );
 447 | 
 448 |   if (clientSocket.authTimeout) {
 449 |     clearTimeout(clientSocket.authTimeout);
 450 |     delete clientSocket.authTimeout;
 451 |   }
 452 | 
 453 |   if (!ssh_host || !ssh_username) {
 454 |     const missingFields = [];
 455 |     if (!ssh_host) missingFields.push('ssh_host');
 456 |     if (!ssh_username) missingFields.push('ssh_username');
 457 | 
 458 |     logger.error('Missing SSH credentials', { connectionId, missingFields });
 459 | 
 460 |     try {
 461 |       if (clientSocket.readyState === WebSocket.OPEN) {
 462 |         clientSocket.send(
 463 |           JSON.stringify({
 464 |             error: `Missing SSH credentials: ${missingFields.join(', ')}`,
 465 |             errorType: 'MISSING_CREDENTIALS',
 466 |             details: { missingFields },
 467 |           }),
 468 |         );
 469 |       }
 470 |     } catch (e) {
 471 |       logger.error(`Failed to send error message: ${e instanceof Error ? e.message : String(e)}`, {
 472 |         connectionId,
 473 |       });
 474 |     }
 475 |     return;
 476 |   }
 477 | 
 478 |   // Start connection process with the detected Windows mode from test-connection
 479 |   attemptConnection(is_windows);
 480 | }

```

`/workspaces/automai/src/lib/services/git-providers/base.ts`:

```ts
   1 | import { GitProvider, Repository } from '@/types/repositories';
   2 | 
   3 | export interface GitProviderConfig {
   4 |   serverUrl?: string;
   5 |   accessToken?: string;
   6 | }
   7 | 
   8 | export interface GitProviderService {
   9 |   /**
  10 |    * Get user repositories from the Git provider
  11 |    */
  12 |   getUserRepositories(): Promise<Repository[]>;
  13 | 
  14 |   /**
  15 |    * Get repository details by name or ID
  16 |    */
  17 |   getRepository(nameOrId: string): Promise<Repository | null>;
  18 | 
  19 |   /**
  20 |    * Test the provider connection
  21 |    */
  22 |   testConnection(): Promise<boolean>;
  23 | 
  24 |   /**
  25 |    * Get the provider authorization URL
  26 |    */
  27 |   getAuthorizationUrl?(): string;
  28 | 
  29 |   /**
  30 |    * Get the redirect URL for OAuth callback
  31 |    */
  32 |   getRedirectUrl?(): string;
  33 | 
  34 |   /**
  35 |    * Exchange authorization code for access token
  36 |    */
  37 |   exchangeCodeForToken?(code: string): Promise<{
  38 |     accessToken: string;
  39 |     refreshToken?: string;
  40 |     expiresAt?: Date;
  41 |   }>;
  42 | 
  43 |   /**
  44 |    * Get user information from the provider
  45 |    */
  46 |   getUserInfo(accessToken: string): Promise<{
  47 |     id: string;
  48 |     login: string;
  49 |     name: string;
  50 |     email: string;
  51 |     avatarUrl: string;
  52 |   }>;
  53 | 
  54 |   /**
  55 |    * List repositories for the authenticated user
  56 |    */
  57 |   listRepositories(provider: GitProvider): Promise<Repository[]>;
  58 | 
  59 |   /**
  60 |    * Sync repository metadata
  61 |    */
  62 |   syncRepository(repository: Repository): Promise<Repository>;
  63 | 
  64 |   /**
  65 |    * Check if access token is valid
  66 |    */
  67 |   validateAccessToken(accessToken: string): Promise<boolean>;
  68 | 
  69 |   /**
  70 |    * Refresh access token if expired
  71 |    */
  72 |   refreshAccessToken(refreshToken: string): Promise<{
  73 |     accessToken: string;
  74 |     refreshToken?: string;
  75 |     expiresAt?: Date;
  76 |   }>;
  77 | }

```

`/workspaces/automai/src/lib/services/git-providers/gitlab.ts`:

```ts
   1 | import { GitProvider, Repository } from '@/types/repositories';
   2 | import { GitProviderService, GitProviderConfig } from './base';
   3 | 
   4 | export class GitLabProviderService implements GitProviderService {
   5 |   private baseUrl: string;
   6 |   private token?: string;
   7 | 
   8 |   constructor(config?: GitProviderConfig) {
   9 |     this.baseUrl = config?.serverUrl || 'https://gitlab.com/api/v4';
  10 |     this.token = config?.accessToken;
  11 |   }
  12 | 
  13 |   async getUserRepositories(): Promise<Repository[]> {
  14 |     if (!this.token) {
  15 |       throw new Error('Access token is required');
  16 |     }
  17 | 
  18 |     try {
  19 |       const response = await fetch(
  20 |         `${this.baseUrl}/projects?owned=true&membership=true&per_page=100`,
  21 |         {
  22 |           headers: {
  23 |             Authorization: `Bearer ${this.token}`,
  24 |             Accept: 'application/json',
  25 |           },
  26 |         },
  27 |       );
  28 | 
  29 |       if (!response.ok) {
  30 |         throw new Error(`Failed to fetch repositories: ${response.statusText}`);
  31 |       }
  32 | 
  33 |       const data = await response.json();
  34 | 
  35 |       return data.map((repo: any) => ({
  36 |         name: repo.name,
  37 |         description: repo.description,
  38 |         url: repo.web_url,
  39 |         defaultBranch: repo.default_branch,
  40 |         isPrivate: repo.visibility !== 'public',
  41 |         id: repo.id.toString(),
  42 |         providerId: '',
  43 |         owner: repo.namespace?.path || '',
  44 |         syncStatus: 'PENDING',
  45 |         createdAt: new Date(),
  46 |         updatedAt: new Date()
  47 |       }));
  48 |     } catch (error) {
  49 |       console.error('Error fetching GitLab repositories:', error);
  50 |       throw error;
  51 |     }
  52 |   }
  53 | 
  54 |   async getRepository(nameOrId: string): Promise<Repository | null> {
  55 |     if (!this.token) {
  56 |       throw new Error('Access token is required');
  57 |     }
  58 | 
  59 |     try {
  60 |       const response = await fetch(`${this.baseUrl}/projects/${encodeURIComponent(nameOrId)}`, {
  61 |         headers: {
  62 |           Authorization: `Bearer ${this.token}`,
  63 |           Accept: 'application/json',
  64 |         },
  65 |       });
  66 | 
  67 |       if (!response.ok) {
  68 |         if (response.status === 404) {
  69 |           return null;
  70 |         }
  71 |         throw new Error(`Failed to fetch repository: ${response.statusText}`);
  72 |       }
  73 | 
  74 |       const repo = await response.json();
  75 | 
  76 |       return {
  77 |         name: repo.name,
  78 |         description: repo.description,
  79 |         url: repo.web_url,
  80 |         defaultBranch: repo.default_branch,
  81 |         isPrivate: repo.visibility !== 'public',
  82 |         id: repo.id.toString(),
  83 |         providerId: '',
  84 |         owner: repo.namespace?.path || '',
  85 |         syncStatus: 'PENDING',
  86 |         createdAt: new Date(),
  87 |         updatedAt: new Date()
  88 |       };
  89 |     } catch (error) {
  90 |       console.error('Error fetching GitLab repository:', error);
  91 |       throw error;
  92 |     }
  93 |   }
  94 | 
  95 |   async testConnection(): Promise<boolean> {
  96 |     if (!this.token) {
  97 |       throw new Error('Access token is required');
  98 |     }
  99 | 
 100 |     try {
 101 |       const response = await fetch(`${this.baseUrl}/user`, {
 102 |         headers: {
 103 |           Authorization: `Bearer ${this.token}`,
 104 |           Accept: 'application/json',
 105 |         },
 106 |       });
 107 | 
 108 |       return response.ok;
 109 |     } catch (error) {
 110 |       console.error('Error testing GitLab connection:', error);
 111 |       return false;
 112 |     }
 113 |   }
 114 | 
 115 |   getRedirectUrl(): string {
 116 |     const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';
 117 |     return `${baseUrl}/api/git-providers/callback/gitlab`;
 118 |   }
 119 | 
 120 |   getAuthorizationUrl(): string {
 121 |     const clientId = process.env.GITLAB_CLIENT_ID;
 122 |     if (!clientId) {
 123 |       throw new Error('GitLab client ID is not configured');
 124 |     }
 125 |     
 126 |     const redirectUri = process.env.GITLAB_REDIRECT_URI || '';
 127 |     const state = Math.random().toString(36).substring(2, 15);
 128 |     
 129 |     const params = new URLSearchParams({
 130 |       client_id: clientId,
 131 |       redirect_uri: redirectUri,
 132 |       response_type: 'code',
 133 |       state,
 134 |       scope: 'api',
 135 |     });
 136 | 
 137 |     return `${this.baseUrl}/oauth/authorize?${params.toString()}`;
 138 |   }
 139 | 
 140 |   async exchangeCodeForToken(code: string): Promise<{
 141 |     accessToken: string;
 142 |     refreshToken?: string;
 143 |     expiresAt?: Date;
 144 |   }> {
 145 |     const clientId = process.env.GITLAB_CLIENT_ID;
 146 |     const clientSecret = process.env.GITLAB_CLIENT_SECRET;
 147 | 
 148 |     if (!clientId || !clientSecret) {
 149 |       throw new Error('GitLab OAuth credentials are not configured');
 150 |     }
 151 | 
 152 |     const redirectUri = this.getRedirectUrl();
 153 | 
 154 |     const response = await fetch('https://gitlab.com/oauth/token', {
 155 |       method: 'POST',
 156 |       headers: {
 157 |         'Content-Type': 'application/json',
 158 |         Accept: 'application/json',
 159 |       },
 160 |       body: JSON.stringify({
 161 |         client_id: clientId,
 162 |         client_secret: clientSecret,
 163 |         code,
 164 |         grant_type: 'authorization_code',
 165 |         redirect_uri: redirectUri,
 166 |       }),
 167 |     });
 168 | 
 169 |     if (!response.ok) {
 170 |       throw new Error(`Failed to exchange code for token: ${response.statusText}`);
 171 |     }
 172 | 
 173 |     const data = await response.json();
 174 | 
 175 |     // Calculate expiry date
 176 |     const expiresIn = data.expires_in || 7200; // Default to 2 hours
 177 |     const expiresAt = new Date();
 178 |     expiresAt.setSeconds(expiresAt.getSeconds() + expiresIn);
 179 | 
 180 |     return {
 181 |       accessToken: data.access_token,
 182 |       refreshToken: data.refresh_token,
 183 |       expiresAt,
 184 |     };
 185 |   }
 186 | 
 187 |   async getUserInfo(accessToken: string): Promise<{
 188 |     id: string;
 189 |     login: string;
 190 |     name: string;
 191 |     email: string;
 192 |     avatarUrl: string;
 193 |   }> {
 194 |     try {
 195 |       const response = await fetch(`${this.baseUrl}/user`, {
 196 |         headers: {
 197 |           Authorization: `Bearer ${accessToken}`,
 198 |           Accept: 'application/json',
 199 |         },
 200 |       });
 201 | 
 202 |       if (!response.ok) {
 203 |         throw new Error(`Failed to fetch user info: ${response.statusText}`);
 204 |       }
 205 | 
 206 |       const user = await response.json();
 207 | 
 208 |       return {
 209 |         id: user.id.toString(),
 210 |         login: user.username,
 211 |         name: user.name,
 212 |         email: user.email,
 213 |         avatarUrl: user.avatar_url,
 214 |       };
 215 |     } catch (error) {
 216 |       console.error('Error fetching GitLab user info:', error);
 217 |       throw error;
 218 |     }
 219 |   }
 220 | 
 221 |   async listRepositories(provider: GitProvider): Promise<Repository[]> {
 222 |     if (!this.token) {
 223 |       throw new Error('Access token is required');
 224 |     }
 225 | 
 226 |     try {
 227 |       const response = await fetch(`${this.baseUrl}/projects?membership=true`, {
 228 |         headers: {
 229 |           Authorization: `Bearer ${this.token}`,
 230 |           Accept: 'application/json',
 231 |         },
 232 |       });
 233 | 
 234 |       if (!response.ok) {
 235 |         throw new Error(`Failed to fetch repositories: ${response.statusText}`);
 236 |       }
 237 | 
 238 |       const repos = await response.json();
 239 | 
 240 |       return repos.map((repo: any) => ({
 241 |         id: repo.id.toString(),
 242 |         name: repo.name,
 243 |         description: repo.description,
 244 |         url: repo.web_url,
 245 |         defaultBranch: repo.default_branch,
 246 |         isPrivate: repo.visibility !== 'public',
 247 |         providerId: provider.id,
 248 |         owner: repo.namespace?.path || '',
 249 |         syncStatus: 'PENDING',
 250 |         createdAt: new Date(),
 251 |         updatedAt: new Date(),
 252 |       }));
 253 |     } catch (error) {
 254 |       console.error('Error fetching GitLab repositories:', error);
 255 |       throw error;
 256 |     }
 257 |   }
 258 | 
 259 |   async syncRepository(repository: Repository): Promise<Repository> {
 260 |     if (!this.token) {
 261 |       throw new Error('Access token is required');
 262 |     }
 263 | 
 264 |     try {
 265 |       // Get updated repository data
 266 |       const updatedRepo = await this.getRepository(repository.id);
 267 |       
 268 |       if (!updatedRepo) {
 269 |         throw new Error(`Repository not found: ${repository.id}`);
 270 |       }
 271 | 
 272 |       return {
 273 |         ...repository,
 274 |         ...updatedRepo,
 275 |         lastSyncedAt: new Date(),
 276 |         syncStatus: 'SYNCED',
 277 |       };
 278 |     } catch (error) {
 279 |       console.error('Error syncing GitLab repository:', error);
 280 |       return {
 281 |         ...repository,
 282 |         syncStatus: 'ERROR',
 283 |         lastSyncedAt: new Date(),
 284 |       };
 285 |     }
 286 |   }
 287 | 
 288 |   async validateAccessToken(accessToken: string): Promise<boolean> {
 289 |     try {
 290 |       const response = await fetch(`${this.baseUrl}/user`, {
 291 |         headers: {
 292 |           Authorization: `Bearer ${accessToken}`,
 293 |           Accept: 'application/json',
 294 |         },
 295 |       });
 296 | 
 297 |       return response.ok;
 298 |     } catch (error) {
 299 |       return false;
 300 |     }
 301 |   }
 302 | 
 303 |   async refreshAccessToken(refreshToken: string): Promise<{
 304 |     accessToken: string;
 305 |     refreshToken?: string;
 306 |     expiresAt?: Date;
 307 |   }> {
 308 |     // GitLab doesn't support refresh tokens in the standard OAuth flow
 309 |     throw new Error('GitLab does not support refreshing tokens');
 310 |   }
 311 | }

```

`/workspaces/automai/src/lib/services/git-providers/gitea.ts`:

```ts
   1 | import { GitProvider, Repository } from '@/types/repositories';
   2 | 
   3 | import { GitProviderService } from './base';
   4 | 
   5 | export class GiteaProviderService implements GitProviderService {
   6 |   private serverUrl: string | null = null;
   7 |   private accessToken: string | null = null;
   8 | 
   9 |   constructor(serverUrl?: string, accessToken?: string) {
  10 |     this.serverUrl = serverUrl || null;
  11 |     this.accessToken = accessToken || null;
  12 |   }
  13 | 
  14 |   // For Gitea, we don't need OAuth flow as we're using direct access token
  15 |   getAuthorizationUrl(): string {
  16 |     return '';
  17 |   }
  18 | 
  19 |   // For Gitea, we use the provided token directly
  20 |   async exchangeCodeForToken(
  21 |     code: string
  22 |   ): Promise<{
  23 |     accessToken: string;
  24 |     refreshToken?: string;
  25 |     expiresAt?: Date;
  26 |   }> {
  27 |     if (!this.accessToken) {
  28 |       throw new Error('No access token provided for Gitea');
  29 |     }
  30 | 
  31 |     return {
  32 |       accessToken: this.accessToken,
  33 |       // Gitea tokens don't typically expire
  34 |     };
  35 |   }
  36 | 
  37 |   async getUserInfo(accessToken: string): Promise<{
  38 |     id: string;
  39 |     login: string;
  40 |     name: string;
  41 |     email: string;
  42 |     avatarUrl: string;
  43 |   }> {
  44 |     if (!this.serverUrl) {
  45 |       throw new Error('Server URL is required for Gitea');
  46 |     }
  47 | 
  48 |     const response = await fetch(`${this.serverUrl}/api/v1/user`, {
  49 |       headers: {
  50 |         Authorization: `token ${accessToken}`,
  51 |       },
  52 |     });
  53 | 
  54 |     if (!response.ok) {
  55 |       throw new Error(`Failed to fetch user info: ${response.statusText}`);
  56 |     }
  57 | 
  58 |     const data = await response.json();
  59 |     return {
  60 |       id: data.id.toString(),
  61 |       login: data.login,
  62 |       name: data.full_name || data.login,
  63 |       email: data.email,
  64 |       avatarUrl: data.avatar_url,
  65 |     };
  66 |   }
  67 | 
  68 |   async listRepositories(provider: GitProvider): Promise<Repository[]> {
  69 |     if (!this.serverUrl) {
  70 |       throw new Error('Server URL is required for Gitea');
  71 |     }
  72 | 
  73 |     const accessToken = provider.accessToken;
  74 |     if (!accessToken) {
  75 |       throw new Error('Access token is required for Gitea');
  76 |     }
  77 | 
  78 |     const response = await fetch(`${this.serverUrl}/api/v1/user/repos`, {
  79 |       headers: {
  80 |         Authorization: `token ${accessToken}`,
  81 |       },
  82 |     });
  83 | 
  84 |     if (!response.ok) {
  85 |       throw new Error(`Failed to fetch repositories: ${response.statusText}`);
  86 |     }
  87 | 
  88 |     const data = await response.json();
  89 |     return data.map((repo: any) => ({
  90 |       id: repo.id.toString(),
  91 |       name: repo.name,
  92 |       description: repo.description || '',
  93 |       url: repo.html_url,
  94 |       defaultBranch: repo.default_branch || 'main',
  95 |       providerId: provider.id,
  96 |       syncStatus: 'IDLE',
  97 |       createdAt: new Date(repo.created_at),
  98 |       updatedAt: new Date(repo.updated_at),
  99 |     }));
 100 |   }
 101 | 
 102 |   async validateAccessToken(accessToken: string): Promise<boolean> {
 103 |     if (!this.serverUrl) {
 104 |       return false;
 105 |     }
 106 | 
 107 |     try {
 108 |       const response = await fetch(`${this.serverUrl}/api/v1/user`, {
 109 |         headers: {
 110 |           Authorization: `token ${accessToken}`,
 111 |         },
 112 |       });
 113 |       return response.ok;
 114 |     } catch (error) {
 115 |       return false;
 116 |     }
 117 |   }
 118 | 
 119 |   async getRepository(nameOrId: string): Promise<Repository | null> {
 120 |     throw new Error('Method not implemented.');
 121 |   }
 122 | 
 123 |   async syncRepository(_repository: Repository): Promise<Repository> {
 124 |     throw new Error('Method not implemented.');
 125 |   }
 126 | 
 127 |   async refreshAccessToken(_refreshToken: string): Promise<{
 128 |     accessToken: string;
 129 |     refreshToken?: string;
 130 |     expiresAt?: Date;
 131 |   }> {
 132 |     throw new Error('Method not implemented.');
 133 |   }
 134 | 
 135 |   async getUserRepositories(): Promise<Repository[]> {
 136 |     throw new Error('Method not implemented.');
 137 |   }
 138 | 
 139 |   async testConnection(): Promise<boolean> {
 140 |     if (!this.accessToken || !this.serverUrl) {
 141 |       return false;
 142 |     }
 143 |     
 144 |     try {
 145 |       // Simple check to see if we can access the API
 146 |       const response = await fetch(`${this.serverUrl}/api/v1/user`, {
 147 |         headers: {
 148 |           Authorization: `token ${this.accessToken}`,
 149 |         },
 150 |       });
 151 |       
 152 |       return response.ok;
 153 |     } catch (error) {
 154 |       console.error('Error testing Gitea connection:', error);
 155 |       return false;
 156 |     }
 157 |   }
 158 | }

```

`/workspaces/automai/src/lib/services/git-providers/github.ts`:

```ts
   1 | import { GitProvider, Repository, SyncStatus } from '@/types/repositories';
   2 | 
   3 | import { GitProviderService } from './base';
   4 | 
   5 | export class GitHubProviderService implements GitProviderService {
   6 |   private clientId: string;
   7 |   private clientSecret: string;
   8 | 
   9 |   constructor() {
  10 |     this.clientId = process.env.GITHUB_CLIENT_ID || '';
  11 |     this.clientSecret = process.env.GITHUB_CLIENT_SECRET || '';
  12 | 
  13 |     if (!this.clientId || !this.clientSecret) {
  14 |       console.warn('GitHub OAuth credentials not configured');
  15 |     }
  16 |   }
  17 | 
  18 |   getAuthorizationUrl(): string {
  19 |     const redirectUri = process.env.GITHUB_REDIRECT_URI || '';
  20 |     const state = Math.random().toString(36).substring(2, 15);
  21 |     
  22 |     const params = new URLSearchParams({
  23 |       client_id: this.clientId,
  24 |       redirect_uri: redirectUri,
  25 |       scope: 'repo user',
  26 |       state,
  27 |     });
  28 | 
  29 |     return `https://github.com/login/oauth/authorize?${params.toString()}`;
  30 |   }
  31 | 
  32 |   async exchangeCodeForToken(
  33 |     code: string
  34 |   ): Promise<{
  35 |     accessToken: string;
  36 |     refreshToken?: string;
  37 |     expiresAt?: Date;
  38 |   }> {
  39 |     const redirectUri = process.env.GITHUB_REDIRECT_URI || '';
  40 |     
  41 |     try {
  42 |       const response = await fetch('https://github.com/login/oauth/access_token', {
  43 |         method: 'POST',
  44 |         headers: {
  45 |           'Content-Type': 'application/json',
  46 |           Accept: 'application/json',
  47 |         },
  48 |         body: JSON.stringify({
  49 |           client_id: this.clientId,
  50 |           client_secret: this.clientSecret,
  51 |           code,
  52 |           redirect_uri: redirectUri,
  53 |         }),
  54 |       });
  55 | 
  56 |       const data = await response.json();
  57 | 
  58 |       if (data.error) {
  59 |         throw new Error(`GitHub OAuth error: ${data.error_description || data.error}`);
  60 |       }
  61 | 
  62 |       return {
  63 |         accessToken: data.access_token,
  64 |         // GitHub doesn't provide refresh tokens in the standard OAuth flow
  65 |       };
  66 |     } catch (error) {
  67 |       throw error;
  68 |     }
  69 |   }
  70 | 
  71 |   async getUserInfo(accessToken: string): Promise<{
  72 |     id: string;
  73 |     login: string;
  74 |     name: string;
  75 |     email: string;
  76 |     avatarUrl: string;
  77 |   }> {
  78 |     const response = await fetch('https://api.github.com/user', {
  79 |       headers: {
  80 |         Authorization: `token ${accessToken}`,
  81 |       },
  82 |     });
  83 | 
  84 |     if (!response.ok) {
  85 |       throw new Error(`GitHub API error: ${response.statusText}`);
  86 |     }
  87 | 
  88 |     const data = await response.json();
  89 | 
  90 |     return {
  91 |       id: data.id.toString(),
  92 |       login: data.login,
  93 |       name: data.name || data.login,
  94 |       email: data.email || '',
  95 |       avatarUrl: data.avatar_url,
  96 |     };
  97 |   }
  98 | 
  99 |   async listRepositories(provider: GitProvider): Promise<Repository[]> {
 100 |     const response = await fetch('https://api.github.com/user/repos?per_page=100', {
 101 |       headers: {
 102 |         Authorization: `token ${provider.accessToken}`,
 103 |       },
 104 |     });
 105 | 
 106 |     if (!response.ok) {
 107 |       throw new Error(`GitHub API error: ${response.statusText}`);
 108 |     }
 109 | 
 110 |     const data = await response.json();
 111 | 
 112 |     return data.map((repo: any) => ({
 113 |       id: repo.id.toString(),
 114 |       name: repo.name,
 115 |       description: repo.description,
 116 |       url: repo.html_url,
 117 |       defaultBranch: repo.default_branch,
 118 |       providerId: provider.id,
 119 |       lastSyncedAt: new Date(),
 120 |       syncStatus: 'SYNCED',
 121 |       createdAt: new Date(repo.created_at),
 122 |       updatedAt: new Date(repo.updated_at),
 123 |     }));
 124 |   }
 125 | 
 126 |   async getRepository(nameOrId: string): Promise<Repository | null> {
 127 |     if (!this.clientId || !this.clientSecret) {
 128 |       throw new Error('GitHub OAuth credentials not configured');
 129 |     }
 130 |     
 131 |     try {
 132 |       // Parse nameOrId which should be in format "owner/repo"
 133 |       const [owner, repo] = nameOrId.split('/');
 134 |       
 135 |       if (!owner || !repo) {
 136 |         throw new Error('Invalid repository identifier. Expected format: owner/repo');
 137 |       }
 138 |       
 139 |       const response = await fetch(`https://api.github.com/repos/${owner}/${repo}`, {
 140 |         headers: {
 141 |           Accept: 'application/json',
 142 |         },
 143 |       });
 144 |       
 145 |       if (!response.ok) {
 146 |         if (response.status === 404) {
 147 |           return null;
 148 |         }
 149 |         throw new Error(`GitHub API error: ${response.statusText}`);
 150 |       }
 151 |       
 152 |       const repoData = await response.json();
 153 |       
 154 |       return {
 155 |         id: repoData.id.toString(),
 156 |         name: repoData.name,
 157 |         description: repoData.description,
 158 |         url: repoData.html_url,
 159 |         defaultBranch: repoData.default_branch,
 160 |         providerId: '', // This would need to be set by the caller
 161 |         owner: repoData.owner.login,
 162 |         isPrivate: repoData.private,
 163 |         syncStatus: 'PENDING',
 164 |         createdAt: new Date(repoData.created_at),
 165 |         updatedAt: new Date(repoData.updated_at),
 166 |       };
 167 |     } catch (error) {
 168 |       console.error('Error fetching GitHub repository:', error);
 169 |       return null;
 170 |     }
 171 |   }
 172 | 
 173 |   async syncRepository(repository: Repository): Promise<Repository> {
 174 |     // We need to get the provider separately since it's not part of the Repository type
 175 |     // This would need to be implemented based on how providers are stored/retrieved in your system
 176 |     const providerId = repository.providerId;
 177 |     
 178 |     // This is a placeholder - in a real implementation, you would fetch the provider using the providerId
 179 |     if (!providerId) {
 180 |       throw new Error('Provider ID not available');
 181 |     }
 182 |     
 183 |     try {
 184 |       // Get updated repository data
 185 |       const updatedRepo = await this.getRepository(`${repository.owner}/${repository.name}`);
 186 |       
 187 |       if (!updatedRepo) {
 188 |         throw new Error(`Repository not found: ${repository.name}`);
 189 |       }
 190 |       
 191 |       return {
 192 |         ...repository,
 193 |         ...updatedRepo,
 194 |         lastSyncedAt: new Date(),
 195 |         syncStatus: 'SYNCED',
 196 |       };
 197 |     } catch (error) {
 198 |       console.error('Error syncing GitHub repository:', error);
 199 |       return {
 200 |         ...repository,
 201 |         syncStatus: 'ERROR',
 202 |         lastSyncedAt: new Date(),
 203 |       };
 204 |     }
 205 |   }
 206 | 
 207 |   async validateAccessToken(accessToken: string): Promise<boolean> {
 208 |     try {
 209 |       const response = await fetch('https://api.github.com/user', {
 210 |         headers: {
 211 |           Authorization: `token ${accessToken}`,
 212 |         },
 213 |       });
 214 | 
 215 |       return response.ok;
 216 |     } catch (error) {
 217 |       return false;
 218 |     }
 219 |   }
 220 | 
 221 |   async refreshAccessToken(refreshToken: string): Promise<{
 222 |     accessToken: string;
 223 |     refreshToken?: string;
 224 |     expiresAt?: Date;
 225 |   }> {
 226 |     // GitHub doesn't support refresh tokens in the standard OAuth flow
 227 |     throw new Error('GitHub does not support token refresh in the standard OAuth flow');
 228 |   }
 229 | 
 230 |   async getUserRepositories(): Promise<Repository[]> {
 231 |     // This is a wrapper around listRepositories for compatibility with the interface
 232 |     // In a real implementation, you would need to get the provider from somewhere
 233 |     throw new Error('Method requires a provider - use listRepositories instead');
 234 |   }
 235 | 
 236 |   async testConnection(): Promise<boolean> {
 237 |     if (!this.clientId || !this.clientSecret) {
 238 |       return false;
 239 |     }
 240 |     
 241 |     try {
 242 |       // Simple check to see if we can access the API
 243 |       const response = await fetch('https://api.github.com/rate_limit', {
 244 |         headers: {
 245 |           Accept: 'application/json',
 246 |         },
 247 |       });
 248 |       
 249 |       return response.ok;
 250 |     } catch (error) {
 251 |       console.error('Error testing GitHub connection:', error);
 252 |       return false;
 253 |     }
 254 |   }
 255 | }

```

`/workspaces/automai/src/lib/cache.ts`:

```ts
   1 | /**
   2 |  * A simple server-side caching utility for Next.js
   3 |  * Provides in-memory caching for data fetching operations
   4 |  */
   5 | 
   6 | type CacheEntry<T> = {
   7 |   value: T;
   8 |   expiry: number;
   9 | };
  10 | 
  11 | class ServerCache {
  12 |   private cache: Map<string, CacheEntry<any>> = new Map();
  13 |   // Default TTL 5 minutes
  14 |   private defaultTTL = 5 * 60 * 1000;
  15 | 
  16 |   constructor() {
  17 |     // Setup periodic cleanup of expired entries
  18 |     if (typeof window === 'undefined') {
  19 |       setInterval(() => this.cleanup(), 60 * 1000); // Every minute
  20 |     }
  21 |   }
  22 | 
  23 |   /**
  24 |    * Get a value from cache
  25 |    * @param key Cache key
  26 |    * @returns Cached value or undefined if not found or expired
  27 |    */
  28 |   get<T>(key: string): T | undefined {
  29 |     const entry = this.cache.get(key);
  30 | 
  31 |     if (!entry) {
  32 |       return undefined;
  33 |     }
  34 | 
  35 |     // Check if entry has expired
  36 |     if (entry.expiry < Date.now()) {
  37 |       this.cache.delete(key);
  38 |       return undefined;
  39 |     }
  40 | 
  41 |     return entry.value as T;
  42 |   }
  43 | 
  44 |   /**
  45 |    * Set a value in cache
  46 |    * @param key Cache key
  47 |    * @param value Value to cache
  48 |    * @param ttl Time to live in milliseconds (default: 5 minutes)
  49 |    */
  50 |   set<T>(key: string, value: T, ttl = this.defaultTTL): void {
  51 |     this.cache.set(key, {
  52 |       value,
  53 |       expiry: Date.now() + ttl,
  54 |     });
  55 |   }
  56 | 
  57 |   /**
  58 |    * Delete a value from cache
  59 |    * @param key Cache key
  60 |    */
  61 |   delete(key: string): void {
  62 |     this.cache.delete(key);
  63 |   }
  64 | 
  65 |   /**
  66 |    * Clear all cached values
  67 |    */
  68 |   clear(): void {
  69 |     this.cache.clear();
  70 |   }
  71 | 
  72 |   /**
  73 |    * Remove expired entries from cache
  74 |    */
  75 |   private cleanup(): void {
  76 |     const now = Date.now();
  77 |     for (const [key, entry] of this.cache.entries()) {
  78 |       if (entry.expiry < now) {
  79 |         this.cache.delete(key);
  80 |       }
  81 |     }
  82 |   }
  83 | 
  84 |   /**
  85 |    * Get a value from cache or compute it if not found
  86 |    * @param key Cache key
  87 |    * @param fn Function to compute value if not in cache
  88 |    * @param ttl Time to live in milliseconds (default: 5 minutes)
  89 |    * @returns Cached or computed value
  90 |    */
  91 |   async getOrSet<T>(key: string, fn: () => Promise<T>, ttl = this.defaultTTL): Promise<T> {
  92 |     const cachedValue = this.get<T>(key);
  93 | 
  94 |     if (cachedValue !== undefined) {
  95 |       return cachedValue;
  96 |     }
  97 | 
  98 |     const value = await fn();
  99 |     this.set(key, value, ttl);
 100 |     return value;
 101 |   }
 102 | }
 103 | 
 104 | // Export a singleton instance for use across the app
 105 | export const serverCache = new ServerCache();

```